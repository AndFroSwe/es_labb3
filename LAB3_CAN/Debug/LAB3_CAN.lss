
LAB3_CAN.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006cdc  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80008e00  80008e00  00009200  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000744  80009000  80009000  00009400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  80009744  80009744  00009b44  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         0000050c  00000008  80009748  00009c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .balign       00000004  00000514  80009c54  0000a114  2**0
                  ALLOC
  9 .bss          00000160  00000518  00000518  00000000  2**2
                  ALLOC
 10 .heap         0000e988  00000678  00000678  00000000  2**0
                  ALLOC
 11 .comment      00000030  00000000  00000000  0000a114  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 00000d00  00000000  00000000  0000a148  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubnames 0000177b  00000000  00000000  0000ae48  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_info   0001d7f8  00000000  00000000  0000c5c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 000050df  00000000  00000000  00029dbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000d612  00000000  00000000  0002ee9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00001e6c  00000000  00000000  0003c4ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00003d4b  00000000  00000000  0003e318  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    00009c5a  00000000  00000000  00042063  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macinfo 00844f41  00000000  00000000  0004bcbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 22 .debug_ranges 00000f68  00000000  00000000  00890c00  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	fe cf cc 38 	sub	pc,pc,-13256

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
  rjmp    program_start

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002004:	fe cf ec 3c 	sub	pc,pc,-5060

Disassembly of section .text:

80002008 <ClearMessages>:
80002008:	30 08       	mov	r8,0
8000200a:	b8 88       	st.b	r12[0x0],r8
 * Example:			ClearMessages(msg);
 ********************************************************************/
void ClearMessages(UINT8* Msg)
{
	Msg[0] = 0;
	Msg[1] = 0;
8000200c:	b8 98       	st.b	r12[0x1],r8
	Msg[2] = 0;
8000200e:	b8 a8       	st.b	r12[0x2],r8
	Msg[3] = 0;
80002010:	b8 b8       	st.b	r12[0x3],r8
	Msg[4] = 0;
80002012:	b8 c8       	st.b	r12[0x4],r8
	Msg[5] = 0;
80002014:	b8 d8       	st.b	r12[0x5],r8
	Msg[6] = 0;
80002016:	b8 e8       	st.b	r12[0x6],r8
	Msg[7] = 0;
80002018:	b8 f8       	st.b	r12[0x7],r8
}
8000201a:	5e fc       	retal	r12

8000201c <config_dpi204>:
 *
 * Note:            None.
 *
 * Example:         config_dpi204();
 ********************************************************************/
void config_dpi204(void){
8000201c:	eb cd 40 80 	pushm	r7,lr
80002020:	20 4d       	sub	sp,16
	.spck_delay   = 0,
	.trans_delay  = 0,
	.stay_act     = 1,
	.spi_mode     = 0,
	.modfdis      = 1
	};
80002022:	49 68       	lddpc	r8,80002078 <config_dpi204+0x5c>
80002024:	1a 97       	mov	r7,sp
80002026:	f0 ea 00 00 	ld.d	r10,r8[0]
8000202a:	fa eb 00 00 	st.d	sp[0],r10
8000202e:	f0 e8 00 08 	ld.d	r8,r8[8]
80002032:	fa e9 00 08 	st.d	sp[8],r8
	gpio_enable_module(DIP204_SPI_GPIO_MAP,
80002036:	30 4b       	mov	r11,4
80002038:	49 1c       	lddpc	r12,8000207c <config_dpi204+0x60>
8000203a:	f0 1f 00 12 	mcall	80002080 <config_dpi204+0x64>
	sizeof(DIP204_SPI_GPIO_MAP) / sizeof(DIP204_SPI_GPIO_MAP[0]));

	spi_initMaster(DIP204_SPI, &spiOptions2);
8000203e:	1a 9b       	mov	r11,sp
80002040:	fe 7c 28 00 	mov	r12,-55296
80002044:	f0 1f 00 10 	mcall	80002084 <config_dpi204+0x68>
	spi_selectionMode(DIP204_SPI, 0, 0, 0);
80002048:	30 09       	mov	r9,0
8000204a:	12 9a       	mov	r10,r9
8000204c:	12 9b       	mov	r11,r9
8000204e:	fe 7c 28 00 	mov	r12,-55296
80002052:	f0 1f 00 0e 	mcall	80002088 <config_dpi204+0x6c>
	spi_enable(DIP204_SPI);
80002056:	fe 7c 28 00 	mov	r12,-55296
8000205a:	f0 1f 00 0d 	mcall	8000208c <config_dpi204+0x70>
	spi_setupChipReg(DIP204_SPI, &spiOptions2, FOSC0);
8000205e:	e0 6a 1b 00 	mov	r10,6912
80002062:	ea 1a 00 b7 	orh	r10,0xb7
80002066:	1a 9b       	mov	r11,sp
80002068:	fe 7c 28 00 	mov	r12,-55296
8000206c:	f0 1f 00 09 	mcall	80002090 <config_dpi204+0x74>
}
80002070:	2f cd       	sub	sp,-16
80002072:	e3 cd 80 80 	ldm	sp++,r7,pc
80002076:	00 00       	add	r0,r0
80002078:	80 00       	ld.sh	r0,r0[0x0]
8000207a:	90 30       	ld.sh	r0,r8[0x6]
8000207c:	80 00       	ld.sh	r0,r0[0x0]
8000207e:	90 40       	ld.sh	r0,r8[0x8]
80002080:	80 00       	ld.sh	r0,r0[0x0]
80002082:	2f 90       	sub	r0,-7
80002084:	80 00       	ld.sh	r0,r0[0x0]
80002086:	31 ee       	mov	lr,30
80002088:	80 00       	ld.sh	r0,r0[0x0]
8000208a:	32 26       	mov	r6,34
8000208c:	80 00       	ld.sh	r0,r0[0x0]
8000208e:	33 7c       	mov	r12,55
80002090:	80 00       	ld.sh	r0,r0[0x0]
80002092:	32 c4       	mov	r4,44

80002094 <mASSERT_CS>:
 *
 * Overview:		See the documentation for spi_selectchip in spi.h
 *
 * Note:            spi.h has to be included.
 ********************************************************************/
void mASSERT_CS(unsigned char channel){
80002094:	d4 01       	pushm	lr
	spi_selectChip(SPARE_SPI,channel);
80002096:	18 9b       	mov	r11,r12
80002098:	fe 7c 24 00 	mov	r12,-56320
8000209c:	f0 1f 00 02 	mcall	800020a4 <mASSERT_CS+0x10>
}
800020a0:	d8 02       	popm	pc
800020a2:	00 00       	add	r0,r0
800020a4:	80 00       	ld.sh	r0,r0[0x0]
800020a6:	32 52       	mov	r2,37

800020a8 <config_SPI_SPARE>:
 *
 * Note:            None.
 *
 * Example: 	    config_SPI_SPARE();
 ********************************************************************/
void config_SPI_SPARE(void){
800020a8:	eb cd 40 80 	pushm	r7,lr
800020ac:	20 4d       	sub	sp,16
.spck_delay   = 0,
.trans_delay  = 0,
.stay_act     = 0,
.spi_mode     = 0,
.modfdis      = 1
};
800020ae:	49 88       	lddpc	r8,8000210c <config_SPI_SPARE+0x64>
800020b0:	1a 97       	mov	r7,sp
800020b2:	f0 ea 00 00 	ld.d	r10,r8[0]
800020b6:	fa eb 00 00 	st.d	sp[0],r10
800020ba:	f0 e8 00 08 	ld.d	r8,r8[8]
800020be:	fa e9 00 08 	st.d	sp[8],r8

gpio_enable_module(SPARE_SPI_GPIO_MAP,
800020c2:	30 4b       	mov	r11,4
800020c4:	49 3c       	lddpc	r12,80002110 <config_SPI_SPARE+0x68>
800020c6:	f0 1f 00 14 	mcall	80002114 <config_SPI_SPARE+0x6c>
sizeof(SPARE_SPI_GPIO_MAP) / sizeof(SPARE_SPI_GPIO_MAP[0]));

spi_initMaster(SPARE_SPI,&spiOptions);
800020ca:	1a 9b       	mov	r11,sp
800020cc:	fe 7c 24 00 	mov	r12,-56320
800020d0:	f0 1f 00 12 	mcall	80002118 <config_SPI_SPARE+0x70>
spi_selectionMode(SPARE_SPI, 0, 0, 0);
800020d4:	30 09       	mov	r9,0
800020d6:	12 9a       	mov	r10,r9
800020d8:	12 9b       	mov	r11,r9
800020da:	fe 7c 24 00 	mov	r12,-56320
800020de:	f0 1f 00 10 	mcall	8000211c <config_SPI_SPARE+0x74>
spi_selectChip(SPARE_SPI,0);
800020e2:	30 0b       	mov	r11,0
800020e4:	fe 7c 24 00 	mov	r12,-56320
800020e8:	f0 1f 00 0e 	mcall	80002120 <config_SPI_SPARE+0x78>
spi_setupChipReg(SPARE_SPI, &spiOptions, FOSC0);
800020ec:	e0 6a 1b 00 	mov	r10,6912
800020f0:	ea 1a 00 b7 	orh	r10,0xb7
800020f4:	1a 9b       	mov	r11,sp
800020f6:	fe 7c 24 00 	mov	r12,-56320
800020fa:	f0 1f 00 0b 	mcall	80002124 <config_SPI_SPARE+0x7c>
spi_enable(SPARE_SPI);
800020fe:	fe 7c 24 00 	mov	r12,-56320
80002102:	f0 1f 00 0a 	mcall	80002128 <config_SPI_SPARE+0x80>
}
80002106:	2f cd       	sub	sp,-16
80002108:	e3 cd 80 80 	ldm	sp++,r7,pc
8000210c:	80 00       	ld.sh	r0,r0[0x0]
8000210e:	90 20       	ld.sh	r0,r8[0x4]
80002110:	80 00       	ld.sh	r0,r0[0x0]
80002112:	90 00       	ld.sh	r0,r8[0x0]
80002114:	80 00       	ld.sh	r0,r0[0x0]
80002116:	2f 90       	sub	r0,-7
80002118:	80 00       	ld.sh	r0,r0[0x0]
8000211a:	31 ee       	mov	lr,30
8000211c:	80 00       	ld.sh	r0,r0[0x0]
8000211e:	32 26       	mov	r6,34
80002120:	80 00       	ld.sh	r0,r0[0x0]
80002122:	32 52       	mov	r2,37
80002124:	80 00       	ld.sh	r0,r0[0x0]
80002126:	32 c4       	mov	r4,44
80002128:	80 00       	ld.sh	r0,r0[0x0]
8000212a:	33 7c       	mov	r12,55

8000212c <XferSPI_send>:
 *         			one data word to it. See the documentation for spi_write in spi.h
 *
 * Note:            spi.h has to be included.
 ********************************************************************/
PRIVATE UINT8 XferSPI_send( int Channel, UINT8 dat )
{
8000212c:	d4 01       	pushm	lr
	spi_write(SPARE_SPI, dat);
8000212e:	fe 7c 24 00 	mov	r12,-56320
80002132:	f0 1f 00 02 	mcall	80002138 <XferSPI_send+0xc>
	return 0;
}
80002136:	d8 0a       	popm	pc,r12=0
80002138:	80 00       	ld.sh	r0,r0[0x0]
8000213a:	33 82       	mov	r2,56

8000213c <ReadStatus2515>:
 * Overview:		Reads status from MCP2515
 *
 * Note:            None.
 ********************************************************************/
PRIVATE UINT8 ReadStatus2515(int Channel)
{
8000213c:	d4 01       	pushm	lr
8000213e:	20 1d       	sub	sp,4
	unsigned short *spidatareadpointer_temp;
	unsigned short spidataread_temp;
	spidatareadpointer_temp=&spidataread_temp;

	spi_selectChip(SPARE_SPI,0);
80002140:	30 0b       	mov	r11,0
80002142:	fe 7c 24 00 	mov	r12,-56320
80002146:	f0 1f 00 0e 	mcall	8000217c <ReadStatus2515+0x40>

	spi_write(SPARE_SPI,CAN_RD_STATUS);
8000214a:	e0 6b 00 a0 	mov	r11,160
8000214e:	fe 7c 24 00 	mov	r12,-56320
80002152:	f0 1f 00 0c 	mcall	80002180 <ReadStatus2515+0x44>

	spi_write(SPARE_SPI,DUMMY_BYTE);
80002156:	30 0b       	mov	r11,0
80002158:	fe 7c 24 00 	mov	r12,-56320
8000215c:	f0 1f 00 09 	mcall	80002180 <ReadStatus2515+0x44>
	spi_read(SPARE_SPI,spidatareadpointer_temp);
80002160:	fa cb ff fe 	sub	r11,sp,-2
80002164:	fe 7c 24 00 	mov	r12,-56320
80002168:	f0 1f 00 07 	mcall	80002184 <ReadStatus2515+0x48>

	spi_unselectChip(SPARE_SPI,0);
8000216c:	30 0b       	mov	r11,0
8000216e:	fe 7c 24 00 	mov	r12,-56320
80002172:	f0 1f 00 06 	mcall	80002188 <ReadStatus2515+0x4c>

	return spidataread_temp;
}
80002176:	1b bc       	ld.ub	r12,sp[0x3]
80002178:	2f fd       	sub	sp,-4
8000217a:	d8 02       	popm	pc
8000217c:	80 00       	ld.sh	r0,r0[0x0]
8000217e:	32 52       	mov	r2,37
80002180:	80 00       	ld.sh	r0,r0[0x0]
80002182:	33 82       	mov	r2,56
80002184:	80 00       	ld.sh	r0,r0[0x0]
80002186:	33 a6       	mov	r6,58
80002188:	80 00       	ld.sh	r0,r0[0x0]
8000218a:	32 9e       	mov	lr,41

8000218c <CANRxReady>:
 * Note:            None.
 *
 * Example:			CANRxReady(0);
 ********************************************************************/
inline Bool CANRxReady( int Channel )
{
8000218c:	d4 01       	pushm	lr
	return (ReadStatus2515(Channel)&0x3) != 0;
8000218e:	f0 1f 00 04 	mcall	8000219c <CANRxReady+0x10>
80002192:	f9 dc c0 02 	bfextu	r12,r12,0x0,0x2
}
80002196:	5f 1c       	srne	r12
80002198:	d8 02       	popm	pc
8000219a:	00 00       	add	r0,r0
8000219c:	80 00       	ld.sh	r0,r0[0x0]
8000219e:	21 3c       	sub	r12,19

800021a0 <CANTxReady>:
 * Note:            None.
 *
 * Example:			CANTxReady(0);
 ********************************************************************/
inline Bool CANTxReady( int Channel )
{
800021a0:	d4 01       	pushm	lr
	return (ReadStatus2515(Channel)&0x04) == 0;
800021a2:	f0 1f 00 04 	mcall	800021b0 <CANTxReady+0x10>
800021a6:	ec 1c 00 04 	eorl	r12,0x4
}
800021aa:	f9 dc c0 41 	bfextu	r12,r12,0x2,0x1
800021ae:	d8 02       	popm	pc
800021b0:	80 00       	ld.sh	r0,r0[0x0]
800021b2:	21 3c       	sub	r12,19

800021b4 <mDEASSERT_CS>:
 *
 * Overview:		See the documentation for spi_unselectchip in spi.h
 *
 * Note:            spi.h has to be included.
 ********************************************************************/
void mDEASSERT_CS(unsigned char channel){
800021b4:	d4 01       	pushm	lr
	spi_unselectChip(SPARE_SPI,channel);
800021b6:	18 9b       	mov	r11,r12
800021b8:	fe 7c 24 00 	mov	r12,-56320
800021bc:	f0 1f 00 02 	mcall	800021c4 <mDEASSERT_CS+0x10>
}
800021c0:	d8 02       	popm	pc
800021c2:	00 00       	add	r0,r0
800021c4:	80 00       	ld.sh	r0,r0[0x0]
800021c6:	32 9e       	mov	lr,41

800021c8 <CAN2515ByteWrite>:
 * Note:            None.
 *
 * Example:         CANReset(0)
 ********************************************************************/
void CAN2515ByteWrite(int Channel, unsigned char addr, unsigned char value )
{
800021c8:	d4 21       	pushm	r4-r7,lr
800021ca:	18 97       	mov	r7,r12
800021cc:	16 95       	mov	r5,r11
800021ce:	14 94       	mov	r4,r10
	mASSERT_CS(Channel);
800021d0:	18 96       	mov	r6,r12
800021d2:	5c 56       	castu.b	r6
800021d4:	0c 9c       	mov	r12,r6
800021d6:	f0 1f 00 0a 	mcall	800021fc <CAN2515ByteWrite+0x34>
	XferSPI_send(Channel, CAN_WRITE);
800021da:	30 2b       	mov	r11,2
800021dc:	0e 9c       	mov	r12,r7
800021de:	f0 1f 00 09 	mcall	80002200 <CAN2515ByteWrite+0x38>
	XferSPI_send(Channel, addr);
800021e2:	0a 9b       	mov	r11,r5
800021e4:	0e 9c       	mov	r12,r7
800021e6:	f0 1f 00 07 	mcall	80002200 <CAN2515ByteWrite+0x38>
	XferSPI_send(Channel, value);
800021ea:	08 9b       	mov	r11,r4
800021ec:	0e 9c       	mov	r12,r7
800021ee:	f0 1f 00 05 	mcall	80002200 <CAN2515ByteWrite+0x38>
	mDEASSERT_CS(Channel);
800021f2:	0c 9c       	mov	r12,r6
800021f4:	f0 1f 00 04 	mcall	80002204 <CAN2515ByteWrite+0x3c>
}
800021f8:	d8 22       	popm	r4-r7,pc
800021fa:	00 00       	add	r0,r0
800021fc:	80 00       	ld.sh	r0,r0[0x0]
800021fe:	20 94       	sub	r4,9
80002200:	80 00       	ld.sh	r0,r0[0x0]
80002202:	21 2c       	sub	r12,18
80002204:	80 00       	ld.sh	r0,r0[0x0]
80002206:	21 b4       	sub	r4,27

80002208 <CAN2515SetRXB1Filters>:
 * Note:            None.
 *
 * Example:			CAN2515SetRXB1Filters(Channel, 0, &Flt[2]);
 ********************************************************************/
void CAN2515SetRXB1Filters(int Channel, UINT16 Mask1, UINT16* pFlt2_5 )
{
80002208:	eb cd 40 e0 	pushm	r5-r7,lr
8000220c:	18 97       	mov	r7,r12
8000220e:	14 95       	mov	r5,r10
	CAN2515ByteWrite(Channel, RXM1SIDH, Mask1 >> 3);
80002210:	16 96       	mov	r6,r11
80002212:	f5 db c0 68 	bfextu	r10,r11,0x3,0x8
80002216:	32 4b       	mov	r11,36
80002218:	f0 1f 00 26 	mcall	800022b0 <CAN2515SetRXB1Filters+0xa8>
	CAN2515ByteWrite(Channel, RXM1SIDL, Mask1 << 5);
8000221c:	ec 0a 15 05 	lsl	r10,r6,0x5
80002220:	e2 1a 00 e0 	andl	r10,0xe0,COH
80002224:	32 5b       	mov	r11,37
80002226:	0e 9c       	mov	r12,r7
80002228:	f0 1f 00 22 	mcall	800022b0 <CAN2515SetRXB1Filters+0xa8>

	// Set Four filters associated with RXB1

	CAN2515ByteWrite(Channel, RXF2SIDH, *pFlt2_5 >> 3);
8000222c:	8a 8a       	ld.uh	r10,r5[0x0]
8000222e:	f5 da c0 68 	bfextu	r10,r10,0x3,0x8
80002232:	30 8b       	mov	r11,8
80002234:	0e 9c       	mov	r12,r7
80002236:	f0 1f 00 1f 	mcall	800022b0 <CAN2515SetRXB1Filters+0xa8>
	CAN2515ByteWrite(Channel, RXF2SIDL, (*pFlt2_5 << 5) |0x08 );
8000223a:	0b 2a       	ld.uh	r10,r5++
8000223c:	a5 7a       	lsl	r10,0x5
8000223e:	a3 ba       	sbr	r10,0x3
80002240:	e2 1a 00 e8 	andl	r10,0xe8,COH
80002244:	30 9b       	mov	r11,9
80002246:	0e 9c       	mov	r12,r7
80002248:	f0 1f 00 1a 	mcall	800022b0 <CAN2515SetRXB1Filters+0xa8>

	pFlt2_5++;
	CAN2515ByteWrite(Channel, RXF3SIDH, *pFlt2_5 >> 3);
8000224c:	8a 8a       	ld.uh	r10,r5[0x0]
8000224e:	f5 da c0 68 	bfextu	r10,r10,0x3,0x8
80002252:	31 0b       	mov	r11,16
80002254:	0e 9c       	mov	r12,r7
80002256:	f0 1f 00 17 	mcall	800022b0 <CAN2515SetRXB1Filters+0xa8>
	CAN2515ByteWrite(Channel, RXF2SIDL, (*pFlt2_5 << 5) |0x08 );
8000225a:	0b 2a       	ld.uh	r10,r5++
8000225c:	a5 7a       	lsl	r10,0x5
8000225e:	a3 ba       	sbr	r10,0x3
80002260:	e2 1a 00 e8 	andl	r10,0xe8,COH
80002264:	30 9b       	mov	r11,9
80002266:	0e 9c       	mov	r12,r7
80002268:	f0 1f 00 12 	mcall	800022b0 <CAN2515SetRXB1Filters+0xa8>

	pFlt2_5++;
	CAN2515ByteWrite(Channel, RXF4SIDH, *pFlt2_5 >> 3);
8000226c:	8a 8a       	ld.uh	r10,r5[0x0]
8000226e:	f5 da c0 68 	bfextu	r10,r10,0x3,0x8
80002272:	31 4b       	mov	r11,20
80002274:	0e 9c       	mov	r12,r7
80002276:	f0 1f 00 0f 	mcall	800022b0 <CAN2515SetRXB1Filters+0xa8>
	CAN2515ByteWrite(Channel, RXF2SIDL, (*pFlt2_5 << 5) |0x08 );
8000227a:	0b 2a       	ld.uh	r10,r5++
8000227c:	a5 7a       	lsl	r10,0x5
8000227e:	a3 ba       	sbr	r10,0x3
80002280:	e2 1a 00 e8 	andl	r10,0xe8,COH
80002284:	30 9b       	mov	r11,9
80002286:	0e 9c       	mov	r12,r7
80002288:	f0 1f 00 0a 	mcall	800022b0 <CAN2515SetRXB1Filters+0xa8>

	pFlt2_5++;
	CAN2515ByteWrite(Channel, RXF5SIDH, *pFlt2_5 >> 3);
8000228c:	8a 8a       	ld.uh	r10,r5[0x0]
8000228e:	f5 da c0 68 	bfextu	r10,r10,0x3,0x8
80002292:	31 8b       	mov	r11,24
80002294:	0e 9c       	mov	r12,r7
80002296:	f0 1f 00 07 	mcall	800022b0 <CAN2515SetRXB1Filters+0xa8>
	CAN2515ByteWrite(Channel, RXF2SIDL, (*pFlt2_5 << 5) |0x08 );
8000229a:	8a 8a       	ld.uh	r10,r5[0x0]
8000229c:	a5 7a       	lsl	r10,0x5
8000229e:	a3 ba       	sbr	r10,0x3
800022a0:	e2 1a 00 e8 	andl	r10,0xe8,COH
800022a4:	30 9b       	mov	r11,9
800022a6:	0e 9c       	mov	r12,r7
800022a8:	f0 1f 00 02 	mcall	800022b0 <CAN2515SetRXB1Filters+0xa8>
}
800022ac:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800022b0:	80 00       	ld.sh	r0,r0[0x0]
800022b2:	21 c8       	sub	r8,28

800022b4 <CAN2515SetRXB0Filters>:
 * Note:            None.
 *
 * Example:			CAN2515SetRXB0Filters(Channel, 0, Flt);
 ********************************************************************/
void CAN2515SetRXB0Filters(int Channel, UINT16 Mask0, UINT16* pFlt0_1 )
{
800022b4:	eb cd 40 e0 	pushm	r5-r7,lr
800022b8:	18 97       	mov	r7,r12
800022ba:	14 95       	mov	r5,r10
	CAN2515ByteWrite(Channel, RXM0SIDH, Mask0 >> 3);
800022bc:	16 96       	mov	r6,r11
800022be:	f5 db c0 68 	bfextu	r10,r11,0x3,0x8
800022c2:	32 0b       	mov	r11,32
800022c4:	f0 1f 00 15 	mcall	80002318 <CAN2515SetRXB0Filters+0x64>
	CAN2515ByteWrite(Channel, RXM0SIDL, Mask0 << 5);
800022c8:	ec 0a 15 05 	lsl	r10,r6,0x5
800022cc:	e2 1a 00 e0 	andl	r10,0xe0,COH
800022d0:	32 1b       	mov	r11,33
800022d2:	0e 9c       	mov	r12,r7
800022d4:	f0 1f 00 11 	mcall	80002318 <CAN2515SetRXB0Filters+0x64>

	// Set two filters associated with RXB0

	CAN2515ByteWrite(Channel, RXF0SIDH, *pFlt0_1 >> 3);
800022d8:	8a 8a       	ld.uh	r10,r5[0x0]
800022da:	f5 da c0 68 	bfextu	r10,r10,0x3,0x8
800022de:	30 0b       	mov	r11,0
800022e0:	0e 9c       	mov	r12,r7
800022e2:	f0 1f 00 0e 	mcall	80002318 <CAN2515SetRXB0Filters+0x64>
	CAN2515ByteWrite(Channel, RXF0SIDL, *pFlt0_1 << 5);
800022e6:	0b 1a       	ld.sh	r10,r5++
800022e8:	a5 7a       	lsl	r10,0x5
800022ea:	e2 1a 00 e0 	andl	r10,0xe0,COH
800022ee:	30 1b       	mov	r11,1
800022f0:	0e 9c       	mov	r12,r7
800022f2:	f0 1f 00 0a 	mcall	80002318 <CAN2515SetRXB0Filters+0x64>


	pFlt0_1++;
	CAN2515ByteWrite(Channel, RXF1SIDH, *pFlt0_1 >> 3);
800022f6:	8a 8a       	ld.uh	r10,r5[0x0]
800022f8:	f5 da c0 68 	bfextu	r10,r10,0x3,0x8
800022fc:	30 4b       	mov	r11,4
800022fe:	0e 9c       	mov	r12,r7
80002300:	f0 1f 00 06 	mcall	80002318 <CAN2515SetRXB0Filters+0x64>
	CAN2515ByteWrite(Channel, RXF1SIDL, *pFlt0_1 << 5);
80002304:	0b 9a       	ld.ub	r10,r5[0x1]
80002306:	a5 7a       	lsl	r10,0x5
80002308:	e2 1a 00 e0 	andl	r10,0xe0,COH
8000230c:	30 5b       	mov	r11,5
8000230e:	0e 9c       	mov	r12,r7
80002310:	f0 1f 00 02 	mcall	80002318 <CAN2515SetRXB0Filters+0x64>

}
80002314:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80002318:	80 00       	ld.sh	r0,r0[0x0]
8000231a:	21 c8       	sub	r8,28

8000231c <CANReset>:
 * Overview:		Sends a software reset commmand over spi port to MCP2515 chip
 *
 * Note:            None.
 ********************************************************************/
void CANReset(int Channel)
{
8000231c:	eb cd 40 c0 	pushm	r6-r7,lr
80002320:	18 96       	mov	r6,r12
	mASSERT_CS(Channel);
80002322:	ef dc c0 08 	bfextu	r7,r12,0x0,0x8
80002326:	0e 9c       	mov	r12,r7
80002328:	f0 1f 00 06 	mcall	80002340 <CANReset+0x24>
	XferSPI_send(Channel, CAN_RESET);
8000232c:	e0 6b 00 c0 	mov	r11,192
80002330:	0c 9c       	mov	r12,r6
80002332:	f0 1f 00 05 	mcall	80002344 <CANReset+0x28>
	mDEASSERT_CS(Channel);
80002336:	0e 9c       	mov	r12,r7
80002338:	f0 1f 00 04 	mcall	80002348 <CANReset+0x2c>
}
8000233c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002340:	80 00       	ld.sh	r0,r0[0x0]
80002342:	20 94       	sub	r4,9
80002344:	80 00       	ld.sh	r0,r0[0x0]
80002346:	21 2c       	sub	r12,18
80002348:	80 00       	ld.sh	r0,r0[0x0]
8000234a:	21 b4       	sub	r4,27

8000234c <CAN2515ByteRead>:
 * Overview:		This function reads the value of a byte. It is used to read register values in e.g. the MCP2515 module
 *
 * Note:            None.
 ********************************************************************/
PRIVATE UINT8 CAN2515ByteRead(int Channel, unsigned char addr)
{
8000234c:	eb cd 40 e0 	pushm	r5-r7,lr
80002350:	20 1d       	sub	sp,4
80002352:	18 97       	mov	r7,r12
80002354:	16 95       	mov	r5,r11
unsigned char tempdata;

	mASSERT_CS(Channel);
80002356:	18 96       	mov	r6,r12
80002358:	5c 56       	castu.b	r6
8000235a:	0c 9c       	mov	r12,r6
8000235c:	f0 1f 00 13 	mcall	800023a8 <CAN2515ByteRead+0x5c>
	XferSPI_send(Channel, CAN_READ);
80002360:	30 3b       	mov	r11,3
80002362:	0e 9c       	mov	r12,r7
80002364:	f0 1f 00 12 	mcall	800023ac <CAN2515ByteRead+0x60>
	XferSPI_send(Channel, addr);
80002368:	0a 9b       	mov	r11,r5
8000236a:	0e 9c       	mov	r12,r7
8000236c:	f0 1f 00 10 	mcall	800023ac <CAN2515ByteRead+0x60>
{
	unsigned short *spidatareadpointer_temp;
	unsigned short spidataread_temp;
	spidatareadpointer_temp=&spidataread_temp;

	spi_write(SPARE_SPI, DUMMY_BYTE);
80002370:	30 0b       	mov	r11,0
80002372:	fe 7c 24 00 	mov	r12,-56320
80002376:	f0 1f 00 0f 	mcall	800023b0 <CAN2515ByteRead+0x64>
	while(spi_readRegisterFullCheck(SPARE_SPI)==0){
8000237a:	fe 77 24 00 	mov	r7,-56320
8000237e:	c0 28       	rjmp	80002382 <CAN2515ByteRead+0x36>
		asm("NOP;");
80002380:	d7 03       	nop
	unsigned short *spidatareadpointer_temp;
	unsigned short spidataread_temp;
	spidatareadpointer_temp=&spidataread_temp;

	spi_write(SPARE_SPI, DUMMY_BYTE);
	while(spi_readRegisterFullCheck(SPARE_SPI)==0){
80002382:	0e 9c       	mov	r12,r7
80002384:	f0 1f 00 0c 	mcall	800023b4 <CAN2515ByteRead+0x68>
80002388:	cf c0       	breq	80002380 <CAN2515ByteRead+0x34>
		asm("NOP;");
	}
	spi_read(SPARE_SPI,spidatareadpointer_temp);
8000238a:	fa cb ff fe 	sub	r11,sp,-2
8000238e:	fe 7c 24 00 	mov	r12,-56320
80002392:	f0 1f 00 0a 	mcall	800023b8 <CAN2515ByteRead+0x6c>
	return spidataread_temp;
80002396:	1b b7       	ld.ub	r7,sp[0x3]

	mASSERT_CS(Channel);
	XferSPI_send(Channel, CAN_READ);
	XferSPI_send(Channel, addr);
	tempdata = XferSPI_receive(Channel,0);
	mDEASSERT_CS(Channel);
80002398:	0c 9c       	mov	r12,r6
8000239a:	f0 1f 00 09 	mcall	800023bc <CAN2515ByteRead+0x70>

	return tempdata;
}
8000239e:	0e 9c       	mov	r12,r7
800023a0:	2f fd       	sub	sp,-4
800023a2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800023a6:	00 00       	add	r0,r0
800023a8:	80 00       	ld.sh	r0,r0[0x0]
800023aa:	20 94       	sub	r4,9
800023ac:	80 00       	ld.sh	r0,r0[0x0]
800023ae:	21 2c       	sub	r12,18
800023b0:	80 00       	ld.sh	r0,r0[0x0]
800023b2:	33 82       	mov	r2,56
800023b4:	80 00       	ld.sh	r0,r0[0x0]
800023b6:	33 9e       	mov	lr,57
800023b8:	80 00       	ld.sh	r0,r0[0x0]
800023ba:	33 a6       	mov	r6,58
800023bc:	80 00       	ld.sh	r0,r0[0x0]
800023be:	21 b4       	sub	r4,27

800023c0 <CANEnable>:
 * Overview:		Sets the CAN bus speed and turns on the CAN controller.
 *
 * Note:            None.
 ********************************************************************/
void CANEnable( int Channel, int BusSpeed )
{
800023c0:	eb cd 40 80 	pushm	r7,lr
800023c4:	18 97       	mov	r7,r12
	// CNF1 -> 0x03 = 125kB. 0x01 = 250 kB, 0x00 = 500kB

	if (BusSpeed==10) // For 125 kB
800023c6:	58 ab       	cp.w	r11,10
800023c8:	c1 11       	brne	800023ea <CANEnable+0x2a>
	{
		CAN2515ByteWrite(Channel, CNF1,0x03); //used to be: BusSpeed
800023ca:	30 3a       	mov	r10,3
800023cc:	32 ab       	mov	r11,42
800023ce:	f0 1f 00 30 	mcall	8000248c <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF2,0xac); //used to be: BusSpeed
800023d2:	e0 6a 00 ac 	mov	r10,172
800023d6:	32 9b       	mov	r11,41
800023d8:	0e 9c       	mov	r12,r7
800023da:	f0 1f 00 2d 	mcall	8000248c <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF3,0x07); //used to be: BusSpeed
800023de:	30 7a       	mov	r10,7
800023e0:	32 8b       	mov	r11,40
800023e2:	0e 9c       	mov	r12,r7
800023e4:	f0 1f 00 2a 	mcall	8000248c <CANEnable+0xcc>
800023e8:	c3 68       	rjmp	80002454 <CANEnable+0x94>
	}
	else if (BusSpeed==7) // For 250 kB
800023ea:	58 7b       	cp.w	r11,7
800023ec:	c1 11       	brne	8000240e <CANEnable+0x4e>
	{
		CAN2515ByteWrite(Channel, CNF1,0x01); //used to be: BusSpeed
800023ee:	30 1a       	mov	r10,1
800023f0:	32 ab       	mov	r11,42
800023f2:	f0 1f 00 27 	mcall	8000248c <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF2,0xac); //used to be: BusSpeed
800023f6:	e0 6a 00 ac 	mov	r10,172
800023fa:	32 9b       	mov	r11,41
800023fc:	0e 9c       	mov	r12,r7
800023fe:	f0 1f 00 24 	mcall	8000248c <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF3,0x07); //used to be: BusSpeed
80002402:	30 7a       	mov	r10,7
80002404:	32 8b       	mov	r11,40
80002406:	0e 9c       	mov	r12,r7
80002408:	f0 1f 00 21 	mcall	8000248c <CANEnable+0xcc>
8000240c:	c2 48       	rjmp	80002454 <CANEnable+0x94>
	}
	else if(BusSpeed==5) // For 500 kB
8000240e:	58 5b       	cp.w	r11,5
80002410:	c1 11       	brne	80002432 <CANEnable+0x72>
	{
		CAN2515ByteWrite(Channel, CNF1,0x00); //used to be: BusSpeed
80002412:	30 0a       	mov	r10,0
80002414:	32 ab       	mov	r11,42
80002416:	f0 1f 00 1e 	mcall	8000248c <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF2,0xac); //used to be: BusSpeed
8000241a:	e0 6a 00 ac 	mov	r10,172
8000241e:	32 9b       	mov	r11,41
80002420:	0e 9c       	mov	r12,r7
80002422:	f0 1f 00 1b 	mcall	8000248c <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF3,0x07); //used to be: BusSpeed
80002426:	30 7a       	mov	r10,7
80002428:	32 8b       	mov	r11,40
8000242a:	0e 9c       	mov	r12,r7
8000242c:	f0 1f 00 18 	mcall	8000248c <CANEnable+0xcc>
80002430:	c1 28       	rjmp	80002454 <CANEnable+0x94>

	}
	else if (BusSpeed==1) // For 1000 kB
80002432:	58 1b       	cp.w	r11,1
80002434:	c1 01       	brne	80002454 <CANEnable+0x94>
	{
		CAN2515ByteWrite(Channel, CNF1,0x00); //used to be: BusSpeed
80002436:	30 0a       	mov	r10,0
80002438:	32 ab       	mov	r11,42
8000243a:	f0 1f 00 15 	mcall	8000248c <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF2,0x91); //used to be: BusSpeed
8000243e:	e0 6a 00 91 	mov	r10,145
80002442:	32 9b       	mov	r11,41
80002444:	0e 9c       	mov	r12,r7
80002446:	f0 1f 00 12 	mcall	8000248c <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF3,0x03); //used to be: BusSpeed
8000244a:	30 3a       	mov	r10,3
8000244c:	32 8b       	mov	r11,40
8000244e:	0e 9c       	mov	r12,r7
80002450:	f0 1f 00 0f 	mcall	8000248c <CANEnable+0xcc>
	}

	//Interrupt on RXB0 - CANINTE
	CAN2515ByteWrite(Channel, CANINTE,0x03); // Interrupts are on
80002454:	30 3a       	mov	r10,3
80002456:	32 bb       	mov	r11,43
80002458:	0e 9c       	mov	r12,r7
8000245a:	f0 1f 00 0d 	mcall	8000248c <CANEnable+0xcc>

	//Set NORMAL mode
	CAN2515ByteWrite(Channel, CANCTRL,REQOP_NORMAL  | CLKOUT_ENABLED);
8000245e:	30 4a       	mov	r10,4
80002460:	30 fb       	mov	r11,15
80002462:	0e 9c       	mov	r12,r7
80002464:	f0 1f 00 0a 	mcall	8000248c <CANEnable+0xcc>

	CAN2515ByteRead(Channel, CANSTAT); //dummy read to give 2515 time to switch to normal mode
80002468:	30 eb       	mov	r11,14
8000246a:	0e 9c       	mov	r12,r7
8000246c:	f0 1f 00 09 	mcall	80002490 <CANEnable+0xd0>

	if( (CAN2515ByteRead(Channel, CANSTAT) & 0xE0) != OPMODE_NORMAL )
80002470:	30 eb       	mov	r11,14
80002472:	0e 9c       	mov	r12,r7
80002474:	f0 1f 00 07 	mcall	80002490 <CANEnable+0xd0>
80002478:	e2 1c 00 e0 	andl	r12,0xe0,COH
8000247c:	c0 60       	breq	80002488 <CANEnable+0xc8>
		CAN2515ByteWrite(Channel, CANCTRL,REQOP_NORMAL | CLKOUT_ENABLED);
8000247e:	30 4a       	mov	r10,4
80002480:	30 fb       	mov	r11,15
80002482:	0e 9c       	mov	r12,r7
80002484:	f0 1f 00 02 	mcall	8000248c <CANEnable+0xcc>
80002488:	e3 cd 80 80 	ldm	sp++,r7,pc
8000248c:	80 00       	ld.sh	r0,r0[0x0]
8000248e:	21 c8       	sub	r8,28
80002490:	80 00       	ld.sh	r0,r0[0x0]
80002492:	23 4c       	sub	r12,52

80002494 <InitializeCAN>:
 * Note:            None.
 *
 * Example:         InitializeCAN(0,CAN_125kbps)
 ********************************************************************/
void InitializeCAN( int Channel , int BusSpeed, UINT16 Mask, UINT16 Flt[6])
{
80002494:	d4 21       	pushm	r4-r7,lr
80002496:	18 97       	mov	r7,r12
80002498:	16 94       	mov	r4,r11
8000249a:	14 96       	mov	r6,r10
8000249c:	12 95       	mov	r5,r9
	CANReset(Channel);
8000249e:	f0 1f 00 0a 	mcall	800024c4 <InitializeCAN+0x30>
	CAN2515SetRXB0Filters(Channel, Mask, Flt);
800024a2:	5c 76       	castu.h	r6
800024a4:	0a 9a       	mov	r10,r5
800024a6:	0c 9b       	mov	r11,r6
800024a8:	0e 9c       	mov	r12,r7
800024aa:	f0 1f 00 08 	mcall	800024c8 <InitializeCAN+0x34>
	CAN2515SetRXB1Filters(Channel, Mask, &Flt[2]);
800024ae:	ea ca ff fc 	sub	r10,r5,-4
800024b2:	0c 9b       	mov	r11,r6
800024b4:	0e 9c       	mov	r12,r7
800024b6:	f0 1f 00 06 	mcall	800024cc <InitializeCAN+0x38>
	CANEnable(Channel, BusSpeed);
800024ba:	08 9b       	mov	r11,r4
800024bc:	0e 9c       	mov	r12,r7
800024be:	f0 1f 00 05 	mcall	800024d0 <InitializeCAN+0x3c>
}
800024c2:	d8 22       	popm	r4-r7,pc
800024c4:	80 00       	ld.sh	r0,r0[0x0]
800024c6:	23 1c       	sub	r12,49
800024c8:	80 00       	ld.sh	r0,r0[0x0]
800024ca:	22 b4       	sub	r4,43
800024cc:	80 00       	ld.sh	r0,r0[0x0]
800024ce:	22 08       	sub	r8,32
800024d0:	80 00       	ld.sh	r0,r0[0x0]
800024d2:	23 c0       	sub	r0,60

800024d4 <Evk1100PrintDisp>:
 * Note:            None.
 *
 * Example:			Evk1100PrintDisp(&Ident, msg, &mSize );
 ********************************************************************/
void Evk1100PrintDisp(UINT32* pIdentifier, UINT8* Msg, UINT8* pMsgSize )
{
800024d4:	d4 21       	pushm	r4-r7,lr
800024d6:	18 95       	mov	r5,r12
800024d8:	16 96       	mov	r6,r11
800024da:	14 94       	mov	r4,r10
    dip204_set_cursor_position(1,1);
800024dc:	30 1b       	mov	r11,1
800024de:	16 9c       	mov	r12,r11
800024e0:	f0 1f 00 35 	mcall	800025b4 <Evk1100PrintDisp+0xe0>
    dip204_printf_string("%x", Msg[0]);
800024e4:	4b 57       	lddpc	r7,800025b8 <Evk1100PrintDisp+0xe4>
800024e6:	0d 88       	ld.ub	r8,r6[0x0]
800024e8:	1a d8       	st.w	--sp,r8
800024ea:	0e 9c       	mov	r12,r7
800024ec:	f0 1f 00 34 	mcall	800025bc <Evk1100PrintDisp+0xe8>
    dip204_set_cursor_position(6,1);
800024f0:	30 1b       	mov	r11,1
800024f2:	30 6c       	mov	r12,6
800024f4:	f0 1f 00 30 	mcall	800025b4 <Evk1100PrintDisp+0xe0>
    dip204_printf_string("%x", Msg[1]);
800024f8:	0d 98       	ld.ub	r8,r6[0x1]
800024fa:	1a d8       	st.w	--sp,r8
800024fc:	0e 9c       	mov	r12,r7
800024fe:	f0 1f 00 30 	mcall	800025bc <Evk1100PrintDisp+0xe8>
    dip204_set_cursor_position(11,1);
80002502:	30 1b       	mov	r11,1
80002504:	30 bc       	mov	r12,11
80002506:	f0 1f 00 2c 	mcall	800025b4 <Evk1100PrintDisp+0xe0>
    dip204_printf_string("%x", Msg[2]);
8000250a:	0d a8       	ld.ub	r8,r6[0x2]
8000250c:	1a d8       	st.w	--sp,r8
8000250e:	0e 9c       	mov	r12,r7
80002510:	f0 1f 00 2b 	mcall	800025bc <Evk1100PrintDisp+0xe8>
    dip204_set_cursor_position(16,1);
80002514:	30 1b       	mov	r11,1
80002516:	31 0c       	mov	r12,16
80002518:	f0 1f 00 27 	mcall	800025b4 <Evk1100PrintDisp+0xe0>
    dip204_printf_string("%x", Msg[3]);
8000251c:	0d b8       	ld.ub	r8,r6[0x3]
8000251e:	1a d8       	st.w	--sp,r8
80002520:	0e 9c       	mov	r12,r7
80002522:	f0 1f 00 27 	mcall	800025bc <Evk1100PrintDisp+0xe8>
    dip204_set_cursor_position(1,2);
80002526:	30 2b       	mov	r11,2
80002528:	30 1c       	mov	r12,1
8000252a:	f0 1f 00 23 	mcall	800025b4 <Evk1100PrintDisp+0xe0>
    dip204_printf_string("%x", Msg[4]);
8000252e:	0d c8       	ld.ub	r8,r6[0x4]
80002530:	1a d8       	st.w	--sp,r8
80002532:	0e 9c       	mov	r12,r7
80002534:	f0 1f 00 22 	mcall	800025bc <Evk1100PrintDisp+0xe8>
    dip204_set_cursor_position(6,2);
80002538:	30 2b       	mov	r11,2
8000253a:	30 6c       	mov	r12,6
8000253c:	f0 1f 00 1e 	mcall	800025b4 <Evk1100PrintDisp+0xe0>
    dip204_printf_string("%x", Msg[5]);
80002540:	0d d8       	ld.ub	r8,r6[0x5]
80002542:	1a d8       	st.w	--sp,r8
80002544:	0e 9c       	mov	r12,r7
80002546:	f0 1f 00 1e 	mcall	800025bc <Evk1100PrintDisp+0xe8>
    dip204_set_cursor_position(11,2);
8000254a:	30 2b       	mov	r11,2
8000254c:	30 bc       	mov	r12,11
8000254e:	f0 1f 00 1a 	mcall	800025b4 <Evk1100PrintDisp+0xe0>
    dip204_printf_string("%x", Msg[6]);
80002552:	0d e8       	ld.ub	r8,r6[0x6]
80002554:	1a d8       	st.w	--sp,r8
80002556:	0e 9c       	mov	r12,r7
80002558:	f0 1f 00 19 	mcall	800025bc <Evk1100PrintDisp+0xe8>
    dip204_set_cursor_position(16,2);
8000255c:	30 2b       	mov	r11,2
8000255e:	31 0c       	mov	r12,16
80002560:	f0 1f 00 15 	mcall	800025b4 <Evk1100PrintDisp+0xe0>
    dip204_printf_string("%x", Msg[7]);
80002564:	0d f8       	ld.ub	r8,r6[0x7]
80002566:	1a d8       	st.w	--sp,r8
80002568:	0e 9c       	mov	r12,r7
8000256a:	f0 1f 00 15 	mcall	800025bc <Evk1100PrintDisp+0xe8>
    dip204_set_cursor_position(1,3);
8000256e:	2f 8d       	sub	sp,-32
80002570:	30 3b       	mov	r11,3
80002572:	30 1c       	mov	r12,1
80002574:	f0 1f 00 10 	mcall	800025b4 <Evk1100PrintDisp+0xe0>
    dip204_printf_string("Id: ");
80002578:	49 2c       	lddpc	r12,800025c0 <Evk1100PrintDisp+0xec>
8000257a:	f0 1f 00 11 	mcall	800025bc <Evk1100PrintDisp+0xe8>
    dip204_set_cursor_position(4,3);
8000257e:	30 3b       	mov	r11,3
80002580:	30 4c       	mov	r12,4
80002582:	f0 1f 00 0d 	mcall	800025b4 <Evk1100PrintDisp+0xe0>
    dip204_printf_string("%x", *pIdentifier);
80002586:	6a 08       	ld.w	r8,r5[0x0]
80002588:	1a d8       	st.w	--sp,r8
8000258a:	0e 9c       	mov	r12,r7
8000258c:	f0 1f 00 0c 	mcall	800025bc <Evk1100PrintDisp+0xe8>
    dip204_set_cursor_position(13,3);
80002590:	30 3b       	mov	r11,3
80002592:	30 dc       	mov	r12,13
80002594:	f0 1f 00 08 	mcall	800025b4 <Evk1100PrintDisp+0xe0>
    dip204_printf_string("DLC:");
80002598:	48 bc       	lddpc	r12,800025c4 <Evk1100PrintDisp+0xf0>
8000259a:	f0 1f 00 09 	mcall	800025bc <Evk1100PrintDisp+0xe8>
    dip204_set_cursor_position(17,3);
8000259e:	30 3b       	mov	r11,3
800025a0:	31 1c       	mov	r12,17
800025a2:	f0 1f 00 05 	mcall	800025b4 <Evk1100PrintDisp+0xe0>
    dip204_printf_string("%x", *pMsgSize);
800025a6:	09 88       	ld.ub	r8,r4[0x0]
800025a8:	1a d8       	st.w	--sp,r8
800025aa:	0e 9c       	mov	r12,r7
800025ac:	f0 1f 00 04 	mcall	800025bc <Evk1100PrintDisp+0xe8>
800025b0:	2f ed       	sub	sp,-8
}
800025b2:	d8 22       	popm	r4-r7,pc
800025b4:	80 00       	ld.sh	r0,r0[0x0]
800025b6:	2c 2c       	sub	r12,-62
800025b8:	80 00       	ld.sh	r0,r0[0x0]
800025ba:	90 60       	ld.sh	r0,r8[0xc]
800025bc:	80 00       	ld.sh	r0,r0[0x0]
800025be:	2b 94       	sub	r4,-71
800025c0:	80 00       	ld.sh	r0,r0[0x0]
800025c2:	90 64       	ld.sh	r4,r8[0xc]
800025c4:	80 00       	ld.sh	r0,r0[0x0]
800025c6:	90 6c       	ld.sh	r12,r8[0xc]

800025c8 <CANSendMsg>:
					// Extended id
                    CANSendMsg( 0, 0x8ff, msg, 8, 0 );(no remote frame)
				    CANSendMsg( 0, 0x8ff, msg, 8, R );(remote frame)
 ********************************************************************/
Bool CANSendMsg( int Channel, UINT32 IdentifierS, UINT8* MsgS, UINT8 MsgSizeS, int r )
{
800025c8:	eb cd 40 fe 	pushm	r1-r7,lr
800025cc:	18 96       	mov	r6,r12
800025ce:	16 93       	mov	r3,r11
800025d0:	14 94       	mov	r4,r10
800025d2:	12 92       	mov	r2,r9
800025d4:	10 91       	mov	r1,r8
800025d6:	30 07       	mov	r7,0
	int WaitCntr = 0;

	// wait for TXB0 to get ready.  If not ready within XMIT_TIMEOUT ms,then return false
	while( CAN2515ByteRead( Channel, TXB0CTRL ) & 0x08 ) //TXREQ == 1
800025d8:	33 05       	mov	r5,48
800025da:	c1 78       	rjmp	80002608 <CANSendMsg+0x40>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800025dc:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800025e0:	f0 ca d1 20 	sub	r10,r8,-12000
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800025e4:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800025e8:	14 38       	cp.w	r8,r10
800025ea:	e0 88 00 08 	brls	800025fa <CANSendMsg+0x32>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800025ee:	12 38       	cp.w	r8,r9
800025f0:	fe 98 ff fa 	brls	800025e4 <CANSendMsg+0x1c>
800025f4:	12 3a       	cp.w	r10,r9
800025f6:	c7 63       	brcs	800026e2 <CANSendMsg+0x11a>
800025f8:	cf 6b       	rjmp	800025e4 <CANSendMsg+0x1c>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800025fa:	12 38       	cp.w	r8,r9
800025fc:	e0 8b 00 73 	brhi	800026e2 <CANSendMsg+0x11a>
80002600:	12 3a       	cp.w	r10,r9
80002602:	c7 03       	brcs	800026e2 <CANSendMsg+0x11a>
80002604:	cf 0b       	rjmp	800025e4 <CANSendMsg+0x1c>
	{
		delay_ms( 1 );
		if( WaitCntr++ >= XMIT_TIMEOUT )
80002606:	2f f7       	sub	r7,-1
Bool CANSendMsg( int Channel, UINT32 IdentifierS, UINT8* MsgS, UINT8 MsgSizeS, int r )
{
	int WaitCntr = 0;

	// wait for TXB0 to get ready.  If not ready within XMIT_TIMEOUT ms,then return false
	while( CAN2515ByteRead( Channel, TXB0CTRL ) & 0x08 ) //TXREQ == 1
80002608:	0a 9b       	mov	r11,r5
8000260a:	0c 9c       	mov	r12,r6
8000260c:	f0 1f 00 38 	mcall	800026ec <CANSendMsg+0x124>
80002610:	e2 1c 00 08 	andl	r12,0x8,COH
80002614:	ce 41       	brne	800025dc <CANSendMsg+0x14>
	{
		delay_ms( 1 );
		if( WaitCntr++ >= XMIT_TIMEOUT )
			return FALSE;
	}
	if ((IdentifierS>>11)==0) // Standard id
80002616:	e6 08 16 0b 	lsr	r8,r3,0xb
8000261a:	c1 01       	brne	8000263a <CANSendMsg+0x72>
	{
		CAN2515ByteWrite(Channel, TXB0SIDH, (IdentifierS >> 3) & 0xff );    //Set TXB0 SIDH
8000261c:	f5 d3 c0 68 	bfextu	r10,r3,0x3,0x8
80002620:	33 1b       	mov	r11,49
80002622:	0c 9c       	mov	r12,r6
80002624:	f0 1f 00 33 	mcall	800026f0 <CANSendMsg+0x128>
		CAN2515ByteWrite(Channel, TXB0SIDL,((IdentifierS << 5) & 0xe0));    //Set TXB0 SIDL
80002628:	e6 0a 15 05 	lsl	r10,r3,0x5
8000262c:	e2 1a 00 e0 	andl	r10,0xe0,COH
80002630:	33 2b       	mov	r11,50
80002632:	0c 9c       	mov	r12,r6
80002634:	f0 1f 00 2f 	mcall	800026f0 <CANSendMsg+0x128>
80002638:	c2 18       	rjmp	8000267a <CANSendMsg+0xb2>
	}
	else // Extended id
	{
		CAN2515ByteWrite(Channel, TXB0SIDH, (IdentifierS >> 21) & 0xff );    //Set TXB0 SIDH
8000263a:	f5 d3 c2 a8 	bfextu	r10,r3,0x15,0x8
8000263e:	33 1b       	mov	r11,49
80002640:	0c 9c       	mov	r12,r6
80002642:	f0 1f 00 2c 	mcall	800026f0 <CANSendMsg+0x128>
		CAN2515ByteWrite(Channel, TXB0SIDL,(((IdentifierS >> 13)& 0xe0) | ((IdentifierS>>16) & 0x03) )| 0x08 ); //Set TXB0 SIDL
80002646:	e6 08 16 0d 	lsr	r8,r3,0xd
8000264a:	f5 d3 c2 02 	bfextu	r10,r3,0x10,0x2
8000264e:	e2 18 00 e0 	andl	r8,0xe0,COH
80002652:	10 4a       	or	r10,r8
80002654:	a3 ba       	sbr	r10,0x3
80002656:	e2 1a 00 eb 	andl	r10,0xeb,COH
8000265a:	33 2b       	mov	r11,50
8000265c:	0c 9c       	mov	r12,r6
8000265e:	f0 1f 00 25 	mcall	800026f0 <CANSendMsg+0x128>
		CAN2515ByteWrite(Channel, TXB0EID8, (IdentifierS>>8) & 0xff);
80002662:	f5 d3 c1 08 	bfextu	r10,r3,0x8,0x8
80002666:	33 3b       	mov	r11,51
80002668:	0c 9c       	mov	r12,r6
8000266a:	f0 1f 00 22 	mcall	800026f0 <CANSendMsg+0x128>
		CAN2515ByteWrite(Channel, TXB0EID0, (IdentifierS & 0xff));
8000266e:	f5 d3 c0 08 	bfextu	r10,r3,0x0,0x8
80002672:	33 4b       	mov	r11,52
80002674:	0c 9c       	mov	r12,r6
80002676:	f0 1f 00 1f 	mcall	800026f0 <CANSendMsg+0x128>
8000267a:	30 85       	mov	r5,8
8000267c:	ea 02 18 00 	cp.b	r2,r5
80002680:	e4 05 17 80 	movls	r5,r2
80002684:	f9 b5 0b 08 	movhi	r5,8
	}

	if( MsgSizeS > 8 )
		MsgSizeS = 8;

	if( r==82) //Remote frame
80002688:	e0 41 00 52 	cp.w	r1,82
8000268c:	c1 01       	brne	800026ac <CANSendMsg+0xe4>
		{
			CAN2515ByteWrite(Channel, TXB0DLC, (MsgSizeS |=0x40));  //Set DLC
8000268e:	a7 a5       	sbr	r5,0x6
80002690:	5c 55       	castu.b	r5
80002692:	0a 9a       	mov	r10,r5
80002694:	33 5b       	mov	r11,53
80002696:	0c 9c       	mov	r12,r6
80002698:	f0 1f 00 16 	mcall	800026f0 <CANSendMsg+0x128>
			dip204_set_cursor_position(17,4);
8000269c:	30 4b       	mov	r11,4
8000269e:	31 1c       	mov	r12,17
800026a0:	f0 1f 00 15 	mcall	800026f4 <CANSendMsg+0x12c>
			dip204_printf_string("Re F");
800026a4:	49 5c       	lddpc	r12,800026f8 <CANSendMsg+0x130>
800026a6:	f0 1f 00 16 	mcall	800026fc <CANSendMsg+0x134>
800026aa:	c0 68       	rjmp	800026b6 <CANSendMsg+0xee>
		}
	else // No remote frame
		{
		CAN2515ByteWrite(Channel, TXB0DLC, MsgSizeS);  //Set DLC
800026ac:	0a 9a       	mov	r10,r5
800026ae:	33 5b       	mov	r11,53
800026b0:	0c 9c       	mov	r12,r6
800026b2:	f0 1f 00 10 	mcall	800026f0 <CANSendMsg+0x128>
		}

	int temp;
	for( temp = 0; temp < MsgSizeS; temp++ )
800026b6:	58 05       	cp.w	r5,0
800026b8:	e0 8a 00 0e 	brle	800026d4 <CANSendMsg+0x10c>
800026bc:	30 07       	mov	r7,0
	  CAN2515ByteWrite( Channel, TXB0D0+temp, MsgS[temp] );
800026be:	0e 9b       	mov	r11,r7
800026c0:	2c ab       	sub	r11,-54
800026c2:	e8 07 07 0a 	ld.ub	r10,r4[r7]
800026c6:	5c 5b       	castu.b	r11
800026c8:	0c 9c       	mov	r12,r6
800026ca:	f0 1f 00 0a 	mcall	800026f0 <CANSendMsg+0x128>
		{
		CAN2515ByteWrite(Channel, TXB0DLC, MsgSizeS);  //Set DLC
		}

	int temp;
	for( temp = 0; temp < MsgSizeS; temp++ )
800026ce:	2f f7       	sub	r7,-1
800026d0:	0a 37       	cp.w	r7,r5
800026d2:	cf 65       	brlt	800026be <CANSendMsg+0xf6>
	  CAN2515ByteWrite( Channel, TXB0D0+temp, MsgS[temp] );

	CAN2515ByteWrite( Channel, TXB0CTRL, 0x08 ); //Start Transmission.
800026d4:	30 8a       	mov	r10,8
800026d6:	33 0b       	mov	r11,48
800026d8:	0c 9c       	mov	r12,r6
800026da:	f0 1f 00 06 	mcall	800026f0 <CANSendMsg+0x128>
800026de:	e3 cf 90 fe 	ldm	sp++,r1-r7,pc,r12=1

	// wait for TXB0 to get ready.  If not ready within XMIT_TIMEOUT ms,then return false
	while( CAN2515ByteRead( Channel, TXB0CTRL ) & 0x08 ) //TXREQ == 1
	{
		delay_ms( 1 );
		if( WaitCntr++ >= XMIT_TIMEOUT )
800026e2:	e0 47 00 64 	cp.w	r7,100
800026e6:	c9 01       	brne	80002606 <CANSendMsg+0x3e>
800026e8:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
800026ec:	80 00       	ld.sh	r0,r0[0x0]
800026ee:	23 4c       	sub	r12,52
800026f0:	80 00       	ld.sh	r0,r0[0x0]
800026f2:	21 c8       	sub	r8,28
800026f4:	80 00       	ld.sh	r0,r0[0x0]
800026f6:	2c 2c       	sub	r12,-62
800026f8:	80 00       	ld.sh	r0,r0[0x0]
800026fa:	90 74       	ld.sh	r4,r8[0xe]
800026fc:	80 00       	ld.sh	r0,r0[0x0]
800026fe:	2b 94       	sub	r4,-71

80002700 <CANGetMsg>:
 * Note:            None.
 *
 * Example:         CANGetMsg(0, &Ident, msg, &mSize );
 ********************************************************************/
Bool CANGetMsg( int Channel, UINT32* pIdentifier, UINT8* Msg, UINT8* pMsgSize )
{
80002700:	d4 31       	pushm	r0-r7,lr
80002702:	18 95       	mov	r5,r12
80002704:	16 92       	mov	r2,r11
80002706:	14 93       	mov	r3,r10
80002708:	12 94       	mov	r4,r9
        int temp;
        UINT8 loc, S1, S2, S3, S4;

        temp = ReadStatus2515(Channel);
8000270a:	f0 1f 00 5c 	mcall	80002878 <CANGetMsg+0x178>

        if( (temp & 3) == 0 )
8000270e:	f9 dc c0 02 	bfextu	r12,r12,0x0,0x2
80002712:	e0 80 00 b1 	breq	80002874 <CANGetMsg+0x174>
            return FALSE;
        temp&=0x03;
        if(temp==1){
80002716:	58 1c       	cp.w	r12,1
80002718:	c0 31       	brne	8000271e <CANGetMsg+0x1e>
8000271a:	36 16       	mov	r6,97
8000271c:	c0 58       	rjmp	80002726 <CANGetMsg+0x26>
            loc=0x61;
        }
        else if (temp==2){
8000271e:	58 2c       	cp.w	r12,2
80002720:	e0 81 00 aa 	brne	80002874 <CANGetMsg+0x174>
80002724:	37 16       	mov	r6,113
        }
        else{
            return FALSE;
        }

        S1=CAN2515ByteRead(Channel, loc);
80002726:	0c 9b       	mov	r11,r6
80002728:	0a 9c       	mov	r12,r5
8000272a:	f0 1f 00 55 	mcall	8000287c <CANGetMsg+0x17c>
8000272e:	18 91       	mov	r1,r12
        S2=CAN2515ByteRead(Channel, loc+1);
80002730:	ec cb ff ff 	sub	r11,r6,-1
80002734:	5c 5b       	castu.b	r11
80002736:	0a 9c       	mov	r12,r5
80002738:	f0 1f 00 51 	mcall	8000287c <CANGetMsg+0x17c>
8000273c:	18 97       	mov	r7,r12
        S3=CAN2515ByteRead(Channel, loc+2);
8000273e:	ec cb ff fe 	sub	r11,r6,-2
80002742:	5c 5b       	castu.b	r11
80002744:	0a 9c       	mov	r12,r5
80002746:	f0 1f 00 4e 	mcall	8000287c <CANGetMsg+0x17c>
8000274a:	18 90       	mov	r0,r12
        S4=CAN2515ByteRead(Channel, loc+3);
8000274c:	ec cb ff fd 	sub	r11,r6,-3
80002750:	5c 5b       	castu.b	r11
80002752:	0a 9c       	mov	r12,r5
80002754:	f0 1f 00 4a 	mcall	8000287c <CANGetMsg+0x17c>

        if (((S2>>3)&0x01)==0) //format the 11 bit identifier
80002758:	f1 d7 c0 68 	bfextu	r8,r7,0x3,0x8
8000275c:	f3 d8 c0 01 	bfextu	r9,r8,0x0,0x1
80002760:	c1 41       	brne	80002788 <CANGetMsg+0x88>
        {
            *pIdentifier = S1<<3 | S2>>5;
80002762:	ef d7 c0 a8 	bfextu	r7,r7,0x5,0x8
80002766:	ef e1 10 31 	or	r1,r7,r1<<0x3
8000276a:	85 01       	st.w	r2[0x0],r1
            LED_On(LED0);
8000276c:	30 1c       	mov	r12,1
8000276e:	f0 1f 00 45 	mcall	80002880 <CANGetMsg+0x180>
            LED_Off(LED1);
80002772:	30 2c       	mov	r12,2
80002774:	f0 1f 00 44 	mcall	80002884 <CANGetMsg+0x184>

             dip204_set_cursor_position(1,4);
80002778:	30 4b       	mov	r11,4
8000277a:	30 1c       	mov	r12,1
8000277c:	f0 1f 00 43 	mcall	80002888 <CANGetMsg+0x188>
             dip204_printf_string("St Id");
80002780:	4c 3c       	lddpc	r12,8000288c <CANGetMsg+0x18c>
80002782:	f0 1f 00 44 	mcall	80002890 <CANGetMsg+0x190>
80002786:	c1 b8       	rjmp	800027bc <CANGetMsg+0xbc>
        }
        else if (((S2>>3)&0x01)==1) //format the 29 bit identifier
        {
            *pIdentifier =  (S1<<21 |((S2>>3 & 0x1c)|(S2&0x03))<<16 | S3 <<8 |  S4);
80002788:	a9 60       	lsl	r0,0x8
8000278a:	e1 e1 11 51 	or	r1,r0,r1<<0x15
8000278e:	e3 ec 10 0c 	or	r12,r1,r12
80002792:	e2 18 00 1c 	andl	r8,0x1c,COH
80002796:	ef d7 c0 02 	bfextu	r7,r7,0x0,0x2
8000279a:	0e 48       	or	r8,r7
8000279c:	f9 e8 11 0c 	or	r12,r12,r8<<0x10
800027a0:	85 0c       	st.w	r2[0x0],r12
            LED_On(LED1);
800027a2:	30 2c       	mov	r12,2
800027a4:	f0 1f 00 37 	mcall	80002880 <CANGetMsg+0x180>
            LED_Off(LED0);
800027a8:	30 1c       	mov	r12,1
800027aa:	f0 1f 00 37 	mcall	80002884 <CANGetMsg+0x184>

            dip204_set_cursor_position(1,4);
800027ae:	30 4b       	mov	r11,4
800027b0:	30 1c       	mov	r12,1
800027b2:	f0 1f 00 36 	mcall	80002888 <CANGetMsg+0x188>
            dip204_printf_string("Ex Id");
800027b6:	4b 8c       	lddpc	r12,80002894 <CANGetMsg+0x194>
800027b8:	f0 1f 00 36 	mcall	80002890 <CANGetMsg+0x190>
        }

        *pMsgSize = CAN2515ByteRead(Channel, loc+4) & 0x0F; //Data Length
800027bc:	ec cb ff fc 	sub	r11,r6,-4
800027c0:	5c 5b       	castu.b	r11
800027c2:	0a 9c       	mov	r12,r5
800027c4:	f0 1f 00 2e 	mcall	8000287c <CANGetMsg+0x17c>
800027c8:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
800027cc:	a8 8c       	st.b	r4[0x0],r12

        if(*pMsgSize>8)
800027ce:	30 88       	mov	r8,8
800027d0:	f0 0c 18 00 	cp.b	r12,r8
800027d4:	e0 88 00 07 	brls	800027e2 <CANGetMsg+0xe2>
            *pMsgSize = 8;
800027d8:	a8 88       	st.b	r4[0x0],r8
800027da:	2f b6       	sub	r6,-5
800027dc:	5c 56       	castu.b	r6
800027de:	30 07       	mov	r7,0
800027e0:	c0 58       	rjmp	800027ea <CANGetMsg+0xea>

        for( temp = 0; temp < *pMsgSize; temp++ ){
800027e2:	58 0c       	cp.w	r12,0
800027e4:	fe 99 ff fb 	brgt	800027da <CANGetMsg+0xda>
800027e8:	c0 e8       	rjmp	80002804 <CANGetMsg+0x104>
            Msg[temp] = CAN2515ByteRead(Channel, loc+5+temp);
800027ea:	0c 9b       	mov	r11,r6
800027ec:	0a 9c       	mov	r12,r5
800027ee:	f0 1f 00 24 	mcall	8000287c <CANGetMsg+0x17c>
800027f2:	e6 07 0b 0c 	st.b	r3[r7],r12
        *pMsgSize = CAN2515ByteRead(Channel, loc+4) & 0x0F; //Data Length

        if(*pMsgSize>8)
            *pMsgSize = 8;

        for( temp = 0; temp < *pMsgSize; temp++ ){
800027f6:	2f f7       	sub	r7,-1
800027f8:	2f f6       	sub	r6,-1
800027fa:	5c 56       	castu.b	r6
800027fc:	09 88       	ld.ub	r8,r4[0x0]
800027fe:	0e 38       	cp.w	r8,r7
80002800:	fe 99 ff f5 	brgt	800027ea <CANGetMsg+0xea>

        // Here the RXRTR bit is check to see if a remote frame was received.
        // Here is the identifier of the remote frame being set. When a remote frame messages with the same identifier as defined here the
        //node will respond with a user predefined message.
        //UINT8 RemoteFrameId=User defined;
        LED_Off(LED2);
80002804:	30 4c       	mov	r12,4
80002806:	f0 1f 00 20 	mcall	80002884 <CANGetMsg+0x184>
        if ( ((CAN2515ByteRead( Channel, RXB0CTRL ) & 0x08) || (CAN2515ByteRead( Channel, RXB1CTRL ) & 0x08)) && *pIdentifier==RemoteFrameId)
8000280a:	36 0b       	mov	r11,96
8000280c:	0a 9c       	mov	r12,r5
8000280e:	f0 1f 00 1c 	mcall	8000287c <CANGetMsg+0x17c>
80002812:	e2 1c 00 08 	andl	r12,0x8,COH
80002816:	c0 81       	brne	80002826 <CANGetMsg+0x126>
80002818:	37 0b       	mov	r11,112
8000281a:	0a 9c       	mov	r12,r5
8000281c:	f0 1f 00 18 	mcall	8000287c <CANGetMsg+0x17c>
80002820:	e2 1c 00 08 	andl	r12,0x8,COH
80002824:	c1 d0       	breq	8000285e <CANGetMsg+0x15e>
80002826:	64 08       	ld.w	r8,r2[0x0]
80002828:	58 18       	cp.w	r8,1
8000282a:	c1 a1       	brne	8000285e <CANGetMsg+0x15e>
                    {
                    Msg[0] = 0;
8000282c:	30 08       	mov	r8,0
8000282e:	a6 88       	st.b	r3[0x0],r8
                    Msg[1] = 1;
80002830:	30 18       	mov	r8,1
80002832:	a6 98       	st.b	r3[0x1],r8
                    Msg[2] = 2;
80002834:	30 28       	mov	r8,2
80002836:	a6 a8       	st.b	r3[0x2],r8
                    Msg[3] = 3;
80002838:	30 38       	mov	r8,3
8000283a:	a6 b8       	st.b	r3[0x3],r8

                    CANSendMsg( Channel,*pIdentifier, Msg, 4, 0 );
8000283c:	30 08       	mov	r8,0
8000283e:	30 49       	mov	r9,4
80002840:	06 9a       	mov	r10,r3
80002842:	64 0b       	ld.w	r11,r2[0x0]
80002844:	0a 9c       	mov	r12,r5
80002846:	f0 1f 00 15 	mcall	80002898 <CANGetMsg+0x198>
                    dip204_set_cursor_position(17,4);
8000284a:	30 4b       	mov	r11,4
8000284c:	31 1c       	mov	r12,17
8000284e:	f0 1f 00 0f 	mcall	80002888 <CANGetMsg+0x188>
                    dip204_printf_string("Re F");
80002852:	49 3c       	lddpc	r12,8000289c <CANGetMsg+0x19c>
80002854:	f0 1f 00 0f 	mcall	80002890 <CANGetMsg+0x190>
                    LED_On(LED2);
80002858:	30 4c       	mov	r12,4
8000285a:	f0 1f 00 0a 	mcall	80002880 <CANGetMsg+0x180>
                }

        //clear CANINTF RX01F_RESET=0x00. To be able to receive new messages
        CAN2515ByteWrite(0,CANINTF,RX0IF_RESET);
8000285e:	30 0a       	mov	r10,0
80002860:	32 cb       	mov	r11,44
80002862:	14 9c       	mov	r12,r10
80002864:	f0 1f 00 0f 	mcall	800028a0 <CANGetMsg+0x1a0>
        CAN2515ByteWrite(0,CANINTF,RX1IF_RESET);
80002868:	30 0a       	mov	r10,0
8000286a:	32 cb       	mov	r11,44
8000286c:	14 9c       	mov	r12,r10
8000286e:	f0 1f 00 0d 	mcall	800028a0 <CANGetMsg+0x1a0>
80002872:	da 3a       	popm	r0-r7,pc,r12=1

    return TRUE;
80002874:	d8 3a       	popm	r0-r7,pc,r12=0
80002876:	00 00       	add	r0,r0
80002878:	80 00       	ld.sh	r0,r0[0x0]
8000287a:	21 3c       	sub	r12,19
8000287c:	80 00       	ld.sh	r0,r0[0x0]
8000287e:	23 4c       	sub	r12,52
80002880:	80 00       	ld.sh	r0,r0[0x0]
80002882:	2a 00       	sub	r0,-96
80002884:	80 00       	ld.sh	r0,r0[0x0]
80002886:	2a 50       	sub	r0,-91
80002888:	80 00       	ld.sh	r0,r0[0x0]
8000288a:	2c 2c       	sub	r12,-62
8000288c:	80 00       	ld.sh	r0,r0[0x0]
8000288e:	90 7c       	ld.sh	r12,r8[0xe]
80002890:	80 00       	ld.sh	r0,r0[0x0]
80002892:	2b 94       	sub	r4,-71
80002894:	80 00       	ld.sh	r0,r0[0x0]
80002896:	90 84       	ld.uh	r4,r8[0x0]
80002898:	80 00       	ld.sh	r0,r0[0x0]
8000289a:	25 c8       	sub	r8,92
8000289c:	80 00       	ld.sh	r0,r0[0x0]
8000289e:	90 74       	ld.sh	r4,r8[0xe]
800028a0:	80 00       	ld.sh	r0,r0[0x0]
800028a2:	21 c8       	sub	r8,28

800028a4 <main>:
#define CAN_125kbps 10

UINT32 Ident;
UINT8 msg[8], mSize;

int main(void) {
800028a4:	d4 31       	pushm	r0-r7,lr
800028a6:	20 3d       	sub	sp,12
	//spidatareadpointer=&spidataread;
	pm_switch_to_osc0(&AVR32_PM, FOSC0, OSC0_STARTUP);
800028a8:	30 3a       	mov	r10,3
800028aa:	e0 6b 1b 00 	mov	r11,6912
800028ae:	ea 1b 00 b7 	orh	r11,0xb7
800028b2:	fe 7c 0c 00 	mov	r12,-62464
800028b6:	f0 1f 00 40 	mcall	800029b4 <main+0x110>
	
	// Configures the MCP2515 SPI communication.
	config_SPI_SPARE();
800028ba:	f0 1f 00 40 	mcall	800029b8 <main+0x114>

	// Enables receive interrupts.
	Disable_global_interrupt();
800028be:	d3 03       	ssrf	0x10
	INTC_init_interrupts();
800028c0:	f0 1f 00 3f 	mcall	800029bc <main+0x118>
	Enable_global_interrupt();
800028c4:	d5 03       	csrf	0x10
	
	// Delay to let the Oscillator get started
	delay_init( FOSC0 );
	
	// Initializes the display
	config_dpi204();
800028c6:	f0 1f 00 3f 	mcall	800029c0 <main+0x11c>
	dip204_init(100,1);
800028ca:	30 1b       	mov	r11,1
800028cc:	36 4c       	mov	r12,100
800028ce:	f0 1f 00 3e 	mcall	800029c4 <main+0x120>
	dip204_clear_display();
800028d2:	f0 1f 00 3e 	mcall	800029c8 <main+0x124>
	
	UINT16 Mask = 0; 
	UINT16 flt = 0;
	UINT16 Flt[] = {flt,flt,flt,flt,flt,flt};
800028d6:	30 08       	mov	r8,0
800028d8:	ba 08       	st.h	sp[0x0],r8
800028da:	ba 18       	st.h	sp[0x2],r8
800028dc:	ba 28       	st.h	sp[0x4],r8
800028de:	ba 38       	st.h	sp[0x6],r8
800028e0:	ba 48       	st.h	sp[0x8],r8
800028e2:	ba 58       	st.h	sp[0xa],r8
	InitializeCAN(0, CAN_250kbps, Mask, Flt);
800028e4:	1a 99       	mov	r9,sp
800028e6:	30 0a       	mov	r10,0
800028e8:	30 7b       	mov	r11,7
800028ea:	14 9c       	mov	r12,r10
800028ec:	f0 1f 00 38 	mcall	800029cc <main+0x128>
	
	dip204_set_cursor_position(1,1);
800028f0:	30 1b       	mov	r11,1
800028f2:	16 9c       	mov	r12,r11
800028f4:	f0 1f 00 37 	mcall	800029d0 <main+0x12c>
	dip204_printf_string("ES1 CAN EXAMPLE");
800028f8:	4b 7c       	lddpc	r12,800029d4 <main+0x130>
800028fa:	f0 1f 00 38 	mcall	800029d8 <main+0x134>
	dip204_hide_cursor();
800028fe:	f0 1f 00 38 	mcall	800029dc <main+0x138>

	while(1){
		//Clear memory contents
		ClearMessages(msg);
80002902:	4b 87       	lddpc	r7,800029e0 <main+0x13c>
		//Read any message available
		if(CANRxReady(0)){
80002904:	30 06       	mov	r6,0
			if( CANGetMsg(0, &Ident, msg, &mSize )) // Gets message and returns //TRUE if message received.
80002906:	4b 84       	lddpc	r4,800029e4 <main+0x140>
80002908:	4b 83       	lddpc	r3,800029e8 <main+0x144>
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000290a:	e0 60 1b 00 	mov	r0,6912
8000290e:	ea 10 00 b7 	orh	r0,0xb7
			}
		}
		// Send messages if possible
		if(CANTxReady(0))
		{
			msg[0]=0;
80002912:	30 05       	mov	r5,0
			msg[2]=0;
			msg[3]=0;
			msg[4]=0;
			msg[5]=0;
			msg[6]=0;
			msg[7]=100;
80002914:	36 42       	mov	r2,100
80002916:	e0 61 4f 80 	mov	r1,20352
8000291a:	ea 11 00 12 	orh	r1,0x12
	dip204_printf_string("ES1 CAN EXAMPLE");
	dip204_hide_cursor();

	while(1){
		//Clear memory contents
		ClearMessages(msg);
8000291e:	0e 9c       	mov	r12,r7
80002920:	f0 1f 00 33 	mcall	800029ec <main+0x148>
		//Read any message available
		if(CANRxReady(0)){
80002924:	0c 9c       	mov	r12,r6
80002926:	f0 1f 00 33 	mcall	800029f0 <main+0x14c>
8000292a:	c2 30       	breq	80002970 <main+0xcc>
			if( CANGetMsg(0, &Ident, msg, &mSize )) // Gets message and returns //TRUE if message received.
8000292c:	08 99       	mov	r9,r4
8000292e:	0e 9a       	mov	r10,r7
80002930:	06 9b       	mov	r11,r3
80002932:	0c 9c       	mov	r12,r6
80002934:	f0 1f 00 30 	mcall	800029f4 <main+0x150>
80002938:	c1 c0       	breq	80002970 <main+0xcc>
			{	
				// Evk1100PrintDisplay prints 4 message values, the Identifier and the data size on the display
				dip204_clear_display();
8000293a:	f0 1f 00 24 	mcall	800029c8 <main+0x124>
				Evk1100PrintDisp(&Ident, msg, &mSize );
8000293e:	08 9a       	mov	r10,r4
80002940:	0e 9b       	mov	r11,r7
80002942:	06 9c       	mov	r12,r3
80002944:	f0 1f 00 2d 	mcall	800029f8 <main+0x154>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002948:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000294c:	f0 00 00 0a 	add	r10,r8,r0
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002950:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002954:	14 38       	cp.w	r8,r10
80002956:	e0 88 00 08 	brls	80002966 <main+0xc2>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000295a:	12 38       	cp.w	r8,r9
8000295c:	fe 98 ff fa 	brls	80002950 <main+0xac>
80002960:	12 3a       	cp.w	r10,r9
80002962:	c0 73       	brcs	80002970 <main+0xcc>
80002964:	cf 6b       	rjmp	80002950 <main+0xac>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002966:	12 38       	cp.w	r8,r9
80002968:	e0 8b 00 04 	brhi	80002970 <main+0xcc>
8000296c:	12 3a       	cp.w	r10,r9
8000296e:	cf 12       	brcc	80002950 <main+0xac>
				delay_ms(1000);
				//dip204_clear_display();
			}
		}
		// Send messages if possible
		if(CANTxReady(0))
80002970:	0c 9c       	mov	r12,r6
80002972:	f0 1f 00 23 	mcall	800029fc <main+0x158>
80002976:	cd 40       	breq	8000291e <main+0x7a>
		{
			msg[0]=0;
80002978:	ae 85       	st.b	r7[0x0],r5
			msg[1]=0;
8000297a:	ae 95       	st.b	r7[0x1],r5
			msg[2]=0;
8000297c:	ae a5       	st.b	r7[0x2],r5
			msg[3]=0;
8000297e:	ae b5       	st.b	r7[0x3],r5
			msg[4]=0;
80002980:	ae c5       	st.b	r7[0x4],r5
			msg[5]=0;
80002982:	ae d5       	st.b	r7[0x5],r5
			msg[6]=0;
80002984:	ae e5       	st.b	r7[0x6],r5
			msg[7]=100;
80002986:	ae f2       	st.b	r7[0x7],r2
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002988:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000298c:	f0 01 00 0a 	add	r10,r8,r1
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002990:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002994:	14 38       	cp.w	r8,r10
80002996:	e0 88 00 08 	brls	800029a6 <main+0x102>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000299a:	12 38       	cp.w	r8,r9
8000299c:	fe 98 ff fa 	brls	80002990 <main+0xec>
800029a0:	12 3a       	cp.w	r10,r9
800029a2:	cb e3       	brcs	8000291e <main+0x7a>
800029a4:	cf 6b       	rjmp	80002990 <main+0xec>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800029a6:	12 38       	cp.w	r8,r9
800029a8:	fe 9b ff bb 	brhi	8000291e <main+0x7a>
800029ac:	12 3a       	cp.w	r10,r9
800029ae:	cb 83       	brcs	8000291e <main+0x7a>
800029b0:	cf 0b       	rjmp	80002990 <main+0xec>
800029b2:	00 00       	add	r0,r0
800029b4:	80 00       	ld.sh	r0,r0[0x0]
800029b6:	31 14       	mov	r4,17
800029b8:	80 00       	ld.sh	r0,r0[0x0]
800029ba:	20 a8       	sub	r8,10
800029bc:	80 00       	ld.sh	r0,r0[0x0]
800029be:	2f fc       	sub	r12,-1
800029c0:	80 00       	ld.sh	r0,r0[0x0]
800029c2:	20 1c       	sub	r12,1
800029c4:	80 00       	ld.sh	r0,r0[0x0]
800029c6:	2d 14       	sub	r4,-47
800029c8:	80 00       	ld.sh	r0,r0[0x0]
800029ca:	2c b8       	sub	r8,-53
800029cc:	80 00       	ld.sh	r0,r0[0x0]
800029ce:	24 94       	sub	r4,73
800029d0:	80 00       	ld.sh	r0,r0[0x0]
800029d2:	2c 2c       	sub	r12,-62
800029d4:	80 00       	ld.sh	r0,r0[0x0]
800029d6:	90 8c       	ld.uh	r12,r8[0x0]
800029d8:	80 00       	ld.sh	r0,r0[0x0]
800029da:	2b 94       	sub	r4,-71
800029dc:	80 00       	ld.sh	r0,r0[0x0]
800029de:	2c 88       	sub	r8,-56
800029e0:	00 00       	add	r0,r0
800029e2:	06 60       	and	r0,r3
800029e4:	00 00       	add	r0,r0
800029e6:	06 68       	and	r8,r3
800029e8:	00 00       	add	r0,r0
800029ea:	06 6c       	and	r12,r3
800029ec:	80 00       	ld.sh	r0,r0[0x0]
800029ee:	20 08       	sub	r8,0
800029f0:	80 00       	ld.sh	r0,r0[0x0]
800029f2:	21 8c       	sub	r12,24
800029f4:	80 00       	ld.sh	r0,r0[0x0]
800029f6:	27 00       	sub	r0,112
800029f8:	80 00       	ld.sh	r0,r0[0x0]
800029fa:	24 d4       	sub	r4,77
800029fc:	80 00       	ld.sh	r0,r0[0x0]
800029fe:	21 a0       	sub	r0,26

80002a00 <LED_On>:
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
80002a00:	f9 dc c0 08 	bfextu	r12,r12,0x0,0x8

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);
80002a04:	49 18       	lddpc	r8,80002a48 <LED_On+0x48>
80002a06:	70 09       	ld.w	r9,r8[0x0]
80002a08:	f9 e9 10 09 	or	r9,r12,r9
80002a0c:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
80002a0e:	58 0c       	cp.w	r12,0
80002a10:	5e 0c       	reteq	r12
80002a12:	48 f8       	lddpc	r8,80002a4c <LED_On+0x4c>
80002a14:	21 08       	sub	r8,16
  {
    // Select the next specified LED and turn it on.
    led_shift = 1 + ctz(leds);
80002a16:	18 9a       	mov	r10,r12
80002a18:	5c 9a       	brev	r10
80002a1a:	f4 0a 12 00 	clz	r10,r10
80002a1e:	2f fa       	sub	r10,-1
    led_descriptor += led_shift;
80002a20:	f4 09 15 04 	lsl	r9,r10,0x4
80002a24:	12 08       	add	r8,r9
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
80002a26:	70 09       	ld.w	r9,r8[0x0]
80002a28:	a9 69       	lsl	r9,0x8
80002a2a:	e0 29 f0 00 	sub	r9,61440
    led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
80002a2e:	70 1b       	ld.w	r11,r8[0x4]
80002a30:	f3 4b 00 58 	st.w	r9[88],r11
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80002a34:	70 1b       	ld.w	r11,r8[0x4]
80002a36:	f3 4b 00 44 	st.w	r9[68],r11
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
80002a3a:	70 1b       	ld.w	r11,r8[0x4]
80002a3c:	93 1b       	st.w	r9[0x4],r11
    leds >>= led_shift;
80002a3e:	f8 0a 0a 4c 	lsr	r12,r12,r10

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
80002a42:	ce a1       	brne	80002a16 <LED_On+0x16>
80002a44:	5e fc       	retal	r12
80002a46:	00 00       	add	r0,r0
80002a48:	00 00       	add	r0,r0
80002a4a:	00 08       	add	r8,r0
80002a4c:	80 00       	ld.sh	r0,r0[0x0]
80002a4e:	90 9c       	ld.uh	r12,r8[0x2]

80002a50 <LED_Off>:
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
80002a50:	f9 dc c0 08 	bfextu	r12,r12,0x0,0x8

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);
80002a54:	49 28       	lddpc	r8,80002a9c <LED_Off+0x4c>
80002a56:	70 09       	ld.w	r9,r8[0x0]
80002a58:	f8 0a 11 ff 	rsub	r10,r12,-1
80002a5c:	f5 e9 00 09 	and	r9,r10,r9
80002a60:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
80002a62:	58 0c       	cp.w	r12,0
80002a64:	5e 0c       	reteq	r12
80002a66:	48 f8       	lddpc	r8,80002aa0 <LED_Off+0x50>
80002a68:	21 08       	sub	r8,16
  {
    // Select the next specified LED and turn it off.
    led_shift = 1 + ctz(leds);
80002a6a:	18 9a       	mov	r10,r12
80002a6c:	5c 9a       	brev	r10
80002a6e:	f4 0a 12 00 	clz	r10,r10
80002a72:	2f fa       	sub	r10,-1
    led_descriptor += led_shift;
80002a74:	f4 09 15 04 	lsl	r9,r10,0x4
80002a78:	12 08       	add	r8,r9
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
80002a7a:	70 09       	ld.w	r9,r8[0x0]
80002a7c:	a9 69       	lsl	r9,0x8
80002a7e:	e0 29 f0 00 	sub	r9,61440
    led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
80002a82:	70 1b       	ld.w	r11,r8[0x4]
80002a84:	f3 4b 00 54 	st.w	r9[84],r11
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80002a88:	70 1b       	ld.w	r11,r8[0x4]
80002a8a:	f3 4b 00 44 	st.w	r9[68],r11
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
80002a8e:	70 1b       	ld.w	r11,r8[0x4]
80002a90:	93 1b       	st.w	r9[0x4],r11
    leds >>= led_shift;
80002a92:	f8 0a 0a 4c 	lsr	r12,r12,r10

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
80002a96:	ce a1       	brne	80002a6a <LED_Off+0x1a>
80002a98:	5e fc       	retal	r12
80002a9a:	00 00       	add	r0,r0
80002a9c:	00 00       	add	r0,r0
80002a9e:	00 08       	add	r8,r0
80002aa0:	80 00       	ld.sh	r0,r0[0x0]
80002aa2:	90 9c       	ld.uh	r12,r8[0x2]

80002aa4 <dip204_select>:

/*! \brief function to select the LCD
 *
 */
static void dip204_select(void)
{
80002aa4:	d4 01       	pushm	lr
  spi_selectChip(DIP204_SPI, DIP204_SPI_NPCS);
80002aa6:	30 2b       	mov	r11,2
80002aa8:	fe 7c 28 00 	mov	r12,-55296
80002aac:	f0 1f 00 02 	mcall	80002ab4 <dip204_select+0x10>
}
80002ab0:	d8 02       	popm	pc
80002ab2:	00 00       	add	r0,r0
80002ab4:	80 00       	ld.sh	r0,r0[0x0]
80002ab6:	32 52       	mov	r2,37

80002ab8 <dip204_write_byte>:
 *
 *  \param  byte  Input. byte to write to the LCD (D7 .. D0)
 *
 */
static void dip204_write_byte(unsigned char byte)
{
80002ab8:	eb cd 40 80 	pushm	r7,lr
  unsigned char reverse;

  switch (byte)
80002abc:	f8 c8 ff f8 	sub	r8,r12,-8
80002ac0:	30 69       	mov	r9,6
80002ac2:	f2 08 18 00 	cp.b	r8,r9
80002ac6:	e0 8b 00 0f 	brhi	80002ae4 <dip204_write_byte+0x2c>
80002aca:	30 19       	mov	r9,1
80002acc:	f2 08 09 48 	lsl	r8,r9,r8
80002ad0:	e2 18 00 55 	andl	r8,0x55,COH
80002ad4:	c0 80       	breq	80002ae4 <dip204_write_byte+0x2c>
    {
      /* send D7 to D0 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, byte);
80002ad6:	18 9b       	mov	r11,r12
80002ad8:	fe 7c 28 00 	mov	r12,-55296
80002adc:	f0 1f 00 0c 	mcall	80002b0c <dip204_write_byte+0x54>
      Assert( SPI_OK==spi_status );
      break;
80002ae0:	e3 cd 80 80 	ldm	sp++,r7,pc
    }
    /* LSB first for all other data */
    default:
    {
      /* reverse byte */
      reverse = bit_reverse8(byte);
80002ae4:	5c 9c       	brev	r12
      /* send D0 to D3 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, (reverse & 0xF0));
80002ae6:	f8 07 16 18 	lsr	r7,r12,0x18
80002aea:	0e 9b       	mov	r11,r7
80002aec:	e2 1b 00 f0 	andl	r11,0xf0,COH
80002af0:	fe 7c 28 00 	mov	r12,-55296
80002af4:	f0 1f 00 06 	mcall	80002b0c <dip204_write_byte+0x54>
      Assert( SPI_OK==spi_status );
      /* send D4 to D7 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, ((reverse << 4) & 0xF0));
80002af8:	ee 0b 15 04 	lsl	r11,r7,0x4
80002afc:	e2 1b 00 f0 	andl	r11,0xf0,COH
80002b00:	fe 7c 28 00 	mov	r12,-55296
80002b04:	f0 1f 00 02 	mcall	80002b0c <dip204_write_byte+0x54>
80002b08:	e3 cd 80 80 	ldm	sp++,r7,pc
80002b0c:	80 00       	ld.sh	r0,r0[0x0]
80002b0e:	33 82       	mov	r2,56

80002b10 <dip204_read_byte>:
 *
 *  \param  byte  Input. byte read from the LCD (D7 .. D0)
 *
 */
static void dip204_read_byte(unsigned char *byte)
{
80002b10:	eb cd 40 c0 	pushm	r6-r7,lr
80002b14:	20 1d       	sub	sp,4
80002b16:	18 96       	mov	r6,r12
  unsigned short reverse = 0x00;
80002b18:	fa c7 ff fc 	sub	r7,sp,-4
80002b1c:	30 08       	mov	r8,0
80002b1e:	0e e8       	st.h	--r7,r8

  /* dummy write */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_write(DIP204_SPI, 0x00);
80002b20:	30 0b       	mov	r11,0
80002b22:	fe 7c 28 00 	mov	r12,-55296
80002b26:	f0 1f 00 08 	mcall	80002b44 <dip204_read_byte+0x34>
  Assert( SPI_OK==spi_status );
  /* read RSR register */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_read(DIP204_SPI, &reverse);
80002b2a:	0e 9b       	mov	r11,r7
80002b2c:	fe 7c 28 00 	mov	r12,-55296
80002b30:	f0 1f 00 06 	mcall	80002b48 <dip204_read_byte+0x38>
  Assert( SPI_OK==spi_status );
  /* Revert received byte (issued LSB first by the LCD) */
  *byte = bit_reverse8(reverse);
80002b34:	1b b8       	ld.ub	r8,sp[0x3]
80002b36:	5c 98       	brev	r8
80002b38:	b9 88       	lsr	r8,0x18
80002b3a:	ac 88       	st.b	r6[0x0],r8
}
80002b3c:	2f fd       	sub	sp,-4
80002b3e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002b42:	00 00       	add	r0,r0
80002b44:	80 00       	ld.sh	r0,r0[0x0]
80002b46:	33 82       	mov	r2,56
80002b48:	80 00       	ld.sh	r0,r0[0x0]
80002b4a:	33 a6       	mov	r6,58

80002b4c <dip204_wait_busy>:

/*! \brief function to wait for LCD becomes not busy
 *
 */
static void dip204_wait_busy(void)
{
80002b4c:	eb cd 40 c0 	pushm	r6-r7,lr
80002b50:	20 1d       	sub	sp,4
  unsigned char status = 0x00;
80002b52:	fa c7 ff fc 	sub	r7,sp,-4
80002b56:	30 08       	mov	r8,0
80002b58:	0e f8       	st.b	--r7,r8

  /* send read command to LCD */
  dip204_write_byte(DIP204_READ_COMMAND);
80002b5a:	e0 6c 00 fc 	mov	r12,252
80002b5e:	f0 1f 00 07 	mcall	80002b78 <dip204_wait_busy+0x2c>
  /* read next byte */
  do {
  dip204_read_byte(&status);
  /* keep D7 to know status */
  }while (status & 0x80);
80002b62:	30 06       	mov	r6,0

  /* send read command to LCD */
  dip204_write_byte(DIP204_READ_COMMAND);
  /* read next byte */
  do {
  dip204_read_byte(&status);
80002b64:	0e 9c       	mov	r12,r7
80002b66:	f0 1f 00 06 	mcall	80002b7c <dip204_wait_busy+0x30>
  /* keep D7 to know status */
  }while (status & 0x80);
80002b6a:	1b b8       	ld.ub	r8,sp[0x3]
80002b6c:	ec 08 18 00 	cp.b	r8,r6
80002b70:	cf a5       	brlt	80002b64 <dip204_wait_busy+0x18>
}
80002b72:	2f fd       	sub	sp,-4
80002b74:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002b78:	80 00       	ld.sh	r0,r0[0x0]
80002b7a:	2a b8       	sub	r8,-85
80002b7c:	80 00       	ld.sh	r0,r0[0x0]
80002b7e:	2b 10       	sub	r0,-79

80002b80 <dip204_unselect>:

/*! \brief function to unselect the LCD
 *
 */
static void dip204_unselect(void)
{
80002b80:	d4 01       	pushm	lr
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_unselectChip(DIP204_SPI, DIP204_SPI_NPCS);
80002b82:	30 2b       	mov	r11,2
80002b84:	fe 7c 28 00 	mov	r12,-55296
80002b88:	f0 1f 00 02 	mcall	80002b90 <dip204_unselect+0x10>
  Assert( SPI_OK==spi_status );
}
80002b8c:	d8 02       	popm	pc
80002b8e:	00 00       	add	r0,r0
80002b90:	80 00       	ld.sh	r0,r0[0x0]
80002b92:	32 9e       	mov	lr,41

80002b94 <dip204_printf_string>:
  dip204_unselect();
}


void dip204_printf_string(const char *format, ...)
{
80002b94:	d4 21       	pushm	r4-r7,lr
80002b96:	20 6d       	sub	sp,24
  va_list arg;
  char string[21];
  unsigned char i=0;

  va_start(arg, format);
  i = vsprintf(string, format, arg);
80002b98:	fa ca ff d4 	sub	r10,sp,-44
80002b9c:	18 9b       	mov	r11,r12
80002b9e:	1a 9c       	mov	r12,sp
80002ba0:	f0 1f 00 1e 	mcall	80002c18 <dip204_printf_string+0x84>
80002ba4:	5c 5c       	castu.b	r12
  while (i < sizeof(string) - 1) string[i++] = '\0';
80002ba6:	31 38       	mov	r8,19
80002ba8:	f0 0c 18 00 	cp.b	r12,r8
80002bac:	e0 8b 00 0e 	brhi	80002bc8 <dip204_printf_string+0x34>
80002bb0:	30 0a       	mov	r10,0
80002bb2:	31 49       	mov	r9,20
80002bb4:	fa c8 ff e8 	sub	r8,sp,-24
80002bb8:	18 08       	add	r8,r12
80002bba:	f1 6a ff e8 	st.b	r8[-24],r10
80002bbe:	2f fc       	sub	r12,-1
80002bc0:	5c 5c       	castu.b	r12
80002bc2:	f2 0c 18 00 	cp.b	r12,r9
80002bc6:	cf 71       	brne	80002bb4 <dip204_printf_string+0x20>
  va_end(arg);
  dip204_select();
80002bc8:	f0 1f 00 15 	mcall	80002c1c <dip204_printf_string+0x88>
  /* for all chars in string */
  i = 0;
  while(string[i]!='\0')
80002bcc:	30 08       	mov	r8,0
80002bce:	1b 89       	ld.ub	r9,sp[0x0]
80002bd0:	f0 09 18 00 	cp.b	r9,r8
80002bd4:	c1 e0       	breq	80002c10 <dip204_printf_string+0x7c>
80002bd6:	30 06       	mov	r6,0
80002bd8:	0c 97       	mov	r7,r6
  {
    /* Send Write Data Start Byte */
    dip204_write_byte(DIP204_WRITE_DATA);
80002bda:	e0 64 00 fa 	mov	r4,250
  while (i < sizeof(string) - 1) string[i++] = '\0';
  va_end(arg);
  dip204_select();
  /* for all chars in string */
  i = 0;
  while(string[i]!='\0')
80002bde:	10 95       	mov	r5,r8
  {
    /* Send Write Data Start Byte */
    dip204_write_byte(DIP204_WRITE_DATA);
80002be0:	08 9c       	mov	r12,r4
80002be2:	f0 1f 00 10 	mcall	80002c20 <dip204_printf_string+0x8c>
    /* Send byte */
    dip204_write_byte(string[i]);
80002be6:	fa c8 ff e8 	sub	r8,sp,-24
80002bea:	f0 06 00 06 	add	r6,r8,r6
80002bee:	ed 3c ff e8 	ld.ub	r12,r6[-24]
80002bf2:	f0 1f 00 0c 	mcall	80002c20 <dip204_printf_string+0x8c>
    /* go to next char */
    i++;
80002bf6:	2f f7       	sub	r7,-1
80002bf8:	5c 57       	castu.b	r7
    dip204_wait_busy();
80002bfa:	f0 1f 00 0b 	mcall	80002c24 <dip204_printf_string+0x90>
  while (i < sizeof(string) - 1) string[i++] = '\0';
  va_end(arg);
  dip204_select();
  /* for all chars in string */
  i = 0;
  while(string[i]!='\0')
80002bfe:	0e 96       	mov	r6,r7
80002c00:	fa c8 ff e8 	sub	r8,sp,-24
80002c04:	0e 08       	add	r8,r7
80002c06:	f1 38 ff e8 	ld.ub	r8,r8[-24]
80002c0a:	ea 08 18 00 	cp.b	r8,r5
80002c0e:	ce 91       	brne	80002be0 <dip204_printf_string+0x4c>
    dip204_write_byte(string[i]);
    /* go to next char */
    i++;
    dip204_wait_busy();
  }
  dip204_unselect();
80002c10:	f0 1f 00 06 	mcall	80002c28 <dip204_printf_string+0x94>
}
80002c14:	2f ad       	sub	sp,-24
80002c16:	d8 22       	popm	r4-r7,pc
80002c18:	80 00       	ld.sh	r0,r0[0x0]
80002c1a:	35 7c       	mov	r12,87
80002c1c:	80 00       	ld.sh	r0,r0[0x0]
80002c1e:	2a a4       	sub	r4,-86
80002c20:	80 00       	ld.sh	r0,r0[0x0]
80002c22:	2a b8       	sub	r8,-85
80002c24:	80 00       	ld.sh	r0,r0[0x0]
80002c26:	2b 4c       	sub	r12,-76
80002c28:	80 00       	ld.sh	r0,r0[0x0]
80002c2a:	2b 80       	sub	r0,-72

80002c2c <dip204_set_cursor_position>:
  dip204_set_cursor_position(column, line);
}


void dip204_set_cursor_position(unsigned char column, unsigned char line)
{
80002c2c:	eb cd 40 c0 	pushm	r6-r7,lr
80002c30:	18 96       	mov	r6,r12
80002c32:	16 97       	mov	r7,r11
  unsigned char address = 0;

  dip204_select();
80002c34:	f0 1f 00 11 	mcall	80002c78 <dip204_set_cursor_position+0x4c>
  if ((column <= 20) && (line <= 4))
80002c38:	31 48       	mov	r8,20
80002c3a:	f0 06 18 00 	cp.b	r6,r8
80002c3e:	5f 89       	srls	r9
80002c40:	30 48       	mov	r8,4
80002c42:	f0 07 18 00 	cp.b	r7,r8
80002c46:	5f 88       	srls	r8
80002c48:	f3 e8 00 08 	and	r8,r9,r8
80002c4c:	c0 31       	brne	80002c52 <dip204_set_cursor_position+0x26>
80002c4e:	30 06       	mov	r6,0
80002c50:	c0 68       	rjmp	80002c5c <dip204_set_cursor_position+0x30>
  {
    /* Calculate DDRAM address from line and row values */
    address = ( (line-1) * 32 ) + ( column-1 ) + 128;
80002c52:	28 16       	sub	r6,-127
80002c54:	20 17       	sub	r7,1
80002c56:	a5 77       	lsl	r7,0x5
80002c58:	0e 06       	add	r6,r7
80002c5a:	5c 56       	castu.b	r6
  }
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002c5c:	e0 6c 00 f8 	mov	r12,248
80002c60:	f0 1f 00 07 	mcall	80002c7c <dip204_set_cursor_position+0x50>
  /* Send Address lower Nibble */
  dip204_write_byte(address);
80002c64:	0c 9c       	mov	r12,r6
80002c66:	f0 1f 00 06 	mcall	80002c7c <dip204_set_cursor_position+0x50>
  dip204_wait_busy();
80002c6a:	f0 1f 00 06 	mcall	80002c80 <dip204_set_cursor_position+0x54>
  dip204_unselect();
80002c6e:	f0 1f 00 06 	mcall	80002c84 <dip204_set_cursor_position+0x58>
}
80002c72:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002c76:	00 00       	add	r0,r0
80002c78:	80 00       	ld.sh	r0,r0[0x0]
80002c7a:	2a a4       	sub	r4,-86
80002c7c:	80 00       	ld.sh	r0,r0[0x0]
80002c7e:	2a b8       	sub	r8,-85
80002c80:	80 00       	ld.sh	r0,r0[0x0]
80002c82:	2b 4c       	sub	r12,-76
80002c84:	80 00       	ld.sh	r0,r0[0x0]
80002c86:	2b 80       	sub	r0,-72

80002c88 <dip204_hide_cursor>:
  dip204_unselect();
}


void dip204_hide_cursor(void)
{
80002c88:	d4 01       	pushm	lr
  /* select the LCD chip */
  dip204_select();
80002c8a:	f0 1f 00 08 	mcall	80002ca8 <dip204_hide_cursor+0x20>
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002c8e:	e0 6c 00 f8 	mov	r12,248
80002c92:	f0 1f 00 07 	mcall	80002cac <dip204_hide_cursor+0x24>
  /* Send "Display On Command: Display On, Cursor On, Blink On" */
  dip204_write_byte(0x0C);
80002c96:	30 cc       	mov	r12,12
80002c98:	f0 1f 00 05 	mcall	80002cac <dip204_hide_cursor+0x24>
  dip204_wait_busy();
80002c9c:	f0 1f 00 05 	mcall	80002cb0 <dip204_hide_cursor+0x28>
  /* unselect chip */
  dip204_unselect();
80002ca0:	f0 1f 00 05 	mcall	80002cb4 <dip204_hide_cursor+0x2c>
}
80002ca4:	d8 02       	popm	pc
80002ca6:	00 00       	add	r0,r0
80002ca8:	80 00       	ld.sh	r0,r0[0x0]
80002caa:	2a a4       	sub	r4,-86
80002cac:	80 00       	ld.sh	r0,r0[0x0]
80002cae:	2a b8       	sub	r8,-85
80002cb0:	80 00       	ld.sh	r0,r0[0x0]
80002cb2:	2b 4c       	sub	r12,-76
80002cb4:	80 00       	ld.sh	r0,r0[0x0]
80002cb6:	2b 80       	sub	r0,-72

80002cb8 <dip204_clear_display>:
  dip204_unselect();
}


void dip204_clear_display(void)
{
80002cb8:	d4 01       	pushm	lr
  dip204_select();
80002cba:	f0 1f 00 13 	mcall	80002d04 <dip204_clear_display+0x4c>
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002cbe:	e0 6c 00 f8 	mov	r12,248
80002cc2:	f0 1f 00 12 	mcall	80002d08 <dip204_clear_display+0x50>
  /* Send Display Clear Command */
  dip204_write_byte(0x01);
80002cc6:	30 1c       	mov	r12,1
80002cc8:	f0 1f 00 10 	mcall	80002d08 <dip204_clear_display+0x50>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002ccc:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002cd0:	e0 69 bb 80 	mov	r9,48000
80002cd4:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002cd8:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002cdc:	14 38       	cp.w	r8,r10
80002cde:	e0 88 00 08 	brls	80002cee <dip204_clear_display+0x36>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002ce2:	12 38       	cp.w	r8,r9
80002ce4:	fe 98 ff fa 	brls	80002cd8 <dip204_clear_display+0x20>
80002ce8:	12 3a       	cp.w	r10,r9
80002cea:	c0 73       	brcs	80002cf8 <dip204_clear_display+0x40>
80002cec:	cf 6b       	rjmp	80002cd8 <dip204_clear_display+0x20>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002cee:	12 38       	cp.w	r8,r9
80002cf0:	e0 8b 00 04 	brhi	80002cf8 <dip204_clear_display+0x40>
80002cf4:	12 3a       	cp.w	r10,r9
80002cf6:	cf 12       	brcc	80002cd8 <dip204_clear_display+0x20>
  /* Wait for command execution */
  delay_ms(4);
  dip204_wait_busy();
80002cf8:	f0 1f 00 05 	mcall	80002d0c <dip204_clear_display+0x54>
  dip204_unselect();
80002cfc:	f0 1f 00 05 	mcall	80002d10 <dip204_clear_display+0x58>
}
80002d00:	d8 02       	popm	pc
80002d02:	00 00       	add	r0,r0
80002d04:	80 00       	ld.sh	r0,r0[0x0]
80002d06:	2a a4       	sub	r4,-86
80002d08:	80 00       	ld.sh	r0,r0[0x0]
80002d0a:	2a b8       	sub	r8,-85
80002d0c:	80 00       	ld.sh	r0,r0[0x0]
80002d0e:	2b 4c       	sub	r12,-76
80002d10:	80 00       	ld.sh	r0,r0[0x0]
80002d12:	2b 80       	sub	r0,-72

80002d14 <dip204_init>:


/****************************** global functions *****************************/

void dip204_init(backlight_options option, bool backlight_on)
{
80002d14:	eb cd 40 80 	pushm	r7,lr
80002d18:	20 4d       	sub	sp,16
80002d1a:	16 97       	mov	r7,r11
  pwm_opt_t pwm_opt;  // pwm option config

  if (option == backlight_PWM)
80002d1c:	58 1c       	cp.w	r12,1
80002d1e:	c3 01       	brne	80002d7e <dip204_init+0x6a>
  {
    channel_id = DIP204_PWM_CHANNEL;
80002d20:	30 69       	mov	r9,6
80002d22:	4f a8       	lddpc	r8,80002f08 <dip204_init+0x1f4>
80002d24:	91 09       	st.w	r8[0x0],r9
    gpio_enable_module_pin(DIP204_PWM_PIN, DIP204_PWM_FUNCTION);
80002d26:	30 2b       	mov	r11,2
80002d28:	33 2c       	mov	r12,50
80002d2a:	f0 1f 00 79 	mcall	80002f0c <dip204_init+0x1f8>

    // PWM controller configuration
    pwm_opt.diva=0;
80002d2e:	30 08       	mov	r8,0
80002d30:	50 18       	stdsp	sp[0x4],r8
    pwm_opt.divb=0;
80002d32:	50 08       	stdsp	sp[0x0],r8
    pwm_opt.prea=0;
80002d34:	50 38       	stdsp	sp[0xc],r8
    pwm_opt.preb=0;
80002d36:	50 28       	stdsp	sp[0x8],r8

    pwm_init(&pwm_opt);
80002d38:	1a 9c       	mov	r12,sp
80002d3a:	f0 1f 00 76 	mcall	80002f10 <dip204_init+0x1fc>
    pwm_duty = (backlight_on) ? DIP204_PERIOD_MAX - 1 : 1;
80002d3e:	58 07       	cp.w	r7,0
80002d40:	f9 b7 01 31 	movne	r7,49
80002d44:	f9 b7 00 01 	moveq	r7,1
80002d48:	4f 38       	lddpc	r8,80002f14 <dip204_init+0x200>
80002d4a:	b0 07       	st.h	r8[0x0],r7
    pwm_channel.CMR.calg = PWM_MODE_LEFT_ALIGNED;   // channel mode
80002d4c:	4f 3b       	lddpc	r11,80002f18 <dip204_init+0x204>
80002d4e:	76 08       	ld.w	r8,r11[0x0]
    pwm_channel.CMR.cpol = PWM_POLARITY_LOW;   // channel polarity
    pwm_channel.CMR.cpd = PWM_UPDATE_PERIOD;   // not used the first time
80002d50:	e0 18 fc ff 	andl	r8,0xfcff
    pwm_channel.CMR.cpre = AVR32_PWM_CPRE_MCK_DIV_256;   // channel prescaler
80002d54:	ab a8       	sbr	r8,0xa
80002d56:	30 89       	mov	r9,8
80002d58:	f1 d9 d0 04 	bfins	r8,r9,0x0,0x4
80002d5c:	97 08       	st.w	r11[0x0],r8
    pwm_channel.cdty = pwm_duty;  // channel duty cycle, should be < CPRD
80002d5e:	97 17       	st.w	r11[0x4],r7
    pwm_channel.cprd = DIP204_PERIOD_MAX;  // channel period
80002d60:	33 28       	mov	r8,50
80002d62:	97 28       	st.w	r11[0x8],r8
    pwm_channel.cupd = 0;  // channel update is not used here.
80002d64:	30 08       	mov	r8,0
80002d66:	97 48       	st.w	r11[0x10],r8

    pwm_channel_init(channel_id, &pwm_channel);
80002d68:	4e 87       	lddpc	r7,80002f08 <dip204_init+0x1f4>
80002d6a:	6e 0c       	ld.w	r12,r7[0x0]
80002d6c:	f0 1f 00 6c 	mcall	80002f1c <dip204_init+0x208>
    // start PWM
    pwm_start_channels(1 << channel_id);
80002d70:	6e 08       	ld.w	r8,r7[0x0]
80002d72:	30 1c       	mov	r12,1
80002d74:	f8 08 09 4c 	lsl	r12,r12,r8
80002d78:	f0 1f 00 6a 	mcall	80002f20 <dip204_init+0x20c>
80002d7c:	c0 a8       	rjmp	80002d90 <dip204_init+0x7c>
  }
  else
  {
    if (backlight_on)
80002d7e:	58 0b       	cp.w	r11,0
80002d80:	c0 50       	breq	80002d8a <dip204_init+0x76>
    {
      gpio_clr_gpio_pin(DIP204_BACKLIGHT_PIN);
80002d82:	33 2c       	mov	r12,50
80002d84:	f0 1f 00 68 	mcall	80002f24 <dip204_init+0x210>
80002d88:	c0 48       	rjmp	80002d90 <dip204_init+0x7c>
    }
    else
    {
      gpio_set_gpio_pin(DIP204_BACKLIGHT_PIN);
80002d8a:	33 2c       	mov	r12,50
80002d8c:	f0 1f 00 67 	mcall	80002f28 <dip204_init+0x214>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002d90:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002d94:	e2 79 a9 80 	mov	r9,240000
80002d98:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002d9c:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002da0:	14 38       	cp.w	r8,r10
80002da2:	e0 88 00 08 	brls	80002db2 <dip204_init+0x9e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002da6:	12 38       	cp.w	r8,r9
80002da8:	fe 98 ff fa 	brls	80002d9c <dip204_init+0x88>
80002dac:	12 3a       	cp.w	r10,r9
80002dae:	c6 e3       	brcs	80002e8a <dip204_init+0x176>
80002db0:	cf 6b       	rjmp	80002d9c <dip204_init+0x88>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002db2:	12 38       	cp.w	r8,r9
80002db4:	e0 8b 00 6b 	brhi	80002e8a <dip204_init+0x176>
80002db8:	12 3a       	cp.w	r10,r9
80002dba:	c6 83       	brcs	80002e8a <dip204_init+0x176>
80002dbc:	cf 0b       	rjmp	80002d9c <dip204_init+0x88>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002dbe:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002dc2:	14 38       	cp.w	r8,r10
80002dc4:	e0 88 00 08 	brls	80002dd4 <dip204_init+0xc0>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002dc8:	12 38       	cp.w	r8,r9
80002dca:	fe 98 ff fa 	brls	80002dbe <dip204_init+0xaa>
80002dce:	12 3a       	cp.w	r10,r9
80002dd0:	c6 b3       	brcs	80002ea6 <dip204_init+0x192>
80002dd2:	cf 6b       	rjmp	80002dbe <dip204_init+0xaa>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002dd4:	12 38       	cp.w	r8,r9
80002dd6:	e0 8b 00 68 	brhi	80002ea6 <dip204_init+0x192>
80002dda:	12 3a       	cp.w	r10,r9
80002ddc:	c6 53       	brcs	80002ea6 <dip204_init+0x192>
80002dde:	cf 0b       	rjmp	80002dbe <dip204_init+0xaa>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002de0:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002de4:	14 38       	cp.w	r8,r10
80002de6:	e0 88 00 08 	brls	80002df6 <dip204_init+0xe2>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002dea:	12 38       	cp.w	r8,r9
80002dec:	fe 98 ff fa 	brls	80002de0 <dip204_init+0xcc>
80002df0:	12 3a       	cp.w	r10,r9
80002df2:	c6 23       	brcs	80002eb6 <dip204_init+0x1a2>
80002df4:	cf 6b       	rjmp	80002de0 <dip204_init+0xcc>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002df6:	12 38       	cp.w	r8,r9
80002df8:	e0 8b 00 5f 	brhi	80002eb6 <dip204_init+0x1a2>
80002dfc:	12 3a       	cp.w	r10,r9
80002dfe:	c5 c3       	brcs	80002eb6 <dip204_init+0x1a2>
80002e00:	cf 0b       	rjmp	80002de0 <dip204_init+0xcc>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002e02:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002e06:	14 38       	cp.w	r8,r10
80002e08:	e0 88 00 08 	brls	80002e18 <dip204_init+0x104>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002e0c:	12 38       	cp.w	r8,r9
80002e0e:	fe 98 ff fa 	brls	80002e02 <dip204_init+0xee>
80002e12:	12 3a       	cp.w	r10,r9
80002e14:	c5 93       	brcs	80002ec6 <dip204_init+0x1b2>
80002e16:	cf 6b       	rjmp	80002e02 <dip204_init+0xee>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002e18:	12 38       	cp.w	r8,r9
80002e1a:	e0 8b 00 56 	brhi	80002ec6 <dip204_init+0x1b2>
80002e1e:	12 3a       	cp.w	r10,r9
80002e20:	c5 33       	brcs	80002ec6 <dip204_init+0x1b2>
80002e22:	cf 0b       	rjmp	80002e02 <dip204_init+0xee>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002e24:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002e28:	14 38       	cp.w	r8,r10
80002e2a:	e0 88 00 08 	brls	80002e3a <dip204_init+0x126>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002e2e:	12 38       	cp.w	r8,r9
80002e30:	fe 98 ff fa 	brls	80002e24 <dip204_init+0x110>
80002e34:	12 3a       	cp.w	r10,r9
80002e36:	c5 03       	brcs	80002ed6 <dip204_init+0x1c2>
80002e38:	cf 6b       	rjmp	80002e24 <dip204_init+0x110>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002e3a:	12 38       	cp.w	r8,r9
80002e3c:	e0 8b 00 4d 	brhi	80002ed6 <dip204_init+0x1c2>
80002e40:	12 3a       	cp.w	r10,r9
80002e42:	c4 a3       	brcs	80002ed6 <dip204_init+0x1c2>
80002e44:	cf 0b       	rjmp	80002e24 <dip204_init+0x110>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002e46:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002e4a:	14 38       	cp.w	r8,r10
80002e4c:	e0 88 00 08 	brls	80002e5c <dip204_init+0x148>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002e50:	12 38       	cp.w	r8,r9
80002e52:	fe 98 ff fa 	brls	80002e46 <dip204_init+0x132>
80002e56:	12 3a       	cp.w	r10,r9
80002e58:	c4 93       	brcs	80002eea <dip204_init+0x1d6>
80002e5a:	cf 6b       	rjmp	80002e46 <dip204_init+0x132>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002e5c:	12 38       	cp.w	r8,r9
80002e5e:	e0 8b 00 46 	brhi	80002eea <dip204_init+0x1d6>
80002e62:	12 3a       	cp.w	r10,r9
80002e64:	c4 33       	brcs	80002eea <dip204_init+0x1d6>
80002e66:	cf 0b       	rjmp	80002e46 <dip204_init+0x132>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002e68:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002e6c:	14 38       	cp.w	r8,r10
80002e6e:	e0 88 00 08 	brls	80002e7e <dip204_init+0x16a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002e72:	12 38       	cp.w	r8,r9
80002e74:	fe 98 ff fa 	brls	80002e68 <dip204_init+0x154>
80002e78:	12 3a       	cp.w	r10,r9
80002e7a:	c4 03       	brcs	80002efa <dip204_init+0x1e6>
80002e7c:	cf 6b       	rjmp	80002e68 <dip204_init+0x154>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002e7e:	12 38       	cp.w	r8,r9
80002e80:	e0 8b 00 3d 	brhi	80002efa <dip204_init+0x1e6>
80002e84:	12 3a       	cp.w	r10,r9
80002e86:	c3 a3       	brcs	80002efa <dip204_init+0x1e6>
80002e88:	cf 0b       	rjmp	80002e68 <dip204_init+0x154>
    }
  }
  // delay for power on
  delay_ms(20);
  // select the LCD chip
  dip204_select();
80002e8a:	f0 1f 00 29 	mcall	80002f2c <dip204_init+0x218>
  // Send Command Start Byte
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002e8e:	e0 6c 00 f8 	mov	r12,248
80002e92:	f0 1f 00 28 	mcall	80002f30 <dip204_init+0x21c>
  // Send "extended Function Set" Command  (RE=1)
  dip204_write_byte(0x34);
80002e96:	33 4c       	mov	r12,52
80002e98:	f0 1f 00 26 	mcall	80002f30 <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002e9c:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002ea0:	f0 ca d1 20 	sub	r10,r8,-12000
80002ea4:	c8 db       	rjmp	80002dbe <dip204_init+0xaa>
  // Wait for command execution
  delay_ms(1);
  // Send "Enter 4-Line Mode" Command
  dip204_write_byte(0x09);
80002ea6:	30 9c       	mov	r12,9
80002ea8:	f0 1f 00 22 	mcall	80002f30 <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002eac:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002eb0:	f0 ca d1 20 	sub	r10,r8,-12000
80002eb4:	c9 6b       	rjmp	80002de0 <dip204_init+0xcc>
  // Wait for command execution
  delay_ms(1);
  // Send "Function Set" Command (RE=0)
  dip204_write_byte(0x30);
80002eb6:	33 0c       	mov	r12,48
80002eb8:	f0 1f 00 1e 	mcall	80002f30 <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002ebc:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002ec0:	f0 ca d1 20 	sub	r10,r8,-12000
80002ec4:	c9 fb       	rjmp	80002e02 <dip204_init+0xee>
  // Wait for command execution
  delay_ms(1);
  // Send "Display On Command: Display On, Cursor On, Blink On"
  dip204_write_byte(0x0F);
80002ec6:	30 fc       	mov	r12,15
80002ec8:	f0 1f 00 1a 	mcall	80002f30 <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002ecc:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002ed0:	f0 ca d1 20 	sub	r10,r8,-12000
80002ed4:	ca 8b       	rjmp	80002e24 <dip204_init+0x110>
  // Wait for command execution
  delay_ms(1);
  // Send "Display Clear" Command
  dip204_write_byte(0x01);
80002ed6:	30 1c       	mov	r12,1
80002ed8:	f0 1f 00 16 	mcall	80002f30 <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002edc:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002ee0:	e0 69 ea 60 	mov	r9,60000
80002ee4:	f0 09 00 0a 	add	r10,r8,r9
80002ee8:	ca fb       	rjmp	80002e46 <dip204_init+0x132>
  // Wait for command execution
  delay_ms(5);
  // Send "Entry Mode Set Command: Increment Mode, Entire Shift off"
  dip204_write_byte(0x06);
80002eea:	30 6c       	mov	r12,6
80002eec:	f0 1f 00 11 	mcall	80002f30 <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002ef0:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002ef4:	f0 ca d1 20 	sub	r10,r8,-12000
80002ef8:	cb 8b       	rjmp	80002e68 <dip204_init+0x154>
  // Wait for command execution
  delay_ms(1);
  dip204_wait_busy();
80002efa:	f0 1f 00 0f 	mcall	80002f34 <dip204_init+0x220>
  // unselect chip
  dip204_unselect();
80002efe:	f0 1f 00 0f 	mcall	80002f38 <dip204_init+0x224>
}
80002f02:	2f cd       	sub	sp,-16
80002f04:	e3 cd 80 80 	ldm	sp++,r7,pc
80002f08:	00 00       	add	r0,r0
80002f0a:	00 0c       	add	r12,r0
80002f0c:	80 00       	ld.sh	r0,r0[0x0]
80002f0e:	2f 3c       	sub	r12,-13
80002f10:	80 00       	ld.sh	r0,r0[0x0]
80002f12:	31 88       	mov	r8,24
80002f14:	00 00       	add	r0,r0
80002f16:	05 38       	ld.ub	r8,r2++
80002f18:	00 00       	add	r0,r0
80002f1a:	05 18       	ld.sh	r8,r2++
80002f1c:	80 00       	ld.sh	r0,r0[0x0]
80002f1e:	31 40       	mov	r0,20
80002f20:	80 00       	ld.sh	r0,r0[0x0]
80002f22:	31 76       	mov	r6,23
80002f24:	80 00       	ld.sh	r0,r0[0x0]
80002f26:	2f dc       	sub	r12,-3
80002f28:	80 00       	ld.sh	r0,r0[0x0]
80002f2a:	2f c0       	sub	r0,-4
80002f2c:	80 00       	ld.sh	r0,r0[0x0]
80002f2e:	2a a4       	sub	r4,-86
80002f30:	80 00       	ld.sh	r0,r0[0x0]
80002f32:	2a b8       	sub	r8,-85
80002f34:	80 00       	ld.sh	r0,r0[0x0]
80002f36:	2b 4c       	sub	r12,-76
80002f38:	80 00       	ld.sh	r0,r0[0x0]
80002f3a:	2b 80       	sub	r0,-72

80002f3c <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002f3c:	f8 08 16 05 	lsr	r8,r12,0x5
80002f40:	a9 68       	lsl	r8,0x8
80002f42:	e0 28 f0 00 	sub	r8,61440

	/* Enable the correct function. */
	switch (function) {
80002f46:	58 1b       	cp.w	r11,1
80002f48:	c0 d0       	breq	80002f62 <gpio_enable_module_pin+0x26>
80002f4a:	c0 63       	brcs	80002f56 <gpio_enable_module_pin+0x1a>
80002f4c:	58 2b       	cp.w	r11,2
80002f4e:	c1 00       	breq	80002f6e <gpio_enable_module_pin+0x32>
80002f50:	58 3b       	cp.w	r11,3
80002f52:	c1 40       	breq	80002f7a <gpio_enable_module_pin+0x3e>
80002f54:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002f56:	30 19       	mov	r9,1
80002f58:	f2 0c 09 49 	lsl	r9,r9,r12
80002f5c:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002f5e:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80002f60:	c1 28       	rjmp	80002f84 <gpio_enable_module_pin+0x48>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002f62:	30 19       	mov	r9,1
80002f64:	f2 0c 09 49 	lsl	r9,r9,r12
80002f68:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002f6a:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80002f6c:	c0 c8       	rjmp	80002f84 <gpio_enable_module_pin+0x48>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002f6e:	30 19       	mov	r9,1
80002f70:	f2 0c 09 49 	lsl	r9,r9,r12
80002f74:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002f76:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80002f78:	c0 68       	rjmp	80002f84 <gpio_enable_module_pin+0x48>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002f7a:	30 19       	mov	r9,1
80002f7c:	f2 0c 09 49 	lsl	r9,r9,r12
80002f80:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002f82:	91 99       	st.w	r8[0x24],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80002f84:	30 19       	mov	r9,1
80002f86:	f2 0c 09 4c 	lsl	r12,r9,r12
80002f8a:	91 2c       	st.w	r8[0x8],r12
80002f8c:	5e fd       	retal	0
80002f8e:	d7 03       	nop

80002f90 <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
80002f90:	d4 21       	pushm	r4-r7,lr
80002f92:	18 97       	mov	r7,r12
80002f94:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80002f96:	58 0b       	cp.w	r11,0
80002f98:	c0 31       	brne	80002f9e <gpio_enable_module+0xe>
80002f9a:	30 05       	mov	r5,0
80002f9c:	c0 d8       	rjmp	80002fb6 <gpio_enable_module+0x26>
80002f9e:	30 06       	mov	r6,0
80002fa0:	0c 95       	mov	r5,r6
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
80002fa2:	6e 1b       	ld.w	r11,r7[0x4]
80002fa4:	6e 0c       	ld.w	r12,r7[0x0]
80002fa6:	f0 1f 00 06 	mcall	80002fbc <gpio_enable_module+0x2c>
80002faa:	18 45       	or	r5,r12
		gpiomap++;
80002fac:	2f 87       	sub	r7,-8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80002fae:	2f f6       	sub	r6,-1
80002fb0:	0c 34       	cp.w	r4,r6
80002fb2:	fe 9b ff f8 	brhi	80002fa2 <gpio_enable_module+0x12>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
80002fb6:	0a 9c       	mov	r12,r5
80002fb8:	d8 22       	popm	r4-r7,pc
80002fba:	00 00       	add	r0,r0
80002fbc:	80 00       	ld.sh	r0,r0[0x0]
80002fbe:	2f 3c       	sub	r12,-13

80002fc0 <gpio_set_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_set_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002fc0:	f8 08 16 05 	lsr	r8,r12,0x5
80002fc4:	a9 68       	lsl	r8,0x8
80002fc6:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
80002fca:	30 19       	mov	r9,1
80002fcc:	f2 0c 09 4c 	lsl	r12,r9,r12
80002fd0:	f1 4c 00 54 	st.w	r8[84],r12
	/* The GPIO output driver is enabled for that pin. */ 
	gpio_port->oders = 1 << (pin & 0x1F);
80002fd4:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80002fd8:	91 1c       	st.w	r8[0x4],r12
}
80002fda:	5e fc       	retal	r12

80002fdc <gpio_clr_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_clr_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002fdc:	f8 08 16 05 	lsr	r8,r12,0x5
80002fe0:	a9 68       	lsl	r8,0x8
80002fe2:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
80002fe6:	30 19       	mov	r9,1
80002fe8:	f2 0c 09 4c 	lsl	r12,r9,r12
80002fec:	f1 4c 00 58 	st.w	r8[88],r12
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
80002ff0:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80002ff4:	91 1c       	st.w	r8[0x4],r12
}
80002ff6:	5e fc       	retal	r12

80002ff8 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80002ff8:	c0 08       	rjmp	80002ff8 <_unhandled_interrupt>
80002ffa:	d7 03       	nop

80002ffc <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
80002ffc:	d4 21       	pushm	r4-r7,lr
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80002ffe:	49 18       	lddpc	r8,80003040 <INTC_init_interrupts+0x44>
80003000:	e3 b8 00 01 	mtsr	0x4,r8
80003004:	49 0e       	lddpc	lr,80003044 <INTC_init_interrupts+0x48>
80003006:	30 07       	mov	r7,0
80003008:	0e 94       	mov	r4,r7
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
8000300a:	49 0c       	lddpc	r12,80003048 <INTC_init_interrupts+0x4c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
8000300c:	49 05       	lddpc	r5,8000304c <INTC_init_interrupts+0x50>
8000300e:	10 15       	sub	r5,r8
80003010:	fe 76 08 00 	mov	r6,-63488
80003014:	c1 08       	rjmp	80003034 <INTC_init_interrupts+0x38>
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80003016:	08 98       	mov	r8,r4
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
80003018:	7c 1b       	ld.w	r11,lr[0x4]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
8000301a:	7c 0a       	ld.w	r10,lr[0x0]
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
8000301c:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80003020:	2f f8       	sub	r8,-1

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80003022:	10 3a       	cp.w	r10,r8
80003024:	fe 9b ff fc 	brhi	8000301c <INTC_init_interrupts+0x20>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80003028:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
8000302c:	2f f7       	sub	r7,-1
8000302e:	2f 8e       	sub	lr,-8
80003030:	59 47       	cp.w	r7,20
80003032:	c0 50       	breq	8000303c <INTC_init_interrupts+0x40>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80003034:	7c 08       	ld.w	r8,lr[0x0]
80003036:	58 08       	cp.w	r8,0
80003038:	ce f1       	brne	80003016 <INTC_init_interrupts+0x1a>
8000303a:	cf 7b       	rjmp	80003028 <INTC_init_interrupts+0x2c>
8000303c:	d8 22       	popm	r4-r7,pc
8000303e:	00 00       	add	r0,r0
80003040:	80 00       	ld.sh	r0,r0[0x0]
80003042:	8e 00       	ld.sh	r0,r7[0x0]
80003044:	80 00       	ld.sh	r0,r0[0x0]
80003046:	91 1c       	st.w	r8[0x4],r12
80003048:	80 00       	ld.sh	r0,r0[0x0]
8000304a:	2f f8       	sub	r8,-1
8000304c:	80 00       	ld.sh	r0,r0[0x0]
8000304e:	8f 04       	st.w	r7[0x0],r4

80003050 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80003050:	fe 78 08 00 	mov	r8,-63488
80003054:	e0 69 00 83 	mov	r9,131
80003058:	f2 0c 01 0c 	sub	r12,r9,r12
8000305c:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80003060:	f2 ca ff c0 	sub	r10,r9,-64
80003064:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80003068:	58 08       	cp.w	r8,0
8000306a:	c0 21       	brne	8000306e <_get_interrupt_handler+0x1e>
8000306c:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
8000306e:	f0 08 12 00 	clz	r8,r8
80003072:	48 5a       	lddpc	r10,80003084 <_get_interrupt_handler+0x34>
80003074:	f4 09 00 39 	add	r9,r10,r9<<0x3
80003078:	f0 08 11 1f 	rsub	r8,r8,31
8000307c:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
8000307e:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
80003082:	5e fc       	retal	r12
80003084:	80 00       	ld.sh	r0,r0[0x0]
80003086:	91 1c       	st.w	r8[0x4],r12

80003088 <pm_set_osc0_mode>:
 * \param mode Oscillator 0 mode (i.e. AVR32_PM_OSCCTRL0_MODE_x).
 */
static void pm_set_osc0_mode(volatile avr32_pm_t *pm, unsigned int mode)
{
  // Read
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
80003088:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.mode = mode;
8000308a:	f1 db d0 03 	bfins	r8,r11,0x0,0x3
  // Write
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
8000308e:	99 a8       	st.w	r12[0x28],r8
}
80003090:	5e fc       	retal	r12
80003092:	d7 03       	nop

80003094 <pm_enable_osc0_crystal>:
  pm_set_osc0_mode(pm, AVR32_PM_OSCCTRL0_MODE_EXT_CLOCK);
}


void pm_enable_osc0_crystal(volatile avr32_pm_t *pm, unsigned int fosc0)
{
80003094:	d4 01       	pushm	lr
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
80003096:	ec 5b bb 9f 	cp.w	r11,899999
8000309a:	e0 8b 00 04 	brhi	800030a2 <pm_enable_osc0_crystal+0xe>
8000309e:	30 4b       	mov	r11,4
800030a0:	c1 38       	rjmp	800030c6 <pm_enable_osc0_crystal+0x32>
800030a2:	e0 68 c6 bf 	mov	r8,50879
800030a6:	ea 18 00 2d 	orh	r8,0x2d
800030aa:	10 3b       	cp.w	r11,r8
800030ac:	e0 8b 00 04 	brhi	800030b4 <pm_enable_osc0_crystal+0x20>
800030b0:	30 5b       	mov	r11,5
800030b2:	c0 a8       	rjmp	800030c6 <pm_enable_osc0_crystal+0x32>
800030b4:	e0 68 12 00 	mov	r8,4608
800030b8:	ea 18 00 7a 	orh	r8,0x7a
800030bc:	10 3b       	cp.w	r11,r8
800030be:	f9 bb 03 06 	movlo	r11,6
800030c2:	f9 bb 02 07 	movhs	r11,7
800030c6:	f0 1f 00 02 	mcall	800030cc <pm_enable_osc0_crystal+0x38>
                       (fosc0 < 3000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G1 :
                       (fosc0 < 8000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G2 :
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}
800030ca:	d8 02       	popm	pc
800030cc:	80 00       	ld.sh	r0,r0[0x0]
800030ce:	30 88       	mov	r8,8

800030d0 <pm_enable_clk0_no_wait>:


void pm_enable_clk0_no_wait(volatile avr32_pm_t *pm, unsigned int startup)
{
  // Read register
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
800030d0:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.startup = startup;
800030d2:	f1 db d1 03 	bfins	r8,r11,0x8,0x3
  // Write back
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
800030d6:	99 a8       	st.w	r12[0x28],r8

  pm->mcctrl |= AVR32_PM_MCCTRL_OSC0EN_MASK;
800030d8:	78 08       	ld.w	r8,r12[0x0]
800030da:	a3 a8       	sbr	r8,0x2
800030dc:	99 08       	st.w	r12[0x0],r8
}
800030de:	5e fc       	retal	r12

800030e0 <pm_wait_for_clk0_ready>:


void pm_wait_for_clk0_ready(volatile avr32_pm_t *pm)
{
  while (!(pm->poscsr & AVR32_PM_POSCSR_OSC0RDY_MASK));
800030e0:	79 58       	ld.w	r8,r12[0x54]
800030e2:	e2 18 00 80 	andl	r8,0x80,COH
800030e6:	cf d0       	breq	800030e0 <pm_wait_for_clk0_ready>
}
800030e8:	5e fc       	retal	r12
800030ea:	d7 03       	nop

800030ec <pm_enable_clk0>:
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}


void pm_enable_clk0(volatile avr32_pm_t *pm, unsigned int startup)
{
800030ec:	eb cd 40 80 	pushm	r7,lr
800030f0:	18 97       	mov	r7,r12
  pm_enable_clk0_no_wait(pm, startup);
800030f2:	f0 1f 00 04 	mcall	80003100 <pm_enable_clk0+0x14>
  pm_wait_for_clk0_ready(pm);
800030f6:	0e 9c       	mov	r12,r7
800030f8:	f0 1f 00 03 	mcall	80003104 <pm_enable_clk0+0x18>
}
800030fc:	e3 cd 80 80 	ldm	sp++,r7,pc
80003100:	80 00       	ld.sh	r0,r0[0x0]
80003102:	30 d0       	mov	r0,13
80003104:	80 00       	ld.sh	r0,r0[0x0]
80003106:	30 e0       	mov	r0,14

80003108 <pm_switch_to_clock>:


void pm_switch_to_clock(volatile avr32_pm_t *pm, unsigned long clock)
{
  // Read
  u_avr32_pm_mcctrl_t u_avr32_pm_mcctrl = {pm->mcctrl};
80003108:	78 08       	ld.w	r8,r12[0x0]
  // Modify
  u_avr32_pm_mcctrl.MCCTRL.mcsel = clock;
8000310a:	f1 db d0 02 	bfins	r8,r11,0x0,0x2
  // Write back
  pm->mcctrl = u_avr32_pm_mcctrl.mcctrl;
8000310e:	99 08       	st.w	r12[0x0],r8
}
80003110:	5e fc       	retal	r12
80003112:	d7 03       	nop

80003114 <pm_switch_to_osc0>:


void pm_switch_to_osc0(volatile avr32_pm_t *pm, unsigned int fosc0, unsigned int startup)
{
80003114:	eb cd 40 c0 	pushm	r6-r7,lr
80003118:	18 97       	mov	r7,r12
8000311a:	14 96       	mov	r6,r10
  pm_enable_osc0_crystal(pm, fosc0);            // Enable the Osc0 in crystal mode
8000311c:	f0 1f 00 06 	mcall	80003134 <pm_switch_to_osc0+0x20>
  pm_enable_clk0(pm, startup);                  // Crystal startup time - This parameter is critical and depends on the characteristics of the crystal
80003120:	0c 9b       	mov	r11,r6
80003122:	0e 9c       	mov	r12,r7
80003124:	f0 1f 00 05 	mcall	80003138 <pm_switch_to_osc0+0x24>
  pm_switch_to_clock(pm, AVR32_PM_MCSEL_OSC0);  // Then switch main clock to Osc0
80003128:	30 1b       	mov	r11,1
8000312a:	0e 9c       	mov	r12,r7
8000312c:	f0 1f 00 04 	mcall	8000313c <pm_switch_to_osc0+0x28>
}
80003130:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003134:	80 00       	ld.sh	r0,r0[0x0]
80003136:	30 94       	mov	r4,9
80003138:	80 00       	ld.sh	r0,r0[0x0]
8000313a:	30 ec       	mov	r12,14
8000313c:	80 00       	ld.sh	r0,r0[0x0]
8000313e:	31 08       	mov	r8,16

80003140 <pwm_channel_init>:

int pwm_channel_init( unsigned int channel_id, const avr32_pwm_channel_t *pwm_channel)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;

  if (pwm_channel == 0) // Null pointer.
80003140:	58 0b       	cp.w	r11,0
80003142:	c1 90       	breq	80003174 <pwm_channel_init+0x34>
    return PWM_INVALID_ARGUMENT;
  if (channel_id > AVR32_PWM_LINES_MSB) // Control input values.
80003144:	58 6c       	cp.w	r12,6
80003146:	e0 8b 00 17 	brhi	80003174 <pwm_channel_init+0x34>
    return PWM_INVALID_INPUT;

  pwm->channel[channel_id].cmr= pwm_channel->cmr;   // Channel mode.
8000314a:	76 0a       	ld.w	r10,r11[0x0]
8000314c:	fe 78 30 00 	mov	r8,-53248
80003150:	f8 c9 ff f0 	sub	r9,r12,-16
80003154:	a5 79       	lsl	r9,0x5
80003156:	f0 09 00 09 	add	r9,r8,r9
8000315a:	93 0a       	st.w	r9[0x0],r10
  pwm->channel[channel_id].cdty= pwm_channel->cdty; // Duty cycle, should be < CPRD.
8000315c:	76 19       	ld.w	r9,r11[0x4]
8000315e:	a5 7c       	lsl	r12,0x5
80003160:	f0 0c 00 0c 	add	r12,r8,r12
80003164:	f8 c8 fd fc 	sub	r8,r12,-516
80003168:	91 09       	st.w	r8[0x0],r9
  pwm->channel[channel_id].cprd= pwm_channel->cprd; // Channel period.
8000316a:	76 28       	ld.w	r8,r11[0x8]
8000316c:	f8 cc fd f8 	sub	r12,r12,-520
80003170:	99 08       	st.w	r12[0x0],r8
80003172:	5e fd       	retal	0

  return PWM_SUCCESS;
80003174:	5e ff       	retal	1

80003176 <pwm_start_channels>:
}


int pwm_start_channels(unsigned long channels_bitmask)
{
  if (channels_bitmask & ~((1 << (AVR32_PWM_LINES_MSB + 1)) - 1))
80003176:	18 98       	mov	r8,r12
80003178:	e0 18 ff 80 	andl	r8,0xff80
8000317c:	c0 20       	breq	80003180 <pwm_start_channels+0xa>
8000317e:	5e ff       	retal	1
    return PWM_INVALID_INPUT;

  AVR32_PWM.ena = channels_bitmask; // Enable channels.
80003180:	fe 78 30 00 	mov	r8,-53248
80003184:	91 1c       	st.w	r8[0x4],r12
80003186:	5e fd       	retal	0

80003188 <pwm_init>:


int pwm_init(const pwm_opt_t *opt)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
80003188:	e1 b8 00 00 	mfsr	r8,0x0

  if (opt == 0 ) // Null pointer.
8000318c:	58 0c       	cp.w	r12,0
8000318e:	c0 21       	brne	80003192 <pwm_init+0xa>
80003190:	5e ff       	retal	1
    return PWM_INVALID_INPUT;

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
80003192:	e6 18 00 01 	andh	r8,0x1,COH
80003196:	c0 91       	brne	800031a8 <pwm_init+0x20>
80003198:	d3 03       	ssrf	0x10
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
8000319a:	fe 78 30 00 	mov	r8,-53248
8000319e:	37 f9       	mov	r9,127
800031a0:	91 59       	st.w	r8[0x14],r9
  pwm->isr;
800031a2:	70 78       	ld.w	r8,r8[0x1c]
  if (global_interrupt_enabled) Enable_global_interrupt();
800031a4:	d5 03       	csrf	0x10
800031a6:	c0 68       	rjmp	800031b2 <pwm_init+0x2a>
  if (opt == 0 ) // Null pointer.
    return PWM_INVALID_INPUT;

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
800031a8:	fe 78 30 00 	mov	r8,-53248
800031ac:	37 f9       	mov	r9,127
800031ae:	91 59       	st.w	r8[0x14],r9
  pwm->isr;
800031b0:	70 78       	ld.w	r8,r8[0x1c]
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
    ((opt->diva)<<AVR32_PWM_DIVA_OFFSET) |
800031b2:	78 08       	ld.w	r8,r12[0x0]
800031b4:	78 39       	ld.w	r9,r12[0xc]
800031b6:	a9 69       	lsl	r9,0x8
800031b8:	f3 e8 11 09 	or	r9,r9,r8<<0x10
800031bc:	78 18       	ld.w	r8,r12[0x4]
800031be:	10 49       	or	r9,r8
800031c0:	78 28       	ld.w	r8,r12[0x8]
800031c2:	f3 e8 11 89 	or	r9,r9,r8<<0x18
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
  pwm->isr;
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
800031c6:	fe 78 30 00 	mov	r8,-53248
800031ca:	91 09       	st.w	r8[0x0],r9
800031cc:	5e fd       	retal	0

800031ce <getBaudDiv>:
xSemaphoreHandle xSPIMutex;
#endif

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);
800031ce:	f8 c8 00 01 	sub	r8,r12,1
800031d2:	f0 0b 00 0b 	add	r11,r8,r11
800031d6:	f6 0c 0d 0a 	divu	r10,r11,r12
800031da:	14 9c       	mov	r12,r10

	if (baudDiv <= 0 || baudDiv > 255) {
800031dc:	f4 c8 00 01 	sub	r8,r10,1
800031e0:	e0 48 00 fe 	cp.w	r8,254
800031e4:	e0 88 00 03 	brls	800031ea <getBaudDiv+0x1c>
800031e8:	5e fe       	retal	-1
		return -1;
	}

	return baudDiv;
800031ea:	5c 8c       	casts.h	r12
}
800031ec:	5e fc       	retal	r12

800031ee <spi_initMaster>:
spi_status_t spi_initMaster(volatile avr32_spi_t *spi,
		const spi_options_t *options)
{
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (options->modfdis > 1) {
800031ee:	f7 39 00 0d 	ld.ub	r9,r11[13]
800031f2:	30 18       	mov	r8,1
800031f4:	f0 09 18 00 	cp.b	r9,r8
800031f8:	e0 88 00 04 	brls	80003200 <spi_initMaster+0x12>
800031fc:	30 2c       	mov	r12,2
800031fe:	5e fc       	retal	r12
		return SPI_ERROR_ARGUMENT;
	}

	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
80003200:	e0 68 00 80 	mov	r8,128
80003204:	99 08       	st.w	r12[0x0],r8

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
80003206:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.mstr = 1;
80003208:	30 19       	mov	r9,1
8000320a:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
8000320e:	f7 39 00 0d 	ld.ub	r9,r11[13]
80003212:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
	u_avr32_spi_mr.MR.llb = 0;
80003216:	30 09       	mov	r9,0
80003218:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
	u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
8000321c:	30 fa       	mov	r10,15
8000321e:	f1 da d2 04 	bfins	r8,r10,0x10,0x4
	spi->mr = u_avr32_spi_mr.mr;
80003222:	99 18       	st.w	r12[0x4],r8
80003224:	5e f9       	retal	r9

80003226 <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
		uint8_t variable_ps,
		uint8_t pcs_decode,
		uint8_t delay)
{
80003226:	d4 01       	pushm	lr
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (variable_ps > 1 ||
80003228:	30 18       	mov	r8,1
8000322a:	f0 0b 18 00 	cp.b	r11,r8
8000322e:	5f be       	srhi	lr
80003230:	f0 0a 18 00 	cp.b	r10,r8
80003234:	5f b8       	srhi	r8
80003236:	fd e8 10 08 	or	r8,lr,r8
8000323a:	c0 30       	breq	80003240 <spi_selectionMode+0x1a>
8000323c:	30 2c       	mov	r12,2
8000323e:	d8 02       	popm	pc
			pcs_decode > 1) {
		return SPI_ERROR_ARGUMENT;
	}

	u_avr32_spi_mr.mr = spi->mr;
80003240:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.ps = variable_ps;
80003242:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
	u_avr32_spi_mr.MR.pcsdec = pcs_decode;
80003246:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
	u_avr32_spi_mr.MR.dlybcs = delay;
8000324a:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	spi->mr = u_avr32_spi_mr.mr;
8000324e:	99 18       	st.w	r12[0x4],r8
80003250:	d8 0a       	popm	pc,r12=0

80003252 <spi_selectChip>:
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80003252:	78 18       	ld.w	r8,r12[0x4]
80003254:	ea 18 00 0f 	orh	r8,0xf
80003258:	99 18       	st.w	r12[0x4],r8

	if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
8000325a:	78 18       	ld.w	r8,r12[0x4]
8000325c:	e2 18 00 04 	andl	r8,0x4,COH
80003260:	c0 f0       	breq	8000327e <spi_selectChip+0x2c>
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
80003262:	30 e8       	mov	r8,14
80003264:	f0 0b 18 00 	cp.b	r11,r8
80003268:	e0 8b 00 19 	brhi	8000329a <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
8000326c:	78 18       	ld.w	r8,r12[0x4]
8000326e:	b1 6b       	lsl	r11,0x10
80003270:	ea 1b ff f0 	orh	r11,0xfff0
80003274:	e8 1b ff ff 	orl	r11,0xffff
80003278:	10 6b       	and	r11,r8
8000327a:	99 1b       	st.w	r12[0x4],r11
8000327c:	5e fd       	retal	0
				(chip << AVR32_SPI_MR_PCS_OFFSET);
	} else {
		if (chip > 3) {
8000327e:	30 38       	mov	r8,3
80003280:	f0 0b 18 00 	cp.b	r11,r8
80003284:	e0 8b 00 0b 	brhi	8000329a <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
80003288:	78 18       	ld.w	r8,r12[0x4]
8000328a:	2f 0b       	sub	r11,-16
8000328c:	30 19       	mov	r9,1
8000328e:	f2 0b 09 4b 	lsl	r11,r9,r11
80003292:	5c db       	com	r11
80003294:	10 6b       	and	r11,r8
80003296:	99 1b       	st.w	r12[0x4],r11
80003298:	5e fd       	retal	0
8000329a:	30 2c       	mov	r12,2
	}

	return SPI_OK;
}
8000329c:	5e fc       	retal	r12

8000329e <spi_unselectChip>:

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
8000329e:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
800032a2:	c0 58       	rjmp	800032ac <spi_unselectChip+0xe>
		if (!timeout--) {
800032a4:	58 08       	cp.w	r8,0
800032a6:	c0 21       	brne	800032aa <spi_unselectChip+0xc>
800032a8:	5e ff       	retal	1
800032aa:	20 18       	sub	r8,1

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
800032ac:	78 49       	ld.w	r9,r12[0x10]
800032ae:	e2 19 02 00 	andl	r9,0x200,COH
800032b2:	cf 90       	breq	800032a4 <spi_unselectChip+0x6>
			return SPI_ERROR_TIMEOUT;
		}
	}

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
800032b4:	78 18       	ld.w	r8,r12[0x4]
800032b6:	ea 18 00 0f 	orh	r8,0xf
800032ba:	99 18       	st.w	r12[0x4],r8

	/* Last transfer, so de-assert the current NPCS if CSAAT is set. */
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
800032bc:	fc 18 01 00 	movh	r8,0x100
800032c0:	99 08       	st.w	r12[0x0],r8
800032c2:	5e fd       	retal	0

800032c4 <spi_setupChipReg>:
}

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
800032c4:	eb cd 40 f8 	pushm	r3-r7,lr
800032c8:	18 95       	mov	r5,r12
800032ca:	16 97       	mov	r7,r11
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800032cc:	f7 36 00 0c 	ld.ub	r6,r11[12]
800032d0:	30 38       	mov	r8,3
800032d2:	f0 06 18 00 	cp.b	r6,r8
800032d6:	e0 8b 00 4d 	brhi	80003370 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
800032da:	f7 34 00 0b 	ld.ub	r4,r11[11]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800032de:	30 18       	mov	r8,1
800032e0:	f0 04 18 00 	cp.b	r4,r8
800032e4:	e0 8b 00 46 	brhi	80003370 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
800032e8:	f7 33 00 08 	ld.ub	r3,r11[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800032ec:	30 78       	mov	r8,7
800032ee:	f0 03 18 00 	cp.b	r3,r8
800032f2:	e0 88 00 3f 	brls	80003370 <spi_setupChipReg+0xac>
800032f6:	31 08       	mov	r8,16
800032f8:	f0 03 18 00 	cp.b	r3,r8
800032fc:	e0 8b 00 3a 	brhi	80003370 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
		return SPI_ERROR_ARGUMENT;
	}

	int baudDiv = getBaudDiv(options->baudrate, pb_hz);
80003300:	14 9b       	mov	r11,r10
80003302:	6e 1c       	ld.w	r12,r7[0x4]
80003304:	f0 1f 00 1d 	mcall	80003378 <spi_setupChipReg+0xb4>

	if (baudDiv < 0) {
80003308:	c3 45       	brlt	80003370 <spi_setupChipReg+0xac>
		return SPI_ERROR_ARGUMENT;
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
8000330a:	30 08       	mov	r8,0
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
8000330c:	ec 09 16 01 	lsr	r9,r6,0x1
80003310:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
80003314:	ec 16 00 01 	eorl	r6,0x1
80003318:	f1 d6 d0 21 	bfins	r8,r6,0x1,0x1
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
8000331c:	f1 d4 d0 61 	bfins	r8,r4,0x3,0x1
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
80003320:	20 83       	sub	r3,8
80003322:	f1 d3 d0 84 	bfins	r8,r3,0x4,0x4
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
80003326:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
8000332a:	ef 39 00 09 	ld.ub	r9,r7[9]
8000332e:	f1 d9 d2 08 	bfins	r8,r9,0x10,0x8
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
80003332:	ef 39 00 0a 	ld.ub	r9,r7[10]
80003336:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8

	switch (options->reg) {
8000333a:	0f 89       	ld.ub	r9,r7[0x0]
8000333c:	30 1a       	mov	r10,1
8000333e:	f4 09 18 00 	cp.b	r9,r10
80003342:	c0 e0       	breq	8000335e <spi_setupChipReg+0x9a>
80003344:	c0 a3       	brcs	80003358 <spi_setupChipReg+0x94>
80003346:	30 2a       	mov	r10,2
80003348:	f4 09 18 00 	cp.b	r9,r10
8000334c:	c0 c0       	breq	80003364 <spi_setupChipReg+0xa0>
8000334e:	30 3a       	mov	r10,3
80003350:	f4 09 18 00 	cp.b	r9,r10
80003354:	c0 e1       	brne	80003370 <spi_setupChipReg+0xac>
80003356:	c0 a8       	rjmp	8000336a <spi_setupChipReg+0xa6>
	case 0:
		spi->csr0 = u_avr32_spi_csr.csr;
80003358:	8b c8       	st.w	r5[0x30],r8
8000335a:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 1:
		spi->csr1 = u_avr32_spi_csr.csr;
8000335e:	8b d8       	st.w	r5[0x34],r8
80003360:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
80003364:	8b e8       	st.w	r5[0x38],r8
80003366:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
8000336a:	8b f8       	st.w	r5[0x3c],r8
8000336c:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;
80003370:	30 2c       	mov	r12,2
		}
	}
#endif

	return SPI_OK;
}
80003372:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80003376:	00 00       	add	r0,r0
80003378:	80 00       	ld.sh	r0,r0[0x0]
8000337a:	31 ce       	mov	lr,28

8000337c <spi_enable>:

void spi_enable(volatile avr32_spi_t *spi)
{
	spi->cr = AVR32_SPI_CR_SPIEN_MASK;
8000337c:	30 18       	mov	r8,1
8000337e:	99 08       	st.w	r12[0x0],r8
}
80003380:	5e fc       	retal	r12

80003382 <spi_write>:
{
	return ((spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0);
}

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
80003382:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80003386:	c0 58       	rjmp	80003390 <spi_write+0xe>
		if (!timeout--) {
80003388:	58 08       	cp.w	r8,0
8000338a:	c0 21       	brne	8000338e <spi_write+0xc>
8000338c:	5e ff       	retal	1
8000338e:	20 18       	sub	r8,1

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80003390:	78 49       	ld.w	r9,r12[0x10]
80003392:	e2 19 00 02 	andl	r9,0x2,COH
80003396:	cf 90       	breq	80003388 <spi_write+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80003398:	5c 7b       	castu.h	r11
8000339a:	99 3b       	st.w	r12[0xc],r11
8000339c:	5e fd       	retal	0

8000339e <spi_readRegisterFullCheck>:
	return ((spi->sr & AVR32_SPI_SR_TXEMPTY_MASK) != 0);
}

uint8_t spi_readRegisterFullCheck(volatile avr32_spi_t *spi)
{
	return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
8000339e:	78 4c       	ld.w	r12,r12[0x10]
}
800033a0:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
800033a4:	5e fc       	retal	r12

800033a6 <spi_read>:

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
800033a6:	e0 68 3a 98 	mov	r8,15000
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
800033aa:	c0 58       	rjmp	800033b4 <spi_read+0xe>
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
		if (!timeout--) {
800033ac:	58 08       	cp.w	r8,0
800033ae:	c0 21       	brne	800033b2 <spi_read+0xc>
800033b0:	5e ff       	retal	1
800033b2:	20 18       	sub	r8,1

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
800033b4:	78 49       	ld.w	r9,r12[0x10]
800033b6:	e2 19 02 01 	andl	r9,0x201,COH
800033ba:	e0 49 02 01 	cp.w	r9,513
800033be:	cf 71       	brne	800033ac <spi_read+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	*data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
800033c0:	78 28       	ld.w	r8,r12[0x8]
800033c2:	b6 08       	st.h	r11[0x0],r8
800033c4:	5e fd       	retal	0
800033c6:	d7 03       	nop

800033c8 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
800033c8:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
800033cc:	fe c0 a5 cc 	sub	r0,pc,-23092

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
800033d0:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
800033d4:	d5 53       	csrf	0x15
  cp      r0, r1
800033d6:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
800033d8:	e0 61 05 18 	mov	r1,1304
  lda.w   r2, _data_lma
idata_load_loop:
  ld.d    r4, r2++
800033dc:	02 30       	cp.w	r0,r1
  st.d    r0++, r4
800033de:	c0 72       	brcc	800033ec <idata_load_loop_end>
  cp      r0, r1
800033e0:	fe c2 9c 98 	sub	r2,pc,-25448

800033e4 <idata_load_loop>:
  brlo    idata_load_loop
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
800033e4:	a5 05       	ld.d	r4,r2++
  lda.w   r1, _end
800033e6:	a1 24       	st.d	r0++,r4
  cp      r0, r1
800033e8:	02 30       	cp.w	r0,r1
  brhs    udata_clear_loop_end
800033ea:	cf d3       	brcs	800033e4 <idata_load_loop>

800033ec <idata_load_loop_end>:
  mov     r2, 0
800033ec:	e0 60 05 18 	mov	r0,1304
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
800033f0:	e0 61 06 78 	mov	r1,1656
  cp      r0, r1
  brlo    udata_clear_loop
800033f4:	02 30       	cp.w	r0,r1
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
800033f6:	c0 62       	brcc	80003402 <udata_clear_loop_end>
800033f8:	30 02       	mov	r2,0
800033fa:	30 03       	mov	r3,0

800033fc <udata_clear_loop>:
800033fc:	a1 22       	st.d	r0++,r2
800033fe:	02 30       	cp.w	r0,r1
80003400:	cf e3       	brcs	800033fc <udata_clear_loop>

80003402 <udata_clear_loop_end>:
80003402:	fe cf 0b 5e 	sub	pc,pc,2910
80003406:	d7 03       	nop

80003408 <memcpy>:
80003408:	58 8a       	cp.w	r10,8
8000340a:	c2 f5       	brlt	80003468 <memcpy+0x60>
8000340c:	f9 eb 10 09 	or	r9,r12,r11
80003410:	e2 19 00 03 	andl	r9,0x3,COH
80003414:	e0 81 00 97 	brne	80003542 <memcpy+0x13a>
80003418:	e0 4a 00 20 	cp.w	r10,32
8000341c:	c3 b4       	brge	80003492 <memcpy+0x8a>
8000341e:	f4 08 14 02 	asr	r8,r10,0x2
80003422:	f0 09 11 08 	rsub	r9,r8,8
80003426:	fe 09 00 2f 	add	pc,pc,r9<<0x2
8000342a:	76 69       	ld.w	r9,r11[0x18]
8000342c:	99 69       	st.w	r12[0x18],r9
8000342e:	76 59       	ld.w	r9,r11[0x14]
80003430:	99 59       	st.w	r12[0x14],r9
80003432:	76 49       	ld.w	r9,r11[0x10]
80003434:	99 49       	st.w	r12[0x10],r9
80003436:	76 39       	ld.w	r9,r11[0xc]
80003438:	99 39       	st.w	r12[0xc],r9
8000343a:	76 29       	ld.w	r9,r11[0x8]
8000343c:	99 29       	st.w	r12[0x8],r9
8000343e:	76 19       	ld.w	r9,r11[0x4]
80003440:	99 19       	st.w	r12[0x4],r9
80003442:	76 09       	ld.w	r9,r11[0x0]
80003444:	99 09       	st.w	r12[0x0],r9
80003446:	f6 08 00 2b 	add	r11,r11,r8<<0x2
8000344a:	f8 08 00 28 	add	r8,r12,r8<<0x2
8000344e:	e0 1a 00 03 	andl	r10,0x3
80003452:	f4 0a 11 04 	rsub	r10,r10,4
80003456:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000345a:	17 a9       	ld.ub	r9,r11[0x2]
8000345c:	b0 a9       	st.b	r8[0x2],r9
8000345e:	17 99       	ld.ub	r9,r11[0x1]
80003460:	b0 99       	st.b	r8[0x1],r9
80003462:	17 89       	ld.ub	r9,r11[0x0]
80003464:	b0 89       	st.b	r8[0x0],r9
80003466:	5e fc       	retal	r12
80003468:	f4 0a 11 09 	rsub	r10,r10,9
8000346c:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80003470:	17 f9       	ld.ub	r9,r11[0x7]
80003472:	b8 f9       	st.b	r12[0x7],r9
80003474:	17 e9       	ld.ub	r9,r11[0x6]
80003476:	b8 e9       	st.b	r12[0x6],r9
80003478:	17 d9       	ld.ub	r9,r11[0x5]
8000347a:	b8 d9       	st.b	r12[0x5],r9
8000347c:	17 c9       	ld.ub	r9,r11[0x4]
8000347e:	b8 c9       	st.b	r12[0x4],r9
80003480:	17 b9       	ld.ub	r9,r11[0x3]
80003482:	b8 b9       	st.b	r12[0x3],r9
80003484:	17 a9       	ld.ub	r9,r11[0x2]
80003486:	b8 a9       	st.b	r12[0x2],r9
80003488:	17 99       	ld.ub	r9,r11[0x1]
8000348a:	b8 99       	st.b	r12[0x1],r9
8000348c:	17 89       	ld.ub	r9,r11[0x0]
8000348e:	b8 89       	st.b	r12[0x0],r9
80003490:	5e fc       	retal	r12
80003492:	eb cd 40 c0 	pushm	r6-r7,lr
80003496:	18 99       	mov	r9,r12
80003498:	22 0a       	sub	r10,32
8000349a:	b7 07       	ld.d	r6,r11++
8000349c:	b3 26       	st.d	r9++,r6
8000349e:	b7 07       	ld.d	r6,r11++
800034a0:	b3 26       	st.d	r9++,r6
800034a2:	b7 07       	ld.d	r6,r11++
800034a4:	b3 26       	st.d	r9++,r6
800034a6:	b7 07       	ld.d	r6,r11++
800034a8:	b3 26       	st.d	r9++,r6
800034aa:	22 0a       	sub	r10,32
800034ac:	cf 74       	brge	8000349a <memcpy+0x92>
800034ae:	2f 0a       	sub	r10,-16
800034b0:	c0 65       	brlt	800034bc <memcpy+0xb4>
800034b2:	b7 07       	ld.d	r6,r11++
800034b4:	b3 26       	st.d	r9++,r6
800034b6:	b7 07       	ld.d	r6,r11++
800034b8:	b3 26       	st.d	r9++,r6
800034ba:	21 0a       	sub	r10,16
800034bc:	5c 3a       	neg	r10
800034be:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
800034c2:	d7 03       	nop
800034c4:	d7 03       	nop
800034c6:	f7 36 00 0e 	ld.ub	r6,r11[14]
800034ca:	f3 66 00 0e 	st.b	r9[14],r6
800034ce:	f7 36 00 0d 	ld.ub	r6,r11[13]
800034d2:	f3 66 00 0d 	st.b	r9[13],r6
800034d6:	f7 36 00 0c 	ld.ub	r6,r11[12]
800034da:	f3 66 00 0c 	st.b	r9[12],r6
800034de:	f7 36 00 0b 	ld.ub	r6,r11[11]
800034e2:	f3 66 00 0b 	st.b	r9[11],r6
800034e6:	f7 36 00 0a 	ld.ub	r6,r11[10]
800034ea:	f3 66 00 0a 	st.b	r9[10],r6
800034ee:	f7 36 00 09 	ld.ub	r6,r11[9]
800034f2:	f3 66 00 09 	st.b	r9[9],r6
800034f6:	f7 36 00 08 	ld.ub	r6,r11[8]
800034fa:	f3 66 00 08 	st.b	r9[8],r6
800034fe:	f7 36 00 07 	ld.ub	r6,r11[7]
80003502:	f3 66 00 07 	st.b	r9[7],r6
80003506:	f7 36 00 06 	ld.ub	r6,r11[6]
8000350a:	f3 66 00 06 	st.b	r9[6],r6
8000350e:	f7 36 00 05 	ld.ub	r6,r11[5]
80003512:	f3 66 00 05 	st.b	r9[5],r6
80003516:	f7 36 00 04 	ld.ub	r6,r11[4]
8000351a:	f3 66 00 04 	st.b	r9[4],r6
8000351e:	f7 36 00 03 	ld.ub	r6,r11[3]
80003522:	f3 66 00 03 	st.b	r9[3],r6
80003526:	f7 36 00 02 	ld.ub	r6,r11[2]
8000352a:	f3 66 00 02 	st.b	r9[2],r6
8000352e:	f7 36 00 01 	ld.ub	r6,r11[1]
80003532:	f3 66 00 01 	st.b	r9[1],r6
80003536:	f7 36 00 00 	ld.ub	r6,r11[0]
8000353a:	f3 66 00 00 	st.b	r9[0],r6
8000353e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003542:	20 1a       	sub	r10,1
80003544:	f6 0a 07 09 	ld.ub	r9,r11[r10]
80003548:	f8 0a 0b 09 	st.b	r12[r10],r9
8000354c:	cf b1       	brne	80003542 <memcpy+0x13a>
8000354e:	5e fc       	retal	r12

80003550 <_vsprintf_r>:
80003550:	d4 01       	pushm	lr
80003552:	21 7d       	sub	sp,92
80003554:	e0 68 ff ff 	mov	r8,65535
80003558:	ea 18 7f ff 	orh	r8,0x7fff
8000355c:	50 58       	stdsp	sp[0x14],r8
8000355e:	50 28       	stdsp	sp[0x8],r8
80003560:	e0 68 02 08 	mov	r8,520
80003564:	ba 68       	st.h	sp[0xc],r8
80003566:	3f f8       	mov	r8,-1
80003568:	50 4b       	stdsp	sp[0x10],r11
8000356a:	50 0b       	stdsp	sp[0x0],r11
8000356c:	ba 78       	st.h	sp[0xe],r8
8000356e:	1a 9b       	mov	r11,sp
80003570:	ca 8d       	rcall	800038c0 <_vfprintf_r>
80003572:	30 09       	mov	r9,0
80003574:	40 08       	lddsp	r8,sp[0x0]
80003576:	b0 89       	st.b	r8[0x0],r9
80003578:	2e 9d       	sub	sp,-92
8000357a:	d8 02       	popm	pc

8000357c <vsprintf>:
8000357c:	d4 01       	pushm	lr
8000357e:	e0 68 01 00 	mov	r8,256
80003582:	14 99       	mov	r9,r10
80003584:	16 9a       	mov	r10,r11
80003586:	18 9b       	mov	r11,r12
80003588:	70 0c       	ld.w	r12,r8[0x0]
8000358a:	ce 3f       	rcall	80003550 <_vsprintf_r>
8000358c:	d8 02       	popm	pc
8000358e:	d7 03       	nop

80003590 <get_arg>:
80003590:	d4 31       	pushm	r0-r7,lr
80003592:	20 8d       	sub	sp,32
80003594:	fa c4 ff bc 	sub	r4,sp,-68
80003598:	50 4b       	stdsp	sp[0x10],r11
8000359a:	68 2e       	ld.w	lr,r4[0x8]
8000359c:	50 58       	stdsp	sp[0x14],r8
8000359e:	12 96       	mov	r6,r9
800035a0:	7c 0b       	ld.w	r11,lr[0x0]
800035a2:	70 05       	ld.w	r5,r8[0x0]
800035a4:	50 6e       	stdsp	sp[0x18],lr
800035a6:	58 0b       	cp.w	r11,0
800035a8:	f4 0b 17 00 	moveq	r11,r10
800035ac:	68 03       	ld.w	r3,r4[0x0]
800035ae:	68 11       	ld.w	r1,r4[0x4]
800035b0:	40 49       	lddsp	r9,sp[0x10]
800035b2:	30 08       	mov	r8,0
800035b4:	c2 89       	rjmp	80003804 <get_arg+0x274>
800035b6:	2f fb       	sub	r11,-1
800035b8:	32 5c       	mov	r12,37
800035ba:	17 8a       	ld.ub	r10,r11[0x0]
800035bc:	f8 0a 18 00 	cp.b	r10,r12
800035c0:	5f 1e       	srne	lr
800035c2:	f0 0a 18 00 	cp.b	r10,r8
800035c6:	5f 1c       	srne	r12
800035c8:	fd ec 00 0c 	and	r12,lr,r12
800035cc:	f0 0c 18 00 	cp.b	r12,r8
800035d0:	cf 31       	brne	800035b6 <get_arg+0x26>
800035d2:	58 0a       	cp.w	r10,0
800035d4:	e0 80 01 25 	breq	8000381e <get_arg+0x28e>
800035d8:	30 0c       	mov	r12,0
800035da:	3f fa       	mov	r10,-1
800035dc:	18 90       	mov	r0,r12
800035de:	50 3a       	stdsp	sp[0xc],r10
800035e0:	18 94       	mov	r4,r12
800035e2:	18 92       	mov	r2,r12
800035e4:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
800035e8:	16 97       	mov	r7,r11
800035ea:	50 7c       	stdsp	sp[0x1c],r12
800035ec:	fe cc a1 54 	sub	r12,pc,-24236
800035f0:	0f 3a       	ld.ub	r10,r7++
800035f2:	f8 0a 07 0e 	ld.ub	lr,r12[r10]
800035f6:	40 7c       	lddsp	r12,sp[0x1c]
800035f8:	1c 0c       	add	r12,lr
800035fa:	fe ce a2 2a 	sub	lr,pc,-24022
800035fe:	fc 0c 07 0e 	ld.ub	lr,lr[r12]
80003602:	20 1e       	sub	lr,1
80003604:	50 0e       	stdsp	sp[0x0],lr
80003606:	fe ce a2 a2 	sub	lr,pc,-23902
8000360a:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
8000360e:	50 7c       	stdsp	sp[0x1c],r12
80003610:	40 0c       	lddsp	r12,sp[0x0]
80003612:	58 7c       	cp.w	r12,7
80003614:	e0 8b 00 f1 	brhi	800037f6 <get_arg+0x266>
80003618:	fe ce a4 54 	sub	lr,pc,-23468
8000361c:	fc 0c 03 2f 	ld.w	pc,lr[r12<<0x2]
80003620:	36 8b       	mov	r11,104
80003622:	f6 0a 18 00 	cp.b	r10,r11
80003626:	e0 80 00 e8 	breq	800037f6 <get_arg+0x266>
8000362a:	37 1b       	mov	r11,113
8000362c:	f6 0a 18 00 	cp.b	r10,r11
80003630:	c0 70       	breq	8000363e <get_arg+0xae>
80003632:	34 cb       	mov	r11,76
80003634:	f6 0a 18 00 	cp.b	r10,r11
80003638:	c0 51       	brne	80003642 <get_arg+0xb2>
8000363a:	a3 b4       	sbr	r4,0x3
8000363c:	cd d8       	rjmp	800037f6 <get_arg+0x266>
8000363e:	a5 b4       	sbr	r4,0x5
80003640:	cd b8       	rjmp	800037f6 <get_arg+0x266>
80003642:	08 9a       	mov	r10,r4
80003644:	0e 9b       	mov	r11,r7
80003646:	a5 aa       	sbr	r10,0x4
80003648:	17 3c       	ld.ub	r12,r11++
8000364a:	a5 b4       	sbr	r4,0x5
8000364c:	36 ce       	mov	lr,108
8000364e:	fc 0c 18 00 	cp.b	r12,lr
80003652:	e0 80 00 d3 	breq	800037f8 <get_arg+0x268>
80003656:	14 94       	mov	r4,r10
80003658:	cc f8       	rjmp	800037f6 <get_arg+0x266>
8000365a:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
8000365e:	36 7c       	mov	r12,103
80003660:	f8 0a 18 00 	cp.b	r10,r12
80003664:	e0 8b 00 27 	brhi	800036b2 <get_arg+0x122>
80003668:	36 5b       	mov	r11,101
8000366a:	f6 0a 18 00 	cp.b	r10,r11
8000366e:	c4 82       	brcc	800036fe <get_arg+0x16e>
80003670:	34 fb       	mov	r11,79
80003672:	f6 0a 18 00 	cp.b	r10,r11
80003676:	c4 80       	breq	80003706 <get_arg+0x176>
80003678:	e0 8b 00 0c 	brhi	80003690 <get_arg+0x100>
8000367c:	34 5b       	mov	r11,69
8000367e:	f6 0a 18 00 	cp.b	r10,r11
80003682:	c3 e0       	breq	800036fe <get_arg+0x16e>
80003684:	34 7b       	mov	r11,71
80003686:	f6 0a 18 00 	cp.b	r10,r11
8000368a:	c3 a0       	breq	800036fe <get_arg+0x16e>
8000368c:	34 4b       	mov	r11,68
8000368e:	c0 88       	rjmp	8000369e <get_arg+0x10e>
80003690:	35 8b       	mov	r11,88
80003692:	f6 0a 18 00 	cp.b	r10,r11
80003696:	c2 c0       	breq	800036ee <get_arg+0x15e>
80003698:	e0 8b 00 07 	brhi	800036a6 <get_arg+0x116>
8000369c:	35 5b       	mov	r11,85
8000369e:	f6 0a 18 00 	cp.b	r10,r11
800036a2:	c3 51       	brne	8000370c <get_arg+0x17c>
800036a4:	c3 18       	rjmp	80003706 <get_arg+0x176>
800036a6:	36 3b       	mov	r11,99
800036a8:	f6 0a 18 00 	cp.b	r10,r11
800036ac:	c2 f0       	breq	8000370a <get_arg+0x17a>
800036ae:	36 4b       	mov	r11,100
800036b0:	c0 e8       	rjmp	800036cc <get_arg+0x13c>
800036b2:	37 0b       	mov	r11,112
800036b4:	f6 0a 18 00 	cp.b	r10,r11
800036b8:	c2 50       	breq	80003702 <get_arg+0x172>
800036ba:	e0 8b 00 0d 	brhi	800036d4 <get_arg+0x144>
800036be:	36 eb       	mov	r11,110
800036c0:	f6 0a 18 00 	cp.b	r10,r11
800036c4:	c1 f0       	breq	80003702 <get_arg+0x172>
800036c6:	e0 8b 00 14 	brhi	800036ee <get_arg+0x15e>
800036ca:	36 9b       	mov	r11,105
800036cc:	f6 0a 18 00 	cp.b	r10,r11
800036d0:	c1 e1       	brne	8000370c <get_arg+0x17c>
800036d2:	c0 e8       	rjmp	800036ee <get_arg+0x15e>
800036d4:	37 5b       	mov	r11,117
800036d6:	f6 0a 18 00 	cp.b	r10,r11
800036da:	c0 a0       	breq	800036ee <get_arg+0x15e>
800036dc:	37 8b       	mov	r11,120
800036de:	f6 0a 18 00 	cp.b	r10,r11
800036e2:	c0 60       	breq	800036ee <get_arg+0x15e>
800036e4:	37 3b       	mov	r11,115
800036e6:	f6 0a 18 00 	cp.b	r10,r11
800036ea:	c1 11       	brne	8000370c <get_arg+0x17c>
800036ec:	c0 b8       	rjmp	80003702 <get_arg+0x172>
800036ee:	ed b4 00 04 	bld	r4,0x4
800036f2:	c0 a0       	breq	80003706 <get_arg+0x176>
800036f4:	ed b4 00 05 	bld	r4,0x5
800036f8:	c0 91       	brne	8000370a <get_arg+0x17a>
800036fa:	30 20       	mov	r0,2
800036fc:	c0 88       	rjmp	8000370c <get_arg+0x17c>
800036fe:	30 40       	mov	r0,4
80003700:	c0 68       	rjmp	8000370c <get_arg+0x17c>
80003702:	30 30       	mov	r0,3
80003704:	c0 48       	rjmp	8000370c <get_arg+0x17c>
80003706:	30 10       	mov	r0,1
80003708:	c0 28       	rjmp	8000370c <get_arg+0x17c>
8000370a:	30 00       	mov	r0,0
8000370c:	40 3b       	lddsp	r11,sp[0xc]
8000370e:	5b fb       	cp.w	r11,-1
80003710:	c0 40       	breq	80003718 <get_arg+0x188>
80003712:	e2 0b 09 20 	st.w	r1[r11<<0x2],r0
80003716:	c7 08       	rjmp	800037f6 <get_arg+0x266>
80003718:	58 60       	cp.w	r0,6
8000371a:	e0 8b 00 6e 	brhi	800037f6 <get_arg+0x266>
8000371e:	6c 0a       	ld.w	r10,r6[0x0]
80003720:	ea cc ff ff 	sub	r12,r5,-1
80003724:	fe ce a5 40 	sub	lr,pc,-23232
80003728:	fc 00 03 2f 	ld.w	pc,lr[r0<<0x2]
8000372c:	f4 cb ff f8 	sub	r11,r10,-8
80003730:	8d 0b       	st.w	r6[0x0],r11
80003732:	f4 ea 00 00 	ld.d	r10,r10[0]
80003736:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
8000373a:	c0 f8       	rjmp	80003758 <get_arg+0x1c8>
8000373c:	f4 cb ff fc 	sub	r11,r10,-4
80003740:	8d 0b       	st.w	r6[0x0],r11
80003742:	74 0a       	ld.w	r10,r10[0x0]
80003744:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
80003748:	c0 88       	rjmp	80003758 <get_arg+0x1c8>
8000374a:	f4 cb ff f8 	sub	r11,r10,-8
8000374e:	8d 0b       	st.w	r6[0x0],r11
80003750:	f4 ea 00 00 	ld.d	r10,r10[0]
80003754:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
80003758:	0e 9b       	mov	r11,r7
8000375a:	18 95       	mov	r5,r12
8000375c:	c4 e8       	rjmp	800037f8 <get_arg+0x268>
8000375e:	62 0a       	ld.w	r10,r1[0x0]
80003760:	5b fa       	cp.w	r10,-1
80003762:	c0 b1       	brne	80003778 <get_arg+0x1e8>
80003764:	50 19       	stdsp	sp[0x4],r9
80003766:	50 28       	stdsp	sp[0x8],r8
80003768:	e0 6a 00 80 	mov	r10,128
8000376c:	30 0b       	mov	r11,0
8000376e:	02 9c       	mov	r12,r1
80003770:	e0 a0 1d 78 	rcall	80007260 <memset>
80003774:	40 28       	lddsp	r8,sp[0x8]
80003776:	40 19       	lddsp	r9,sp[0x4]
80003778:	e4 cc 00 01 	sub	r12,r2,1
8000377c:	0e 9b       	mov	r11,r7
8000377e:	50 3c       	stdsp	sp[0xc],r12
80003780:	f2 0c 0c 49 	max	r9,r9,r12
80003784:	c3 a8       	rjmp	800037f8 <get_arg+0x268>
80003786:	62 0a       	ld.w	r10,r1[0x0]
80003788:	5b fa       	cp.w	r10,-1
8000378a:	c0 b1       	brne	800037a0 <get_arg+0x210>
8000378c:	50 19       	stdsp	sp[0x4],r9
8000378e:	50 28       	stdsp	sp[0x8],r8
80003790:	e0 6a 00 80 	mov	r10,128
80003794:	30 0b       	mov	r11,0
80003796:	02 9c       	mov	r12,r1
80003798:	e0 a0 1d 64 	rcall	80007260 <memset>
8000379c:	40 28       	lddsp	r8,sp[0x8]
8000379e:	40 19       	lddsp	r9,sp[0x4]
800037a0:	20 12       	sub	r2,1
800037a2:	30 0a       	mov	r10,0
800037a4:	0e 9b       	mov	r11,r7
800037a6:	e2 02 09 2a 	st.w	r1[r2<<0x2],r10
800037aa:	f2 02 0c 49 	max	r9,r9,r2
800037ae:	c2 58       	rjmp	800037f8 <get_arg+0x268>
800037b0:	16 97       	mov	r7,r11
800037b2:	6c 0a       	ld.w	r10,r6[0x0]
800037b4:	f4 cb ff fc 	sub	r11,r10,-4
800037b8:	8d 0b       	st.w	r6[0x0],r11
800037ba:	74 0a       	ld.w	r10,r10[0x0]
800037bc:	0e 9b       	mov	r11,r7
800037be:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
800037c2:	2f f5       	sub	r5,-1
800037c4:	c1 a8       	rjmp	800037f8 <get_arg+0x268>
800037c6:	f4 c2 00 30 	sub	r2,r10,48
800037ca:	c0 68       	rjmp	800037d6 <get_arg+0x246>
800037cc:	e4 02 00 22 	add	r2,r2,r2<<0x2
800037d0:	2f f7       	sub	r7,-1
800037d2:	f4 02 00 12 	add	r2,r10,r2<<0x1
800037d6:	0f 8a       	ld.ub	r10,r7[0x0]
800037d8:	58 0a       	cp.w	r10,0
800037da:	c0 e0       	breq	800037f6 <get_arg+0x266>
800037dc:	23 0a       	sub	r10,48
800037de:	58 9a       	cp.w	r10,9
800037e0:	fe 98 ff f6 	brls	800037cc <get_arg+0x23c>
800037e4:	c0 98       	rjmp	800037f6 <get_arg+0x266>
800037e6:	2f f7       	sub	r7,-1
800037e8:	0f 8a       	ld.ub	r10,r7[0x0]
800037ea:	58 0a       	cp.w	r10,0
800037ec:	c0 50       	breq	800037f6 <get_arg+0x266>
800037ee:	23 0a       	sub	r10,48
800037f0:	58 9a       	cp.w	r10,9
800037f2:	fe 98 ff fa 	brls	800037e6 <get_arg+0x256>
800037f6:	0e 9b       	mov	r11,r7
800037f8:	40 7c       	lddsp	r12,sp[0x1c]
800037fa:	30 ba       	mov	r10,11
800037fc:	f4 0c 18 00 	cp.b	r12,r10
80003800:	fe 91 fe f2 	brne	800035e4 <get_arg+0x54>
80003804:	40 42       	lddsp	r2,sp[0x10]
80003806:	17 8c       	ld.ub	r12,r11[0x0]
80003808:	0a 32       	cp.w	r2,r5
8000380a:	5f 4a       	srge	r10
8000380c:	f0 0c 18 00 	cp.b	r12,r8
80003810:	5f 1c       	srne	r12
80003812:	f9 ea 00 0a 	and	r10,r12,r10
80003816:	f0 0a 18 00 	cp.b	r10,r8
8000381a:	fe 91 fe cf 	brne	800035b8 <get_arg+0x28>
8000381e:	30 08       	mov	r8,0
80003820:	40 4e       	lddsp	lr,sp[0x10]
80003822:	17 8a       	ld.ub	r10,r11[0x0]
80003824:	e2 05 00 21 	add	r1,r1,r5<<0x2
80003828:	f0 0a 18 00 	cp.b	r10,r8
8000382c:	fc 09 17 10 	movne	r9,lr
80003830:	e6 05 00 38 	add	r8,r3,r5<<0x3
80003834:	06 9e       	mov	lr,r3
80003836:	c2 a8       	rjmp	8000388a <get_arg+0x2fa>
80003838:	62 0a       	ld.w	r10,r1[0x0]
8000383a:	58 3a       	cp.w	r10,3
8000383c:	c1 e0       	breq	80003878 <get_arg+0x2e8>
8000383e:	e0 89 00 07 	brgt	8000384c <get_arg+0x2bc>
80003842:	58 1a       	cp.w	r10,1
80003844:	c1 a0       	breq	80003878 <get_arg+0x2e8>
80003846:	58 2a       	cp.w	r10,2
80003848:	c1 81       	brne	80003878 <get_arg+0x2e8>
8000384a:	c0 58       	rjmp	80003854 <get_arg+0x2c4>
8000384c:	58 5a       	cp.w	r10,5
8000384e:	c0 c0       	breq	80003866 <get_arg+0x2d6>
80003850:	c0 b5       	brlt	80003866 <get_arg+0x2d6>
80003852:	c1 38       	rjmp	80003878 <get_arg+0x2e8>
80003854:	6c 0a       	ld.w	r10,r6[0x0]
80003856:	f4 cc ff f8 	sub	r12,r10,-8
8000385a:	8d 0c       	st.w	r6[0x0],r12
8000385c:	f4 e2 00 00 	ld.d	r2,r10[0]
80003860:	f0 e3 00 00 	st.d	r8[0],r2
80003864:	c1 08       	rjmp	80003884 <get_arg+0x2f4>
80003866:	6c 0a       	ld.w	r10,r6[0x0]
80003868:	f4 cc ff f8 	sub	r12,r10,-8
8000386c:	8d 0c       	st.w	r6[0x0],r12
8000386e:	f4 e2 00 00 	ld.d	r2,r10[0]
80003872:	f0 e3 00 00 	st.d	r8[0],r2
80003876:	c0 78       	rjmp	80003884 <get_arg+0x2f4>
80003878:	6c 0a       	ld.w	r10,r6[0x0]
8000387a:	f4 cc ff fc 	sub	r12,r10,-4
8000387e:	8d 0c       	st.w	r6[0x0],r12
80003880:	74 0a       	ld.w	r10,r10[0x0]
80003882:	91 0a       	st.w	r8[0x0],r10
80003884:	2f f5       	sub	r5,-1
80003886:	2f 88       	sub	r8,-8
80003888:	2f c1       	sub	r1,-4
8000388a:	12 35       	cp.w	r5,r9
8000388c:	fe 9a ff d6 	brle	80003838 <get_arg+0x2a8>
80003890:	1c 93       	mov	r3,lr
80003892:	40 52       	lddsp	r2,sp[0x14]
80003894:	40 6e       	lddsp	lr,sp[0x18]
80003896:	85 05       	st.w	r2[0x0],r5
80003898:	9d 0b       	st.w	lr[0x0],r11
8000389a:	40 4b       	lddsp	r11,sp[0x10]
8000389c:	e6 0b 00 3c 	add	r12,r3,r11<<0x3
800038a0:	2f 8d       	sub	sp,-32
800038a2:	d8 32       	popm	r0-r7,pc

800038a4 <__sprint_r>:
800038a4:	d4 21       	pushm	r4-r7,lr
800038a6:	14 97       	mov	r7,r10
800038a8:	74 28       	ld.w	r8,r10[0x8]
800038aa:	58 08       	cp.w	r8,0
800038ac:	c0 41       	brne	800038b4 <__sprint_r+0x10>
800038ae:	95 18       	st.w	r10[0x4],r8
800038b0:	10 9c       	mov	r12,r8
800038b2:	d8 22       	popm	r4-r7,pc
800038b4:	e0 a0 18 b4 	rcall	80006a1c <__sfvwrite_r>
800038b8:	30 08       	mov	r8,0
800038ba:	8f 18       	st.w	r7[0x4],r8
800038bc:	8f 28       	st.w	r7[0x8],r8
800038be:	d8 22       	popm	r4-r7,pc

800038c0 <_vfprintf_r>:
800038c0:	d4 31       	pushm	r0-r7,lr
800038c2:	fa cd 06 bc 	sub	sp,sp,1724
800038c6:	51 09       	stdsp	sp[0x40],r9
800038c8:	16 91       	mov	r1,r11
800038ca:	14 97       	mov	r7,r10
800038cc:	18 95       	mov	r5,r12
800038ce:	e0 a0 1a 1d 	rcall	80006d08 <_localeconv_r>
800038d2:	78 0c       	ld.w	r12,r12[0x0]
800038d4:	50 cc       	stdsp	sp[0x30],r12
800038d6:	58 05       	cp.w	r5,0
800038d8:	c0 70       	breq	800038e6 <_vfprintf_r+0x26>
800038da:	6a 68       	ld.w	r8,r5[0x18]
800038dc:	58 08       	cp.w	r8,0
800038de:	c0 41       	brne	800038e6 <_vfprintf_r+0x26>
800038e0:	0a 9c       	mov	r12,r5
800038e2:	e0 a0 17 3d 	rcall	8000675c <__sinit>
800038e6:	fe c8 a3 3e 	sub	r8,pc,-23746
800038ea:	10 31       	cp.w	r1,r8
800038ec:	c0 31       	brne	800038f2 <_vfprintf_r+0x32>
800038ee:	6a 01       	ld.w	r1,r5[0x0]
800038f0:	c0 c8       	rjmp	80003908 <_vfprintf_r+0x48>
800038f2:	fe c8 a3 2a 	sub	r8,pc,-23766
800038f6:	10 31       	cp.w	r1,r8
800038f8:	c0 31       	brne	800038fe <_vfprintf_r+0x3e>
800038fa:	6a 11       	ld.w	r1,r5[0x4]
800038fc:	c0 68       	rjmp	80003908 <_vfprintf_r+0x48>
800038fe:	fe c8 a3 16 	sub	r8,pc,-23786
80003902:	10 31       	cp.w	r1,r8
80003904:	eb f1 00 02 	ld.weq	r1,r5[0x8]
80003908:	82 68       	ld.sh	r8,r1[0xc]
8000390a:	ed b8 00 03 	bld	r8,0x3
8000390e:	c0 41       	brne	80003916 <_vfprintf_r+0x56>
80003910:	62 48       	ld.w	r8,r1[0x10]
80003912:	58 08       	cp.w	r8,0
80003914:	c0 71       	brne	80003922 <_vfprintf_r+0x62>
80003916:	02 9b       	mov	r11,r1
80003918:	0a 9c       	mov	r12,r5
8000391a:	e0 a0 0f 5d 	rcall	800057d4 <__swsetup_r>
8000391e:	e0 81 0f 54 	brne	800057c6 <_vfprintf_r+0x1f06>
80003922:	82 68       	ld.sh	r8,r1[0xc]
80003924:	10 99       	mov	r9,r8
80003926:	e2 19 00 1a 	andl	r9,0x1a,COH
8000392a:	58 a9       	cp.w	r9,10
8000392c:	c3 c1       	brne	800039a4 <_vfprintf_r+0xe4>
8000392e:	82 79       	ld.sh	r9,r1[0xe]
80003930:	30 0a       	mov	r10,0
80003932:	f4 09 19 00 	cp.h	r9,r10
80003936:	c3 75       	brlt	800039a4 <_vfprintf_r+0xe4>
80003938:	a1 d8       	cbr	r8,0x1
8000393a:	fb 58 05 d0 	st.h	sp[1488],r8
8000393e:	62 88       	ld.w	r8,r1[0x20]
80003940:	fb 48 05 e4 	st.w	sp[1508],r8
80003944:	62 a8       	ld.w	r8,r1[0x28]
80003946:	fb 48 05 ec 	st.w	sp[1516],r8
8000394a:	fa c8 ff bc 	sub	r8,sp,-68
8000394e:	fb 48 05 d4 	st.w	sp[1492],r8
80003952:	fb 48 05 c4 	st.w	sp[1476],r8
80003956:	e0 68 04 00 	mov	r8,1024
8000395a:	fb 48 05 d8 	st.w	sp[1496],r8
8000395e:	fb 48 05 cc 	st.w	sp[1484],r8
80003962:	30 08       	mov	r8,0
80003964:	fb 59 05 d2 	st.h	sp[1490],r9
80003968:	0e 9a       	mov	r10,r7
8000396a:	41 09       	lddsp	r9,sp[0x40]
8000396c:	fa c7 fa 3c 	sub	r7,sp,-1476
80003970:	fb 48 05 dc 	st.w	sp[1500],r8
80003974:	0a 9c       	mov	r12,r5
80003976:	0e 9b       	mov	r11,r7
80003978:	ca 4f       	rcall	800038c0 <_vfprintf_r>
8000397a:	50 bc       	stdsp	sp[0x2c],r12
8000397c:	c0 95       	brlt	8000398e <_vfprintf_r+0xce>
8000397e:	0e 9b       	mov	r11,r7
80003980:	0a 9c       	mov	r12,r5
80003982:	e0 a0 16 15 	rcall	800065ac <_fflush_r>
80003986:	40 be       	lddsp	lr,sp[0x2c]
80003988:	f9 be 01 ff 	movne	lr,-1
8000398c:	50 be       	stdsp	sp[0x2c],lr
8000398e:	fb 08 05 d0 	ld.sh	r8,sp[1488]
80003992:	ed b8 00 06 	bld	r8,0x6
80003996:	e0 81 0f 1a 	brne	800057ca <_vfprintf_r+0x1f0a>
8000399a:	82 68       	ld.sh	r8,r1[0xc]
8000399c:	a7 a8       	sbr	r8,0x6
8000399e:	a2 68       	st.h	r1[0xc],r8
800039a0:	e0 8f 0f 15 	bral	800057ca <_vfprintf_r+0x1f0a>
800039a4:	30 08       	mov	r8,0
800039a6:	fb 48 06 b4 	st.w	sp[1716],r8
800039aa:	fb 48 06 90 	st.w	sp[1680],r8
800039ae:	fb 48 06 8c 	st.w	sp[1676],r8
800039b2:	fb 48 06 b0 	st.w	sp[1712],r8
800039b6:	30 08       	mov	r8,0
800039b8:	30 09       	mov	r9,0
800039ba:	50 a7       	stdsp	sp[0x28],r7
800039bc:	50 78       	stdsp	sp[0x1c],r8
800039be:	fa c3 f9 e0 	sub	r3,sp,-1568
800039c2:	3f f8       	mov	r8,-1
800039c4:	50 59       	stdsp	sp[0x14],r9
800039c6:	fb 43 06 88 	st.w	sp[1672],r3
800039ca:	fb 48 05 44 	st.w	sp[1348],r8
800039ce:	12 9c       	mov	r12,r9
800039d0:	50 69       	stdsp	sp[0x18],r9
800039d2:	50 d9       	stdsp	sp[0x34],r9
800039d4:	50 e9       	stdsp	sp[0x38],r9
800039d6:	50 b9       	stdsp	sp[0x2c],r9
800039d8:	12 97       	mov	r7,r9
800039da:	0a 94       	mov	r4,r5
800039dc:	40 a2       	lddsp	r2,sp[0x28]
800039de:	32 5a       	mov	r10,37
800039e0:	30 08       	mov	r8,0
800039e2:	c0 28       	rjmp	800039e6 <_vfprintf_r+0x126>
800039e4:	2f f2       	sub	r2,-1
800039e6:	05 89       	ld.ub	r9,r2[0x0]
800039e8:	f0 09 18 00 	cp.b	r9,r8
800039ec:	5f 1b       	srne	r11
800039ee:	f4 09 18 00 	cp.b	r9,r10
800039f2:	5f 19       	srne	r9
800039f4:	f3 eb 00 0b 	and	r11,r9,r11
800039f8:	f0 0b 18 00 	cp.b	r11,r8
800039fc:	cf 41       	brne	800039e4 <_vfprintf_r+0x124>
800039fe:	40 ab       	lddsp	r11,sp[0x28]
80003a00:	e4 0b 01 06 	sub	r6,r2,r11
80003a04:	c1 e0       	breq	80003a40 <_vfprintf_r+0x180>
80003a06:	fa f8 06 90 	ld.w	r8,sp[1680]
80003a0a:	0c 08       	add	r8,r6
80003a0c:	87 0b       	st.w	r3[0x0],r11
80003a0e:	fb 48 06 90 	st.w	sp[1680],r8
80003a12:	87 16       	st.w	r3[0x4],r6
80003a14:	fa f8 06 8c 	ld.w	r8,sp[1676]
80003a18:	2f f8       	sub	r8,-1
80003a1a:	fb 48 06 8c 	st.w	sp[1676],r8
80003a1e:	58 78       	cp.w	r8,7
80003a20:	e0 89 00 04 	brgt	80003a28 <_vfprintf_r+0x168>
80003a24:	2f 83       	sub	r3,-8
80003a26:	c0 a8       	rjmp	80003a3a <_vfprintf_r+0x17a>
80003a28:	fa ca f9 78 	sub	r10,sp,-1672
80003a2c:	02 9b       	mov	r11,r1
80003a2e:	08 9c       	mov	r12,r4
80003a30:	c3 af       	rcall	800038a4 <__sprint_r>
80003a32:	e0 81 0e c6 	brne	800057be <_vfprintf_r+0x1efe>
80003a36:	fa c3 f9 e0 	sub	r3,sp,-1568
80003a3a:	40 ba       	lddsp	r10,sp[0x2c]
80003a3c:	0c 0a       	add	r10,r6
80003a3e:	50 ba       	stdsp	sp[0x2c],r10
80003a40:	05 89       	ld.ub	r9,r2[0x0]
80003a42:	30 08       	mov	r8,0
80003a44:	f0 09 18 00 	cp.b	r9,r8
80003a48:	e0 80 0e aa 	breq	8000579c <_vfprintf_r+0x1edc>
80003a4c:	30 09       	mov	r9,0
80003a4e:	fb 68 06 bb 	st.b	sp[1723],r8
80003a52:	0e 96       	mov	r6,r7
80003a54:	e4 c8 ff ff 	sub	r8,r2,-1
80003a58:	3f fe       	mov	lr,-1
80003a5a:	50 93       	stdsp	sp[0x24],r3
80003a5c:	50 41       	stdsp	sp[0x10],r1
80003a5e:	0e 93       	mov	r3,r7
80003a60:	04 91       	mov	r1,r2
80003a62:	50 89       	stdsp	sp[0x20],r9
80003a64:	50 a8       	stdsp	sp[0x28],r8
80003a66:	50 2e       	stdsp	sp[0x8],lr
80003a68:	50 39       	stdsp	sp[0xc],r9
80003a6a:	12 95       	mov	r5,r9
80003a6c:	12 90       	mov	r0,r9
80003a6e:	10 97       	mov	r7,r8
80003a70:	08 92       	mov	r2,r4
80003a72:	c0 78       	rjmp	80003a80 <_vfprintf_r+0x1c0>
80003a74:	3f fc       	mov	r12,-1
80003a76:	08 97       	mov	r7,r4
80003a78:	50 2c       	stdsp	sp[0x8],r12
80003a7a:	c0 38       	rjmp	80003a80 <_vfprintf_r+0x1c0>
80003a7c:	30 0b       	mov	r11,0
80003a7e:	50 3b       	stdsp	sp[0xc],r11
80003a80:	0f 38       	ld.ub	r8,r7++
80003a82:	c0 28       	rjmp	80003a86 <_vfprintf_r+0x1c6>
80003a84:	12 90       	mov	r0,r9
80003a86:	f0 c9 00 20 	sub	r9,r8,32
80003a8a:	e0 49 00 58 	cp.w	r9,88
80003a8e:	e0 8b 0a 30 	brhi	80004eee <_vfprintf_r+0x162e>
80003a92:	fe ca a8 92 	sub	r10,pc,-22382
80003a96:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
80003a9a:	50 a7       	stdsp	sp[0x28],r7
80003a9c:	50 80       	stdsp	sp[0x20],r0
80003a9e:	0c 97       	mov	r7,r6
80003aa0:	04 94       	mov	r4,r2
80003aa2:	06 96       	mov	r6,r3
80003aa4:	02 92       	mov	r2,r1
80003aa6:	fe c9 a6 6a 	sub	r9,pc,-22934
80003aaa:	40 93       	lddsp	r3,sp[0x24]
80003aac:	10 90       	mov	r0,r8
80003aae:	40 41       	lddsp	r1,sp[0x10]
80003ab0:	50 d9       	stdsp	sp[0x34],r9
80003ab2:	e0 8f 08 8e 	bral	80004bce <_vfprintf_r+0x130e>
80003ab6:	30 08       	mov	r8,0
80003ab8:	fb 39 06 bb 	ld.ub	r9,sp[1723]
80003abc:	f0 09 18 00 	cp.b	r9,r8
80003ac0:	ce 01       	brne	80003a80 <_vfprintf_r+0x1c0>
80003ac2:	32 08       	mov	r8,32
80003ac4:	c6 e8       	rjmp	80003ba0 <_vfprintf_r+0x2e0>
80003ac6:	a1 a5       	sbr	r5,0x0
80003ac8:	cd cb       	rjmp	80003a80 <_vfprintf_r+0x1c0>
80003aca:	0f 89       	ld.ub	r9,r7[0x0]
80003acc:	f2 c8 00 30 	sub	r8,r9,48
80003ad0:	58 98       	cp.w	r8,9
80003ad2:	e0 8b 00 1d 	brhi	80003b0c <_vfprintf_r+0x24c>
80003ad6:	ee c8 ff ff 	sub	r8,r7,-1
80003ada:	30 0b       	mov	r11,0
80003adc:	23 09       	sub	r9,48
80003ade:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80003ae2:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
80003ae6:	11 39       	ld.ub	r9,r8++
80003ae8:	f2 ca 00 30 	sub	r10,r9,48
80003aec:	58 9a       	cp.w	r10,9
80003aee:	fe 98 ff f7 	brls	80003adc <_vfprintf_r+0x21c>
80003af2:	e0 49 00 24 	cp.w	r9,36
80003af6:	cc 31       	brne	80003a7c <_vfprintf_r+0x1bc>
80003af8:	e0 4b 00 20 	cp.w	r11,32
80003afc:	e0 89 0e 60 	brgt	800057bc <_vfprintf_r+0x1efc>
80003b00:	20 1b       	sub	r11,1
80003b02:	fa f9 06 b4 	ld.w	r9,sp[1716]
80003b06:	12 3b       	cp.w	r11,r9
80003b08:	c0 95       	brlt	80003b1a <_vfprintf_r+0x25a>
80003b0a:	c1 08       	rjmp	80003b2a <_vfprintf_r+0x26a>
80003b0c:	fa f9 06 b4 	ld.w	r9,sp[1716]
80003b10:	ec ca ff ff 	sub	r10,r6,-1
80003b14:	12 36       	cp.w	r6,r9
80003b16:	c1 f5       	brlt	80003b54 <_vfprintf_r+0x294>
80003b18:	c2 68       	rjmp	80003b64 <_vfprintf_r+0x2a4>
80003b1a:	fa ce f9 44 	sub	lr,sp,-1724
80003b1e:	10 97       	mov	r7,r8
80003b20:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
80003b24:	f6 f0 fd 88 	ld.w	r0,r11[-632]
80003b28:	c3 58       	rjmp	80003b92 <_vfprintf_r+0x2d2>
80003b2a:	10 97       	mov	r7,r8
80003b2c:	fa c8 f9 50 	sub	r8,sp,-1712
80003b30:	1a d8       	st.w	--sp,r8
80003b32:	fa c8 fa b8 	sub	r8,sp,-1352
80003b36:	1a d8       	st.w	--sp,r8
80003b38:	fa c8 fb b4 	sub	r8,sp,-1100
80003b3c:	02 9a       	mov	r10,r1
80003b3e:	1a d8       	st.w	--sp,r8
80003b40:	04 9c       	mov	r12,r2
80003b42:	fa c8 f9 40 	sub	r8,sp,-1728
80003b46:	fa c9 ff b4 	sub	r9,sp,-76
80003b4a:	fe b0 fd 23 	rcall	80003590 <get_arg>
80003b4e:	2f dd       	sub	sp,-12
80003b50:	78 00       	ld.w	r0,r12[0x0]
80003b52:	c2 08       	rjmp	80003b92 <_vfprintf_r+0x2d2>
80003b54:	fa cc f9 44 	sub	r12,sp,-1724
80003b58:	14 96       	mov	r6,r10
80003b5a:	f8 03 00 38 	add	r8,r12,r3<<0x3
80003b5e:	f0 f0 fd 88 	ld.w	r0,r8[-632]
80003b62:	c1 88       	rjmp	80003b92 <_vfprintf_r+0x2d2>
80003b64:	41 08       	lddsp	r8,sp[0x40]
80003b66:	59 f9       	cp.w	r9,31
80003b68:	e0 89 00 11 	brgt	80003b8a <_vfprintf_r+0x2ca>
80003b6c:	f0 cb ff fc 	sub	r11,r8,-4
80003b70:	51 0b       	stdsp	sp[0x40],r11
80003b72:	70 00       	ld.w	r0,r8[0x0]
80003b74:	fa cb f9 44 	sub	r11,sp,-1724
80003b78:	f6 09 00 38 	add	r8,r11,r9<<0x3
80003b7c:	f1 40 fd 88 	st.w	r8[-632],r0
80003b80:	2f f9       	sub	r9,-1
80003b82:	14 96       	mov	r6,r10
80003b84:	fb 49 06 b4 	st.w	sp[1716],r9
80003b88:	c0 58       	rjmp	80003b92 <_vfprintf_r+0x2d2>
80003b8a:	70 00       	ld.w	r0,r8[0x0]
80003b8c:	14 96       	mov	r6,r10
80003b8e:	2f c8       	sub	r8,-4
80003b90:	51 08       	stdsp	sp[0x40],r8
80003b92:	58 00       	cp.w	r0,0
80003b94:	fe 94 ff 76 	brge	80003a80 <_vfprintf_r+0x1c0>
80003b98:	5c 30       	neg	r0
80003b9a:	a3 a5       	sbr	r5,0x2
80003b9c:	c7 2b       	rjmp	80003a80 <_vfprintf_r+0x1c0>
80003b9e:	32 b8       	mov	r8,43
80003ba0:	fb 68 06 bb 	st.b	sp[1723],r8
80003ba4:	c6 eb       	rjmp	80003a80 <_vfprintf_r+0x1c0>
80003ba6:	0f 38       	ld.ub	r8,r7++
80003ba8:	e0 48 00 2a 	cp.w	r8,42
80003bac:	c0 30       	breq	80003bb2 <_vfprintf_r+0x2f2>
80003bae:	30 09       	mov	r9,0
80003bb0:	c7 98       	rjmp	80003ca2 <_vfprintf_r+0x3e2>
80003bb2:	0f 88       	ld.ub	r8,r7[0x0]
80003bb4:	f0 c9 00 30 	sub	r9,r8,48
80003bb8:	58 99       	cp.w	r9,9
80003bba:	e0 8b 00 1f 	brhi	80003bf8 <_vfprintf_r+0x338>
80003bbe:	ee c4 ff ff 	sub	r4,r7,-1
80003bc2:	30 0b       	mov	r11,0
80003bc4:	23 08       	sub	r8,48
80003bc6:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80003bca:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
80003bce:	09 38       	ld.ub	r8,r4++
80003bd0:	f0 c9 00 30 	sub	r9,r8,48
80003bd4:	58 99       	cp.w	r9,9
80003bd6:	fe 98 ff f7 	brls	80003bc4 <_vfprintf_r+0x304>
80003bda:	e0 48 00 24 	cp.w	r8,36
80003bde:	fe 91 ff 4f 	brne	80003a7c <_vfprintf_r+0x1bc>
80003be2:	e0 4b 00 20 	cp.w	r11,32
80003be6:	e0 89 0d eb 	brgt	800057bc <_vfprintf_r+0x1efc>
80003bea:	20 1b       	sub	r11,1
80003bec:	fa f8 06 b4 	ld.w	r8,sp[1716]
80003bf0:	10 3b       	cp.w	r11,r8
80003bf2:	c0 a5       	brlt	80003c06 <_vfprintf_r+0x346>
80003bf4:	c1 18       	rjmp	80003c16 <_vfprintf_r+0x356>
80003bf6:	d7 03       	nop
80003bf8:	fa fa 06 b4 	ld.w	r10,sp[1716]
80003bfc:	ec c9 ff ff 	sub	r9,r6,-1
80003c00:	14 36       	cp.w	r6,r10
80003c02:	c1 f5       	brlt	80003c40 <_vfprintf_r+0x380>
80003c04:	c2 88       	rjmp	80003c54 <_vfprintf_r+0x394>
80003c06:	fa ca f9 44 	sub	r10,sp,-1724
80003c0a:	f4 0b 00 3b 	add	r11,r10,r11<<0x3
80003c0e:	f6 fb fd 88 	ld.w	r11,r11[-632]
80003c12:	50 2b       	stdsp	sp[0x8],r11
80003c14:	c3 c8       	rjmp	80003c8c <_vfprintf_r+0x3cc>
80003c16:	fa c8 f9 50 	sub	r8,sp,-1712
80003c1a:	1a d8       	st.w	--sp,r8
80003c1c:	fa c8 fa b8 	sub	r8,sp,-1352
80003c20:	1a d8       	st.w	--sp,r8
80003c22:	fa c8 fb b4 	sub	r8,sp,-1100
80003c26:	02 9a       	mov	r10,r1
80003c28:	1a d8       	st.w	--sp,r8
80003c2a:	04 9c       	mov	r12,r2
80003c2c:	fa c8 f9 40 	sub	r8,sp,-1728
80003c30:	fa c9 ff b4 	sub	r9,sp,-76
80003c34:	fe b0 fc ae 	rcall	80003590 <get_arg>
80003c38:	2f dd       	sub	sp,-12
80003c3a:	78 0c       	ld.w	r12,r12[0x0]
80003c3c:	50 2c       	stdsp	sp[0x8],r12
80003c3e:	c2 78       	rjmp	80003c8c <_vfprintf_r+0x3cc>
80003c40:	12 96       	mov	r6,r9
80003c42:	0e 94       	mov	r4,r7
80003c44:	fa c9 f9 44 	sub	r9,sp,-1724
80003c48:	f2 03 00 38 	add	r8,r9,r3<<0x3
80003c4c:	f0 f8 fd 88 	ld.w	r8,r8[-632]
80003c50:	50 28       	stdsp	sp[0x8],r8
80003c52:	c1 d8       	rjmp	80003c8c <_vfprintf_r+0x3cc>
80003c54:	41 08       	lddsp	r8,sp[0x40]
80003c56:	59 fa       	cp.w	r10,31
80003c58:	e0 89 00 14 	brgt	80003c80 <_vfprintf_r+0x3c0>
80003c5c:	f0 cb ff fc 	sub	r11,r8,-4
80003c60:	70 08       	ld.w	r8,r8[0x0]
80003c62:	51 0b       	stdsp	sp[0x40],r11
80003c64:	50 28       	stdsp	sp[0x8],r8
80003c66:	fa c6 f9 44 	sub	r6,sp,-1724
80003c6a:	40 2e       	lddsp	lr,sp[0x8]
80003c6c:	ec 0a 00 38 	add	r8,r6,r10<<0x3
80003c70:	f1 4e fd 88 	st.w	r8[-632],lr
80003c74:	2f fa       	sub	r10,-1
80003c76:	0e 94       	mov	r4,r7
80003c78:	fb 4a 06 b4 	st.w	sp[1716],r10
80003c7c:	12 96       	mov	r6,r9
80003c7e:	c0 78       	rjmp	80003c8c <_vfprintf_r+0x3cc>
80003c80:	70 0c       	ld.w	r12,r8[0x0]
80003c82:	0e 94       	mov	r4,r7
80003c84:	2f c8       	sub	r8,-4
80003c86:	50 2c       	stdsp	sp[0x8],r12
80003c88:	12 96       	mov	r6,r9
80003c8a:	51 08       	stdsp	sp[0x40],r8
80003c8c:	40 2b       	lddsp	r11,sp[0x8]
80003c8e:	58 0b       	cp.w	r11,0
80003c90:	fe 95 fe f2 	brlt	80003a74 <_vfprintf_r+0x1b4>
80003c94:	08 97       	mov	r7,r4
80003c96:	cf 5a       	rjmp	80003a80 <_vfprintf_r+0x1c0>
80003c98:	f2 09 00 29 	add	r9,r9,r9<<0x2
80003c9c:	0f 38       	ld.ub	r8,r7++
80003c9e:	f4 09 00 19 	add	r9,r10,r9<<0x1
80003ca2:	f0 ca 00 30 	sub	r10,r8,48
80003ca6:	58 9a       	cp.w	r10,9
80003ca8:	fe 98 ff f8 	brls	80003c98 <_vfprintf_r+0x3d8>
80003cac:	3f fa       	mov	r10,-1
80003cae:	f2 0a 0c 49 	max	r9,r9,r10
80003cb2:	50 29       	stdsp	sp[0x8],r9
80003cb4:	ce 9a       	rjmp	80003a86 <_vfprintf_r+0x1c6>
80003cb6:	a7 b5       	sbr	r5,0x7
80003cb8:	ce 4a       	rjmp	80003a80 <_vfprintf_r+0x1c0>
80003cba:	30 09       	mov	r9,0
80003cbc:	23 08       	sub	r8,48
80003cbe:	f2 09 00 29 	add	r9,r9,r9<<0x2
80003cc2:	f0 09 00 19 	add	r9,r8,r9<<0x1
80003cc6:	0f 38       	ld.ub	r8,r7++
80003cc8:	f0 ca 00 30 	sub	r10,r8,48
80003ccc:	58 9a       	cp.w	r10,9
80003cce:	fe 98 ff f7 	brls	80003cbc <_vfprintf_r+0x3fc>
80003cd2:	e0 48 00 24 	cp.w	r8,36
80003cd6:	fe 91 fe d7 	brne	80003a84 <_vfprintf_r+0x1c4>
80003cda:	e0 49 00 20 	cp.w	r9,32
80003cde:	e0 89 0d 6f 	brgt	800057bc <_vfprintf_r+0x1efc>
80003ce2:	f2 c3 00 01 	sub	r3,r9,1
80003ce6:	30 19       	mov	r9,1
80003ce8:	50 39       	stdsp	sp[0xc],r9
80003cea:	cc ba       	rjmp	80003a80 <_vfprintf_r+0x1c0>
80003cec:	a3 b5       	sbr	r5,0x3
80003cee:	cc 9a       	rjmp	80003a80 <_vfprintf_r+0x1c0>
80003cf0:	a7 a5       	sbr	r5,0x6
80003cf2:	cc 7a       	rjmp	80003a80 <_vfprintf_r+0x1c0>
80003cf4:	0a 98       	mov	r8,r5
80003cf6:	a5 b5       	sbr	r5,0x5
80003cf8:	a5 a8       	sbr	r8,0x4
80003cfa:	0f 89       	ld.ub	r9,r7[0x0]
80003cfc:	36 ce       	mov	lr,108
80003cfe:	fc 09 18 00 	cp.b	r9,lr
80003d02:	f7 b7 00 ff 	subeq	r7,-1
80003d06:	f0 05 17 10 	movne	r5,r8
80003d0a:	cb ba       	rjmp	80003a80 <_vfprintf_r+0x1c0>
80003d0c:	a5 b5       	sbr	r5,0x5
80003d0e:	cb 9a       	rjmp	80003a80 <_vfprintf_r+0x1c0>
80003d10:	50 a7       	stdsp	sp[0x28],r7
80003d12:	50 80       	stdsp	sp[0x20],r0
80003d14:	0c 97       	mov	r7,r6
80003d16:	10 90       	mov	r0,r8
80003d18:	06 96       	mov	r6,r3
80003d1a:	04 94       	mov	r4,r2
80003d1c:	40 93       	lddsp	r3,sp[0x24]
80003d1e:	02 92       	mov	r2,r1
80003d20:	0e 99       	mov	r9,r7
80003d22:	40 41       	lddsp	r1,sp[0x10]
80003d24:	fa f8 06 b4 	ld.w	r8,sp[1716]
80003d28:	40 3c       	lddsp	r12,sp[0xc]
80003d2a:	58 0c       	cp.w	r12,0
80003d2c:	c1 d0       	breq	80003d66 <_vfprintf_r+0x4a6>
80003d2e:	10 36       	cp.w	r6,r8
80003d30:	c0 64       	brge	80003d3c <_vfprintf_r+0x47c>
80003d32:	fa cb f9 44 	sub	r11,sp,-1724
80003d36:	f6 06 00 36 	add	r6,r11,r6<<0x3
80003d3a:	c1 d8       	rjmp	80003d74 <_vfprintf_r+0x4b4>
80003d3c:	fa c8 f9 50 	sub	r8,sp,-1712
80003d40:	1a d8       	st.w	--sp,r8
80003d42:	fa c8 fa b8 	sub	r8,sp,-1352
80003d46:	1a d8       	st.w	--sp,r8
80003d48:	fa c8 fb b4 	sub	r8,sp,-1100
80003d4c:	1a d8       	st.w	--sp,r8
80003d4e:	fa c8 f9 40 	sub	r8,sp,-1728
80003d52:	fa c9 ff b4 	sub	r9,sp,-76
80003d56:	04 9a       	mov	r10,r2
80003d58:	0c 9b       	mov	r11,r6
80003d5a:	08 9c       	mov	r12,r4
80003d5c:	fe b0 fc 1a 	rcall	80003590 <get_arg>
80003d60:	2f dd       	sub	sp,-12
80003d62:	19 b8       	ld.ub	r8,r12[0x3]
80003d64:	c2 28       	rjmp	80003da8 <_vfprintf_r+0x4e8>
80003d66:	2f f7       	sub	r7,-1
80003d68:	10 39       	cp.w	r9,r8
80003d6a:	c0 84       	brge	80003d7a <_vfprintf_r+0x4ba>
80003d6c:	fa ca f9 44 	sub	r10,sp,-1724
80003d70:	f4 06 00 36 	add	r6,r10,r6<<0x3
80003d74:	ed 38 fd 8b 	ld.ub	r8,r6[-629]
80003d78:	c1 88       	rjmp	80003da8 <_vfprintf_r+0x4e8>
80003d7a:	41 09       	lddsp	r9,sp[0x40]
80003d7c:	59 f8       	cp.w	r8,31
80003d7e:	e0 89 00 12 	brgt	80003da2 <_vfprintf_r+0x4e2>
80003d82:	f2 ca ff fc 	sub	r10,r9,-4
80003d86:	51 0a       	stdsp	sp[0x40],r10
80003d88:	72 09       	ld.w	r9,r9[0x0]
80003d8a:	fa c6 f9 44 	sub	r6,sp,-1724
80003d8e:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80003d92:	2f f8       	sub	r8,-1
80003d94:	f5 49 fd 88 	st.w	r10[-632],r9
80003d98:	fb 48 06 b4 	st.w	sp[1716],r8
80003d9c:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
80003da0:	c0 48       	rjmp	80003da8 <_vfprintf_r+0x4e8>
80003da2:	13 b8       	ld.ub	r8,r9[0x3]
80003da4:	2f c9       	sub	r9,-4
80003da6:	51 09       	stdsp	sp[0x40],r9
80003da8:	fb 68 06 60 	st.b	sp[1632],r8
80003dac:	30 0e       	mov	lr,0
80003dae:	30 08       	mov	r8,0
80003db0:	30 12       	mov	r2,1
80003db2:	fb 68 06 bb 	st.b	sp[1723],r8
80003db6:	50 2e       	stdsp	sp[0x8],lr
80003db8:	e0 8f 08 ad 	bral	80004f12 <_vfprintf_r+0x1652>
80003dbc:	50 a7       	stdsp	sp[0x28],r7
80003dbe:	50 80       	stdsp	sp[0x20],r0
80003dc0:	0c 97       	mov	r7,r6
80003dc2:	04 94       	mov	r4,r2
80003dc4:	06 96       	mov	r6,r3
80003dc6:	02 92       	mov	r2,r1
80003dc8:	40 93       	lddsp	r3,sp[0x24]
80003dca:	10 90       	mov	r0,r8
80003dcc:	40 41       	lddsp	r1,sp[0x10]
80003dce:	a5 a5       	sbr	r5,0x4
80003dd0:	c0 a8       	rjmp	80003de4 <_vfprintf_r+0x524>
80003dd2:	50 a7       	stdsp	sp[0x28],r7
80003dd4:	50 80       	stdsp	sp[0x20],r0
80003dd6:	0c 97       	mov	r7,r6
80003dd8:	04 94       	mov	r4,r2
80003dda:	06 96       	mov	r6,r3
80003ddc:	02 92       	mov	r2,r1
80003dde:	40 93       	lddsp	r3,sp[0x24]
80003de0:	10 90       	mov	r0,r8
80003de2:	40 41       	lddsp	r1,sp[0x10]
80003de4:	ed b5 00 05 	bld	r5,0x5
80003de8:	c5 11       	brne	80003e8a <_vfprintf_r+0x5ca>
80003dea:	fa f8 06 b4 	ld.w	r8,sp[1716]
80003dee:	40 3c       	lddsp	r12,sp[0xc]
80003df0:	58 0c       	cp.w	r12,0
80003df2:	c1 e0       	breq	80003e2e <_vfprintf_r+0x56e>
80003df4:	10 36       	cp.w	r6,r8
80003df6:	c0 64       	brge	80003e02 <_vfprintf_r+0x542>
80003df8:	fa cb f9 44 	sub	r11,sp,-1724
80003dfc:	f6 06 00 36 	add	r6,r11,r6<<0x3
80003e00:	c2 08       	rjmp	80003e40 <_vfprintf_r+0x580>
80003e02:	fa c8 f9 50 	sub	r8,sp,-1712
80003e06:	1a d8       	st.w	--sp,r8
80003e08:	fa c8 fa b8 	sub	r8,sp,-1352
80003e0c:	0c 9b       	mov	r11,r6
80003e0e:	1a d8       	st.w	--sp,r8
80003e10:	fa c8 fb b4 	sub	r8,sp,-1100
80003e14:	1a d8       	st.w	--sp,r8
80003e16:	fa c9 ff b4 	sub	r9,sp,-76
80003e1a:	fa c8 f9 40 	sub	r8,sp,-1728
80003e1e:	04 9a       	mov	r10,r2
80003e20:	08 9c       	mov	r12,r4
80003e22:	fe b0 fb b7 	rcall	80003590 <get_arg>
80003e26:	2f dd       	sub	sp,-12
80003e28:	78 1b       	ld.w	r11,r12[0x4]
80003e2a:	78 09       	ld.w	r9,r12[0x0]
80003e2c:	c2 b8       	rjmp	80003e82 <_vfprintf_r+0x5c2>
80003e2e:	ee ca ff ff 	sub	r10,r7,-1
80003e32:	10 37       	cp.w	r7,r8
80003e34:	c0 b4       	brge	80003e4a <_vfprintf_r+0x58a>
80003e36:	fa c9 f9 44 	sub	r9,sp,-1724
80003e3a:	14 97       	mov	r7,r10
80003e3c:	f2 06 00 36 	add	r6,r9,r6<<0x3
80003e40:	ec fb fd 8c 	ld.w	r11,r6[-628]
80003e44:	ec f9 fd 88 	ld.w	r9,r6[-632]
80003e48:	c1 d8       	rjmp	80003e82 <_vfprintf_r+0x5c2>
80003e4a:	41 09       	lddsp	r9,sp[0x40]
80003e4c:	59 f8       	cp.w	r8,31
80003e4e:	e0 89 00 14 	brgt	80003e76 <_vfprintf_r+0x5b6>
80003e52:	f2 cb ff f8 	sub	r11,r9,-8
80003e56:	51 0b       	stdsp	sp[0x40],r11
80003e58:	fa c6 f9 44 	sub	r6,sp,-1724
80003e5c:	72 1b       	ld.w	r11,r9[0x4]
80003e5e:	ec 08 00 3c 	add	r12,r6,r8<<0x3
80003e62:	72 09       	ld.w	r9,r9[0x0]
80003e64:	f9 4b fd 8c 	st.w	r12[-628],r11
80003e68:	f9 49 fd 88 	st.w	r12[-632],r9
80003e6c:	2f f8       	sub	r8,-1
80003e6e:	14 97       	mov	r7,r10
80003e70:	fb 48 06 b4 	st.w	sp[1716],r8
80003e74:	c0 78       	rjmp	80003e82 <_vfprintf_r+0x5c2>
80003e76:	f2 c8 ff f8 	sub	r8,r9,-8
80003e7a:	72 1b       	ld.w	r11,r9[0x4]
80003e7c:	14 97       	mov	r7,r10
80003e7e:	51 08       	stdsp	sp[0x40],r8
80003e80:	72 09       	ld.w	r9,r9[0x0]
80003e82:	16 98       	mov	r8,r11
80003e84:	fa e9 00 00 	st.d	sp[0],r8
80003e88:	ca e8       	rjmp	80003fe4 <_vfprintf_r+0x724>
80003e8a:	ed b5 00 04 	bld	r5,0x4
80003e8e:	c1 71       	brne	80003ebc <_vfprintf_r+0x5fc>
80003e90:	fa f8 06 b4 	ld.w	r8,sp[1716]
80003e94:	40 3e       	lddsp	lr,sp[0xc]
80003e96:	58 0e       	cp.w	lr,0
80003e98:	c0 80       	breq	80003ea8 <_vfprintf_r+0x5e8>
80003e9a:	10 36       	cp.w	r6,r8
80003e9c:	c6 94       	brge	80003f6e <_vfprintf_r+0x6ae>
80003e9e:	fa cc f9 44 	sub	r12,sp,-1724
80003ea2:	f8 06 00 36 	add	r6,r12,r6<<0x3
80003ea6:	c8 28       	rjmp	80003faa <_vfprintf_r+0x6ea>
80003ea8:	ee ca ff ff 	sub	r10,r7,-1
80003eac:	10 37       	cp.w	r7,r8
80003eae:	e0 84 00 81 	brge	80003fb0 <_vfprintf_r+0x6f0>
80003eb2:	fa cb f9 44 	sub	r11,sp,-1724
80003eb6:	f6 06 00 36 	add	r6,r11,r6<<0x3
80003eba:	c7 78       	rjmp	80003fa8 <_vfprintf_r+0x6e8>
80003ebc:	ed b5 00 06 	bld	r5,0x6
80003ec0:	c4 b1       	brne	80003f56 <_vfprintf_r+0x696>
80003ec2:	fa f8 06 b4 	ld.w	r8,sp[1716]
80003ec6:	40 3c       	lddsp	r12,sp[0xc]
80003ec8:	58 0c       	cp.w	r12,0
80003eca:	c1 d0       	breq	80003f04 <_vfprintf_r+0x644>
80003ecc:	10 36       	cp.w	r6,r8
80003ece:	c0 64       	brge	80003eda <_vfprintf_r+0x61a>
80003ed0:	fa cb f9 44 	sub	r11,sp,-1724
80003ed4:	f6 06 00 36 	add	r6,r11,r6<<0x3
80003ed8:	c1 f8       	rjmp	80003f16 <_vfprintf_r+0x656>
80003eda:	fa c8 f9 50 	sub	r8,sp,-1712
80003ede:	1a d8       	st.w	--sp,r8
80003ee0:	fa c8 fa b8 	sub	r8,sp,-1352
80003ee4:	1a d8       	st.w	--sp,r8
80003ee6:	fa c8 fb b4 	sub	r8,sp,-1100
80003eea:	1a d8       	st.w	--sp,r8
80003eec:	fa c8 f9 40 	sub	r8,sp,-1728
80003ef0:	fa c9 ff b4 	sub	r9,sp,-76
80003ef4:	04 9a       	mov	r10,r2
80003ef6:	0c 9b       	mov	r11,r6
80003ef8:	08 9c       	mov	r12,r4
80003efa:	fe b0 fb 4b 	rcall	80003590 <get_arg>
80003efe:	2f dd       	sub	sp,-12
80003f00:	98 18       	ld.sh	r8,r12[0x2]
80003f02:	c2 68       	rjmp	80003f4e <_vfprintf_r+0x68e>
80003f04:	ee ca ff ff 	sub	r10,r7,-1
80003f08:	10 37       	cp.w	r7,r8
80003f0a:	c0 94       	brge	80003f1c <_vfprintf_r+0x65c>
80003f0c:	fa c9 f9 44 	sub	r9,sp,-1724
80003f10:	14 97       	mov	r7,r10
80003f12:	f2 06 00 36 	add	r6,r9,r6<<0x3
80003f16:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80003f1a:	c1 a8       	rjmp	80003f4e <_vfprintf_r+0x68e>
80003f1c:	41 09       	lddsp	r9,sp[0x40]
80003f1e:	59 f8       	cp.w	r8,31
80003f20:	e0 89 00 13 	brgt	80003f46 <_vfprintf_r+0x686>
80003f24:	f2 cb ff fc 	sub	r11,r9,-4
80003f28:	51 0b       	stdsp	sp[0x40],r11
80003f2a:	72 09       	ld.w	r9,r9[0x0]
80003f2c:	fa c6 f9 44 	sub	r6,sp,-1724
80003f30:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80003f34:	2f f8       	sub	r8,-1
80003f36:	f7 49 fd 88 	st.w	r11[-632],r9
80003f3a:	fb 48 06 b4 	st.w	sp[1716],r8
80003f3e:	14 97       	mov	r7,r10
80003f40:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80003f44:	c0 58       	rjmp	80003f4e <_vfprintf_r+0x68e>
80003f46:	92 18       	ld.sh	r8,r9[0x2]
80003f48:	14 97       	mov	r7,r10
80003f4a:	2f c9       	sub	r9,-4
80003f4c:	51 09       	stdsp	sp[0x40],r9
80003f4e:	50 18       	stdsp	sp[0x4],r8
80003f50:	bf 58       	asr	r8,0x1f
80003f52:	50 08       	stdsp	sp[0x0],r8
80003f54:	c4 88       	rjmp	80003fe4 <_vfprintf_r+0x724>
80003f56:	fa f8 06 b4 	ld.w	r8,sp[1716]
80003f5a:	40 3c       	lddsp	r12,sp[0xc]
80003f5c:	58 0c       	cp.w	r12,0
80003f5e:	c1 d0       	breq	80003f98 <_vfprintf_r+0x6d8>
80003f60:	10 36       	cp.w	r6,r8
80003f62:	c0 64       	brge	80003f6e <_vfprintf_r+0x6ae>
80003f64:	fa cb f9 44 	sub	r11,sp,-1724
80003f68:	f6 06 00 36 	add	r6,r11,r6<<0x3
80003f6c:	c1 f8       	rjmp	80003faa <_vfprintf_r+0x6ea>
80003f6e:	fa c8 f9 50 	sub	r8,sp,-1712
80003f72:	1a d8       	st.w	--sp,r8
80003f74:	fa c8 fa b8 	sub	r8,sp,-1352
80003f78:	0c 9b       	mov	r11,r6
80003f7a:	1a d8       	st.w	--sp,r8
80003f7c:	fa c8 fb b4 	sub	r8,sp,-1100
80003f80:	04 9a       	mov	r10,r2
80003f82:	1a d8       	st.w	--sp,r8
80003f84:	08 9c       	mov	r12,r4
80003f86:	fa c8 f9 40 	sub	r8,sp,-1728
80003f8a:	fa c9 ff b4 	sub	r9,sp,-76
80003f8e:	fe b0 fb 01 	rcall	80003590 <get_arg>
80003f92:	2f dd       	sub	sp,-12
80003f94:	78 0b       	ld.w	r11,r12[0x0]
80003f96:	c2 48       	rjmp	80003fde <_vfprintf_r+0x71e>
80003f98:	ee ca ff ff 	sub	r10,r7,-1
80003f9c:	10 37       	cp.w	r7,r8
80003f9e:	c0 94       	brge	80003fb0 <_vfprintf_r+0x6f0>
80003fa0:	fa c9 f9 44 	sub	r9,sp,-1724
80003fa4:	f2 06 00 36 	add	r6,r9,r6<<0x3
80003fa8:	14 97       	mov	r7,r10
80003faa:	ec fb fd 88 	ld.w	r11,r6[-632]
80003fae:	c1 88       	rjmp	80003fde <_vfprintf_r+0x71e>
80003fb0:	41 09       	lddsp	r9,sp[0x40]
80003fb2:	59 f8       	cp.w	r8,31
80003fb4:	e0 89 00 11 	brgt	80003fd6 <_vfprintf_r+0x716>
80003fb8:	f2 cb ff fc 	sub	r11,r9,-4
80003fbc:	51 0b       	stdsp	sp[0x40],r11
80003fbe:	fa c6 f9 44 	sub	r6,sp,-1724
80003fc2:	72 0b       	ld.w	r11,r9[0x0]
80003fc4:	ec 08 00 39 	add	r9,r6,r8<<0x3
80003fc8:	f3 4b fd 88 	st.w	r9[-632],r11
80003fcc:	2f f8       	sub	r8,-1
80003fce:	14 97       	mov	r7,r10
80003fd0:	fb 48 06 b4 	st.w	sp[1716],r8
80003fd4:	c0 58       	rjmp	80003fde <_vfprintf_r+0x71e>
80003fd6:	72 0b       	ld.w	r11,r9[0x0]
80003fd8:	14 97       	mov	r7,r10
80003fda:	2f c9       	sub	r9,-4
80003fdc:	51 09       	stdsp	sp[0x40],r9
80003fde:	50 1b       	stdsp	sp[0x4],r11
80003fe0:	bf 5b       	asr	r11,0x1f
80003fe2:	50 0b       	stdsp	sp[0x0],r11
80003fe4:	fa ea 00 00 	ld.d	r10,sp[0]
80003fe8:	58 0a       	cp.w	r10,0
80003fea:	5c 2b       	cpc	r11
80003fec:	c0 e4       	brge	80004008 <_vfprintf_r+0x748>
80003fee:	30 08       	mov	r8,0
80003ff0:	fa ea 00 00 	ld.d	r10,sp[0]
80003ff4:	30 09       	mov	r9,0
80003ff6:	f0 0a 01 0a 	sub	r10,r8,r10
80003ffa:	f2 0b 01 4b 	sbc	r11,r9,r11
80003ffe:	32 d8       	mov	r8,45
80004000:	fa eb 00 00 	st.d	sp[0],r10
80004004:	fb 68 06 bb 	st.b	sp[1723],r8
80004008:	30 18       	mov	r8,1
8000400a:	e0 8f 06 fa 	bral	80004dfe <_vfprintf_r+0x153e>
8000400e:	50 a7       	stdsp	sp[0x28],r7
80004010:	50 80       	stdsp	sp[0x20],r0
80004012:	0c 97       	mov	r7,r6
80004014:	04 94       	mov	r4,r2
80004016:	06 96       	mov	r6,r3
80004018:	02 92       	mov	r2,r1
8000401a:	40 93       	lddsp	r3,sp[0x24]
8000401c:	10 90       	mov	r0,r8
8000401e:	40 41       	lddsp	r1,sp[0x10]
80004020:	0e 99       	mov	r9,r7
80004022:	ed b5 00 03 	bld	r5,0x3
80004026:	c4 11       	brne	800040a8 <_vfprintf_r+0x7e8>
80004028:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000402c:	40 3a       	lddsp	r10,sp[0xc]
8000402e:	58 0a       	cp.w	r10,0
80004030:	c1 90       	breq	80004062 <_vfprintf_r+0x7a2>
80004032:	10 36       	cp.w	r6,r8
80004034:	c6 45       	brlt	800040fc <_vfprintf_r+0x83c>
80004036:	fa c8 f9 50 	sub	r8,sp,-1712
8000403a:	1a d8       	st.w	--sp,r8
8000403c:	fa c8 fa b8 	sub	r8,sp,-1352
80004040:	1a d8       	st.w	--sp,r8
80004042:	fa c8 fb b4 	sub	r8,sp,-1100
80004046:	0c 9b       	mov	r11,r6
80004048:	1a d8       	st.w	--sp,r8
8000404a:	04 9a       	mov	r10,r2
8000404c:	fa c8 f9 40 	sub	r8,sp,-1728
80004050:	fa c9 ff b4 	sub	r9,sp,-76
80004054:	08 9c       	mov	r12,r4
80004056:	fe b0 fa 9d 	rcall	80003590 <get_arg>
8000405a:	2f dd       	sub	sp,-12
8000405c:	78 16       	ld.w	r6,r12[0x4]
8000405e:	50 76       	stdsp	sp[0x1c],r6
80004060:	c4 88       	rjmp	800040f0 <_vfprintf_r+0x830>
80004062:	2f f7       	sub	r7,-1
80004064:	10 39       	cp.w	r9,r8
80004066:	c0 c4       	brge	8000407e <_vfprintf_r+0x7be>
80004068:	fa ce f9 44 	sub	lr,sp,-1724
8000406c:	fc 06 00 36 	add	r6,lr,r6<<0x3
80004070:	ec fc fd 8c 	ld.w	r12,r6[-628]
80004074:	50 7c       	stdsp	sp[0x1c],r12
80004076:	ec f6 fd 88 	ld.w	r6,r6[-632]
8000407a:	50 56       	stdsp	sp[0x14],r6
8000407c:	c6 68       	rjmp	80004148 <_vfprintf_r+0x888>
8000407e:	41 09       	lddsp	r9,sp[0x40]
80004080:	59 f8       	cp.w	r8,31
80004082:	e0 89 00 10 	brgt	800040a2 <_vfprintf_r+0x7e2>
80004086:	f2 ca ff f8 	sub	r10,r9,-8
8000408a:	72 1b       	ld.w	r11,r9[0x4]
8000408c:	51 0a       	stdsp	sp[0x40],r10
8000408e:	72 09       	ld.w	r9,r9[0x0]
80004090:	fa ca f9 44 	sub	r10,sp,-1724
80004094:	50 7b       	stdsp	sp[0x1c],r11
80004096:	50 59       	stdsp	sp[0x14],r9
80004098:	f4 08 00 39 	add	r9,r10,r8<<0x3
8000409c:	40 5b       	lddsp	r11,sp[0x14]
8000409e:	40 7a       	lddsp	r10,sp[0x1c]
800040a0:	c4 78       	rjmp	8000412e <_vfprintf_r+0x86e>
800040a2:	72 18       	ld.w	r8,r9[0x4]
800040a4:	50 78       	stdsp	sp[0x1c],r8
800040a6:	c4 c8       	rjmp	8000413e <_vfprintf_r+0x87e>
800040a8:	fa f8 06 b4 	ld.w	r8,sp[1716]
800040ac:	40 3e       	lddsp	lr,sp[0xc]
800040ae:	58 0e       	cp.w	lr,0
800040b0:	c2 30       	breq	800040f6 <_vfprintf_r+0x836>
800040b2:	10 36       	cp.w	r6,r8
800040b4:	c0 94       	brge	800040c6 <_vfprintf_r+0x806>
800040b6:	fa cc f9 44 	sub	r12,sp,-1724
800040ba:	f8 06 00 36 	add	r6,r12,r6<<0x3
800040be:	ec fb fd 8c 	ld.w	r11,r6[-628]
800040c2:	50 7b       	stdsp	sp[0x1c],r11
800040c4:	cd 9b       	rjmp	80004076 <_vfprintf_r+0x7b6>
800040c6:	fa c8 f9 50 	sub	r8,sp,-1712
800040ca:	1a d8       	st.w	--sp,r8
800040cc:	fa c8 fa b8 	sub	r8,sp,-1352
800040d0:	04 9a       	mov	r10,r2
800040d2:	1a d8       	st.w	--sp,r8
800040d4:	fa c8 fb b4 	sub	r8,sp,-1100
800040d8:	0c 9b       	mov	r11,r6
800040da:	1a d8       	st.w	--sp,r8
800040dc:	08 9c       	mov	r12,r4
800040de:	fa c8 f9 40 	sub	r8,sp,-1728
800040e2:	fa c9 ff b4 	sub	r9,sp,-76
800040e6:	fe b0 fa 55 	rcall	80003590 <get_arg>
800040ea:	2f dd       	sub	sp,-12
800040ec:	78 1a       	ld.w	r10,r12[0x4]
800040ee:	50 7a       	stdsp	sp[0x1c],r10
800040f0:	78 0c       	ld.w	r12,r12[0x0]
800040f2:	50 5c       	stdsp	sp[0x14],r12
800040f4:	c2 a8       	rjmp	80004148 <_vfprintf_r+0x888>
800040f6:	2f f7       	sub	r7,-1
800040f8:	10 39       	cp.w	r9,r8
800040fa:	c0 94       	brge	8000410c <_vfprintf_r+0x84c>
800040fc:	fa c9 f9 44 	sub	r9,sp,-1724
80004100:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004104:	ec f8 fd 8c 	ld.w	r8,r6[-628]
80004108:	50 78       	stdsp	sp[0x1c],r8
8000410a:	cb 6b       	rjmp	80004076 <_vfprintf_r+0x7b6>
8000410c:	41 09       	lddsp	r9,sp[0x40]
8000410e:	59 f8       	cp.w	r8,31
80004110:	e0 89 00 15 	brgt	8000413a <_vfprintf_r+0x87a>
80004114:	f2 ca ff f8 	sub	r10,r9,-8
80004118:	72 16       	ld.w	r6,r9[0x4]
8000411a:	72 09       	ld.w	r9,r9[0x0]
8000411c:	51 0a       	stdsp	sp[0x40],r10
8000411e:	50 59       	stdsp	sp[0x14],r9
80004120:	fa ce f9 44 	sub	lr,sp,-1724
80004124:	50 76       	stdsp	sp[0x1c],r6
80004126:	fc 08 00 39 	add	r9,lr,r8<<0x3
8000412a:	40 5b       	lddsp	r11,sp[0x14]
8000412c:	0c 9a       	mov	r10,r6
8000412e:	f2 eb fd 88 	st.d	r9[-632],r10
80004132:	2f f8       	sub	r8,-1
80004134:	fb 48 06 b4 	st.w	sp[1716],r8
80004138:	c0 88       	rjmp	80004148 <_vfprintf_r+0x888>
8000413a:	72 1c       	ld.w	r12,r9[0x4]
8000413c:	50 7c       	stdsp	sp[0x1c],r12
8000413e:	f2 c8 ff f8 	sub	r8,r9,-8
80004142:	51 08       	stdsp	sp[0x40],r8
80004144:	72 09       	ld.w	r9,r9[0x0]
80004146:	50 59       	stdsp	sp[0x14],r9
80004148:	40 5b       	lddsp	r11,sp[0x14]
8000414a:	40 7a       	lddsp	r10,sp[0x1c]
8000414c:	e0 a0 1c de 	rcall	80007b08 <__isinfd>
80004150:	18 96       	mov	r6,r12
80004152:	c1 70       	breq	80004180 <_vfprintf_r+0x8c0>
80004154:	30 08       	mov	r8,0
80004156:	30 09       	mov	r9,0
80004158:	40 5b       	lddsp	r11,sp[0x14]
8000415a:	40 7a       	lddsp	r10,sp[0x1c]
8000415c:	e0 a0 21 cc 	rcall	800084f4 <__avr32_f64_cmp_lt>
80004160:	c0 40       	breq	80004168 <_vfprintf_r+0x8a8>
80004162:	32 d8       	mov	r8,45
80004164:	fb 68 06 bb 	st.b	sp[1723],r8
80004168:	fe c8 ad 18 	sub	r8,pc,-21224
8000416c:	fe c6 ad 18 	sub	r6,pc,-21224
80004170:	a7 d5       	cbr	r5,0x7
80004172:	e0 40 00 47 	cp.w	r0,71
80004176:	f0 06 17 a0 	movle	r6,r8
8000417a:	30 32       	mov	r2,3
8000417c:	e0 8f 06 ce 	bral	80004f18 <_vfprintf_r+0x1658>
80004180:	40 5b       	lddsp	r11,sp[0x14]
80004182:	40 7a       	lddsp	r10,sp[0x1c]
80004184:	e0 a0 1c d7 	rcall	80007b32 <__isnand>
80004188:	c0 e0       	breq	800041a4 <_vfprintf_r+0x8e4>
8000418a:	50 26       	stdsp	sp[0x8],r6
8000418c:	fe c8 ad 34 	sub	r8,pc,-21196
80004190:	fe c6 ad 34 	sub	r6,pc,-21196
80004194:	a7 d5       	cbr	r5,0x7
80004196:	e0 40 00 47 	cp.w	r0,71
8000419a:	f0 06 17 a0 	movle	r6,r8
8000419e:	30 32       	mov	r2,3
800041a0:	e0 8f 06 c2 	bral	80004f24 <_vfprintf_r+0x1664>
800041a4:	40 2a       	lddsp	r10,sp[0x8]
800041a6:	5b fa       	cp.w	r10,-1
800041a8:	c0 41       	brne	800041b0 <_vfprintf_r+0x8f0>
800041aa:	30 69       	mov	r9,6
800041ac:	50 29       	stdsp	sp[0x8],r9
800041ae:	c1 18       	rjmp	800041d0 <_vfprintf_r+0x910>
800041b0:	e0 40 00 47 	cp.w	r0,71
800041b4:	5f 09       	sreq	r9
800041b6:	e0 40 00 67 	cp.w	r0,103
800041ba:	5f 08       	sreq	r8
800041bc:	f3 e8 10 08 	or	r8,r9,r8
800041c0:	f8 08 18 00 	cp.b	r8,r12
800041c4:	c0 60       	breq	800041d0 <_vfprintf_r+0x910>
800041c6:	40 28       	lddsp	r8,sp[0x8]
800041c8:	58 08       	cp.w	r8,0
800041ca:	f9 b8 00 01 	moveq	r8,1
800041ce:	50 28       	stdsp	sp[0x8],r8
800041d0:	40 78       	lddsp	r8,sp[0x1c]
800041d2:	40 59       	lddsp	r9,sp[0x14]
800041d4:	fa e9 06 94 	st.d	sp[1684],r8
800041d8:	a9 a5       	sbr	r5,0x8
800041da:	fa f8 06 94 	ld.w	r8,sp[1684]
800041de:	58 08       	cp.w	r8,0
800041e0:	c0 65       	brlt	800041ec <_vfprintf_r+0x92c>
800041e2:	40 5e       	lddsp	lr,sp[0x14]
800041e4:	30 0c       	mov	r12,0
800041e6:	50 6e       	stdsp	sp[0x18],lr
800041e8:	50 9c       	stdsp	sp[0x24],r12
800041ea:	c0 78       	rjmp	800041f8 <_vfprintf_r+0x938>
800041ec:	40 5b       	lddsp	r11,sp[0x14]
800041ee:	32 da       	mov	r10,45
800041f0:	ee 1b 80 00 	eorh	r11,0x8000
800041f4:	50 9a       	stdsp	sp[0x24],r10
800041f6:	50 6b       	stdsp	sp[0x18],r11
800041f8:	e0 40 00 46 	cp.w	r0,70
800041fc:	5f 09       	sreq	r9
800041fe:	e0 40 00 66 	cp.w	r0,102
80004202:	5f 08       	sreq	r8
80004204:	f3 e8 10 08 	or	r8,r9,r8
80004208:	50 48       	stdsp	sp[0x10],r8
8000420a:	c0 40       	breq	80004212 <_vfprintf_r+0x952>
8000420c:	40 22       	lddsp	r2,sp[0x8]
8000420e:	30 39       	mov	r9,3
80004210:	c1 08       	rjmp	80004230 <_vfprintf_r+0x970>
80004212:	e0 40 00 45 	cp.w	r0,69
80004216:	5f 09       	sreq	r9
80004218:	e0 40 00 65 	cp.w	r0,101
8000421c:	5f 08       	sreq	r8
8000421e:	40 22       	lddsp	r2,sp[0x8]
80004220:	10 49       	or	r9,r8
80004222:	2f f2       	sub	r2,-1
80004224:	40 46       	lddsp	r6,sp[0x10]
80004226:	ec 09 18 00 	cp.b	r9,r6
8000422a:	fb f2 00 02 	ld.weq	r2,sp[0x8]
8000422e:	30 29       	mov	r9,2
80004230:	fa c8 f9 5c 	sub	r8,sp,-1700
80004234:	1a d8       	st.w	--sp,r8
80004236:	fa c8 f9 54 	sub	r8,sp,-1708
8000423a:	1a d8       	st.w	--sp,r8
8000423c:	fa c8 f9 4c 	sub	r8,sp,-1716
80004240:	08 9c       	mov	r12,r4
80004242:	1a d8       	st.w	--sp,r8
80004244:	04 98       	mov	r8,r2
80004246:	40 9b       	lddsp	r11,sp[0x24]
80004248:	40 aa       	lddsp	r10,sp[0x28]
8000424a:	e0 a0 0b c3 	rcall	800059d0 <_dtoa_r>
8000424e:	e0 40 00 47 	cp.w	r0,71
80004252:	5f 19       	srne	r9
80004254:	e0 40 00 67 	cp.w	r0,103
80004258:	5f 18       	srne	r8
8000425a:	18 96       	mov	r6,r12
8000425c:	2f dd       	sub	sp,-12
8000425e:	f3 e8 00 08 	and	r8,r9,r8
80004262:	c0 41       	brne	8000426a <_vfprintf_r+0x9aa>
80004264:	ed b5 00 00 	bld	r5,0x0
80004268:	c3 01       	brne	800042c8 <_vfprintf_r+0xa08>
8000426a:	ec 02 00 0e 	add	lr,r6,r2
8000426e:	50 3e       	stdsp	sp[0xc],lr
80004270:	40 4c       	lddsp	r12,sp[0x10]
80004272:	58 0c       	cp.w	r12,0
80004274:	c1 50       	breq	8000429e <_vfprintf_r+0x9de>
80004276:	0d 89       	ld.ub	r9,r6[0x0]
80004278:	33 08       	mov	r8,48
8000427a:	f0 09 18 00 	cp.b	r9,r8
8000427e:	c0 b1       	brne	80004294 <_vfprintf_r+0x9d4>
80004280:	30 08       	mov	r8,0
80004282:	30 09       	mov	r9,0
80004284:	40 6b       	lddsp	r11,sp[0x18]
80004286:	40 7a       	lddsp	r10,sp[0x1c]
80004288:	e0 a0 20 ef 	rcall	80008466 <__avr32_f64_cmp_eq>
8000428c:	fb b2 00 01 	rsubeq	r2,1
80004290:	fb f2 0b ab 	st.weq	sp[0x6ac],r2
80004294:	40 3b       	lddsp	r11,sp[0xc]
80004296:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000429a:	10 0b       	add	r11,r8
8000429c:	50 3b       	stdsp	sp[0xc],r11
8000429e:	40 6b       	lddsp	r11,sp[0x18]
800042a0:	30 08       	mov	r8,0
800042a2:	30 09       	mov	r9,0
800042a4:	40 7a       	lddsp	r10,sp[0x1c]
800042a6:	e0 a0 20 e0 	rcall	80008466 <__avr32_f64_cmp_eq>
800042aa:	c0 90       	breq	800042bc <_vfprintf_r+0x9fc>
800042ac:	40 3a       	lddsp	r10,sp[0xc]
800042ae:	fb 4a 06 a4 	st.w	sp[1700],r10
800042b2:	c0 58       	rjmp	800042bc <_vfprintf_r+0x9fc>
800042b4:	10 c9       	st.b	r8++,r9
800042b6:	fb 48 06 a4 	st.w	sp[1700],r8
800042ba:	c0 28       	rjmp	800042be <_vfprintf_r+0x9fe>
800042bc:	33 09       	mov	r9,48
800042be:	fa f8 06 a4 	ld.w	r8,sp[1700]
800042c2:	40 3e       	lddsp	lr,sp[0xc]
800042c4:	1c 38       	cp.w	r8,lr
800042c6:	cf 73       	brcs	800042b4 <_vfprintf_r+0x9f4>
800042c8:	e0 40 00 47 	cp.w	r0,71
800042cc:	5f 09       	sreq	r9
800042ce:	e0 40 00 67 	cp.w	r0,103
800042d2:	5f 08       	sreq	r8
800042d4:	f3 e8 10 08 	or	r8,r9,r8
800042d8:	fa f9 06 a4 	ld.w	r9,sp[1700]
800042dc:	0c 19       	sub	r9,r6
800042de:	50 69       	stdsp	sp[0x18],r9
800042e0:	58 08       	cp.w	r8,0
800042e2:	c0 b0       	breq	800042f8 <_vfprintf_r+0xa38>
800042e4:	fa f8 06 ac 	ld.w	r8,sp[1708]
800042e8:	5b d8       	cp.w	r8,-3
800042ea:	c0 55       	brlt	800042f4 <_vfprintf_r+0xa34>
800042ec:	40 2c       	lddsp	r12,sp[0x8]
800042ee:	18 38       	cp.w	r8,r12
800042f0:	e0 8a 00 6a 	brle	800043c4 <_vfprintf_r+0xb04>
800042f4:	20 20       	sub	r0,2
800042f6:	c0 58       	rjmp	80004300 <_vfprintf_r+0xa40>
800042f8:	e0 40 00 65 	cp.w	r0,101
800042fc:	e0 89 00 46 	brgt	80004388 <_vfprintf_r+0xac8>
80004300:	fa fb 06 ac 	ld.w	r11,sp[1708]
80004304:	fb 60 06 9c 	st.b	sp[1692],r0
80004308:	20 1b       	sub	r11,1
8000430a:	fb 4b 06 ac 	st.w	sp[1708],r11
8000430e:	c0 47       	brpl	80004316 <_vfprintf_r+0xa56>
80004310:	5c 3b       	neg	r11
80004312:	32 d8       	mov	r8,45
80004314:	c0 28       	rjmp	80004318 <_vfprintf_r+0xa58>
80004316:	32 b8       	mov	r8,43
80004318:	fb 68 06 9d 	st.b	sp[1693],r8
8000431c:	58 9b       	cp.w	r11,9
8000431e:	e0 8a 00 1d 	brle	80004358 <_vfprintf_r+0xa98>
80004322:	fa c9 fa 35 	sub	r9,sp,-1483
80004326:	30 aa       	mov	r10,10
80004328:	12 98       	mov	r8,r9
8000432a:	0e 9c       	mov	r12,r7
8000432c:	0c 92       	mov	r2,r6
8000432e:	f6 0a 0c 06 	divs	r6,r11,r10
80004332:	0e 9b       	mov	r11,r7
80004334:	2d 0b       	sub	r11,-48
80004336:	10 fb       	st.b	--r8,r11
80004338:	0c 9b       	mov	r11,r6
8000433a:	58 96       	cp.w	r6,9
8000433c:	fe 99 ff f9 	brgt	8000432e <_vfprintf_r+0xa6e>
80004340:	2d 0b       	sub	r11,-48
80004342:	18 97       	mov	r7,r12
80004344:	04 96       	mov	r6,r2
80004346:	10 fb       	st.b	--r8,r11
80004348:	fa ca f9 62 	sub	r10,sp,-1694
8000434c:	c0 38       	rjmp	80004352 <_vfprintf_r+0xa92>
8000434e:	11 3b       	ld.ub	r11,r8++
80004350:	14 cb       	st.b	r10++,r11
80004352:	12 38       	cp.w	r8,r9
80004354:	cf d3       	brcs	8000434e <_vfprintf_r+0xa8e>
80004356:	c0 98       	rjmp	80004368 <_vfprintf_r+0xaa8>
80004358:	2d 0b       	sub	r11,-48
8000435a:	33 08       	mov	r8,48
8000435c:	fb 6b 06 9f 	st.b	sp[1695],r11
80004360:	fb 68 06 9e 	st.b	sp[1694],r8
80004364:	fa ca f9 60 	sub	r10,sp,-1696
80004368:	fa c8 f9 64 	sub	r8,sp,-1692
8000436c:	f4 08 01 08 	sub	r8,r10,r8
80004370:	50 e8       	stdsp	sp[0x38],r8
80004372:	10 92       	mov	r2,r8
80004374:	40 6b       	lddsp	r11,sp[0x18]
80004376:	16 02       	add	r2,r11
80004378:	58 1b       	cp.w	r11,1
8000437a:	e0 89 00 05 	brgt	80004384 <_vfprintf_r+0xac4>
8000437e:	ed b5 00 00 	bld	r5,0x0
80004382:	c3 51       	brne	800043ec <_vfprintf_r+0xb2c>
80004384:	2f f2       	sub	r2,-1
80004386:	c3 38       	rjmp	800043ec <_vfprintf_r+0xb2c>
80004388:	e0 40 00 66 	cp.w	r0,102
8000438c:	c1 c1       	brne	800043c4 <_vfprintf_r+0xb04>
8000438e:	fa f2 06 ac 	ld.w	r2,sp[1708]
80004392:	58 02       	cp.w	r2,0
80004394:	e0 8a 00 0c 	brle	800043ac <_vfprintf_r+0xaec>
80004398:	40 2a       	lddsp	r10,sp[0x8]
8000439a:	58 0a       	cp.w	r10,0
8000439c:	c0 41       	brne	800043a4 <_vfprintf_r+0xae4>
8000439e:	ed b5 00 00 	bld	r5,0x0
800043a2:	c2 51       	brne	800043ec <_vfprintf_r+0xb2c>
800043a4:	2f f2       	sub	r2,-1
800043a6:	40 29       	lddsp	r9,sp[0x8]
800043a8:	12 02       	add	r2,r9
800043aa:	c0 b8       	rjmp	800043c0 <_vfprintf_r+0xb00>
800043ac:	40 28       	lddsp	r8,sp[0x8]
800043ae:	58 08       	cp.w	r8,0
800043b0:	c0 61       	brne	800043bc <_vfprintf_r+0xafc>
800043b2:	ed b5 00 00 	bld	r5,0x0
800043b6:	c0 30       	breq	800043bc <_vfprintf_r+0xafc>
800043b8:	30 12       	mov	r2,1
800043ba:	c1 98       	rjmp	800043ec <_vfprintf_r+0xb2c>
800043bc:	40 22       	lddsp	r2,sp[0x8]
800043be:	2f e2       	sub	r2,-2
800043c0:	36 60       	mov	r0,102
800043c2:	c1 58       	rjmp	800043ec <_vfprintf_r+0xb2c>
800043c4:	fa f2 06 ac 	ld.w	r2,sp[1708]
800043c8:	40 6e       	lddsp	lr,sp[0x18]
800043ca:	1c 32       	cp.w	r2,lr
800043cc:	c0 65       	brlt	800043d8 <_vfprintf_r+0xb18>
800043ce:	ed b5 00 00 	bld	r5,0x0
800043d2:	f7 b2 00 ff 	subeq	r2,-1
800043d6:	c0 a8       	rjmp	800043ea <_vfprintf_r+0xb2a>
800043d8:	e4 08 11 02 	rsub	r8,r2,2
800043dc:	40 6c       	lddsp	r12,sp[0x18]
800043de:	58 02       	cp.w	r2,0
800043e0:	f0 02 17 a0 	movle	r2,r8
800043e4:	f9 b2 09 01 	movgt	r2,1
800043e8:	18 02       	add	r2,r12
800043ea:	36 70       	mov	r0,103
800043ec:	40 9b       	lddsp	r11,sp[0x24]
800043ee:	58 0b       	cp.w	r11,0
800043f0:	e0 80 05 94 	breq	80004f18 <_vfprintf_r+0x1658>
800043f4:	32 d8       	mov	r8,45
800043f6:	fb 68 06 bb 	st.b	sp[1723],r8
800043fa:	e0 8f 05 93 	bral	80004f20 <_vfprintf_r+0x1660>
800043fe:	50 a7       	stdsp	sp[0x28],r7
80004400:	04 94       	mov	r4,r2
80004402:	0c 97       	mov	r7,r6
80004404:	02 92       	mov	r2,r1
80004406:	06 96       	mov	r6,r3
80004408:	40 41       	lddsp	r1,sp[0x10]
8000440a:	40 93       	lddsp	r3,sp[0x24]
8000440c:	0e 99       	mov	r9,r7
8000440e:	ed b5 00 05 	bld	r5,0x5
80004412:	c4 81       	brne	800044a2 <_vfprintf_r+0xbe2>
80004414:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004418:	40 3e       	lddsp	lr,sp[0xc]
8000441a:	58 0e       	cp.w	lr,0
8000441c:	c1 d0       	breq	80004456 <_vfprintf_r+0xb96>
8000441e:	10 36       	cp.w	r6,r8
80004420:	c0 64       	brge	8000442c <_vfprintf_r+0xb6c>
80004422:	fa cc f9 44 	sub	r12,sp,-1724
80004426:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000442a:	c1 d8       	rjmp	80004464 <_vfprintf_r+0xba4>
8000442c:	fa c8 f9 50 	sub	r8,sp,-1712
80004430:	1a d8       	st.w	--sp,r8
80004432:	fa c8 fa b8 	sub	r8,sp,-1352
80004436:	04 9a       	mov	r10,r2
80004438:	1a d8       	st.w	--sp,r8
8000443a:	fa c8 fb b4 	sub	r8,sp,-1100
8000443e:	0c 9b       	mov	r11,r6
80004440:	1a d8       	st.w	--sp,r8
80004442:	08 9c       	mov	r12,r4
80004444:	fa c8 f9 40 	sub	r8,sp,-1728
80004448:	fa c9 ff b4 	sub	r9,sp,-76
8000444c:	fe b0 f8 a2 	rcall	80003590 <get_arg>
80004450:	2f dd       	sub	sp,-12
80004452:	78 0a       	ld.w	r10,r12[0x0]
80004454:	c2 08       	rjmp	80004494 <_vfprintf_r+0xbd4>
80004456:	2f f7       	sub	r7,-1
80004458:	10 39       	cp.w	r9,r8
8000445a:	c0 84       	brge	8000446a <_vfprintf_r+0xbaa>
8000445c:	fa cb f9 44 	sub	r11,sp,-1724
80004460:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004464:	ec fa fd 88 	ld.w	r10,r6[-632]
80004468:	c1 68       	rjmp	80004494 <_vfprintf_r+0xbd4>
8000446a:	41 09       	lddsp	r9,sp[0x40]
8000446c:	59 f8       	cp.w	r8,31
8000446e:	e0 89 00 10 	brgt	8000448e <_vfprintf_r+0xbce>
80004472:	f2 ca ff fc 	sub	r10,r9,-4
80004476:	51 0a       	stdsp	sp[0x40],r10
80004478:	fa c6 f9 44 	sub	r6,sp,-1724
8000447c:	72 0a       	ld.w	r10,r9[0x0]
8000447e:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004482:	f3 4a fd 88 	st.w	r9[-632],r10
80004486:	2f f8       	sub	r8,-1
80004488:	fb 48 06 b4 	st.w	sp[1716],r8
8000448c:	c0 48       	rjmp	80004494 <_vfprintf_r+0xbd4>
8000448e:	72 0a       	ld.w	r10,r9[0x0]
80004490:	2f c9       	sub	r9,-4
80004492:	51 09       	stdsp	sp[0x40],r9
80004494:	40 be       	lddsp	lr,sp[0x2c]
80004496:	1c 98       	mov	r8,lr
80004498:	95 1e       	st.w	r10[0x4],lr
8000449a:	bf 58       	asr	r8,0x1f
8000449c:	95 08       	st.w	r10[0x0],r8
8000449e:	fe 9f fa 9f 	bral	800039dc <_vfprintf_r+0x11c>
800044a2:	ed b5 00 04 	bld	r5,0x4
800044a6:	c4 80       	breq	80004536 <_vfprintf_r+0xc76>
800044a8:	e2 15 00 40 	andl	r5,0x40,COH
800044ac:	c4 50       	breq	80004536 <_vfprintf_r+0xc76>
800044ae:	fa f8 06 b4 	ld.w	r8,sp[1716]
800044b2:	40 3c       	lddsp	r12,sp[0xc]
800044b4:	58 0c       	cp.w	r12,0
800044b6:	c1 d0       	breq	800044f0 <_vfprintf_r+0xc30>
800044b8:	10 36       	cp.w	r6,r8
800044ba:	c0 64       	brge	800044c6 <_vfprintf_r+0xc06>
800044bc:	fa cb f9 44 	sub	r11,sp,-1724
800044c0:	f6 06 00 36 	add	r6,r11,r6<<0x3
800044c4:	c1 d8       	rjmp	800044fe <_vfprintf_r+0xc3e>
800044c6:	fa c8 f9 50 	sub	r8,sp,-1712
800044ca:	1a d8       	st.w	--sp,r8
800044cc:	fa c8 fa b8 	sub	r8,sp,-1352
800044d0:	04 9a       	mov	r10,r2
800044d2:	1a d8       	st.w	--sp,r8
800044d4:	fa c8 fb b4 	sub	r8,sp,-1100
800044d8:	0c 9b       	mov	r11,r6
800044da:	1a d8       	st.w	--sp,r8
800044dc:	08 9c       	mov	r12,r4
800044de:	fa c8 f9 40 	sub	r8,sp,-1728
800044e2:	fa c9 ff b4 	sub	r9,sp,-76
800044e6:	fe b0 f8 55 	rcall	80003590 <get_arg>
800044ea:	2f dd       	sub	sp,-12
800044ec:	78 0a       	ld.w	r10,r12[0x0]
800044ee:	c2 08       	rjmp	8000452e <_vfprintf_r+0xc6e>
800044f0:	2f f7       	sub	r7,-1
800044f2:	10 39       	cp.w	r9,r8
800044f4:	c0 84       	brge	80004504 <_vfprintf_r+0xc44>
800044f6:	fa ca f9 44 	sub	r10,sp,-1724
800044fa:	f4 06 00 36 	add	r6,r10,r6<<0x3
800044fe:	ec fa fd 88 	ld.w	r10,r6[-632]
80004502:	c1 68       	rjmp	8000452e <_vfprintf_r+0xc6e>
80004504:	41 09       	lddsp	r9,sp[0x40]
80004506:	59 f8       	cp.w	r8,31
80004508:	e0 89 00 10 	brgt	80004528 <_vfprintf_r+0xc68>
8000450c:	f2 ca ff fc 	sub	r10,r9,-4
80004510:	51 0a       	stdsp	sp[0x40],r10
80004512:	fa c6 f9 44 	sub	r6,sp,-1724
80004516:	72 0a       	ld.w	r10,r9[0x0]
80004518:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000451c:	f3 4a fd 88 	st.w	r9[-632],r10
80004520:	2f f8       	sub	r8,-1
80004522:	fb 48 06 b4 	st.w	sp[1716],r8
80004526:	c0 48       	rjmp	8000452e <_vfprintf_r+0xc6e>
80004528:	72 0a       	ld.w	r10,r9[0x0]
8000452a:	2f c9       	sub	r9,-4
8000452c:	51 09       	stdsp	sp[0x40],r9
8000452e:	40 be       	lddsp	lr,sp[0x2c]
80004530:	b4 0e       	st.h	r10[0x0],lr
80004532:	fe 9f fa 55 	bral	800039dc <_vfprintf_r+0x11c>
80004536:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000453a:	40 3c       	lddsp	r12,sp[0xc]
8000453c:	58 0c       	cp.w	r12,0
8000453e:	c1 d0       	breq	80004578 <_vfprintf_r+0xcb8>
80004540:	10 36       	cp.w	r6,r8
80004542:	c0 64       	brge	8000454e <_vfprintf_r+0xc8e>
80004544:	fa cb f9 44 	sub	r11,sp,-1724
80004548:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000454c:	c1 d8       	rjmp	80004586 <_vfprintf_r+0xcc6>
8000454e:	fa c8 f9 50 	sub	r8,sp,-1712
80004552:	1a d8       	st.w	--sp,r8
80004554:	fa c8 fa b8 	sub	r8,sp,-1352
80004558:	04 9a       	mov	r10,r2
8000455a:	1a d8       	st.w	--sp,r8
8000455c:	fa c8 fb b4 	sub	r8,sp,-1100
80004560:	0c 9b       	mov	r11,r6
80004562:	1a d8       	st.w	--sp,r8
80004564:	08 9c       	mov	r12,r4
80004566:	fa c8 f9 40 	sub	r8,sp,-1728
8000456a:	fa c9 ff b4 	sub	r9,sp,-76
8000456e:	fe b0 f8 11 	rcall	80003590 <get_arg>
80004572:	2f dd       	sub	sp,-12
80004574:	78 0a       	ld.w	r10,r12[0x0]
80004576:	c2 08       	rjmp	800045b6 <_vfprintf_r+0xcf6>
80004578:	2f f7       	sub	r7,-1
8000457a:	10 39       	cp.w	r9,r8
8000457c:	c0 84       	brge	8000458c <_vfprintf_r+0xccc>
8000457e:	fa ca f9 44 	sub	r10,sp,-1724
80004582:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004586:	ec fa fd 88 	ld.w	r10,r6[-632]
8000458a:	c1 68       	rjmp	800045b6 <_vfprintf_r+0xcf6>
8000458c:	41 09       	lddsp	r9,sp[0x40]
8000458e:	59 f8       	cp.w	r8,31
80004590:	e0 89 00 10 	brgt	800045b0 <_vfprintf_r+0xcf0>
80004594:	f2 ca ff fc 	sub	r10,r9,-4
80004598:	51 0a       	stdsp	sp[0x40],r10
8000459a:	fa c6 f9 44 	sub	r6,sp,-1724
8000459e:	72 0a       	ld.w	r10,r9[0x0]
800045a0:	ec 08 00 39 	add	r9,r6,r8<<0x3
800045a4:	f3 4a fd 88 	st.w	r9[-632],r10
800045a8:	2f f8       	sub	r8,-1
800045aa:	fb 48 06 b4 	st.w	sp[1716],r8
800045ae:	c0 48       	rjmp	800045b6 <_vfprintf_r+0xcf6>
800045b0:	72 0a       	ld.w	r10,r9[0x0]
800045b2:	2f c9       	sub	r9,-4
800045b4:	51 09       	stdsp	sp[0x40],r9
800045b6:	40 be       	lddsp	lr,sp[0x2c]
800045b8:	95 0e       	st.w	r10[0x0],lr
800045ba:	fe 9f fa 11 	bral	800039dc <_vfprintf_r+0x11c>
800045be:	50 a7       	stdsp	sp[0x28],r7
800045c0:	50 80       	stdsp	sp[0x20],r0
800045c2:	0c 97       	mov	r7,r6
800045c4:	04 94       	mov	r4,r2
800045c6:	06 96       	mov	r6,r3
800045c8:	02 92       	mov	r2,r1
800045ca:	40 93       	lddsp	r3,sp[0x24]
800045cc:	10 90       	mov	r0,r8
800045ce:	40 41       	lddsp	r1,sp[0x10]
800045d0:	a5 a5       	sbr	r5,0x4
800045d2:	c0 a8       	rjmp	800045e6 <_vfprintf_r+0xd26>
800045d4:	50 a7       	stdsp	sp[0x28],r7
800045d6:	50 80       	stdsp	sp[0x20],r0
800045d8:	0c 97       	mov	r7,r6
800045da:	04 94       	mov	r4,r2
800045dc:	06 96       	mov	r6,r3
800045de:	02 92       	mov	r2,r1
800045e0:	40 93       	lddsp	r3,sp[0x24]
800045e2:	10 90       	mov	r0,r8
800045e4:	40 41       	lddsp	r1,sp[0x10]
800045e6:	ed b5 00 05 	bld	r5,0x5
800045ea:	c5 d1       	brne	800046a4 <_vfprintf_r+0xde4>
800045ec:	fa f8 06 b4 	ld.w	r8,sp[1716]
800045f0:	40 3c       	lddsp	r12,sp[0xc]
800045f2:	58 0c       	cp.w	r12,0
800045f4:	c2 60       	breq	80004640 <_vfprintf_r+0xd80>
800045f6:	10 36       	cp.w	r6,r8
800045f8:	c0 a4       	brge	8000460c <_vfprintf_r+0xd4c>
800045fa:	fa cb f9 44 	sub	r11,sp,-1724
800045fe:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004602:	ec e8 fd 88 	ld.d	r8,r6[-632]
80004606:	fa e9 00 00 	st.d	sp[0],r8
8000460a:	c1 88       	rjmp	8000463a <_vfprintf_r+0xd7a>
8000460c:	fa c8 f9 50 	sub	r8,sp,-1712
80004610:	1a d8       	st.w	--sp,r8
80004612:	fa c8 fa b8 	sub	r8,sp,-1352
80004616:	04 9a       	mov	r10,r2
80004618:	1a d8       	st.w	--sp,r8
8000461a:	0c 9b       	mov	r11,r6
8000461c:	fa c8 fb b4 	sub	r8,sp,-1100
80004620:	08 9c       	mov	r12,r4
80004622:	1a d8       	st.w	--sp,r8
80004624:	fa c8 f9 40 	sub	r8,sp,-1728
80004628:	fa c9 ff b4 	sub	r9,sp,-76
8000462c:	fe b0 f7 b2 	rcall	80003590 <get_arg>
80004630:	2f dd       	sub	sp,-12
80004632:	f8 ea 00 00 	ld.d	r10,r12[0]
80004636:	fa eb 00 00 	st.d	sp[0],r10
8000463a:	30 08       	mov	r8,0
8000463c:	e0 8f 03 de 	bral	80004df8 <_vfprintf_r+0x1538>
80004640:	ee ca ff ff 	sub	r10,r7,-1
80004644:	10 37       	cp.w	r7,r8
80004646:	c0 b4       	brge	8000465c <_vfprintf_r+0xd9c>
80004648:	fa c9 f9 44 	sub	r9,sp,-1724
8000464c:	14 97       	mov	r7,r10
8000464e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004652:	ec ea fd 88 	ld.d	r10,r6[-632]
80004656:	fa eb 00 00 	st.d	sp[0],r10
8000465a:	c1 88       	rjmp	8000468a <_vfprintf_r+0xdca>
8000465c:	41 09       	lddsp	r9,sp[0x40]
8000465e:	59 f8       	cp.w	r8,31
80004660:	e0 89 00 18 	brgt	80004690 <_vfprintf_r+0xdd0>
80004664:	f2 e6 00 00 	ld.d	r6,r9[0]
80004668:	f2 cb ff f8 	sub	r11,r9,-8
8000466c:	fa e7 00 00 	st.d	sp[0],r6
80004670:	51 0b       	stdsp	sp[0x40],r11
80004672:	fa c6 f9 44 	sub	r6,sp,-1724
80004676:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000467a:	fa e6 00 00 	ld.d	r6,sp[0]
8000467e:	f2 e7 fd 88 	st.d	r9[-632],r6
80004682:	2f f8       	sub	r8,-1
80004684:	14 97       	mov	r7,r10
80004686:	fb 48 06 b4 	st.w	sp[1716],r8
8000468a:	40 38       	lddsp	r8,sp[0xc]
8000468c:	e0 8f 03 b6 	bral	80004df8 <_vfprintf_r+0x1538>
80004690:	f2 e6 00 00 	ld.d	r6,r9[0]
80004694:	40 38       	lddsp	r8,sp[0xc]
80004696:	fa e7 00 00 	st.d	sp[0],r6
8000469a:	2f 89       	sub	r9,-8
8000469c:	14 97       	mov	r7,r10
8000469e:	51 09       	stdsp	sp[0x40],r9
800046a0:	e0 8f 03 ac 	bral	80004df8 <_vfprintf_r+0x1538>
800046a4:	ed b5 00 04 	bld	r5,0x4
800046a8:	c1 61       	brne	800046d4 <_vfprintf_r+0xe14>
800046aa:	fa f8 06 b4 	ld.w	r8,sp[1716]
800046ae:	40 3e       	lddsp	lr,sp[0xc]
800046b0:	58 0e       	cp.w	lr,0
800046b2:	c0 80       	breq	800046c2 <_vfprintf_r+0xe02>
800046b4:	10 36       	cp.w	r6,r8
800046b6:	c6 74       	brge	80004784 <_vfprintf_r+0xec4>
800046b8:	fa cc f9 44 	sub	r12,sp,-1724
800046bc:	f8 06 00 36 	add	r6,r12,r6<<0x3
800046c0:	c8 08       	rjmp	800047c0 <_vfprintf_r+0xf00>
800046c2:	ee ca ff ff 	sub	r10,r7,-1
800046c6:	10 37       	cp.w	r7,r8
800046c8:	c7 f4       	brge	800047c6 <_vfprintf_r+0xf06>
800046ca:	fa cb f9 44 	sub	r11,sp,-1724
800046ce:	f6 06 00 36 	add	r6,r11,r6<<0x3
800046d2:	c7 68       	rjmp	800047be <_vfprintf_r+0xefe>
800046d4:	ed b5 00 06 	bld	r5,0x6
800046d8:	c4 a1       	brne	8000476c <_vfprintf_r+0xeac>
800046da:	fa f8 06 b4 	ld.w	r8,sp[1716]
800046de:	40 3c       	lddsp	r12,sp[0xc]
800046e0:	58 0c       	cp.w	r12,0
800046e2:	c1 d0       	breq	8000471c <_vfprintf_r+0xe5c>
800046e4:	10 36       	cp.w	r6,r8
800046e6:	c0 64       	brge	800046f2 <_vfprintf_r+0xe32>
800046e8:	fa cb f9 44 	sub	r11,sp,-1724
800046ec:	f6 06 00 36 	add	r6,r11,r6<<0x3
800046f0:	c1 f8       	rjmp	8000472e <_vfprintf_r+0xe6e>
800046f2:	fa c8 f9 50 	sub	r8,sp,-1712
800046f6:	1a d8       	st.w	--sp,r8
800046f8:	fa c8 fa b8 	sub	r8,sp,-1352
800046fc:	1a d8       	st.w	--sp,r8
800046fe:	fa c8 fb b4 	sub	r8,sp,-1100
80004702:	1a d8       	st.w	--sp,r8
80004704:	fa c8 f9 40 	sub	r8,sp,-1728
80004708:	fa c9 ff b4 	sub	r9,sp,-76
8000470c:	04 9a       	mov	r10,r2
8000470e:	0c 9b       	mov	r11,r6
80004710:	08 9c       	mov	r12,r4
80004712:	fe b0 f7 3f 	rcall	80003590 <get_arg>
80004716:	2f dd       	sub	sp,-12
80004718:	98 18       	ld.sh	r8,r12[0x2]
8000471a:	c2 68       	rjmp	80004766 <_vfprintf_r+0xea6>
8000471c:	ee ca ff ff 	sub	r10,r7,-1
80004720:	10 37       	cp.w	r7,r8
80004722:	c0 94       	brge	80004734 <_vfprintf_r+0xe74>
80004724:	fa c9 f9 44 	sub	r9,sp,-1724
80004728:	14 97       	mov	r7,r10
8000472a:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000472e:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80004732:	c1 a8       	rjmp	80004766 <_vfprintf_r+0xea6>
80004734:	41 09       	lddsp	r9,sp[0x40]
80004736:	59 f8       	cp.w	r8,31
80004738:	e0 89 00 13 	brgt	8000475e <_vfprintf_r+0xe9e>
8000473c:	f2 cb ff fc 	sub	r11,r9,-4
80004740:	51 0b       	stdsp	sp[0x40],r11
80004742:	72 09       	ld.w	r9,r9[0x0]
80004744:	fa c6 f9 44 	sub	r6,sp,-1724
80004748:	ec 08 00 3b 	add	r11,r6,r8<<0x3
8000474c:	2f f8       	sub	r8,-1
8000474e:	f7 49 fd 88 	st.w	r11[-632],r9
80004752:	fb 48 06 b4 	st.w	sp[1716],r8
80004756:	14 97       	mov	r7,r10
80004758:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
8000475c:	c0 58       	rjmp	80004766 <_vfprintf_r+0xea6>
8000475e:	92 18       	ld.sh	r8,r9[0x2]
80004760:	14 97       	mov	r7,r10
80004762:	2f c9       	sub	r9,-4
80004764:	51 09       	stdsp	sp[0x40],r9
80004766:	5c 78       	castu.h	r8
80004768:	50 18       	stdsp	sp[0x4],r8
8000476a:	c4 68       	rjmp	800047f6 <_vfprintf_r+0xf36>
8000476c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004770:	40 3c       	lddsp	r12,sp[0xc]
80004772:	58 0c       	cp.w	r12,0
80004774:	c1 d0       	breq	800047ae <_vfprintf_r+0xeee>
80004776:	10 36       	cp.w	r6,r8
80004778:	c0 64       	brge	80004784 <_vfprintf_r+0xec4>
8000477a:	fa cb f9 44 	sub	r11,sp,-1724
8000477e:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004782:	c1 f8       	rjmp	800047c0 <_vfprintf_r+0xf00>
80004784:	fa c8 f9 50 	sub	r8,sp,-1712
80004788:	1a d8       	st.w	--sp,r8
8000478a:	fa c8 fa b8 	sub	r8,sp,-1352
8000478e:	0c 9b       	mov	r11,r6
80004790:	1a d8       	st.w	--sp,r8
80004792:	fa c8 fb b4 	sub	r8,sp,-1100
80004796:	04 9a       	mov	r10,r2
80004798:	1a d8       	st.w	--sp,r8
8000479a:	08 9c       	mov	r12,r4
8000479c:	fa c8 f9 40 	sub	r8,sp,-1728
800047a0:	fa c9 ff b4 	sub	r9,sp,-76
800047a4:	fe b0 f6 f6 	rcall	80003590 <get_arg>
800047a8:	2f dd       	sub	sp,-12
800047aa:	78 0b       	ld.w	r11,r12[0x0]
800047ac:	c2 48       	rjmp	800047f4 <_vfprintf_r+0xf34>
800047ae:	ee ca ff ff 	sub	r10,r7,-1
800047b2:	10 37       	cp.w	r7,r8
800047b4:	c0 94       	brge	800047c6 <_vfprintf_r+0xf06>
800047b6:	fa c9 f9 44 	sub	r9,sp,-1724
800047ba:	f2 06 00 36 	add	r6,r9,r6<<0x3
800047be:	14 97       	mov	r7,r10
800047c0:	ec fb fd 88 	ld.w	r11,r6[-632]
800047c4:	c1 88       	rjmp	800047f4 <_vfprintf_r+0xf34>
800047c6:	41 09       	lddsp	r9,sp[0x40]
800047c8:	59 f8       	cp.w	r8,31
800047ca:	e0 89 00 11 	brgt	800047ec <_vfprintf_r+0xf2c>
800047ce:	f2 cb ff fc 	sub	r11,r9,-4
800047d2:	51 0b       	stdsp	sp[0x40],r11
800047d4:	fa c6 f9 44 	sub	r6,sp,-1724
800047d8:	72 0b       	ld.w	r11,r9[0x0]
800047da:	ec 08 00 39 	add	r9,r6,r8<<0x3
800047de:	f3 4b fd 88 	st.w	r9[-632],r11
800047e2:	2f f8       	sub	r8,-1
800047e4:	14 97       	mov	r7,r10
800047e6:	fb 48 06 b4 	st.w	sp[1716],r8
800047ea:	c0 58       	rjmp	800047f4 <_vfprintf_r+0xf34>
800047ec:	72 0b       	ld.w	r11,r9[0x0]
800047ee:	14 97       	mov	r7,r10
800047f0:	2f c9       	sub	r9,-4
800047f2:	51 09       	stdsp	sp[0x40],r9
800047f4:	50 1b       	stdsp	sp[0x4],r11
800047f6:	30 0e       	mov	lr,0
800047f8:	50 0e       	stdsp	sp[0x0],lr
800047fa:	1c 98       	mov	r8,lr
800047fc:	e0 8f 02 fe 	bral	80004df8 <_vfprintf_r+0x1538>
80004800:	50 a7       	stdsp	sp[0x28],r7
80004802:	50 80       	stdsp	sp[0x20],r0
80004804:	0c 97       	mov	r7,r6
80004806:	04 94       	mov	r4,r2
80004808:	06 96       	mov	r6,r3
8000480a:	02 92       	mov	r2,r1
8000480c:	40 93       	lddsp	r3,sp[0x24]
8000480e:	40 41       	lddsp	r1,sp[0x10]
80004810:	0e 99       	mov	r9,r7
80004812:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004816:	40 3c       	lddsp	r12,sp[0xc]
80004818:	58 0c       	cp.w	r12,0
8000481a:	c1 d0       	breq	80004854 <_vfprintf_r+0xf94>
8000481c:	10 36       	cp.w	r6,r8
8000481e:	c0 64       	brge	8000482a <_vfprintf_r+0xf6a>
80004820:	fa cb f9 44 	sub	r11,sp,-1724
80004824:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004828:	c1 d8       	rjmp	80004862 <_vfprintf_r+0xfa2>
8000482a:	fa c8 f9 50 	sub	r8,sp,-1712
8000482e:	1a d8       	st.w	--sp,r8
80004830:	fa c8 fa b8 	sub	r8,sp,-1352
80004834:	1a d8       	st.w	--sp,r8
80004836:	fa c8 fb b4 	sub	r8,sp,-1100
8000483a:	1a d8       	st.w	--sp,r8
8000483c:	fa c9 ff b4 	sub	r9,sp,-76
80004840:	fa c8 f9 40 	sub	r8,sp,-1728
80004844:	04 9a       	mov	r10,r2
80004846:	0c 9b       	mov	r11,r6
80004848:	08 9c       	mov	r12,r4
8000484a:	fe b0 f6 a3 	rcall	80003590 <get_arg>
8000484e:	2f dd       	sub	sp,-12
80004850:	78 09       	ld.w	r9,r12[0x0]
80004852:	c2 18       	rjmp	80004894 <_vfprintf_r+0xfd4>
80004854:	2f f7       	sub	r7,-1
80004856:	10 39       	cp.w	r9,r8
80004858:	c0 84       	brge	80004868 <_vfprintf_r+0xfa8>
8000485a:	fa ca f9 44 	sub	r10,sp,-1724
8000485e:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004862:	ec f9 fd 88 	ld.w	r9,r6[-632]
80004866:	c1 78       	rjmp	80004894 <_vfprintf_r+0xfd4>
80004868:	41 09       	lddsp	r9,sp[0x40]
8000486a:	59 f8       	cp.w	r8,31
8000486c:	e0 89 00 10 	brgt	8000488c <_vfprintf_r+0xfcc>
80004870:	f2 ca ff fc 	sub	r10,r9,-4
80004874:	51 0a       	stdsp	sp[0x40],r10
80004876:	fa c6 f9 44 	sub	r6,sp,-1724
8000487a:	72 09       	ld.w	r9,r9[0x0]
8000487c:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80004880:	f5 49 fd 88 	st.w	r10[-632],r9
80004884:	2f f8       	sub	r8,-1
80004886:	fb 48 06 b4 	st.w	sp[1716],r8
8000488a:	c0 58       	rjmp	80004894 <_vfprintf_r+0xfd4>
8000488c:	f2 c8 ff fc 	sub	r8,r9,-4
80004890:	51 08       	stdsp	sp[0x40],r8
80004892:	72 09       	ld.w	r9,r9[0x0]
80004894:	33 08       	mov	r8,48
80004896:	fb 68 06 b8 	st.b	sp[1720],r8
8000489a:	37 88       	mov	r8,120
8000489c:	30 0e       	mov	lr,0
8000489e:	fb 68 06 b9 	st.b	sp[1721],r8
800048a2:	fe cc b4 42 	sub	r12,pc,-19390
800048a6:	50 19       	stdsp	sp[0x4],r9
800048a8:	a1 b5       	sbr	r5,0x1
800048aa:	50 0e       	stdsp	sp[0x0],lr
800048ac:	50 dc       	stdsp	sp[0x34],r12
800048ae:	30 28       	mov	r8,2
800048b0:	37 80       	mov	r0,120
800048b2:	e0 8f 02 a3 	bral	80004df8 <_vfprintf_r+0x1538>
800048b6:	50 a7       	stdsp	sp[0x28],r7
800048b8:	50 80       	stdsp	sp[0x20],r0
800048ba:	10 90       	mov	r0,r8
800048bc:	30 08       	mov	r8,0
800048be:	fb 68 06 bb 	st.b	sp[1723],r8
800048c2:	0c 97       	mov	r7,r6
800048c4:	04 94       	mov	r4,r2
800048c6:	06 96       	mov	r6,r3
800048c8:	02 92       	mov	r2,r1
800048ca:	40 93       	lddsp	r3,sp[0x24]
800048cc:	40 41       	lddsp	r1,sp[0x10]
800048ce:	0e 99       	mov	r9,r7
800048d0:	fa f8 06 b4 	ld.w	r8,sp[1716]
800048d4:	40 3b       	lddsp	r11,sp[0xc]
800048d6:	58 0b       	cp.w	r11,0
800048d8:	c1 d0       	breq	80004912 <_vfprintf_r+0x1052>
800048da:	10 36       	cp.w	r6,r8
800048dc:	c0 64       	brge	800048e8 <_vfprintf_r+0x1028>
800048de:	fa ca f9 44 	sub	r10,sp,-1724
800048e2:	f4 06 00 36 	add	r6,r10,r6<<0x3
800048e6:	c1 d8       	rjmp	80004920 <_vfprintf_r+0x1060>
800048e8:	fa c8 f9 50 	sub	r8,sp,-1712
800048ec:	1a d8       	st.w	--sp,r8
800048ee:	fa c8 fa b8 	sub	r8,sp,-1352
800048f2:	1a d8       	st.w	--sp,r8
800048f4:	fa c8 fb b4 	sub	r8,sp,-1100
800048f8:	0c 9b       	mov	r11,r6
800048fa:	1a d8       	st.w	--sp,r8
800048fc:	04 9a       	mov	r10,r2
800048fe:	fa c8 f9 40 	sub	r8,sp,-1728
80004902:	fa c9 ff b4 	sub	r9,sp,-76
80004906:	08 9c       	mov	r12,r4
80004908:	fe b0 f6 44 	rcall	80003590 <get_arg>
8000490c:	2f dd       	sub	sp,-12
8000490e:	78 06       	ld.w	r6,r12[0x0]
80004910:	c2 08       	rjmp	80004950 <_vfprintf_r+0x1090>
80004912:	2f f7       	sub	r7,-1
80004914:	10 39       	cp.w	r9,r8
80004916:	c0 84       	brge	80004926 <_vfprintf_r+0x1066>
80004918:	fa c9 f9 44 	sub	r9,sp,-1724
8000491c:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004920:	ec f6 fd 88 	ld.w	r6,r6[-632]
80004924:	c1 68       	rjmp	80004950 <_vfprintf_r+0x1090>
80004926:	41 09       	lddsp	r9,sp[0x40]
80004928:	59 f8       	cp.w	r8,31
8000492a:	e0 89 00 10 	brgt	8000494a <_vfprintf_r+0x108a>
8000492e:	f2 ca ff fc 	sub	r10,r9,-4
80004932:	51 0a       	stdsp	sp[0x40],r10
80004934:	72 06       	ld.w	r6,r9[0x0]
80004936:	fa ce f9 44 	sub	lr,sp,-1724
8000493a:	fc 08 00 39 	add	r9,lr,r8<<0x3
8000493e:	f3 46 fd 88 	st.w	r9[-632],r6
80004942:	2f f8       	sub	r8,-1
80004944:	fb 48 06 b4 	st.w	sp[1716],r8
80004948:	c0 48       	rjmp	80004950 <_vfprintf_r+0x1090>
8000494a:	72 06       	ld.w	r6,r9[0x0]
8000494c:	2f c9       	sub	r9,-4
8000494e:	51 09       	stdsp	sp[0x40],r9
80004950:	40 2c       	lddsp	r12,sp[0x8]
80004952:	58 0c       	cp.w	r12,0
80004954:	c1 05       	brlt	80004974 <_vfprintf_r+0x10b4>
80004956:	18 9a       	mov	r10,r12
80004958:	30 0b       	mov	r11,0
8000495a:	0c 9c       	mov	r12,r6
8000495c:	e0 a0 14 58 	rcall	8000720c <memchr>
80004960:	e0 80 02 df 	breq	80004f1e <_vfprintf_r+0x165e>
80004964:	f8 06 01 02 	sub	r2,r12,r6
80004968:	40 2b       	lddsp	r11,sp[0x8]
8000496a:	16 32       	cp.w	r2,r11
8000496c:	e0 89 02 d9 	brgt	80004f1e <_vfprintf_r+0x165e>
80004970:	e0 8f 02 d4 	bral	80004f18 <_vfprintf_r+0x1658>
80004974:	30 0a       	mov	r10,0
80004976:	0c 9c       	mov	r12,r6
80004978:	50 2a       	stdsp	sp[0x8],r10
8000497a:	e0 a0 19 33 	rcall	80007be0 <strlen>
8000497e:	18 92       	mov	r2,r12
80004980:	e0 8f 02 d2 	bral	80004f24 <_vfprintf_r+0x1664>
80004984:	50 a7       	stdsp	sp[0x28],r7
80004986:	50 80       	stdsp	sp[0x20],r0
80004988:	0c 97       	mov	r7,r6
8000498a:	04 94       	mov	r4,r2
8000498c:	06 96       	mov	r6,r3
8000498e:	02 92       	mov	r2,r1
80004990:	40 93       	lddsp	r3,sp[0x24]
80004992:	10 90       	mov	r0,r8
80004994:	40 41       	lddsp	r1,sp[0x10]
80004996:	a5 a5       	sbr	r5,0x4
80004998:	c0 a8       	rjmp	800049ac <_vfprintf_r+0x10ec>
8000499a:	50 a7       	stdsp	sp[0x28],r7
8000499c:	50 80       	stdsp	sp[0x20],r0
8000499e:	0c 97       	mov	r7,r6
800049a0:	04 94       	mov	r4,r2
800049a2:	06 96       	mov	r6,r3
800049a4:	02 92       	mov	r2,r1
800049a6:	40 93       	lddsp	r3,sp[0x24]
800049a8:	10 90       	mov	r0,r8
800049aa:	40 41       	lddsp	r1,sp[0x10]
800049ac:	ed b5 00 05 	bld	r5,0x5
800049b0:	c5 61       	brne	80004a5c <_vfprintf_r+0x119c>
800049b2:	fa f8 06 b4 	ld.w	r8,sp[1716]
800049b6:	40 39       	lddsp	r9,sp[0xc]
800049b8:	58 09       	cp.w	r9,0
800049ba:	c2 10       	breq	800049fc <_vfprintf_r+0x113c>
800049bc:	10 36       	cp.w	r6,r8
800049be:	c0 74       	brge	800049cc <_vfprintf_r+0x110c>
800049c0:	fa c8 f9 44 	sub	r8,sp,-1724
800049c4:	f0 06 00 36 	add	r6,r8,r6<<0x3
800049c8:	c2 38       	rjmp	80004a0e <_vfprintf_r+0x114e>
800049ca:	d7 03       	nop
800049cc:	fa c8 f9 50 	sub	r8,sp,-1712
800049d0:	1a d8       	st.w	--sp,r8
800049d2:	fa c8 fa b8 	sub	r8,sp,-1352
800049d6:	1a d8       	st.w	--sp,r8
800049d8:	fa c8 fb b4 	sub	r8,sp,-1100
800049dc:	1a d8       	st.w	--sp,r8
800049de:	fa c8 f9 40 	sub	r8,sp,-1728
800049e2:	fa c9 ff b4 	sub	r9,sp,-76
800049e6:	04 9a       	mov	r10,r2
800049e8:	0c 9b       	mov	r11,r6
800049ea:	08 9c       	mov	r12,r4
800049ec:	fe b0 f5 d2 	rcall	80003590 <get_arg>
800049f0:	2f dd       	sub	sp,-12
800049f2:	f8 e8 00 00 	ld.d	r8,r12[0]
800049f6:	fa e9 00 00 	st.d	sp[0],r8
800049fa:	c2 e8       	rjmp	80004a56 <_vfprintf_r+0x1196>
800049fc:	ee ca ff ff 	sub	r10,r7,-1
80004a00:	10 37       	cp.w	r7,r8
80004a02:	c0 b4       	brge	80004a18 <_vfprintf_r+0x1158>
80004a04:	fa c8 f9 44 	sub	r8,sp,-1724
80004a08:	14 97       	mov	r7,r10
80004a0a:	f0 06 00 36 	add	r6,r8,r6<<0x3
80004a0e:	ec ea fd 88 	ld.d	r10,r6[-632]
80004a12:	fa eb 00 00 	st.d	sp[0],r10
80004a16:	c2 08       	rjmp	80004a56 <_vfprintf_r+0x1196>
80004a18:	41 09       	lddsp	r9,sp[0x40]
80004a1a:	59 f8       	cp.w	r8,31
80004a1c:	e0 89 00 16 	brgt	80004a48 <_vfprintf_r+0x1188>
80004a20:	f2 e6 00 00 	ld.d	r6,r9[0]
80004a24:	f2 cb ff f8 	sub	r11,r9,-8
80004a28:	fa e7 00 00 	st.d	sp[0],r6
80004a2c:	51 0b       	stdsp	sp[0x40],r11
80004a2e:	fa c6 f9 44 	sub	r6,sp,-1724
80004a32:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004a36:	fa e6 00 00 	ld.d	r6,sp[0]
80004a3a:	f2 e7 fd 88 	st.d	r9[-632],r6
80004a3e:	2f f8       	sub	r8,-1
80004a40:	14 97       	mov	r7,r10
80004a42:	fb 48 06 b4 	st.w	sp[1716],r8
80004a46:	c0 88       	rjmp	80004a56 <_vfprintf_r+0x1196>
80004a48:	f2 e6 00 00 	ld.d	r6,r9[0]
80004a4c:	2f 89       	sub	r9,-8
80004a4e:	fa e7 00 00 	st.d	sp[0],r6
80004a52:	51 09       	stdsp	sp[0x40],r9
80004a54:	14 97       	mov	r7,r10
80004a56:	30 18       	mov	r8,1
80004a58:	e0 8f 01 d0 	bral	80004df8 <_vfprintf_r+0x1538>
80004a5c:	ed b5 00 04 	bld	r5,0x4
80004a60:	c1 61       	brne	80004a8c <_vfprintf_r+0x11cc>
80004a62:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004a66:	40 3e       	lddsp	lr,sp[0xc]
80004a68:	58 0e       	cp.w	lr,0
80004a6a:	c0 80       	breq	80004a7a <_vfprintf_r+0x11ba>
80004a6c:	10 36       	cp.w	r6,r8
80004a6e:	c6 74       	brge	80004b3c <_vfprintf_r+0x127c>
80004a70:	fa cc f9 44 	sub	r12,sp,-1724
80004a74:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004a78:	c8 08       	rjmp	80004b78 <_vfprintf_r+0x12b8>
80004a7a:	ee ca ff ff 	sub	r10,r7,-1
80004a7e:	10 37       	cp.w	r7,r8
80004a80:	c7 f4       	brge	80004b7e <_vfprintf_r+0x12be>
80004a82:	fa cb f9 44 	sub	r11,sp,-1724
80004a86:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004a8a:	c7 68       	rjmp	80004b76 <_vfprintf_r+0x12b6>
80004a8c:	ed b5 00 06 	bld	r5,0x6
80004a90:	c4 a1       	brne	80004b24 <_vfprintf_r+0x1264>
80004a92:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004a96:	40 3c       	lddsp	r12,sp[0xc]
80004a98:	58 0c       	cp.w	r12,0
80004a9a:	c1 d0       	breq	80004ad4 <_vfprintf_r+0x1214>
80004a9c:	10 36       	cp.w	r6,r8
80004a9e:	c0 64       	brge	80004aaa <_vfprintf_r+0x11ea>
80004aa0:	fa cb f9 44 	sub	r11,sp,-1724
80004aa4:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004aa8:	c1 f8       	rjmp	80004ae6 <_vfprintf_r+0x1226>
80004aaa:	fa c8 f9 50 	sub	r8,sp,-1712
80004aae:	1a d8       	st.w	--sp,r8
80004ab0:	fa c8 fa b8 	sub	r8,sp,-1352
80004ab4:	1a d8       	st.w	--sp,r8
80004ab6:	fa c8 fb b4 	sub	r8,sp,-1100
80004aba:	1a d8       	st.w	--sp,r8
80004abc:	fa c8 f9 40 	sub	r8,sp,-1728
80004ac0:	fa c9 ff b4 	sub	r9,sp,-76
80004ac4:	04 9a       	mov	r10,r2
80004ac6:	0c 9b       	mov	r11,r6
80004ac8:	08 9c       	mov	r12,r4
80004aca:	fe b0 f5 63 	rcall	80003590 <get_arg>
80004ace:	2f dd       	sub	sp,-12
80004ad0:	98 18       	ld.sh	r8,r12[0x2]
80004ad2:	c2 68       	rjmp	80004b1e <_vfprintf_r+0x125e>
80004ad4:	ee ca ff ff 	sub	r10,r7,-1
80004ad8:	10 37       	cp.w	r7,r8
80004ada:	c0 94       	brge	80004aec <_vfprintf_r+0x122c>
80004adc:	fa c9 f9 44 	sub	r9,sp,-1724
80004ae0:	14 97       	mov	r7,r10
80004ae2:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004ae6:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80004aea:	c1 a8       	rjmp	80004b1e <_vfprintf_r+0x125e>
80004aec:	41 09       	lddsp	r9,sp[0x40]
80004aee:	59 f8       	cp.w	r8,31
80004af0:	e0 89 00 13 	brgt	80004b16 <_vfprintf_r+0x1256>
80004af4:	f2 cb ff fc 	sub	r11,r9,-4
80004af8:	51 0b       	stdsp	sp[0x40],r11
80004afa:	72 09       	ld.w	r9,r9[0x0]
80004afc:	fa c6 f9 44 	sub	r6,sp,-1724
80004b00:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80004b04:	2f f8       	sub	r8,-1
80004b06:	f7 49 fd 88 	st.w	r11[-632],r9
80004b0a:	fb 48 06 b4 	st.w	sp[1716],r8
80004b0e:	14 97       	mov	r7,r10
80004b10:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80004b14:	c0 58       	rjmp	80004b1e <_vfprintf_r+0x125e>
80004b16:	92 18       	ld.sh	r8,r9[0x2]
80004b18:	14 97       	mov	r7,r10
80004b1a:	2f c9       	sub	r9,-4
80004b1c:	51 09       	stdsp	sp[0x40],r9
80004b1e:	5c 78       	castu.h	r8
80004b20:	50 18       	stdsp	sp[0x4],r8
80004b22:	c4 68       	rjmp	80004bae <_vfprintf_r+0x12ee>
80004b24:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004b28:	40 3c       	lddsp	r12,sp[0xc]
80004b2a:	58 0c       	cp.w	r12,0
80004b2c:	c1 d0       	breq	80004b66 <_vfprintf_r+0x12a6>
80004b2e:	10 36       	cp.w	r6,r8
80004b30:	c0 64       	brge	80004b3c <_vfprintf_r+0x127c>
80004b32:	fa cb f9 44 	sub	r11,sp,-1724
80004b36:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004b3a:	c1 f8       	rjmp	80004b78 <_vfprintf_r+0x12b8>
80004b3c:	fa c8 f9 50 	sub	r8,sp,-1712
80004b40:	1a d8       	st.w	--sp,r8
80004b42:	fa c8 fa b8 	sub	r8,sp,-1352
80004b46:	0c 9b       	mov	r11,r6
80004b48:	1a d8       	st.w	--sp,r8
80004b4a:	fa c8 fb b4 	sub	r8,sp,-1100
80004b4e:	04 9a       	mov	r10,r2
80004b50:	1a d8       	st.w	--sp,r8
80004b52:	08 9c       	mov	r12,r4
80004b54:	fa c8 f9 40 	sub	r8,sp,-1728
80004b58:	fa c9 ff b4 	sub	r9,sp,-76
80004b5c:	fe b0 f5 1a 	rcall	80003590 <get_arg>
80004b60:	2f dd       	sub	sp,-12
80004b62:	78 0b       	ld.w	r11,r12[0x0]
80004b64:	c2 48       	rjmp	80004bac <_vfprintf_r+0x12ec>
80004b66:	ee ca ff ff 	sub	r10,r7,-1
80004b6a:	10 37       	cp.w	r7,r8
80004b6c:	c0 94       	brge	80004b7e <_vfprintf_r+0x12be>
80004b6e:	fa c9 f9 44 	sub	r9,sp,-1724
80004b72:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004b76:	14 97       	mov	r7,r10
80004b78:	ec fb fd 88 	ld.w	r11,r6[-632]
80004b7c:	c1 88       	rjmp	80004bac <_vfprintf_r+0x12ec>
80004b7e:	41 09       	lddsp	r9,sp[0x40]
80004b80:	59 f8       	cp.w	r8,31
80004b82:	e0 89 00 11 	brgt	80004ba4 <_vfprintf_r+0x12e4>
80004b86:	f2 cb ff fc 	sub	r11,r9,-4
80004b8a:	51 0b       	stdsp	sp[0x40],r11
80004b8c:	fa c6 f9 44 	sub	r6,sp,-1724
80004b90:	72 0b       	ld.w	r11,r9[0x0]
80004b92:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004b96:	f3 4b fd 88 	st.w	r9[-632],r11
80004b9a:	2f f8       	sub	r8,-1
80004b9c:	14 97       	mov	r7,r10
80004b9e:	fb 48 06 b4 	st.w	sp[1716],r8
80004ba2:	c0 58       	rjmp	80004bac <_vfprintf_r+0x12ec>
80004ba4:	72 0b       	ld.w	r11,r9[0x0]
80004ba6:	14 97       	mov	r7,r10
80004ba8:	2f c9       	sub	r9,-4
80004baa:	51 09       	stdsp	sp[0x40],r9
80004bac:	50 1b       	stdsp	sp[0x4],r11
80004bae:	30 0e       	mov	lr,0
80004bb0:	30 18       	mov	r8,1
80004bb2:	50 0e       	stdsp	sp[0x0],lr
80004bb4:	c2 29       	rjmp	80004df8 <_vfprintf_r+0x1538>
80004bb6:	50 a7       	stdsp	sp[0x28],r7
80004bb8:	50 80       	stdsp	sp[0x20],r0
80004bba:	0c 97       	mov	r7,r6
80004bbc:	04 94       	mov	r4,r2
80004bbe:	06 96       	mov	r6,r3
80004bc0:	02 92       	mov	r2,r1
80004bc2:	fe cc b7 62 	sub	r12,pc,-18590
80004bc6:	40 93       	lddsp	r3,sp[0x24]
80004bc8:	10 90       	mov	r0,r8
80004bca:	40 41       	lddsp	r1,sp[0x10]
80004bcc:	50 dc       	stdsp	sp[0x34],r12
80004bce:	ed b5 00 05 	bld	r5,0x5
80004bd2:	c5 51       	brne	80004c7c <_vfprintf_r+0x13bc>
80004bd4:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004bd8:	40 3b       	lddsp	r11,sp[0xc]
80004bda:	58 0b       	cp.w	r11,0
80004bdc:	c2 20       	breq	80004c20 <_vfprintf_r+0x1360>
80004bde:	10 36       	cp.w	r6,r8
80004be0:	c0 a4       	brge	80004bf4 <_vfprintf_r+0x1334>
80004be2:	fa ca f9 44 	sub	r10,sp,-1724
80004be6:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004bea:	ec e8 fd 88 	ld.d	r8,r6[-632]
80004bee:	fa e9 00 00 	st.d	sp[0],r8
80004bf2:	cf 28       	rjmp	80004dd6 <_vfprintf_r+0x1516>
80004bf4:	fa c8 f9 50 	sub	r8,sp,-1712
80004bf8:	1a d8       	st.w	--sp,r8
80004bfa:	fa c8 fa b8 	sub	r8,sp,-1352
80004bfe:	04 9a       	mov	r10,r2
80004c00:	1a d8       	st.w	--sp,r8
80004c02:	0c 9b       	mov	r11,r6
80004c04:	fa c8 fb b4 	sub	r8,sp,-1100
80004c08:	08 9c       	mov	r12,r4
80004c0a:	1a d8       	st.w	--sp,r8
80004c0c:	fa c8 f9 40 	sub	r8,sp,-1728
80004c10:	fa c9 ff b4 	sub	r9,sp,-76
80004c14:	fe b0 f4 be 	rcall	80003590 <get_arg>
80004c18:	2f dd       	sub	sp,-12
80004c1a:	f8 ea 00 00 	ld.d	r10,r12[0]
80004c1e:	c0 c8       	rjmp	80004c36 <_vfprintf_r+0x1376>
80004c20:	ee ca ff ff 	sub	r10,r7,-1
80004c24:	10 37       	cp.w	r7,r8
80004c26:	c0 b4       	brge	80004c3c <_vfprintf_r+0x137c>
80004c28:	fa c9 f9 44 	sub	r9,sp,-1724
80004c2c:	14 97       	mov	r7,r10
80004c2e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004c32:	ec ea fd 88 	ld.d	r10,r6[-632]
80004c36:	fa eb 00 00 	st.d	sp[0],r10
80004c3a:	cc e8       	rjmp	80004dd6 <_vfprintf_r+0x1516>
80004c3c:	41 09       	lddsp	r9,sp[0x40]
80004c3e:	59 f8       	cp.w	r8,31
80004c40:	e0 89 00 16 	brgt	80004c6c <_vfprintf_r+0x13ac>
80004c44:	f2 e6 00 00 	ld.d	r6,r9[0]
80004c48:	f2 cb ff f8 	sub	r11,r9,-8
80004c4c:	fa e7 00 00 	st.d	sp[0],r6
80004c50:	51 0b       	stdsp	sp[0x40],r11
80004c52:	fa c6 f9 44 	sub	r6,sp,-1724
80004c56:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004c5a:	fa e6 00 00 	ld.d	r6,sp[0]
80004c5e:	f2 e7 fd 88 	st.d	r9[-632],r6
80004c62:	2f f8       	sub	r8,-1
80004c64:	14 97       	mov	r7,r10
80004c66:	fb 48 06 b4 	st.w	sp[1716],r8
80004c6a:	cb 68       	rjmp	80004dd6 <_vfprintf_r+0x1516>
80004c6c:	f2 e6 00 00 	ld.d	r6,r9[0]
80004c70:	2f 89       	sub	r9,-8
80004c72:	fa e7 00 00 	st.d	sp[0],r6
80004c76:	51 09       	stdsp	sp[0x40],r9
80004c78:	14 97       	mov	r7,r10
80004c7a:	ca e8       	rjmp	80004dd6 <_vfprintf_r+0x1516>
80004c7c:	ed b5 00 04 	bld	r5,0x4
80004c80:	c1 71       	brne	80004cae <_vfprintf_r+0x13ee>
80004c82:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004c86:	40 3e       	lddsp	lr,sp[0xc]
80004c88:	58 0e       	cp.w	lr,0
80004c8a:	c0 80       	breq	80004c9a <_vfprintf_r+0x13da>
80004c8c:	10 36       	cp.w	r6,r8
80004c8e:	c6 94       	brge	80004d60 <_vfprintf_r+0x14a0>
80004c90:	fa cc f9 44 	sub	r12,sp,-1724
80004c94:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004c98:	c8 28       	rjmp	80004d9c <_vfprintf_r+0x14dc>
80004c9a:	ee ca ff ff 	sub	r10,r7,-1
80004c9e:	10 37       	cp.w	r7,r8
80004ca0:	e0 84 00 81 	brge	80004da2 <_vfprintf_r+0x14e2>
80004ca4:	fa cb f9 44 	sub	r11,sp,-1724
80004ca8:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004cac:	c7 78       	rjmp	80004d9a <_vfprintf_r+0x14da>
80004cae:	ed b5 00 06 	bld	r5,0x6
80004cb2:	c4 b1       	brne	80004d48 <_vfprintf_r+0x1488>
80004cb4:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004cb8:	40 3c       	lddsp	r12,sp[0xc]
80004cba:	58 0c       	cp.w	r12,0
80004cbc:	c1 d0       	breq	80004cf6 <_vfprintf_r+0x1436>
80004cbe:	10 36       	cp.w	r6,r8
80004cc0:	c0 64       	brge	80004ccc <_vfprintf_r+0x140c>
80004cc2:	fa cb f9 44 	sub	r11,sp,-1724
80004cc6:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004cca:	c1 f8       	rjmp	80004d08 <_vfprintf_r+0x1448>
80004ccc:	fa c8 f9 50 	sub	r8,sp,-1712
80004cd0:	1a d8       	st.w	--sp,r8
80004cd2:	fa c8 fa b8 	sub	r8,sp,-1352
80004cd6:	1a d8       	st.w	--sp,r8
80004cd8:	fa c8 fb b4 	sub	r8,sp,-1100
80004cdc:	1a d8       	st.w	--sp,r8
80004cde:	fa c8 f9 40 	sub	r8,sp,-1728
80004ce2:	fa c9 ff b4 	sub	r9,sp,-76
80004ce6:	04 9a       	mov	r10,r2
80004ce8:	0c 9b       	mov	r11,r6
80004cea:	08 9c       	mov	r12,r4
80004cec:	fe b0 f4 52 	rcall	80003590 <get_arg>
80004cf0:	2f dd       	sub	sp,-12
80004cf2:	98 18       	ld.sh	r8,r12[0x2]
80004cf4:	c2 78       	rjmp	80004d42 <_vfprintf_r+0x1482>
80004cf6:	ee ca ff ff 	sub	r10,r7,-1
80004cfa:	10 37       	cp.w	r7,r8
80004cfc:	c0 a4       	brge	80004d10 <_vfprintf_r+0x1450>
80004cfe:	fa c9 f9 44 	sub	r9,sp,-1724
80004d02:	14 97       	mov	r7,r10
80004d04:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004d08:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80004d0c:	c1 b8       	rjmp	80004d42 <_vfprintf_r+0x1482>
80004d0e:	d7 03       	nop
80004d10:	41 09       	lddsp	r9,sp[0x40]
80004d12:	59 f8       	cp.w	r8,31
80004d14:	e0 89 00 13 	brgt	80004d3a <_vfprintf_r+0x147a>
80004d18:	f2 cb ff fc 	sub	r11,r9,-4
80004d1c:	51 0b       	stdsp	sp[0x40],r11
80004d1e:	72 09       	ld.w	r9,r9[0x0]
80004d20:	fa c6 f9 44 	sub	r6,sp,-1724
80004d24:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80004d28:	2f f8       	sub	r8,-1
80004d2a:	f7 49 fd 88 	st.w	r11[-632],r9
80004d2e:	fb 48 06 b4 	st.w	sp[1716],r8
80004d32:	14 97       	mov	r7,r10
80004d34:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80004d38:	c0 58       	rjmp	80004d42 <_vfprintf_r+0x1482>
80004d3a:	92 18       	ld.sh	r8,r9[0x2]
80004d3c:	14 97       	mov	r7,r10
80004d3e:	2f c9       	sub	r9,-4
80004d40:	51 09       	stdsp	sp[0x40],r9
80004d42:	5c 78       	castu.h	r8
80004d44:	50 18       	stdsp	sp[0x4],r8
80004d46:	c4 68       	rjmp	80004dd2 <_vfprintf_r+0x1512>
80004d48:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004d4c:	40 3c       	lddsp	r12,sp[0xc]
80004d4e:	58 0c       	cp.w	r12,0
80004d50:	c1 d0       	breq	80004d8a <_vfprintf_r+0x14ca>
80004d52:	10 36       	cp.w	r6,r8
80004d54:	c0 64       	brge	80004d60 <_vfprintf_r+0x14a0>
80004d56:	fa cb f9 44 	sub	r11,sp,-1724
80004d5a:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004d5e:	c1 f8       	rjmp	80004d9c <_vfprintf_r+0x14dc>
80004d60:	fa c8 f9 50 	sub	r8,sp,-1712
80004d64:	1a d8       	st.w	--sp,r8
80004d66:	fa c8 fa b8 	sub	r8,sp,-1352
80004d6a:	0c 9b       	mov	r11,r6
80004d6c:	1a d8       	st.w	--sp,r8
80004d6e:	fa c8 fb b4 	sub	r8,sp,-1100
80004d72:	04 9a       	mov	r10,r2
80004d74:	1a d8       	st.w	--sp,r8
80004d76:	08 9c       	mov	r12,r4
80004d78:	fa c8 f9 40 	sub	r8,sp,-1728
80004d7c:	fa c9 ff b4 	sub	r9,sp,-76
80004d80:	fe b0 f4 08 	rcall	80003590 <get_arg>
80004d84:	2f dd       	sub	sp,-12
80004d86:	78 0b       	ld.w	r11,r12[0x0]
80004d88:	c2 48       	rjmp	80004dd0 <_vfprintf_r+0x1510>
80004d8a:	ee ca ff ff 	sub	r10,r7,-1
80004d8e:	10 37       	cp.w	r7,r8
80004d90:	c0 94       	brge	80004da2 <_vfprintf_r+0x14e2>
80004d92:	fa c9 f9 44 	sub	r9,sp,-1724
80004d96:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004d9a:	14 97       	mov	r7,r10
80004d9c:	ec fb fd 88 	ld.w	r11,r6[-632]
80004da0:	c1 88       	rjmp	80004dd0 <_vfprintf_r+0x1510>
80004da2:	41 09       	lddsp	r9,sp[0x40]
80004da4:	59 f8       	cp.w	r8,31
80004da6:	e0 89 00 11 	brgt	80004dc8 <_vfprintf_r+0x1508>
80004daa:	f2 cb ff fc 	sub	r11,r9,-4
80004dae:	51 0b       	stdsp	sp[0x40],r11
80004db0:	fa c6 f9 44 	sub	r6,sp,-1724
80004db4:	72 0b       	ld.w	r11,r9[0x0]
80004db6:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004dba:	f3 4b fd 88 	st.w	r9[-632],r11
80004dbe:	2f f8       	sub	r8,-1
80004dc0:	14 97       	mov	r7,r10
80004dc2:	fb 48 06 b4 	st.w	sp[1716],r8
80004dc6:	c0 58       	rjmp	80004dd0 <_vfprintf_r+0x1510>
80004dc8:	72 0b       	ld.w	r11,r9[0x0]
80004dca:	14 97       	mov	r7,r10
80004dcc:	2f c9       	sub	r9,-4
80004dce:	51 09       	stdsp	sp[0x40],r9
80004dd0:	50 1b       	stdsp	sp[0x4],r11
80004dd2:	30 0e       	mov	lr,0
80004dd4:	50 0e       	stdsp	sp[0x0],lr
80004dd6:	40 08       	lddsp	r8,sp[0x0]
80004dd8:	40 1c       	lddsp	r12,sp[0x4]
80004dda:	18 48       	or	r8,r12
80004ddc:	5f 19       	srne	r9
80004dde:	0a 98       	mov	r8,r5
80004de0:	eb e9 00 09 	and	r9,r5,r9
80004de4:	a1 b8       	sbr	r8,0x1
80004de6:	58 09       	cp.w	r9,0
80004de8:	c0 70       	breq	80004df6 <_vfprintf_r+0x1536>
80004dea:	10 95       	mov	r5,r8
80004dec:	fb 60 06 b9 	st.b	sp[1721],r0
80004df0:	33 08       	mov	r8,48
80004df2:	fb 68 06 b8 	st.b	sp[1720],r8
80004df6:	30 28       	mov	r8,2
80004df8:	30 09       	mov	r9,0
80004dfa:	fb 69 06 bb 	st.b	sp[1723],r9
80004dfe:	0a 99       	mov	r9,r5
80004e00:	a7 d9       	cbr	r9,0x7
80004e02:	40 2b       	lddsp	r11,sp[0x8]
80004e04:	40 16       	lddsp	r6,sp[0x4]
80004e06:	58 0b       	cp.w	r11,0
80004e08:	5f 1a       	srne	r10
80004e0a:	f2 05 17 40 	movge	r5,r9
80004e0e:	fa c2 f9 78 	sub	r2,sp,-1672
80004e12:	40 09       	lddsp	r9,sp[0x0]
80004e14:	0c 49       	or	r9,r6
80004e16:	5f 19       	srne	r9
80004e18:	f5 e9 10 09 	or	r9,r10,r9
80004e1c:	c5 c0       	breq	80004ed4 <_vfprintf_r+0x1614>
80004e1e:	30 19       	mov	r9,1
80004e20:	f2 08 18 00 	cp.b	r8,r9
80004e24:	c0 60       	breq	80004e30 <_vfprintf_r+0x1570>
80004e26:	30 29       	mov	r9,2
80004e28:	f2 08 18 00 	cp.b	r8,r9
80004e2c:	c0 41       	brne	80004e34 <_vfprintf_r+0x1574>
80004e2e:	c3 c8       	rjmp	80004ea6 <_vfprintf_r+0x15e6>
80004e30:	04 96       	mov	r6,r2
80004e32:	c3 08       	rjmp	80004e92 <_vfprintf_r+0x15d2>
80004e34:	04 96       	mov	r6,r2
80004e36:	fa e8 00 00 	ld.d	r8,sp[0]
80004e3a:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
80004e3e:	2d 0a       	sub	r10,-48
80004e40:	0c fa       	st.b	--r6,r10
80004e42:	f0 0b 16 03 	lsr	r11,r8,0x3
80004e46:	f2 0c 16 03 	lsr	r12,r9,0x3
80004e4a:	f7 e9 11 db 	or	r11,r11,r9<<0x1d
80004e4e:	18 99       	mov	r9,r12
80004e50:	16 98       	mov	r8,r11
80004e52:	58 08       	cp.w	r8,0
80004e54:	5c 29       	cpc	r9
80004e56:	cf 21       	brne	80004e3a <_vfprintf_r+0x157a>
80004e58:	fa e9 00 00 	st.d	sp[0],r8
80004e5c:	ed b5 00 00 	bld	r5,0x0
80004e60:	c4 51       	brne	80004eea <_vfprintf_r+0x162a>
80004e62:	33 09       	mov	r9,48
80004e64:	f2 0a 18 00 	cp.b	r10,r9
80004e68:	c4 10       	breq	80004eea <_vfprintf_r+0x162a>
80004e6a:	0c f9       	st.b	--r6,r9
80004e6c:	c3 f8       	rjmp	80004eea <_vfprintf_r+0x162a>
80004e6e:	fa ea 00 00 	ld.d	r10,sp[0]
80004e72:	30 a8       	mov	r8,10
80004e74:	30 09       	mov	r9,0
80004e76:	e0 a0 1e 31 	rcall	80008ad8 <__avr32_umod64>
80004e7a:	30 a8       	mov	r8,10
80004e7c:	2d 0a       	sub	r10,-48
80004e7e:	30 09       	mov	r9,0
80004e80:	ac 8a       	st.b	r6[0x0],r10
80004e82:	fa ea 00 00 	ld.d	r10,sp[0]
80004e86:	e0 a0 1c f7 	rcall	80008874 <__avr32_udiv64>
80004e8a:	16 99       	mov	r9,r11
80004e8c:	14 98       	mov	r8,r10
80004e8e:	fa e9 00 00 	st.d	sp[0],r8
80004e92:	20 16       	sub	r6,1
80004e94:	fa ea 00 00 	ld.d	r10,sp[0]
80004e98:	58 9a       	cp.w	r10,9
80004e9a:	5c 2b       	cpc	r11
80004e9c:	fe 9b ff e9 	brhi	80004e6e <_vfprintf_r+0x15ae>
80004ea0:	1b f8       	ld.ub	r8,sp[0x7]
80004ea2:	2d 08       	sub	r8,-48
80004ea4:	c2 08       	rjmp	80004ee4 <_vfprintf_r+0x1624>
80004ea6:	04 96       	mov	r6,r2
80004ea8:	fa e8 00 00 	ld.d	r8,sp[0]
80004eac:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
80004eb0:	40 de       	lddsp	lr,sp[0x34]
80004eb2:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
80004eb6:	0c fa       	st.b	--r6,r10
80004eb8:	f2 0b 16 04 	lsr	r11,r9,0x4
80004ebc:	f0 0a 16 04 	lsr	r10,r8,0x4
80004ec0:	f5 e9 11 ca 	or	r10,r10,r9<<0x1c
80004ec4:	16 99       	mov	r9,r11
80004ec6:	14 98       	mov	r8,r10
80004ec8:	58 08       	cp.w	r8,0
80004eca:	5c 29       	cpc	r9
80004ecc:	cf 01       	brne	80004eac <_vfprintf_r+0x15ec>
80004ece:	fa e9 00 00 	st.d	sp[0],r8
80004ed2:	c0 c8       	rjmp	80004eea <_vfprintf_r+0x162a>
80004ed4:	58 08       	cp.w	r8,0
80004ed6:	c0 91       	brne	80004ee8 <_vfprintf_r+0x1628>
80004ed8:	ed b5 00 00 	bld	r5,0x0
80004edc:	c0 61       	brne	80004ee8 <_vfprintf_r+0x1628>
80004ede:	fa c6 f9 79 	sub	r6,sp,-1671
80004ee2:	33 08       	mov	r8,48
80004ee4:	ac 88       	st.b	r6[0x0],r8
80004ee6:	c0 28       	rjmp	80004eea <_vfprintf_r+0x162a>
80004ee8:	04 96       	mov	r6,r2
80004eea:	0c 12       	sub	r2,r6
80004eec:	c1 c8       	rjmp	80004f24 <_vfprintf_r+0x1664>
80004eee:	50 a7       	stdsp	sp[0x28],r7
80004ef0:	50 80       	stdsp	sp[0x20],r0
80004ef2:	40 93       	lddsp	r3,sp[0x24]
80004ef4:	0c 97       	mov	r7,r6
80004ef6:	10 90       	mov	r0,r8
80004ef8:	04 94       	mov	r4,r2
80004efa:	40 41       	lddsp	r1,sp[0x10]
80004efc:	58 08       	cp.w	r8,0
80004efe:	e0 80 04 4f 	breq	8000579c <_vfprintf_r+0x1edc>
80004f02:	fb 68 06 60 	st.b	sp[1632],r8
80004f06:	30 0c       	mov	r12,0
80004f08:	30 08       	mov	r8,0
80004f0a:	30 12       	mov	r2,1
80004f0c:	fb 68 06 bb 	st.b	sp[1723],r8
80004f10:	50 2c       	stdsp	sp[0x8],r12
80004f12:	fa c6 f9 a0 	sub	r6,sp,-1632
80004f16:	c0 78       	rjmp	80004f24 <_vfprintf_r+0x1664>
80004f18:	30 0b       	mov	r11,0
80004f1a:	50 2b       	stdsp	sp[0x8],r11
80004f1c:	c0 48       	rjmp	80004f24 <_vfprintf_r+0x1664>
80004f1e:	40 22       	lddsp	r2,sp[0x8]
80004f20:	30 0a       	mov	r10,0
80004f22:	50 2a       	stdsp	sp[0x8],r10
80004f24:	40 29       	lddsp	r9,sp[0x8]
80004f26:	e4 09 0c 49 	max	r9,r2,r9
80004f2a:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80004f2e:	50 39       	stdsp	sp[0xc],r9
80004f30:	0a 9e       	mov	lr,r5
80004f32:	30 09       	mov	r9,0
80004f34:	e2 1e 00 02 	andl	lr,0x2,COH
80004f38:	f2 08 18 00 	cp.b	r8,r9
80004f3c:	fb f8 10 03 	ld.wne	r8,sp[0xc]
80004f40:	f7 b8 01 ff 	subne	r8,-1
80004f44:	fb f8 1a 03 	st.wne	sp[0xc],r8
80004f48:	0a 9b       	mov	r11,r5
80004f4a:	58 0e       	cp.w	lr,0
80004f4c:	fb fc 10 03 	ld.wne	r12,sp[0xc]
80004f50:	f7 bc 01 fe 	subne	r12,-2
80004f54:	fb fc 1a 03 	st.wne	sp[0xc],r12
80004f58:	e2 1b 00 84 	andl	r11,0x84,COH
80004f5c:	50 fe       	stdsp	sp[0x3c],lr
80004f5e:	50 9b       	stdsp	sp[0x24],r11
80004f60:	c4 71       	brne	80004fee <_vfprintf_r+0x172e>
80004f62:	40 8a       	lddsp	r10,sp[0x20]
80004f64:	40 39       	lddsp	r9,sp[0xc]
80004f66:	12 1a       	sub	r10,r9
80004f68:	50 4a       	stdsp	sp[0x10],r10
80004f6a:	58 0a       	cp.w	r10,0
80004f6c:	e0 89 00 20 	brgt	80004fac <_vfprintf_r+0x16ec>
80004f70:	c3 f8       	rjmp	80004fee <_vfprintf_r+0x172e>
80004f72:	2f 09       	sub	r9,-16
80004f74:	2f f8       	sub	r8,-1
80004f76:	fe ce ba fe 	sub	lr,pc,-17666
80004f7a:	31 0c       	mov	r12,16
80004f7c:	fb 49 06 90 	st.w	sp[1680],r9
80004f80:	87 0e       	st.w	r3[0x0],lr
80004f82:	87 1c       	st.w	r3[0x4],r12
80004f84:	fb 48 06 8c 	st.w	sp[1676],r8
80004f88:	58 78       	cp.w	r8,7
80004f8a:	e0 89 00 04 	brgt	80004f92 <_vfprintf_r+0x16d2>
80004f8e:	2f 83       	sub	r3,-8
80004f90:	c0 b8       	rjmp	80004fa6 <_vfprintf_r+0x16e6>
80004f92:	fa ca f9 78 	sub	r10,sp,-1672
80004f96:	02 9b       	mov	r11,r1
80004f98:	08 9c       	mov	r12,r4
80004f9a:	fe b0 f4 85 	rcall	800038a4 <__sprint_r>
80004f9e:	e0 81 04 10 	brne	800057be <_vfprintf_r+0x1efe>
80004fa2:	fa c3 f9 e0 	sub	r3,sp,-1568
80004fa6:	40 4b       	lddsp	r11,sp[0x10]
80004fa8:	21 0b       	sub	r11,16
80004faa:	50 4b       	stdsp	sp[0x10],r11
80004fac:	fa f9 06 90 	ld.w	r9,sp[1680]
80004fb0:	fa f8 06 8c 	ld.w	r8,sp[1676]
80004fb4:	fe ca bb 3c 	sub	r10,pc,-17604
80004fb8:	40 4e       	lddsp	lr,sp[0x10]
80004fba:	59 0e       	cp.w	lr,16
80004fbc:	fe 99 ff db 	brgt	80004f72 <_vfprintf_r+0x16b2>
80004fc0:	1c 09       	add	r9,lr
80004fc2:	2f f8       	sub	r8,-1
80004fc4:	87 0a       	st.w	r3[0x0],r10
80004fc6:	fb 49 06 90 	st.w	sp[1680],r9
80004fca:	87 1e       	st.w	r3[0x4],lr
80004fcc:	fb 48 06 8c 	st.w	sp[1676],r8
80004fd0:	58 78       	cp.w	r8,7
80004fd2:	e0 89 00 04 	brgt	80004fda <_vfprintf_r+0x171a>
80004fd6:	2f 83       	sub	r3,-8
80004fd8:	c0 b8       	rjmp	80004fee <_vfprintf_r+0x172e>
80004fda:	fa ca f9 78 	sub	r10,sp,-1672
80004fde:	02 9b       	mov	r11,r1
80004fe0:	08 9c       	mov	r12,r4
80004fe2:	fe b0 f4 61 	rcall	800038a4 <__sprint_r>
80004fe6:	e0 81 03 ec 	brne	800057be <_vfprintf_r+0x1efe>
80004fea:	fa c3 f9 e0 	sub	r3,sp,-1568
80004fee:	30 09       	mov	r9,0
80004ff0:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80004ff4:	f2 08 18 00 	cp.b	r8,r9
80004ff8:	c1 f0       	breq	80005036 <_vfprintf_r+0x1776>
80004ffa:	fa f8 06 90 	ld.w	r8,sp[1680]
80004ffe:	fa c9 f9 45 	sub	r9,sp,-1723
80005002:	2f f8       	sub	r8,-1
80005004:	87 09       	st.w	r3[0x0],r9
80005006:	fb 48 06 90 	st.w	sp[1680],r8
8000500a:	30 19       	mov	r9,1
8000500c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005010:	87 19       	st.w	r3[0x4],r9
80005012:	2f f8       	sub	r8,-1
80005014:	fb 48 06 8c 	st.w	sp[1676],r8
80005018:	58 78       	cp.w	r8,7
8000501a:	e0 89 00 04 	brgt	80005022 <_vfprintf_r+0x1762>
8000501e:	2f 83       	sub	r3,-8
80005020:	c0 b8       	rjmp	80005036 <_vfprintf_r+0x1776>
80005022:	fa ca f9 78 	sub	r10,sp,-1672
80005026:	02 9b       	mov	r11,r1
80005028:	08 9c       	mov	r12,r4
8000502a:	fe b0 f4 3d 	rcall	800038a4 <__sprint_r>
8000502e:	e0 81 03 c8 	brne	800057be <_vfprintf_r+0x1efe>
80005032:	fa c3 f9 e0 	sub	r3,sp,-1568
80005036:	40 fc       	lddsp	r12,sp[0x3c]
80005038:	58 0c       	cp.w	r12,0
8000503a:	c1 f0       	breq	80005078 <_vfprintf_r+0x17b8>
8000503c:	fa f8 06 90 	ld.w	r8,sp[1680]
80005040:	fa c9 f9 48 	sub	r9,sp,-1720
80005044:	2f e8       	sub	r8,-2
80005046:	87 09       	st.w	r3[0x0],r9
80005048:	fb 48 06 90 	st.w	sp[1680],r8
8000504c:	30 29       	mov	r9,2
8000504e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005052:	87 19       	st.w	r3[0x4],r9
80005054:	2f f8       	sub	r8,-1
80005056:	fb 48 06 8c 	st.w	sp[1676],r8
8000505a:	58 78       	cp.w	r8,7
8000505c:	e0 89 00 04 	brgt	80005064 <_vfprintf_r+0x17a4>
80005060:	2f 83       	sub	r3,-8
80005062:	c0 b8       	rjmp	80005078 <_vfprintf_r+0x17b8>
80005064:	fa ca f9 78 	sub	r10,sp,-1672
80005068:	02 9b       	mov	r11,r1
8000506a:	08 9c       	mov	r12,r4
8000506c:	fe b0 f4 1c 	rcall	800038a4 <__sprint_r>
80005070:	e0 81 03 a7 	brne	800057be <_vfprintf_r+0x1efe>
80005074:	fa c3 f9 e0 	sub	r3,sp,-1568
80005078:	40 9b       	lddsp	r11,sp[0x24]
8000507a:	e0 4b 00 80 	cp.w	r11,128
8000507e:	c4 71       	brne	8000510c <_vfprintf_r+0x184c>
80005080:	40 8a       	lddsp	r10,sp[0x20]
80005082:	40 39       	lddsp	r9,sp[0xc]
80005084:	12 1a       	sub	r10,r9
80005086:	50 4a       	stdsp	sp[0x10],r10
80005088:	58 0a       	cp.w	r10,0
8000508a:	e0 89 00 20 	brgt	800050ca <_vfprintf_r+0x180a>
8000508e:	c3 f8       	rjmp	8000510c <_vfprintf_r+0x184c>
80005090:	2f 09       	sub	r9,-16
80005092:	2f f8       	sub	r8,-1
80005094:	fe ce bc 0c 	sub	lr,pc,-17396
80005098:	31 0c       	mov	r12,16
8000509a:	fb 49 06 90 	st.w	sp[1680],r9
8000509e:	87 0e       	st.w	r3[0x0],lr
800050a0:	87 1c       	st.w	r3[0x4],r12
800050a2:	fb 48 06 8c 	st.w	sp[1676],r8
800050a6:	58 78       	cp.w	r8,7
800050a8:	e0 89 00 04 	brgt	800050b0 <_vfprintf_r+0x17f0>
800050ac:	2f 83       	sub	r3,-8
800050ae:	c0 b8       	rjmp	800050c4 <_vfprintf_r+0x1804>
800050b0:	fa ca f9 78 	sub	r10,sp,-1672
800050b4:	02 9b       	mov	r11,r1
800050b6:	08 9c       	mov	r12,r4
800050b8:	fe b0 f3 f6 	rcall	800038a4 <__sprint_r>
800050bc:	e0 81 03 81 	brne	800057be <_vfprintf_r+0x1efe>
800050c0:	fa c3 f9 e0 	sub	r3,sp,-1568
800050c4:	40 4b       	lddsp	r11,sp[0x10]
800050c6:	21 0b       	sub	r11,16
800050c8:	50 4b       	stdsp	sp[0x10],r11
800050ca:	fa f9 06 90 	ld.w	r9,sp[1680]
800050ce:	fa f8 06 8c 	ld.w	r8,sp[1676]
800050d2:	fe ca bc 4a 	sub	r10,pc,-17334
800050d6:	40 4e       	lddsp	lr,sp[0x10]
800050d8:	59 0e       	cp.w	lr,16
800050da:	fe 99 ff db 	brgt	80005090 <_vfprintf_r+0x17d0>
800050de:	1c 09       	add	r9,lr
800050e0:	2f f8       	sub	r8,-1
800050e2:	87 0a       	st.w	r3[0x0],r10
800050e4:	fb 49 06 90 	st.w	sp[1680],r9
800050e8:	87 1e       	st.w	r3[0x4],lr
800050ea:	fb 48 06 8c 	st.w	sp[1676],r8
800050ee:	58 78       	cp.w	r8,7
800050f0:	e0 89 00 04 	brgt	800050f8 <_vfprintf_r+0x1838>
800050f4:	2f 83       	sub	r3,-8
800050f6:	c0 b8       	rjmp	8000510c <_vfprintf_r+0x184c>
800050f8:	fa ca f9 78 	sub	r10,sp,-1672
800050fc:	02 9b       	mov	r11,r1
800050fe:	08 9c       	mov	r12,r4
80005100:	fe b0 f3 d2 	rcall	800038a4 <__sprint_r>
80005104:	e0 81 03 5d 	brne	800057be <_vfprintf_r+0x1efe>
80005108:	fa c3 f9 e0 	sub	r3,sp,-1568
8000510c:	40 2c       	lddsp	r12,sp[0x8]
8000510e:	04 1c       	sub	r12,r2
80005110:	50 2c       	stdsp	sp[0x8],r12
80005112:	58 0c       	cp.w	r12,0
80005114:	e0 89 00 20 	brgt	80005154 <_vfprintf_r+0x1894>
80005118:	c3 f8       	rjmp	80005196 <_vfprintf_r+0x18d6>
8000511a:	2f 09       	sub	r9,-16
8000511c:	2f f8       	sub	r8,-1
8000511e:	fe cb bc 96 	sub	r11,pc,-17258
80005122:	31 0a       	mov	r10,16
80005124:	fb 49 06 90 	st.w	sp[1680],r9
80005128:	87 0b       	st.w	r3[0x0],r11
8000512a:	87 1a       	st.w	r3[0x4],r10
8000512c:	fb 48 06 8c 	st.w	sp[1676],r8
80005130:	58 78       	cp.w	r8,7
80005132:	e0 89 00 04 	brgt	8000513a <_vfprintf_r+0x187a>
80005136:	2f 83       	sub	r3,-8
80005138:	c0 b8       	rjmp	8000514e <_vfprintf_r+0x188e>
8000513a:	fa ca f9 78 	sub	r10,sp,-1672
8000513e:	02 9b       	mov	r11,r1
80005140:	08 9c       	mov	r12,r4
80005142:	fe b0 f3 b1 	rcall	800038a4 <__sprint_r>
80005146:	e0 81 03 3c 	brne	800057be <_vfprintf_r+0x1efe>
8000514a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000514e:	40 29       	lddsp	r9,sp[0x8]
80005150:	21 09       	sub	r9,16
80005152:	50 29       	stdsp	sp[0x8],r9
80005154:	fa f9 06 90 	ld.w	r9,sp[1680]
80005158:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000515c:	fe ca bc d4 	sub	r10,pc,-17196
80005160:	40 2e       	lddsp	lr,sp[0x8]
80005162:	59 0e       	cp.w	lr,16
80005164:	fe 99 ff db 	brgt	8000511a <_vfprintf_r+0x185a>
80005168:	1c 09       	add	r9,lr
8000516a:	2f f8       	sub	r8,-1
8000516c:	87 0a       	st.w	r3[0x0],r10
8000516e:	fb 49 06 90 	st.w	sp[1680],r9
80005172:	87 1e       	st.w	r3[0x4],lr
80005174:	fb 48 06 8c 	st.w	sp[1676],r8
80005178:	58 78       	cp.w	r8,7
8000517a:	e0 89 00 04 	brgt	80005182 <_vfprintf_r+0x18c2>
8000517e:	2f 83       	sub	r3,-8
80005180:	c0 b8       	rjmp	80005196 <_vfprintf_r+0x18d6>
80005182:	fa ca f9 78 	sub	r10,sp,-1672
80005186:	02 9b       	mov	r11,r1
80005188:	08 9c       	mov	r12,r4
8000518a:	fe b0 f3 8d 	rcall	800038a4 <__sprint_r>
8000518e:	e0 81 03 18 	brne	800057be <_vfprintf_r+0x1efe>
80005192:	fa c3 f9 e0 	sub	r3,sp,-1568
80005196:	ed b5 00 08 	bld	r5,0x8
8000519a:	c0 b0       	breq	800051b0 <_vfprintf_r+0x18f0>
8000519c:	fa f8 06 90 	ld.w	r8,sp[1680]
800051a0:	87 12       	st.w	r3[0x4],r2
800051a2:	87 06       	st.w	r3[0x0],r6
800051a4:	f0 02 00 02 	add	r2,r8,r2
800051a8:	fb 42 06 90 	st.w	sp[1680],r2
800051ac:	e0 8f 01 d4 	bral	80005554 <_vfprintf_r+0x1c94>
800051b0:	e0 40 00 65 	cp.w	r0,101
800051b4:	e0 8a 01 d6 	brle	80005560 <_vfprintf_r+0x1ca0>
800051b8:	30 08       	mov	r8,0
800051ba:	30 09       	mov	r9,0
800051bc:	40 5b       	lddsp	r11,sp[0x14]
800051be:	40 7a       	lddsp	r10,sp[0x1c]
800051c0:	e0 a0 19 53 	rcall	80008466 <__avr32_f64_cmp_eq>
800051c4:	c7 90       	breq	800052b6 <_vfprintf_r+0x19f6>
800051c6:	fa f8 06 90 	ld.w	r8,sp[1680]
800051ca:	fe c9 bd 56 	sub	r9,pc,-17066
800051ce:	2f f8       	sub	r8,-1
800051d0:	87 09       	st.w	r3[0x0],r9
800051d2:	fb 48 06 90 	st.w	sp[1680],r8
800051d6:	30 19       	mov	r9,1
800051d8:	fa f8 06 8c 	ld.w	r8,sp[1676]
800051dc:	87 19       	st.w	r3[0x4],r9
800051de:	2f f8       	sub	r8,-1
800051e0:	fb 48 06 8c 	st.w	sp[1676],r8
800051e4:	58 78       	cp.w	r8,7
800051e6:	e0 89 00 05 	brgt	800051f0 <_vfprintf_r+0x1930>
800051ea:	2f 83       	sub	r3,-8
800051ec:	c0 c8       	rjmp	80005204 <_vfprintf_r+0x1944>
800051ee:	d7 03       	nop
800051f0:	fa ca f9 78 	sub	r10,sp,-1672
800051f4:	02 9b       	mov	r11,r1
800051f6:	08 9c       	mov	r12,r4
800051f8:	fe b0 f3 56 	rcall	800038a4 <__sprint_r>
800051fc:	e0 81 02 e1 	brne	800057be <_vfprintf_r+0x1efe>
80005200:	fa c3 f9 e0 	sub	r3,sp,-1568
80005204:	fa f8 06 ac 	ld.w	r8,sp[1708]
80005208:	40 6c       	lddsp	r12,sp[0x18]
8000520a:	18 38       	cp.w	r8,r12
8000520c:	c0 55       	brlt	80005216 <_vfprintf_r+0x1956>
8000520e:	ed b5 00 00 	bld	r5,0x0
80005212:	e0 81 02 6b 	brne	800056e8 <_vfprintf_r+0x1e28>
80005216:	fa f8 06 90 	ld.w	r8,sp[1680]
8000521a:	2f f8       	sub	r8,-1
8000521c:	40 cb       	lddsp	r11,sp[0x30]
8000521e:	fb 48 06 90 	st.w	sp[1680],r8
80005222:	30 19       	mov	r9,1
80005224:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005228:	87 0b       	st.w	r3[0x0],r11
8000522a:	2f f8       	sub	r8,-1
8000522c:	87 19       	st.w	r3[0x4],r9
8000522e:	fb 48 06 8c 	st.w	sp[1676],r8
80005232:	58 78       	cp.w	r8,7
80005234:	e0 89 00 04 	brgt	8000523c <_vfprintf_r+0x197c>
80005238:	2f 83       	sub	r3,-8
8000523a:	c0 b8       	rjmp	80005250 <_vfprintf_r+0x1990>
8000523c:	fa ca f9 78 	sub	r10,sp,-1672
80005240:	02 9b       	mov	r11,r1
80005242:	08 9c       	mov	r12,r4
80005244:	fe b0 f3 30 	rcall	800038a4 <__sprint_r>
80005248:	e0 81 02 bb 	brne	800057be <_vfprintf_r+0x1efe>
8000524c:	fa c3 f9 e0 	sub	r3,sp,-1568
80005250:	40 66       	lddsp	r6,sp[0x18]
80005252:	20 16       	sub	r6,1
80005254:	58 06       	cp.w	r6,0
80005256:	e0 89 00 1d 	brgt	80005290 <_vfprintf_r+0x19d0>
8000525a:	e0 8f 02 47 	bral	800056e8 <_vfprintf_r+0x1e28>
8000525e:	2f 09       	sub	r9,-16
80005260:	2f f8       	sub	r8,-1
80005262:	fb 49 06 90 	st.w	sp[1680],r9
80005266:	87 02       	st.w	r3[0x0],r2
80005268:	87 10       	st.w	r3[0x4],r0
8000526a:	fb 48 06 8c 	st.w	sp[1676],r8
8000526e:	58 78       	cp.w	r8,7
80005270:	e0 89 00 04 	brgt	80005278 <_vfprintf_r+0x19b8>
80005274:	2f 83       	sub	r3,-8
80005276:	c0 b8       	rjmp	8000528c <_vfprintf_r+0x19cc>
80005278:	fa ca f9 78 	sub	r10,sp,-1672
8000527c:	02 9b       	mov	r11,r1
8000527e:	08 9c       	mov	r12,r4
80005280:	fe b0 f3 12 	rcall	800038a4 <__sprint_r>
80005284:	e0 81 02 9d 	brne	800057be <_vfprintf_r+0x1efe>
80005288:	fa c3 f9 e0 	sub	r3,sp,-1568
8000528c:	21 06       	sub	r6,16
8000528e:	c0 48       	rjmp	80005296 <_vfprintf_r+0x19d6>
80005290:	fe c2 be 08 	sub	r2,pc,-16888
80005294:	31 00       	mov	r0,16
80005296:	fa f9 06 90 	ld.w	r9,sp[1680]
8000529a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000529e:	fe ca be 16 	sub	r10,pc,-16874
800052a2:	59 06       	cp.w	r6,16
800052a4:	fe 99 ff dd 	brgt	8000525e <_vfprintf_r+0x199e>
800052a8:	0c 09       	add	r9,r6
800052aa:	87 0a       	st.w	r3[0x0],r10
800052ac:	fb 49 06 90 	st.w	sp[1680],r9
800052b0:	2f f8       	sub	r8,-1
800052b2:	87 16       	st.w	r3[0x4],r6
800052b4:	c5 39       	rjmp	8000555a <_vfprintf_r+0x1c9a>
800052b6:	fa fa 06 ac 	ld.w	r10,sp[1708]
800052ba:	58 0a       	cp.w	r10,0
800052bc:	e0 89 00 92 	brgt	800053e0 <_vfprintf_r+0x1b20>
800052c0:	fa f8 06 90 	ld.w	r8,sp[1680]
800052c4:	fe c9 be 50 	sub	r9,pc,-16816
800052c8:	2f f8       	sub	r8,-1
800052ca:	87 09       	st.w	r3[0x0],r9
800052cc:	fb 48 06 90 	st.w	sp[1680],r8
800052d0:	30 19       	mov	r9,1
800052d2:	fa f8 06 8c 	ld.w	r8,sp[1676]
800052d6:	87 19       	st.w	r3[0x4],r9
800052d8:	2f f8       	sub	r8,-1
800052da:	fb 48 06 8c 	st.w	sp[1676],r8
800052de:	58 78       	cp.w	r8,7
800052e0:	e0 89 00 04 	brgt	800052e8 <_vfprintf_r+0x1a28>
800052e4:	2f 83       	sub	r3,-8
800052e6:	c0 b8       	rjmp	800052fc <_vfprintf_r+0x1a3c>
800052e8:	fa ca f9 78 	sub	r10,sp,-1672
800052ec:	02 9b       	mov	r11,r1
800052ee:	08 9c       	mov	r12,r4
800052f0:	fe b0 f2 da 	rcall	800038a4 <__sprint_r>
800052f4:	e0 81 02 65 	brne	800057be <_vfprintf_r+0x1efe>
800052f8:	fa c3 f9 e0 	sub	r3,sp,-1568
800052fc:	fa f8 06 ac 	ld.w	r8,sp[1708]
80005300:	58 08       	cp.w	r8,0
80005302:	c0 81       	brne	80005312 <_vfprintf_r+0x1a52>
80005304:	40 6a       	lddsp	r10,sp[0x18]
80005306:	58 0a       	cp.w	r10,0
80005308:	c0 51       	brne	80005312 <_vfprintf_r+0x1a52>
8000530a:	ed b5 00 00 	bld	r5,0x0
8000530e:	e0 81 01 ed 	brne	800056e8 <_vfprintf_r+0x1e28>
80005312:	40 c9       	lddsp	r9,sp[0x30]
80005314:	fa f8 06 90 	ld.w	r8,sp[1680]
80005318:	2f f8       	sub	r8,-1
8000531a:	87 09       	st.w	r3[0x0],r9
8000531c:	fb 48 06 90 	st.w	sp[1680],r8
80005320:	30 19       	mov	r9,1
80005322:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005326:	87 19       	st.w	r3[0x4],r9
80005328:	2f f8       	sub	r8,-1
8000532a:	fb 48 06 8c 	st.w	sp[1676],r8
8000532e:	58 78       	cp.w	r8,7
80005330:	e0 89 00 04 	brgt	80005338 <_vfprintf_r+0x1a78>
80005334:	2f 83       	sub	r3,-8
80005336:	c0 b8       	rjmp	8000534c <_vfprintf_r+0x1a8c>
80005338:	fa ca f9 78 	sub	r10,sp,-1672
8000533c:	02 9b       	mov	r11,r1
8000533e:	08 9c       	mov	r12,r4
80005340:	fe b0 f2 b2 	rcall	800038a4 <__sprint_r>
80005344:	e0 81 02 3d 	brne	800057be <_vfprintf_r+0x1efe>
80005348:	fa c3 f9 e0 	sub	r3,sp,-1568
8000534c:	fa f2 06 ac 	ld.w	r2,sp[1708]
80005350:	5c 32       	neg	r2
80005352:	58 02       	cp.w	r2,0
80005354:	e0 89 00 1d 	brgt	8000538e <_vfprintf_r+0x1ace>
80005358:	c3 d8       	rjmp	800053d2 <_vfprintf_r+0x1b12>
8000535a:	2f 09       	sub	r9,-16
8000535c:	2f f8       	sub	r8,-1
8000535e:	31 0e       	mov	lr,16
80005360:	fb 49 06 90 	st.w	sp[1680],r9
80005364:	87 00       	st.w	r3[0x0],r0
80005366:	87 1e       	st.w	r3[0x4],lr
80005368:	fb 48 06 8c 	st.w	sp[1676],r8
8000536c:	58 78       	cp.w	r8,7
8000536e:	e0 89 00 04 	brgt	80005376 <_vfprintf_r+0x1ab6>
80005372:	2f 83       	sub	r3,-8
80005374:	c0 b8       	rjmp	8000538a <_vfprintf_r+0x1aca>
80005376:	fa ca f9 78 	sub	r10,sp,-1672
8000537a:	02 9b       	mov	r11,r1
8000537c:	08 9c       	mov	r12,r4
8000537e:	fe b0 f2 93 	rcall	800038a4 <__sprint_r>
80005382:	e0 81 02 1e 	brne	800057be <_vfprintf_r+0x1efe>
80005386:	fa c3 f9 e0 	sub	r3,sp,-1568
8000538a:	21 02       	sub	r2,16
8000538c:	c0 38       	rjmp	80005392 <_vfprintf_r+0x1ad2>
8000538e:	fe c0 bf 06 	sub	r0,pc,-16634
80005392:	fa f9 06 90 	ld.w	r9,sp[1680]
80005396:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000539a:	fe ca bf 12 	sub	r10,pc,-16622
8000539e:	59 02       	cp.w	r2,16
800053a0:	fe 99 ff dd 	brgt	8000535a <_vfprintf_r+0x1a9a>
800053a4:	04 09       	add	r9,r2
800053a6:	2f f8       	sub	r8,-1
800053a8:	87 0a       	st.w	r3[0x0],r10
800053aa:	fb 49 06 90 	st.w	sp[1680],r9
800053ae:	87 12       	st.w	r3[0x4],r2
800053b0:	fb 48 06 8c 	st.w	sp[1676],r8
800053b4:	58 78       	cp.w	r8,7
800053b6:	e0 89 00 04 	brgt	800053be <_vfprintf_r+0x1afe>
800053ba:	2f 83       	sub	r3,-8
800053bc:	c0 b8       	rjmp	800053d2 <_vfprintf_r+0x1b12>
800053be:	fa ca f9 78 	sub	r10,sp,-1672
800053c2:	02 9b       	mov	r11,r1
800053c4:	08 9c       	mov	r12,r4
800053c6:	fe b0 f2 6f 	rcall	800038a4 <__sprint_r>
800053ca:	e0 81 01 fa 	brne	800057be <_vfprintf_r+0x1efe>
800053ce:	fa c3 f9 e0 	sub	r3,sp,-1568
800053d2:	40 6c       	lddsp	r12,sp[0x18]
800053d4:	fa f8 06 90 	ld.w	r8,sp[1680]
800053d8:	87 06       	st.w	r3[0x0],r6
800053da:	87 1c       	st.w	r3[0x4],r12
800053dc:	18 08       	add	r8,r12
800053de:	cb 98       	rjmp	80005550 <_vfprintf_r+0x1c90>
800053e0:	fa f9 06 90 	ld.w	r9,sp[1680]
800053e4:	fa f8 06 8c 	ld.w	r8,sp[1676]
800053e8:	40 6b       	lddsp	r11,sp[0x18]
800053ea:	16 3a       	cp.w	r10,r11
800053ec:	c6 f5       	brlt	800054ca <_vfprintf_r+0x1c0a>
800053ee:	16 09       	add	r9,r11
800053f0:	2f f8       	sub	r8,-1
800053f2:	87 06       	st.w	r3[0x0],r6
800053f4:	fb 49 06 90 	st.w	sp[1680],r9
800053f8:	87 1b       	st.w	r3[0x4],r11
800053fa:	fb 48 06 8c 	st.w	sp[1676],r8
800053fe:	58 78       	cp.w	r8,7
80005400:	e0 89 00 04 	brgt	80005408 <_vfprintf_r+0x1b48>
80005404:	2f 83       	sub	r3,-8
80005406:	c0 b8       	rjmp	8000541c <_vfprintf_r+0x1b5c>
80005408:	fa ca f9 78 	sub	r10,sp,-1672
8000540c:	02 9b       	mov	r11,r1
8000540e:	08 9c       	mov	r12,r4
80005410:	fe b0 f2 4a 	rcall	800038a4 <__sprint_r>
80005414:	e0 81 01 d5 	brne	800057be <_vfprintf_r+0x1efe>
80005418:	fa c3 f9 e0 	sub	r3,sp,-1568
8000541c:	fa f6 06 ac 	ld.w	r6,sp[1708]
80005420:	40 6a       	lddsp	r10,sp[0x18]
80005422:	14 16       	sub	r6,r10
80005424:	58 06       	cp.w	r6,0
80005426:	e0 89 00 1c 	brgt	8000545e <_vfprintf_r+0x1b9e>
8000542a:	c3 d8       	rjmp	800054a4 <_vfprintf_r+0x1be4>
8000542c:	2f 09       	sub	r9,-16
8000542e:	2f f8       	sub	r8,-1
80005430:	fb 49 06 90 	st.w	sp[1680],r9
80005434:	87 02       	st.w	r3[0x0],r2
80005436:	87 10       	st.w	r3[0x4],r0
80005438:	fb 48 06 8c 	st.w	sp[1676],r8
8000543c:	58 78       	cp.w	r8,7
8000543e:	e0 89 00 04 	brgt	80005446 <_vfprintf_r+0x1b86>
80005442:	2f 83       	sub	r3,-8
80005444:	c0 b8       	rjmp	8000545a <_vfprintf_r+0x1b9a>
80005446:	fa ca f9 78 	sub	r10,sp,-1672
8000544a:	02 9b       	mov	r11,r1
8000544c:	08 9c       	mov	r12,r4
8000544e:	fe b0 f2 2b 	rcall	800038a4 <__sprint_r>
80005452:	e0 81 01 b6 	brne	800057be <_vfprintf_r+0x1efe>
80005456:	fa c3 f9 e0 	sub	r3,sp,-1568
8000545a:	21 06       	sub	r6,16
8000545c:	c0 48       	rjmp	80005464 <_vfprintf_r+0x1ba4>
8000545e:	fe c2 bf d6 	sub	r2,pc,-16426
80005462:	31 00       	mov	r0,16
80005464:	fa f9 06 90 	ld.w	r9,sp[1680]
80005468:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000546c:	fe ca bf e4 	sub	r10,pc,-16412
80005470:	59 06       	cp.w	r6,16
80005472:	fe 99 ff dd 	brgt	8000542c <_vfprintf_r+0x1b6c>
80005476:	0c 09       	add	r9,r6
80005478:	2f f8       	sub	r8,-1
8000547a:	87 0a       	st.w	r3[0x0],r10
8000547c:	fb 49 06 90 	st.w	sp[1680],r9
80005480:	87 16       	st.w	r3[0x4],r6
80005482:	fb 48 06 8c 	st.w	sp[1676],r8
80005486:	58 78       	cp.w	r8,7
80005488:	e0 89 00 04 	brgt	80005490 <_vfprintf_r+0x1bd0>
8000548c:	2f 83       	sub	r3,-8
8000548e:	c0 b8       	rjmp	800054a4 <_vfprintf_r+0x1be4>
80005490:	fa ca f9 78 	sub	r10,sp,-1672
80005494:	02 9b       	mov	r11,r1
80005496:	08 9c       	mov	r12,r4
80005498:	fe b0 f2 06 	rcall	800038a4 <__sprint_r>
8000549c:	e0 81 01 91 	brne	800057be <_vfprintf_r+0x1efe>
800054a0:	fa c3 f9 e0 	sub	r3,sp,-1568
800054a4:	ed b5 00 00 	bld	r5,0x0
800054a8:	e0 81 01 20 	brne	800056e8 <_vfprintf_r+0x1e28>
800054ac:	40 c9       	lddsp	r9,sp[0x30]
800054ae:	fa f8 06 90 	ld.w	r8,sp[1680]
800054b2:	2f f8       	sub	r8,-1
800054b4:	87 09       	st.w	r3[0x0],r9
800054b6:	fb 48 06 90 	st.w	sp[1680],r8
800054ba:	30 19       	mov	r9,1
800054bc:	fa f8 06 8c 	ld.w	r8,sp[1676]
800054c0:	87 19       	st.w	r3[0x4],r9
800054c2:	2f f8       	sub	r8,-1
800054c4:	fb 48 06 8c 	st.w	sp[1676],r8
800054c8:	c0 29       	rjmp	800056cc <_vfprintf_r+0x1e0c>
800054ca:	14 09       	add	r9,r10
800054cc:	2f f8       	sub	r8,-1
800054ce:	fb 49 06 90 	st.w	sp[1680],r9
800054d2:	87 06       	st.w	r3[0x0],r6
800054d4:	87 1a       	st.w	r3[0x4],r10
800054d6:	fb 48 06 8c 	st.w	sp[1676],r8
800054da:	58 78       	cp.w	r8,7
800054dc:	e0 89 00 04 	brgt	800054e4 <_vfprintf_r+0x1c24>
800054e0:	2f 83       	sub	r3,-8
800054e2:	c0 b8       	rjmp	800054f8 <_vfprintf_r+0x1c38>
800054e4:	fa ca f9 78 	sub	r10,sp,-1672
800054e8:	02 9b       	mov	r11,r1
800054ea:	08 9c       	mov	r12,r4
800054ec:	fe b0 f1 dc 	rcall	800038a4 <__sprint_r>
800054f0:	e0 81 01 67 	brne	800057be <_vfprintf_r+0x1efe>
800054f4:	fa c3 f9 e0 	sub	r3,sp,-1568
800054f8:	40 c8       	lddsp	r8,sp[0x30]
800054fa:	87 08       	st.w	r3[0x0],r8
800054fc:	fa f8 06 90 	ld.w	r8,sp[1680]
80005500:	2f f8       	sub	r8,-1
80005502:	30 19       	mov	r9,1
80005504:	fb 48 06 90 	st.w	sp[1680],r8
80005508:	87 19       	st.w	r3[0x4],r9
8000550a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000550e:	2f f8       	sub	r8,-1
80005510:	fb 48 06 8c 	st.w	sp[1676],r8
80005514:	fa f2 06 ac 	ld.w	r2,sp[1708]
80005518:	58 78       	cp.w	r8,7
8000551a:	e0 89 00 04 	brgt	80005522 <_vfprintf_r+0x1c62>
8000551e:	2f 83       	sub	r3,-8
80005520:	c0 b8       	rjmp	80005536 <_vfprintf_r+0x1c76>
80005522:	fa ca f9 78 	sub	r10,sp,-1672
80005526:	02 9b       	mov	r11,r1
80005528:	08 9c       	mov	r12,r4
8000552a:	fe b0 f1 bd 	rcall	800038a4 <__sprint_r>
8000552e:	e0 81 01 48 	brne	800057be <_vfprintf_r+0x1efe>
80005532:	fa c3 f9 e0 	sub	r3,sp,-1568
80005536:	04 06       	add	r6,r2
80005538:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000553c:	87 06       	st.w	r3[0x0],r6
8000553e:	fa f9 06 90 	ld.w	r9,sp[1680]
80005542:	40 66       	lddsp	r6,sp[0x18]
80005544:	40 6e       	lddsp	lr,sp[0x18]
80005546:	10 16       	sub	r6,r8
80005548:	f2 08 01 08 	sub	r8,r9,r8
8000554c:	87 16       	st.w	r3[0x4],r6
8000554e:	1c 08       	add	r8,lr
80005550:	fb 48 06 90 	st.w	sp[1680],r8
80005554:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005558:	2f f8       	sub	r8,-1
8000555a:	fb 48 06 8c 	st.w	sp[1676],r8
8000555e:	cb 78       	rjmp	800056cc <_vfprintf_r+0x1e0c>
80005560:	40 6c       	lddsp	r12,sp[0x18]
80005562:	58 1c       	cp.w	r12,1
80005564:	e0 89 00 06 	brgt	80005570 <_vfprintf_r+0x1cb0>
80005568:	ed b5 00 00 	bld	r5,0x0
8000556c:	e0 81 00 85 	brne	80005676 <_vfprintf_r+0x1db6>
80005570:	fa f8 06 90 	ld.w	r8,sp[1680]
80005574:	2f f8       	sub	r8,-1
80005576:	30 19       	mov	r9,1
80005578:	fb 48 06 90 	st.w	sp[1680],r8
8000557c:	87 06       	st.w	r3[0x0],r6
8000557e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005582:	87 19       	st.w	r3[0x4],r9
80005584:	2f f8       	sub	r8,-1
80005586:	fb 48 06 8c 	st.w	sp[1676],r8
8000558a:	58 78       	cp.w	r8,7
8000558c:	e0 89 00 04 	brgt	80005594 <_vfprintf_r+0x1cd4>
80005590:	2f 83       	sub	r3,-8
80005592:	c0 b8       	rjmp	800055a8 <_vfprintf_r+0x1ce8>
80005594:	fa ca f9 78 	sub	r10,sp,-1672
80005598:	02 9b       	mov	r11,r1
8000559a:	08 9c       	mov	r12,r4
8000559c:	fe b0 f1 84 	rcall	800038a4 <__sprint_r>
800055a0:	e0 81 01 0f 	brne	800057be <_vfprintf_r+0x1efe>
800055a4:	fa c3 f9 e0 	sub	r3,sp,-1568
800055a8:	fa f8 06 90 	ld.w	r8,sp[1680]
800055ac:	2f f8       	sub	r8,-1
800055ae:	40 cb       	lddsp	r11,sp[0x30]
800055b0:	fb 48 06 90 	st.w	sp[1680],r8
800055b4:	30 19       	mov	r9,1
800055b6:	fa f8 06 8c 	ld.w	r8,sp[1676]
800055ba:	87 0b       	st.w	r3[0x0],r11
800055bc:	2f f8       	sub	r8,-1
800055be:	87 19       	st.w	r3[0x4],r9
800055c0:	fb 48 06 8c 	st.w	sp[1676],r8
800055c4:	58 78       	cp.w	r8,7
800055c6:	e0 89 00 05 	brgt	800055d0 <_vfprintf_r+0x1d10>
800055ca:	2f 83       	sub	r3,-8
800055cc:	c0 c8       	rjmp	800055e4 <_vfprintf_r+0x1d24>
800055ce:	d7 03       	nop
800055d0:	fa ca f9 78 	sub	r10,sp,-1672
800055d4:	02 9b       	mov	r11,r1
800055d6:	08 9c       	mov	r12,r4
800055d8:	fe b0 f1 66 	rcall	800038a4 <__sprint_r>
800055dc:	e0 81 00 f1 	brne	800057be <_vfprintf_r+0x1efe>
800055e0:	fa c3 f9 e0 	sub	r3,sp,-1568
800055e4:	30 08       	mov	r8,0
800055e6:	30 09       	mov	r9,0
800055e8:	40 5b       	lddsp	r11,sp[0x14]
800055ea:	40 7a       	lddsp	r10,sp[0x1c]
800055ec:	e0 a0 17 3d 	rcall	80008466 <__avr32_f64_cmp_eq>
800055f0:	40 68       	lddsp	r8,sp[0x18]
800055f2:	20 18       	sub	r8,1
800055f4:	58 0c       	cp.w	r12,0
800055f6:	c0 d1       	brne	80005610 <_vfprintf_r+0x1d50>
800055f8:	2f f6       	sub	r6,-1
800055fa:	87 18       	st.w	r3[0x4],r8
800055fc:	87 06       	st.w	r3[0x0],r6
800055fe:	fa f6 06 90 	ld.w	r6,sp[1680]
80005602:	10 06       	add	r6,r8
80005604:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005608:	fb 46 06 90 	st.w	sp[1680],r6
8000560c:	2f f8       	sub	r8,-1
8000560e:	c3 18       	rjmp	80005670 <_vfprintf_r+0x1db0>
80005610:	10 96       	mov	r6,r8
80005612:	58 08       	cp.w	r8,0
80005614:	e0 89 00 1c 	brgt	8000564c <_vfprintf_r+0x1d8c>
80005618:	c4 b8       	rjmp	800056ae <_vfprintf_r+0x1dee>
8000561a:	2f 09       	sub	r9,-16
8000561c:	2f f8       	sub	r8,-1
8000561e:	fb 49 06 90 	st.w	sp[1680],r9
80005622:	87 02       	st.w	r3[0x0],r2
80005624:	87 10       	st.w	r3[0x4],r0
80005626:	fb 48 06 8c 	st.w	sp[1676],r8
8000562a:	58 78       	cp.w	r8,7
8000562c:	e0 89 00 04 	brgt	80005634 <_vfprintf_r+0x1d74>
80005630:	2f 83       	sub	r3,-8
80005632:	c0 b8       	rjmp	80005648 <_vfprintf_r+0x1d88>
80005634:	fa ca f9 78 	sub	r10,sp,-1672
80005638:	02 9b       	mov	r11,r1
8000563a:	08 9c       	mov	r12,r4
8000563c:	fe b0 f1 34 	rcall	800038a4 <__sprint_r>
80005640:	e0 81 00 bf 	brne	800057be <_vfprintf_r+0x1efe>
80005644:	fa c3 f9 e0 	sub	r3,sp,-1568
80005648:	21 06       	sub	r6,16
8000564a:	c0 48       	rjmp	80005652 <_vfprintf_r+0x1d92>
8000564c:	fe c2 c1 c4 	sub	r2,pc,-15932
80005650:	31 00       	mov	r0,16
80005652:	fa f9 06 90 	ld.w	r9,sp[1680]
80005656:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000565a:	fe ca c1 d2 	sub	r10,pc,-15918
8000565e:	59 06       	cp.w	r6,16
80005660:	fe 99 ff dd 	brgt	8000561a <_vfprintf_r+0x1d5a>
80005664:	0c 09       	add	r9,r6
80005666:	87 0a       	st.w	r3[0x0],r10
80005668:	fb 49 06 90 	st.w	sp[1680],r9
8000566c:	2f f8       	sub	r8,-1
8000566e:	87 16       	st.w	r3[0x4],r6
80005670:	fb 48 06 8c 	st.w	sp[1676],r8
80005674:	c0 e8       	rjmp	80005690 <_vfprintf_r+0x1dd0>
80005676:	fa f8 06 90 	ld.w	r8,sp[1680]
8000567a:	2f f8       	sub	r8,-1
8000567c:	30 19       	mov	r9,1
8000567e:	fb 48 06 90 	st.w	sp[1680],r8
80005682:	87 06       	st.w	r3[0x0],r6
80005684:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005688:	87 19       	st.w	r3[0x4],r9
8000568a:	2f f8       	sub	r8,-1
8000568c:	fb 48 06 8c 	st.w	sp[1676],r8
80005690:	58 78       	cp.w	r8,7
80005692:	e0 89 00 04 	brgt	8000569a <_vfprintf_r+0x1dda>
80005696:	2f 83       	sub	r3,-8
80005698:	c0 b8       	rjmp	800056ae <_vfprintf_r+0x1dee>
8000569a:	fa ca f9 78 	sub	r10,sp,-1672
8000569e:	02 9b       	mov	r11,r1
800056a0:	08 9c       	mov	r12,r4
800056a2:	fe b0 f1 01 	rcall	800038a4 <__sprint_r>
800056a6:	e0 81 00 8c 	brne	800057be <_vfprintf_r+0x1efe>
800056aa:	fa c3 f9 e0 	sub	r3,sp,-1568
800056ae:	40 ea       	lddsp	r10,sp[0x38]
800056b0:	fa f8 06 90 	ld.w	r8,sp[1680]
800056b4:	14 08       	add	r8,r10
800056b6:	fa c9 f9 64 	sub	r9,sp,-1692
800056ba:	fb 48 06 90 	st.w	sp[1680],r8
800056be:	87 1a       	st.w	r3[0x4],r10
800056c0:	fa f8 06 8c 	ld.w	r8,sp[1676]
800056c4:	87 09       	st.w	r3[0x0],r9
800056c6:	2f f8       	sub	r8,-1
800056c8:	fb 48 06 8c 	st.w	sp[1676],r8
800056cc:	58 78       	cp.w	r8,7
800056ce:	e0 89 00 04 	brgt	800056d6 <_vfprintf_r+0x1e16>
800056d2:	2f 83       	sub	r3,-8
800056d4:	c0 a8       	rjmp	800056e8 <_vfprintf_r+0x1e28>
800056d6:	fa ca f9 78 	sub	r10,sp,-1672
800056da:	02 9b       	mov	r11,r1
800056dc:	08 9c       	mov	r12,r4
800056de:	fe b0 f0 e3 	rcall	800038a4 <__sprint_r>
800056e2:	c6 e1       	brne	800057be <_vfprintf_r+0x1efe>
800056e4:	fa c3 f9 e0 	sub	r3,sp,-1568
800056e8:	e2 15 00 04 	andl	r5,0x4,COH
800056ec:	c3 f0       	breq	8000576a <_vfprintf_r+0x1eaa>
800056ee:	40 86       	lddsp	r6,sp[0x20]
800056f0:	40 39       	lddsp	r9,sp[0xc]
800056f2:	12 16       	sub	r6,r9
800056f4:	58 06       	cp.w	r6,0
800056f6:	e0 89 00 1a 	brgt	8000572a <_vfprintf_r+0x1e6a>
800056fa:	c3 88       	rjmp	8000576a <_vfprintf_r+0x1eaa>
800056fc:	2f 09       	sub	r9,-16
800056fe:	2f f8       	sub	r8,-1
80005700:	fb 49 06 90 	st.w	sp[1680],r9
80005704:	87 05       	st.w	r3[0x0],r5
80005706:	87 12       	st.w	r3[0x4],r2
80005708:	fb 48 06 8c 	st.w	sp[1676],r8
8000570c:	58 78       	cp.w	r8,7
8000570e:	e0 89 00 04 	brgt	80005716 <_vfprintf_r+0x1e56>
80005712:	2f 83       	sub	r3,-8
80005714:	c0 98       	rjmp	80005726 <_vfprintf_r+0x1e66>
80005716:	00 9a       	mov	r10,r0
80005718:	02 9b       	mov	r11,r1
8000571a:	08 9c       	mov	r12,r4
8000571c:	fe b0 f0 c4 	rcall	800038a4 <__sprint_r>
80005720:	c4 f1       	brne	800057be <_vfprintf_r+0x1efe>
80005722:	fa c3 f9 e0 	sub	r3,sp,-1568
80005726:	21 06       	sub	r6,16
80005728:	c0 68       	rjmp	80005734 <_vfprintf_r+0x1e74>
8000572a:	fe c5 c2 b2 	sub	r5,pc,-15694
8000572e:	31 02       	mov	r2,16
80005730:	fa c0 f9 78 	sub	r0,sp,-1672
80005734:	fa f9 06 90 	ld.w	r9,sp[1680]
80005738:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000573c:	fe ca c2 c4 	sub	r10,pc,-15676
80005740:	59 06       	cp.w	r6,16
80005742:	fe 99 ff dd 	brgt	800056fc <_vfprintf_r+0x1e3c>
80005746:	0c 09       	add	r9,r6
80005748:	2f f8       	sub	r8,-1
8000574a:	87 0a       	st.w	r3[0x0],r10
8000574c:	87 16       	st.w	r3[0x4],r6
8000574e:	fb 49 06 90 	st.w	sp[1680],r9
80005752:	fb 48 06 8c 	st.w	sp[1676],r8
80005756:	58 78       	cp.w	r8,7
80005758:	e0 8a 00 09 	brle	8000576a <_vfprintf_r+0x1eaa>
8000575c:	fa ca f9 78 	sub	r10,sp,-1672
80005760:	02 9b       	mov	r11,r1
80005762:	08 9c       	mov	r12,r4
80005764:	fe b0 f0 a0 	rcall	800038a4 <__sprint_r>
80005768:	c2 b1       	brne	800057be <_vfprintf_r+0x1efe>
8000576a:	40 bc       	lddsp	r12,sp[0x2c]
8000576c:	40 36       	lddsp	r6,sp[0xc]
8000576e:	40 8e       	lddsp	lr,sp[0x20]
80005770:	ec 0e 0c 48 	max	r8,r6,lr
80005774:	10 0c       	add	r12,r8
80005776:	50 bc       	stdsp	sp[0x2c],r12
80005778:	fa f8 06 90 	ld.w	r8,sp[1680]
8000577c:	58 08       	cp.w	r8,0
8000577e:	c0 80       	breq	8000578e <_vfprintf_r+0x1ece>
80005780:	fa ca f9 78 	sub	r10,sp,-1672
80005784:	02 9b       	mov	r11,r1
80005786:	08 9c       	mov	r12,r4
80005788:	fe b0 f0 8e 	rcall	800038a4 <__sprint_r>
8000578c:	c1 91       	brne	800057be <_vfprintf_r+0x1efe>
8000578e:	30 0b       	mov	r11,0
80005790:	fa c3 f9 e0 	sub	r3,sp,-1568
80005794:	fb 4b 06 8c 	st.w	sp[1676],r11
80005798:	fe 9f f1 22 	bral	800039dc <_vfprintf_r+0x11c>
8000579c:	08 95       	mov	r5,r4
8000579e:	fa f8 06 90 	ld.w	r8,sp[1680]
800057a2:	58 08       	cp.w	r8,0
800057a4:	c0 80       	breq	800057b4 <_vfprintf_r+0x1ef4>
800057a6:	08 9c       	mov	r12,r4
800057a8:	fa ca f9 78 	sub	r10,sp,-1672
800057ac:	02 9b       	mov	r11,r1
800057ae:	fe b0 f0 7b 	rcall	800038a4 <__sprint_r>
800057b2:	c0 61       	brne	800057be <_vfprintf_r+0x1efe>
800057b4:	30 08       	mov	r8,0
800057b6:	fb 48 06 8c 	st.w	sp[1676],r8
800057ba:	c0 28       	rjmp	800057be <_vfprintf_r+0x1efe>
800057bc:	40 41       	lddsp	r1,sp[0x10]
800057be:	82 68       	ld.sh	r8,r1[0xc]
800057c0:	ed b8 00 06 	bld	r8,0x6
800057c4:	c0 31       	brne	800057ca <_vfprintf_r+0x1f0a>
800057c6:	3f fa       	mov	r10,-1
800057c8:	50 ba       	stdsp	sp[0x2c],r10
800057ca:	40 bc       	lddsp	r12,sp[0x2c]
800057cc:	fe 3d f9 44 	sub	sp,-1724
800057d0:	d8 32       	popm	r0-r7,pc
800057d2:	d7 03       	nop

800057d4 <__swsetup_r>:
800057d4:	d4 21       	pushm	r4-r7,lr
800057d6:	e0 68 01 00 	mov	r8,256
800057da:	18 96       	mov	r6,r12
800057dc:	16 97       	mov	r7,r11
800057de:	70 0c       	ld.w	r12,r8[0x0]
800057e0:	58 0c       	cp.w	r12,0
800057e2:	c0 60       	breq	800057ee <__swsetup_r+0x1a>
800057e4:	78 68       	ld.w	r8,r12[0x18]
800057e6:	58 08       	cp.w	r8,0
800057e8:	c0 31       	brne	800057ee <__swsetup_r+0x1a>
800057ea:	e0 a0 07 b9 	rcall	8000675c <__sinit>
800057ee:	fe c8 c2 46 	sub	r8,pc,-15802
800057f2:	10 37       	cp.w	r7,r8
800057f4:	c0 61       	brne	80005800 <__swsetup_r+0x2c>
800057f6:	e0 68 01 00 	mov	r8,256
800057fa:	70 08       	ld.w	r8,r8[0x0]
800057fc:	70 07       	ld.w	r7,r8[0x0]
800057fe:	c1 28       	rjmp	80005822 <__swsetup_r+0x4e>
80005800:	fe c8 c2 38 	sub	r8,pc,-15816
80005804:	10 37       	cp.w	r7,r8
80005806:	c0 61       	brne	80005812 <__swsetup_r+0x3e>
80005808:	e0 68 01 00 	mov	r8,256
8000580c:	70 08       	ld.w	r8,r8[0x0]
8000580e:	70 17       	ld.w	r7,r8[0x4]
80005810:	c0 98       	rjmp	80005822 <__swsetup_r+0x4e>
80005812:	fe c8 c2 2a 	sub	r8,pc,-15830
80005816:	10 37       	cp.w	r7,r8
80005818:	c0 51       	brne	80005822 <__swsetup_r+0x4e>
8000581a:	e0 68 01 00 	mov	r8,256
8000581e:	70 08       	ld.w	r8,r8[0x0]
80005820:	70 27       	ld.w	r7,r8[0x8]
80005822:	8e 68       	ld.sh	r8,r7[0xc]
80005824:	ed b8 00 03 	bld	r8,0x3
80005828:	c1 e0       	breq	80005864 <__swsetup_r+0x90>
8000582a:	ed b8 00 04 	bld	r8,0x4
8000582e:	c3 e1       	brne	800058aa <__swsetup_r+0xd6>
80005830:	ed b8 00 02 	bld	r8,0x2
80005834:	c1 51       	brne	8000585e <__swsetup_r+0x8a>
80005836:	6e db       	ld.w	r11,r7[0x34]
80005838:	58 0b       	cp.w	r11,0
8000583a:	c0 a0       	breq	8000584e <__swsetup_r+0x7a>
8000583c:	ee c8 ff bc 	sub	r8,r7,-68
80005840:	10 3b       	cp.w	r11,r8
80005842:	c0 40       	breq	8000584a <__swsetup_r+0x76>
80005844:	0c 9c       	mov	r12,r6
80005846:	e0 a0 08 25 	rcall	80006890 <_free_r>
8000584a:	30 08       	mov	r8,0
8000584c:	8f d8       	st.w	r7[0x34],r8
8000584e:	8e 68       	ld.sh	r8,r7[0xc]
80005850:	e0 18 ff db 	andl	r8,0xffdb
80005854:	ae 68       	st.h	r7[0xc],r8
80005856:	30 08       	mov	r8,0
80005858:	8f 18       	st.w	r7[0x4],r8
8000585a:	6e 48       	ld.w	r8,r7[0x10]
8000585c:	8f 08       	st.w	r7[0x0],r8
8000585e:	8e 68       	ld.sh	r8,r7[0xc]
80005860:	a3 b8       	sbr	r8,0x3
80005862:	ae 68       	st.h	r7[0xc],r8
80005864:	6e 48       	ld.w	r8,r7[0x10]
80005866:	58 08       	cp.w	r8,0
80005868:	c0 b1       	brne	8000587e <__swsetup_r+0xaa>
8000586a:	8e 68       	ld.sh	r8,r7[0xc]
8000586c:	e2 18 02 80 	andl	r8,0x280,COH
80005870:	e0 48 02 00 	cp.w	r8,512
80005874:	c0 50       	breq	8000587e <__swsetup_r+0xaa>
80005876:	0c 9c       	mov	r12,r6
80005878:	0e 9b       	mov	r11,r7
8000587a:	e0 a0 0a 4b 	rcall	80006d10 <__smakebuf_r>
8000587e:	8e 69       	ld.sh	r9,r7[0xc]
80005880:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
80005884:	c0 70       	breq	80005892 <__swsetup_r+0xbe>
80005886:	30 08       	mov	r8,0
80005888:	8f 28       	st.w	r7[0x8],r8
8000588a:	6e 58       	ld.w	r8,r7[0x14]
8000588c:	5c 38       	neg	r8
8000588e:	8f 68       	st.w	r7[0x18],r8
80005890:	c0 68       	rjmp	8000589c <__swsetup_r+0xc8>
80005892:	ed b9 00 01 	bld	r9,0x1
80005896:	ef f8 10 05 	ld.wne	r8,r7[0x14]
8000589a:	8f 28       	st.w	r7[0x8],r8
8000589c:	6e 48       	ld.w	r8,r7[0x10]
8000589e:	58 08       	cp.w	r8,0
800058a0:	c0 61       	brne	800058ac <__swsetup_r+0xd8>
800058a2:	8e 68       	ld.sh	r8,r7[0xc]
800058a4:	ed b8 00 07 	bld	r8,0x7
800058a8:	c0 21       	brne	800058ac <__swsetup_r+0xd8>
800058aa:	dc 2a       	popm	r4-r7,pc,r12=-1
800058ac:	d8 2a       	popm	r4-r7,pc,r12=0
800058ae:	d7 03       	nop

800058b0 <quorem>:
800058b0:	d4 31       	pushm	r0-r7,lr
800058b2:	20 2d       	sub	sp,8
800058b4:	18 97       	mov	r7,r12
800058b6:	78 48       	ld.w	r8,r12[0x10]
800058b8:	76 46       	ld.w	r6,r11[0x10]
800058ba:	0c 38       	cp.w	r8,r6
800058bc:	c0 34       	brge	800058c2 <quorem+0x12>
800058be:	30 0c       	mov	r12,0
800058c0:	c8 58       	rjmp	800059ca <quorem+0x11a>
800058c2:	ec c2 ff fc 	sub	r2,r6,-4
800058c6:	f6 c3 ff ec 	sub	r3,r11,-20
800058ca:	f6 02 03 29 	ld.w	r9,r11[r2<<0x2]
800058ce:	f8 02 03 2c 	ld.w	r12,r12[r2<<0x2]
800058d2:	2f f9       	sub	r9,-1
800058d4:	20 16       	sub	r6,1
800058d6:	f8 09 0d 08 	divu	r8,r12,r9
800058da:	f6 02 00 22 	add	r2,r11,r2<<0x2
800058de:	ee c4 ff ec 	sub	r4,r7,-20
800058e2:	10 95       	mov	r5,r8
800058e4:	58 08       	cp.w	r8,0
800058e6:	c4 10       	breq	80005968 <quorem+0xb8>
800058e8:	30 09       	mov	r9,0
800058ea:	06 9a       	mov	r10,r3
800058ec:	08 98       	mov	r8,r4
800058ee:	12 91       	mov	r1,r9
800058f0:	50 0b       	stdsp	sp[0x0],r11
800058f2:	70 0e       	ld.w	lr,r8[0x0]
800058f4:	b1 8e       	lsr	lr,0x10
800058f6:	50 1e       	stdsp	sp[0x4],lr
800058f8:	15 0e       	ld.w	lr,r10++
800058fa:	fc 00 16 10 	lsr	r0,lr,0x10
800058fe:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80005902:	ea 0e 03 41 	mac	r1,r5,lr
80005906:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
8000590a:	b1 81       	lsr	r1,0x10
8000590c:	40 1b       	lddsp	r11,sp[0x4]
8000590e:	ea 00 02 40 	mul	r0,r5,r0
80005912:	e2 00 00 00 	add	r0,r1,r0
80005916:	e3 d0 c0 10 	bfextu	r1,r0,0x0,0x10
8000591a:	02 1b       	sub	r11,r1
8000591c:	50 1b       	stdsp	sp[0x4],r11
8000591e:	70 0b       	ld.w	r11,r8[0x0]
80005920:	e3 db c0 10 	bfextu	r1,r11,0x0,0x10
80005924:	02 09       	add	r9,r1
80005926:	f2 0e 01 0e 	sub	lr,r9,lr
8000592a:	b0 1e       	st.h	r8[0x2],lr
8000592c:	fc 09 14 10 	asr	r9,lr,0x10
80005930:	40 1e       	lddsp	lr,sp[0x4]
80005932:	fc 09 00 09 	add	r9,lr,r9
80005936:	b0 09       	st.h	r8[0x0],r9
80005938:	e0 01 16 10 	lsr	r1,r0,0x10
8000593c:	2f c8       	sub	r8,-4
8000593e:	b1 49       	asr	r9,0x10
80005940:	04 3a       	cp.w	r10,r2
80005942:	fe 98 ff d8 	brls	800058f2 <quorem+0x42>
80005946:	40 0b       	lddsp	r11,sp[0x0]
80005948:	58 0c       	cp.w	r12,0
8000594a:	c0 f1       	brne	80005968 <quorem+0xb8>
8000594c:	ec c8 ff fb 	sub	r8,r6,-5
80005950:	ee 08 00 28 	add	r8,r7,r8<<0x2
80005954:	c0 28       	rjmp	80005958 <quorem+0xa8>
80005956:	20 16       	sub	r6,1
80005958:	20 48       	sub	r8,4
8000595a:	08 38       	cp.w	r8,r4
8000595c:	e0 88 00 05 	brls	80005966 <quorem+0xb6>
80005960:	70 09       	ld.w	r9,r8[0x0]
80005962:	58 09       	cp.w	r9,0
80005964:	cf 90       	breq	80005956 <quorem+0xa6>
80005966:	8f 46       	st.w	r7[0x10],r6
80005968:	0e 9c       	mov	r12,r7
8000596a:	e0 a0 0c fb 	rcall	80007360 <__mcmp>
8000596e:	c2 d5       	brlt	800059c8 <quorem+0x118>
80005970:	2f f5       	sub	r5,-1
80005972:	08 98       	mov	r8,r4
80005974:	30 09       	mov	r9,0
80005976:	07 0b       	ld.w	r11,r3++
80005978:	f6 0a 16 10 	lsr	r10,r11,0x10
8000597c:	70 0c       	ld.w	r12,r8[0x0]
8000597e:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80005982:	f8 0e 16 10 	lsr	lr,r12,0x10
80005986:	14 1e       	sub	lr,r10
80005988:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
8000598c:	16 1a       	sub	r10,r11
8000598e:	12 0a       	add	r10,r9
80005990:	b0 1a       	st.h	r8[0x2],r10
80005992:	b1 4a       	asr	r10,0x10
80005994:	fc 0a 00 09 	add	r9,lr,r10
80005998:	b0 09       	st.h	r8[0x0],r9
8000599a:	2f c8       	sub	r8,-4
8000599c:	b1 49       	asr	r9,0x10
8000599e:	04 33       	cp.w	r3,r2
800059a0:	fe 98 ff eb 	brls	80005976 <quorem+0xc6>
800059a4:	ec c8 ff fb 	sub	r8,r6,-5
800059a8:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
800059ac:	58 09       	cp.w	r9,0
800059ae:	c0 d1       	brne	800059c8 <quorem+0x118>
800059b0:	ee 08 00 28 	add	r8,r7,r8<<0x2
800059b4:	c0 28       	rjmp	800059b8 <quorem+0x108>
800059b6:	20 16       	sub	r6,1
800059b8:	20 48       	sub	r8,4
800059ba:	08 38       	cp.w	r8,r4
800059bc:	e0 88 00 05 	brls	800059c6 <quorem+0x116>
800059c0:	70 09       	ld.w	r9,r8[0x0]
800059c2:	58 09       	cp.w	r9,0
800059c4:	cf 90       	breq	800059b6 <quorem+0x106>
800059c6:	8f 46       	st.w	r7[0x10],r6
800059c8:	0a 9c       	mov	r12,r5
800059ca:	2f ed       	sub	sp,-8
800059cc:	d8 32       	popm	r0-r7,pc
800059ce:	d7 03       	nop

800059d0 <_dtoa_r>:
800059d0:	d4 31       	pushm	r0-r7,lr
800059d2:	21 ad       	sub	sp,104
800059d4:	fa c4 ff 74 	sub	r4,sp,-140
800059d8:	18 97       	mov	r7,r12
800059da:	16 95       	mov	r5,r11
800059dc:	68 2c       	ld.w	r12,r4[0x8]
800059de:	50 c9       	stdsp	sp[0x30],r9
800059e0:	68 16       	ld.w	r6,r4[0x4]
800059e2:	68 09       	ld.w	r9,r4[0x0]
800059e4:	50 e8       	stdsp	sp[0x38],r8
800059e6:	14 94       	mov	r4,r10
800059e8:	51 2c       	stdsp	sp[0x48],r12
800059ea:	fa e5 00 08 	st.d	sp[8],r4
800059ee:	51 59       	stdsp	sp[0x54],r9
800059f0:	6e 95       	ld.w	r5,r7[0x24]
800059f2:	58 05       	cp.w	r5,0
800059f4:	c0 91       	brne	80005a06 <_dtoa_r+0x36>
800059f6:	31 0c       	mov	r12,16
800059f8:	e0 a0 09 ea 	rcall	80006dcc <malloc>
800059fc:	99 35       	st.w	r12[0xc],r5
800059fe:	8f 9c       	st.w	r7[0x24],r12
80005a00:	99 15       	st.w	r12[0x4],r5
80005a02:	99 25       	st.w	r12[0x8],r5
80005a04:	99 05       	st.w	r12[0x0],r5
80005a06:	6e 99       	ld.w	r9,r7[0x24]
80005a08:	72 08       	ld.w	r8,r9[0x0]
80005a0a:	58 08       	cp.w	r8,0
80005a0c:	c0 f0       	breq	80005a2a <_dtoa_r+0x5a>
80005a0e:	72 1a       	ld.w	r10,r9[0x4]
80005a10:	91 1a       	st.w	r8[0x4],r10
80005a12:	30 1a       	mov	r10,1
80005a14:	72 19       	ld.w	r9,r9[0x4]
80005a16:	f4 09 09 49 	lsl	r9,r10,r9
80005a1a:	10 9b       	mov	r11,r8
80005a1c:	91 29       	st.w	r8[0x8],r9
80005a1e:	0e 9c       	mov	r12,r7
80005a20:	e0 a0 0c ba 	rcall	80007394 <_Bfree>
80005a24:	6e 98       	ld.w	r8,r7[0x24]
80005a26:	30 09       	mov	r9,0
80005a28:	91 09       	st.w	r8[0x0],r9
80005a2a:	40 28       	lddsp	r8,sp[0x8]
80005a2c:	10 94       	mov	r4,r8
80005a2e:	58 08       	cp.w	r8,0
80005a30:	c0 64       	brge	80005a3c <_dtoa_r+0x6c>
80005a32:	f1 d8 c0 1f 	bfextu	r8,r8,0x0,0x1f
80005a36:	50 28       	stdsp	sp[0x8],r8
80005a38:	30 18       	mov	r8,1
80005a3a:	c0 28       	rjmp	80005a3e <_dtoa_r+0x6e>
80005a3c:	30 08       	mov	r8,0
80005a3e:	8d 08       	st.w	r6[0x0],r8
80005a40:	fc 1c 7f f0 	movh	r12,0x7ff0
80005a44:	40 26       	lddsp	r6,sp[0x8]
80005a46:	0c 98       	mov	r8,r6
80005a48:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80005a4c:	18 38       	cp.w	r8,r12
80005a4e:	c2 01       	brne	80005a8e <_dtoa_r+0xbe>
80005a50:	e0 68 27 0f 	mov	r8,9999
80005a54:	41 5b       	lddsp	r11,sp[0x54]
80005a56:	97 08       	st.w	r11[0x0],r8
80005a58:	40 3a       	lddsp	r10,sp[0xc]
80005a5a:	58 0a       	cp.w	r10,0
80005a5c:	c0 71       	brne	80005a6a <_dtoa_r+0x9a>
80005a5e:	ed d6 c0 14 	bfextu	r6,r6,0x0,0x14
80005a62:	c0 41       	brne	80005a6a <_dtoa_r+0x9a>
80005a64:	fe cc c4 cc 	sub	r12,pc,-15156
80005a68:	c0 38       	rjmp	80005a6e <_dtoa_r+0x9e>
80005a6a:	fe cc c4 c6 	sub	r12,pc,-15162
80005a6e:	41 29       	lddsp	r9,sp[0x48]
80005a70:	58 09       	cp.w	r9,0
80005a72:	e0 80 05 9a 	breq	800065a6 <_dtoa_r+0xbd6>
80005a76:	f8 c8 ff fd 	sub	r8,r12,-3
80005a7a:	f8 c9 ff f8 	sub	r9,r12,-8
80005a7e:	11 8b       	ld.ub	r11,r8[0x0]
80005a80:	30 0a       	mov	r10,0
80005a82:	41 25       	lddsp	r5,sp[0x48]
80005a84:	f4 0b 18 00 	cp.b	r11,r10
80005a88:	f2 08 17 10 	movne	r8,r9
80005a8c:	c1 68       	rjmp	80005ab8 <_dtoa_r+0xe8>
80005a8e:	fa ea 00 08 	ld.d	r10,sp[8]
80005a92:	30 08       	mov	r8,0
80005a94:	fa eb 00 3c 	st.d	sp[60],r10
80005a98:	30 09       	mov	r9,0
80005a9a:	e0 a0 14 e6 	rcall	80008466 <__avr32_f64_cmp_eq>
80005a9e:	c1 00       	breq	80005abe <_dtoa_r+0xee>
80005aa0:	30 18       	mov	r8,1
80005aa2:	41 5a       	lddsp	r10,sp[0x54]
80005aa4:	95 08       	st.w	r10[0x0],r8
80005aa6:	fe cc c6 32 	sub	r12,pc,-14798
80005aaa:	41 29       	lddsp	r9,sp[0x48]
80005aac:	f8 08 00 08 	add	r8,r12,r8
80005ab0:	58 09       	cp.w	r9,0
80005ab2:	e0 80 05 7a 	breq	800065a6 <_dtoa_r+0xbd6>
80005ab6:	12 95       	mov	r5,r9
80005ab8:	8b 08       	st.w	r5[0x0],r8
80005aba:	e0 8f 05 76 	bral	800065a6 <_dtoa_r+0xbd6>
80005abe:	fa c8 ff 9c 	sub	r8,sp,-100
80005ac2:	fa c9 ff a0 	sub	r9,sp,-96
80005ac6:	fa ea 00 3c 	ld.d	r10,sp[60]
80005aca:	0e 9c       	mov	r12,r7
80005acc:	eb d6 c2 8b 	bfextu	r5,r6,0x14,0xb
80005ad0:	e0 a0 0c b4 	rcall	80007438 <__d2b>
80005ad4:	18 93       	mov	r3,r12
80005ad6:	58 05       	cp.w	r5,0
80005ad8:	c0 d0       	breq	80005af2 <_dtoa_r+0x122>
80005ada:	fa ea 00 3c 	ld.d	r10,sp[60]
80005ade:	30 04       	mov	r4,0
80005ae0:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
80005ae4:	ea c5 03 ff 	sub	r5,r5,1023
80005ae8:	10 9b       	mov	r11,r8
80005aea:	51 74       	stdsp	sp[0x5c],r4
80005aec:	ea 1b 3f f0 	orh	r11,0x3ff0
80005af0:	c2 58       	rjmp	80005b3a <_dtoa_r+0x16a>
80005af2:	41 88       	lddsp	r8,sp[0x60]
80005af4:	41 9c       	lddsp	r12,sp[0x64]
80005af6:	10 0c       	add	r12,r8
80005af8:	f8 c5 fb ce 	sub	r5,r12,-1074
80005afc:	e0 45 00 20 	cp.w	r5,32
80005b00:	e0 8a 00 0e 	brle	80005b1c <_dtoa_r+0x14c>
80005b04:	f8 cc fb ee 	sub	r12,r12,-1042
80005b08:	40 3b       	lddsp	r11,sp[0xc]
80005b0a:	ea 08 11 40 	rsub	r8,r5,64
80005b0e:	f6 0c 0a 4c 	lsr	r12,r11,r12
80005b12:	ec 08 09 46 	lsl	r6,r6,r8
80005b16:	0c 4c       	or	r12,r6
80005b18:	c0 78       	rjmp	80005b26 <_dtoa_r+0x156>
80005b1a:	d7 03       	nop
80005b1c:	ea 0c 11 20 	rsub	r12,r5,32
80005b20:	40 3a       	lddsp	r10,sp[0xc]
80005b22:	f4 0c 09 4c 	lsl	r12,r10,r12
80005b26:	e0 a0 14 2c 	rcall	8000837e <__avr32_u32_to_f64>
80005b2a:	fc 18 fe 10 	movh	r8,0xfe10
80005b2e:	30 19       	mov	r9,1
80005b30:	ea c5 04 33 	sub	r5,r5,1075
80005b34:	f0 0b 00 0b 	add	r11,r8,r11
80005b38:	51 79       	stdsp	sp[0x5c],r9
80005b3a:	30 08       	mov	r8,0
80005b3c:	fc 19 3f f8 	movh	r9,0x3ff8
80005b40:	e0 a0 12 b4 	rcall	800080a8 <__avr32_f64_sub>
80005b44:	e0 68 43 61 	mov	r8,17249
80005b48:	ea 18 63 6f 	orh	r8,0x636f
80005b4c:	e0 69 87 a7 	mov	r9,34727
80005b50:	ea 19 3f d2 	orh	r9,0x3fd2
80005b54:	e0 a0 11 be 	rcall	80007ed0 <__avr32_f64_mul>
80005b58:	e0 68 c8 b3 	mov	r8,51379
80005b5c:	ea 18 8b 60 	orh	r8,0x8b60
80005b60:	e0 69 8a 28 	mov	r9,35368
80005b64:	ea 19 3f c6 	orh	r9,0x3fc6
80005b68:	e0 a0 13 6e 	rcall	80008244 <__avr32_f64_add>
80005b6c:	0a 9c       	mov	r12,r5
80005b6e:	14 90       	mov	r0,r10
80005b70:	16 91       	mov	r1,r11
80005b72:	e0 a0 14 0a 	rcall	80008386 <__avr32_s32_to_f64>
80005b76:	e0 68 79 fb 	mov	r8,31227
80005b7a:	ea 18 50 9f 	orh	r8,0x509f
80005b7e:	e0 69 44 13 	mov	r9,17427
80005b82:	ea 19 3f d3 	orh	r9,0x3fd3
80005b86:	e0 a0 11 a5 	rcall	80007ed0 <__avr32_f64_mul>
80005b8a:	14 98       	mov	r8,r10
80005b8c:	16 99       	mov	r9,r11
80005b8e:	00 9a       	mov	r10,r0
80005b90:	02 9b       	mov	r11,r1
80005b92:	e0 a0 13 59 	rcall	80008244 <__avr32_f64_add>
80005b96:	14 90       	mov	r0,r10
80005b98:	16 91       	mov	r1,r11
80005b9a:	e0 a0 13 df 	rcall	80008358 <__avr32_f64_to_s32>
80005b9e:	30 08       	mov	r8,0
80005ba0:	18 96       	mov	r6,r12
80005ba2:	30 09       	mov	r9,0
80005ba4:	00 9a       	mov	r10,r0
80005ba6:	02 9b       	mov	r11,r1
80005ba8:	e0 a0 14 a6 	rcall	800084f4 <__avr32_f64_cmp_lt>
80005bac:	c0 c0       	breq	80005bc4 <_dtoa_r+0x1f4>
80005bae:	0c 9c       	mov	r12,r6
80005bb0:	e0 a0 13 eb 	rcall	80008386 <__avr32_s32_to_f64>
80005bb4:	14 98       	mov	r8,r10
80005bb6:	16 99       	mov	r9,r11
80005bb8:	00 9a       	mov	r10,r0
80005bba:	02 9b       	mov	r11,r1
80005bbc:	e0 a0 14 55 	rcall	80008466 <__avr32_f64_cmp_eq>
80005bc0:	f7 b6 00 01 	subeq	r6,1
80005bc4:	59 66       	cp.w	r6,22
80005bc6:	e0 88 00 05 	brls	80005bd0 <_dtoa_r+0x200>
80005bca:	30 18       	mov	r8,1
80005bcc:	51 48       	stdsp	sp[0x50],r8
80005bce:	c1 38       	rjmp	80005bf4 <_dtoa_r+0x224>
80005bd0:	fe c8 c5 7c 	sub	r8,pc,-14980
80005bd4:	fa ea 00 3c 	ld.d	r10,sp[60]
80005bd8:	f0 06 02 38 	ld.d	r8,r8[r6<<0x3]
80005bdc:	e0 a0 14 8c 	rcall	800084f4 <__avr32_f64_cmp_lt>
80005be0:	f9 b4 00 00 	moveq	r4,0
80005be4:	fb f4 0a 14 	st.weq	sp[0x50],r4
80005be8:	f7 b6 01 01 	subne	r6,1
80005bec:	f9 bc 01 00 	movne	r12,0
80005bf0:	fb fc 1a 14 	st.wne	sp[0x50],r12
80005bf4:	41 90       	lddsp	r0,sp[0x64]
80005bf6:	20 10       	sub	r0,1
80005bf8:	0a 10       	sub	r0,r5
80005bfa:	c0 46       	brmi	80005c02 <_dtoa_r+0x232>
80005bfc:	50 40       	stdsp	sp[0x10],r0
80005bfe:	30 00       	mov	r0,0
80005c00:	c0 48       	rjmp	80005c08 <_dtoa_r+0x238>
80005c02:	30 0b       	mov	r11,0
80005c04:	5c 30       	neg	r0
80005c06:	50 4b       	stdsp	sp[0x10],r11
80005c08:	ec 02 11 00 	rsub	r2,r6,0
80005c0c:	58 06       	cp.w	r6,0
80005c0e:	fb fa 40 04 	ld.wge	r10,sp[0x10]
80005c12:	f5 d6 e4 0a 	addge	r10,r10,r6
80005c16:	fb fa 4a 04 	st.wge	sp[0x10],r10
80005c1a:	fb f6 4a 11 	st.wge	sp[0x44],r6
80005c1e:	f9 b2 04 00 	movge	r2,0
80005c22:	e1 d6 e5 10 	sublt	r0,r0,r6
80005c26:	f9 b9 05 00 	movlt	r9,0
80005c2a:	fb f9 5a 11 	st.wlt	sp[0x44],r9
80005c2e:	40 c8       	lddsp	r8,sp[0x30]
80005c30:	58 98       	cp.w	r8,9
80005c32:	e0 8b 00 20 	brhi	80005c72 <_dtoa_r+0x2a2>
80005c36:	58 58       	cp.w	r8,5
80005c38:	f9 b4 0a 01 	movle	r4,1
80005c3c:	fb f5 90 0c 	ld.wgt	r5,sp[0x30]
80005c40:	f7 b5 09 04 	subgt	r5,4
80005c44:	fb f5 9a 0c 	st.wgt	sp[0x30],r5
80005c48:	f9 b4 09 00 	movgt	r4,0
80005c4c:	40 cc       	lddsp	r12,sp[0x30]
80005c4e:	58 3c       	cp.w	r12,3
80005c50:	c2 d0       	breq	80005caa <_dtoa_r+0x2da>
80005c52:	e0 89 00 05 	brgt	80005c5c <_dtoa_r+0x28c>
80005c56:	58 2c       	cp.w	r12,2
80005c58:	c1 01       	brne	80005c78 <_dtoa_r+0x2a8>
80005c5a:	c1 88       	rjmp	80005c8a <_dtoa_r+0x2ba>
80005c5c:	40 cb       	lddsp	r11,sp[0x30]
80005c5e:	58 4b       	cp.w	r11,4
80005c60:	c0 60       	breq	80005c6c <_dtoa_r+0x29c>
80005c62:	58 5b       	cp.w	r11,5
80005c64:	c0 a1       	brne	80005c78 <_dtoa_r+0x2a8>
80005c66:	30 1a       	mov	r10,1
80005c68:	50 da       	stdsp	sp[0x34],r10
80005c6a:	c2 28       	rjmp	80005cae <_dtoa_r+0x2de>
80005c6c:	30 19       	mov	r9,1
80005c6e:	50 d9       	stdsp	sp[0x34],r9
80005c70:	c0 f8       	rjmp	80005c8e <_dtoa_r+0x2be>
80005c72:	30 08       	mov	r8,0
80005c74:	30 14       	mov	r4,1
80005c76:	50 c8       	stdsp	sp[0x30],r8
80005c78:	3f f5       	mov	r5,-1
80005c7a:	30 1c       	mov	r12,1
80005c7c:	30 0b       	mov	r11,0
80005c7e:	50 95       	stdsp	sp[0x24],r5
80005c80:	50 dc       	stdsp	sp[0x34],r12
80005c82:	0a 91       	mov	r1,r5
80005c84:	31 28       	mov	r8,18
80005c86:	50 eb       	stdsp	sp[0x38],r11
80005c88:	c2 08       	rjmp	80005cc8 <_dtoa_r+0x2f8>
80005c8a:	30 0a       	mov	r10,0
80005c8c:	50 da       	stdsp	sp[0x34],r10
80005c8e:	40 e9       	lddsp	r9,sp[0x38]
80005c90:	58 09       	cp.w	r9,0
80005c92:	e0 89 00 07 	brgt	80005ca0 <_dtoa_r+0x2d0>
80005c96:	30 18       	mov	r8,1
80005c98:	50 98       	stdsp	sp[0x24],r8
80005c9a:	10 91       	mov	r1,r8
80005c9c:	50 e8       	stdsp	sp[0x38],r8
80005c9e:	c1 58       	rjmp	80005cc8 <_dtoa_r+0x2f8>
80005ca0:	40 e5       	lddsp	r5,sp[0x38]
80005ca2:	50 95       	stdsp	sp[0x24],r5
80005ca4:	0a 91       	mov	r1,r5
80005ca6:	0a 98       	mov	r8,r5
80005ca8:	c1 08       	rjmp	80005cc8 <_dtoa_r+0x2f8>
80005caa:	30 0c       	mov	r12,0
80005cac:	50 dc       	stdsp	sp[0x34],r12
80005cae:	40 eb       	lddsp	r11,sp[0x38]
80005cb0:	ec 0b 00 0b 	add	r11,r6,r11
80005cb4:	50 9b       	stdsp	sp[0x24],r11
80005cb6:	16 98       	mov	r8,r11
80005cb8:	2f f8       	sub	r8,-1
80005cba:	58 08       	cp.w	r8,0
80005cbc:	e0 89 00 05 	brgt	80005cc6 <_dtoa_r+0x2f6>
80005cc0:	10 91       	mov	r1,r8
80005cc2:	30 18       	mov	r8,1
80005cc4:	c0 28       	rjmp	80005cc8 <_dtoa_r+0x2f8>
80005cc6:	10 91       	mov	r1,r8
80005cc8:	30 09       	mov	r9,0
80005cca:	6e 9a       	ld.w	r10,r7[0x24]
80005ccc:	95 19       	st.w	r10[0x4],r9
80005cce:	30 49       	mov	r9,4
80005cd0:	c0 68       	rjmp	80005cdc <_dtoa_r+0x30c>
80005cd2:	d7 03       	nop
80005cd4:	6a 1a       	ld.w	r10,r5[0x4]
80005cd6:	a1 79       	lsl	r9,0x1
80005cd8:	2f fa       	sub	r10,-1
80005cda:	8b 1a       	st.w	r5[0x4],r10
80005cdc:	6e 95       	ld.w	r5,r7[0x24]
80005cde:	f2 ca ff ec 	sub	r10,r9,-20
80005ce2:	10 3a       	cp.w	r10,r8
80005ce4:	fe 98 ff f8 	brls	80005cd4 <_dtoa_r+0x304>
80005ce8:	6a 1b       	ld.w	r11,r5[0x4]
80005cea:	0e 9c       	mov	r12,r7
80005cec:	e0 a0 0b 6e 	rcall	800073c8 <_Balloc>
80005cf0:	58 e1       	cp.w	r1,14
80005cf2:	5f 88       	srls	r8
80005cf4:	8b 0c       	st.w	r5[0x0],r12
80005cf6:	f1 e4 00 04 	and	r4,r8,r4
80005cfa:	6e 98       	ld.w	r8,r7[0x24]
80005cfc:	70 08       	ld.w	r8,r8[0x0]
80005cfe:	50 88       	stdsp	sp[0x20],r8
80005d00:	e0 80 01 82 	breq	80006004 <_dtoa_r+0x634>
80005d04:	58 06       	cp.w	r6,0
80005d06:	e0 8a 00 43 	brle	80005d8c <_dtoa_r+0x3bc>
80005d0a:	f3 d6 c0 04 	bfextu	r9,r6,0x0,0x4
80005d0e:	fe c8 c6 ba 	sub	r8,pc,-14662
80005d12:	f0 09 02 34 	ld.d	r4,r8[r9<<0x3]
80005d16:	fa e5 00 18 	st.d	sp[24],r4
80005d1a:	ec 04 14 04 	asr	r4,r6,0x4
80005d1e:	ed b4 00 04 	bld	r4,0x4
80005d22:	c0 30       	breq	80005d28 <_dtoa_r+0x358>
80005d24:	30 25       	mov	r5,2
80005d26:	c1 08       	rjmp	80005d46 <_dtoa_r+0x376>
80005d28:	fe c8 c6 0c 	sub	r8,pc,-14836
80005d2c:	f0 e8 00 20 	ld.d	r8,r8[32]
80005d30:	fa ea 00 3c 	ld.d	r10,sp[60]
80005d34:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
80005d38:	e0 a0 14 12 	rcall	8000855c <__avr32_f64_div>
80005d3c:	30 35       	mov	r5,3
80005d3e:	14 98       	mov	r8,r10
80005d40:	16 99       	mov	r9,r11
80005d42:	fa e9 00 08 	st.d	sp[8],r8
80005d46:	fe cc c6 2a 	sub	r12,pc,-14806
80005d4a:	50 a3       	stdsp	sp[0x28],r3
80005d4c:	0c 93       	mov	r3,r6
80005d4e:	18 96       	mov	r6,r12
80005d50:	c0 f8       	rjmp	80005d6e <_dtoa_r+0x39e>
80005d52:	fa ea 00 18 	ld.d	r10,sp[24]
80005d56:	ed b4 00 00 	bld	r4,0x0
80005d5a:	c0 81       	brne	80005d6a <_dtoa_r+0x39a>
80005d5c:	ec e8 00 00 	ld.d	r8,r6[0]
80005d60:	2f f5       	sub	r5,-1
80005d62:	e0 a0 10 b7 	rcall	80007ed0 <__avr32_f64_mul>
80005d66:	fa eb 00 18 	st.d	sp[24],r10
80005d6a:	a1 54       	asr	r4,0x1
80005d6c:	2f 86       	sub	r6,-8
80005d6e:	58 04       	cp.w	r4,0
80005d70:	cf 11       	brne	80005d52 <_dtoa_r+0x382>
80005d72:	fa e8 00 18 	ld.d	r8,sp[24]
80005d76:	fa ea 00 08 	ld.d	r10,sp[8]
80005d7a:	06 96       	mov	r6,r3
80005d7c:	e0 a0 13 f0 	rcall	8000855c <__avr32_f64_div>
80005d80:	40 a3       	lddsp	r3,sp[0x28]
80005d82:	14 98       	mov	r8,r10
80005d84:	16 99       	mov	r9,r11
80005d86:	fa e9 00 08 	st.d	sp[8],r8
80005d8a:	c2 f8       	rjmp	80005de8 <_dtoa_r+0x418>
80005d8c:	ec 08 11 00 	rsub	r8,r6,0
80005d90:	c0 31       	brne	80005d96 <_dtoa_r+0x3c6>
80005d92:	30 25       	mov	r5,2
80005d94:	c2 a8       	rjmp	80005de8 <_dtoa_r+0x418>
80005d96:	fe cc c6 7a 	sub	r12,pc,-14726
80005d9a:	f0 04 14 04 	asr	r4,r8,0x4
80005d9e:	50 1c       	stdsp	sp[0x4],r12
80005da0:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80005da4:	fe c9 c7 50 	sub	r9,pc,-14512
80005da8:	fa ea 00 3c 	ld.d	r10,sp[60]
80005dac:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80005db0:	e0 a0 10 90 	rcall	80007ed0 <__avr32_f64_mul>
80005db4:	40 1c       	lddsp	r12,sp[0x4]
80005db6:	50 63       	stdsp	sp[0x18],r3
80005db8:	30 25       	mov	r5,2
80005dba:	0c 93       	mov	r3,r6
80005dbc:	fa eb 00 08 	st.d	sp[8],r10
80005dc0:	18 96       	mov	r6,r12
80005dc2:	c0 f8       	rjmp	80005de0 <_dtoa_r+0x410>
80005dc4:	fa ea 00 08 	ld.d	r10,sp[8]
80005dc8:	ed b4 00 00 	bld	r4,0x0
80005dcc:	c0 81       	brne	80005ddc <_dtoa_r+0x40c>
80005dce:	ec e8 00 00 	ld.d	r8,r6[0]
80005dd2:	2f f5       	sub	r5,-1
80005dd4:	e0 a0 10 7e 	rcall	80007ed0 <__avr32_f64_mul>
80005dd8:	fa eb 00 08 	st.d	sp[8],r10
80005ddc:	a1 54       	asr	r4,0x1
80005dde:	2f 86       	sub	r6,-8
80005de0:	58 04       	cp.w	r4,0
80005de2:	cf 11       	brne	80005dc4 <_dtoa_r+0x3f4>
80005de4:	06 96       	mov	r6,r3
80005de6:	40 63       	lddsp	r3,sp[0x18]
80005de8:	41 4a       	lddsp	r10,sp[0x50]
80005dea:	58 0a       	cp.w	r10,0
80005dec:	c2 a0       	breq	80005e40 <_dtoa_r+0x470>
80005dee:	fa e8 00 08 	ld.d	r8,sp[8]
80005df2:	58 01       	cp.w	r1,0
80005df4:	5f 94       	srgt	r4
80005df6:	fa e9 00 18 	st.d	sp[24],r8
80005dfa:	30 08       	mov	r8,0
80005dfc:	fc 19 3f f0 	movh	r9,0x3ff0
80005e00:	fa ea 00 18 	ld.d	r10,sp[24]
80005e04:	e0 a0 13 78 	rcall	800084f4 <__avr32_f64_cmp_lt>
80005e08:	f9 bc 00 00 	moveq	r12,0
80005e0c:	f9 bc 01 01 	movne	r12,1
80005e10:	e9 ec 00 0c 	and	r12,r4,r12
80005e14:	c1 60       	breq	80005e40 <_dtoa_r+0x470>
80005e16:	40 98       	lddsp	r8,sp[0x24]
80005e18:	58 08       	cp.w	r8,0
80005e1a:	e0 8a 00 f1 	brle	80005ffc <_dtoa_r+0x62c>
80005e1e:	30 08       	mov	r8,0
80005e20:	fc 19 40 24 	movh	r9,0x4024
80005e24:	ec c4 00 01 	sub	r4,r6,1
80005e28:	fa ea 00 18 	ld.d	r10,sp[24]
80005e2c:	2f f5       	sub	r5,-1
80005e2e:	50 64       	stdsp	sp[0x18],r4
80005e30:	e0 a0 10 50 	rcall	80007ed0 <__avr32_f64_mul>
80005e34:	40 94       	lddsp	r4,sp[0x24]
80005e36:	14 98       	mov	r8,r10
80005e38:	16 99       	mov	r9,r11
80005e3a:	fa e9 00 08 	st.d	sp[8],r8
80005e3e:	c0 38       	rjmp	80005e44 <_dtoa_r+0x474>
80005e40:	50 66       	stdsp	sp[0x18],r6
80005e42:	02 94       	mov	r4,r1
80005e44:	0a 9c       	mov	r12,r5
80005e46:	e0 a0 12 a0 	rcall	80008386 <__avr32_s32_to_f64>
80005e4a:	fa e8 00 08 	ld.d	r8,sp[8]
80005e4e:	e0 a0 10 41 	rcall	80007ed0 <__avr32_f64_mul>
80005e52:	30 08       	mov	r8,0
80005e54:	fc 19 40 1c 	movh	r9,0x401c
80005e58:	e0 a0 11 f6 	rcall	80008244 <__avr32_f64_add>
80005e5c:	14 98       	mov	r8,r10
80005e5e:	16 99       	mov	r9,r11
80005e60:	fa e9 00 28 	st.d	sp[40],r8
80005e64:	fc 18 fc c0 	movh	r8,0xfcc0
80005e68:	40 a5       	lddsp	r5,sp[0x28]
80005e6a:	10 05       	add	r5,r8
80005e6c:	50 a5       	stdsp	sp[0x28],r5
80005e6e:	58 04       	cp.w	r4,0
80005e70:	c2 11       	brne	80005eb2 <_dtoa_r+0x4e2>
80005e72:	fa ea 00 08 	ld.d	r10,sp[8]
80005e76:	30 08       	mov	r8,0
80005e78:	fc 19 40 14 	movh	r9,0x4014
80005e7c:	e0 a0 11 16 	rcall	800080a8 <__avr32_f64_sub>
80005e80:	40 bc       	lddsp	r12,sp[0x2c]
80005e82:	fa eb 00 08 	st.d	sp[8],r10
80005e86:	14 98       	mov	r8,r10
80005e88:	16 99       	mov	r9,r11
80005e8a:	18 9a       	mov	r10,r12
80005e8c:	0a 9b       	mov	r11,r5
80005e8e:	e0 a0 13 33 	rcall	800084f4 <__avr32_f64_cmp_lt>
80005e92:	e0 81 02 54 	brne	8000633a <_dtoa_r+0x96a>
80005e96:	0a 98       	mov	r8,r5
80005e98:	40 b9       	lddsp	r9,sp[0x2c]
80005e9a:	ee 18 80 00 	eorh	r8,0x8000
80005e9e:	fa ea 00 08 	ld.d	r10,sp[8]
80005ea2:	10 95       	mov	r5,r8
80005ea4:	12 98       	mov	r8,r9
80005ea6:	0a 99       	mov	r9,r5
80005ea8:	e0 a0 13 26 	rcall	800084f4 <__avr32_f64_cmp_lt>
80005eac:	e0 81 02 3e 	brne	80006328 <_dtoa_r+0x958>
80005eb0:	ca 68       	rjmp	80005ffc <_dtoa_r+0x62c>
80005eb2:	fe c9 c8 5e 	sub	r9,pc,-14242
80005eb6:	e8 c8 00 01 	sub	r8,r4,1
80005eba:	40 d5       	lddsp	r5,sp[0x34]
80005ebc:	58 05       	cp.w	r5,0
80005ebe:	c4 f0       	breq	80005f5c <_dtoa_r+0x58c>
80005ec0:	30 0c       	mov	r12,0
80005ec2:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80005ec6:	51 3c       	stdsp	sp[0x4c],r12
80005ec8:	30 0a       	mov	r10,0
80005eca:	fc 1b 3f e0 	movh	r11,0x3fe0
80005ece:	e0 a0 13 47 	rcall	8000855c <__avr32_f64_div>
80005ed2:	fa e8 00 28 	ld.d	r8,sp[40]
80005ed6:	40 85       	lddsp	r5,sp[0x20]
80005ed8:	e0 a0 10 e8 	rcall	800080a8 <__avr32_f64_sub>
80005edc:	fa eb 00 28 	st.d	sp[40],r10
80005ee0:	fa ea 00 08 	ld.d	r10,sp[8]
80005ee4:	e0 a0 12 3a 	rcall	80008358 <__avr32_f64_to_s32>
80005ee8:	51 6c       	stdsp	sp[0x58],r12
80005eea:	e0 a0 12 4e 	rcall	80008386 <__avr32_s32_to_f64>
80005eee:	14 98       	mov	r8,r10
80005ef0:	16 99       	mov	r9,r11
80005ef2:	fa ea 00 08 	ld.d	r10,sp[8]
80005ef6:	e0 a0 10 d9 	rcall	800080a8 <__avr32_f64_sub>
80005efa:	fa eb 00 08 	st.d	sp[8],r10
80005efe:	41 68       	lddsp	r8,sp[0x58]
80005f00:	2d 08       	sub	r8,-48
80005f02:	0a c8       	st.b	r5++,r8
80005f04:	41 39       	lddsp	r9,sp[0x4c]
80005f06:	2f f9       	sub	r9,-1
80005f08:	51 39       	stdsp	sp[0x4c],r9
80005f0a:	fa e8 00 28 	ld.d	r8,sp[40]
80005f0e:	e0 a0 12 f3 	rcall	800084f4 <__avr32_f64_cmp_lt>
80005f12:	e0 81 03 39 	brne	80006584 <_dtoa_r+0xbb4>
80005f16:	fa e8 00 08 	ld.d	r8,sp[8]
80005f1a:	30 0a       	mov	r10,0
80005f1c:	fc 1b 3f f0 	movh	r11,0x3ff0
80005f20:	e0 a0 10 c4 	rcall	800080a8 <__avr32_f64_sub>
80005f24:	fa e8 00 28 	ld.d	r8,sp[40]
80005f28:	e0 a0 12 e6 	rcall	800084f4 <__avr32_f64_cmp_lt>
80005f2c:	fa ea 00 28 	ld.d	r10,sp[40]
80005f30:	30 08       	mov	r8,0
80005f32:	fc 19 40 24 	movh	r9,0x4024
80005f36:	e0 81 00 da 	brne	800060ea <_dtoa_r+0x71a>
80005f3a:	41 3c       	lddsp	r12,sp[0x4c]
80005f3c:	08 3c       	cp.w	r12,r4
80005f3e:	c5 f4       	brge	80005ffc <_dtoa_r+0x62c>
80005f40:	e0 a0 0f c8 	rcall	80007ed0 <__avr32_f64_mul>
80005f44:	30 08       	mov	r8,0
80005f46:	fa eb 00 28 	st.d	sp[40],r10
80005f4a:	fc 19 40 24 	movh	r9,0x4024
80005f4e:	fa ea 00 08 	ld.d	r10,sp[8]
80005f52:	e0 a0 0f bf 	rcall	80007ed0 <__avr32_f64_mul>
80005f56:	fa eb 00 08 	st.d	sp[8],r10
80005f5a:	cc 3b       	rjmp	80005ee0 <_dtoa_r+0x510>
80005f5c:	40 85       	lddsp	r5,sp[0x20]
80005f5e:	08 05       	add	r5,r4
80005f60:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
80005f64:	51 35       	stdsp	sp[0x4c],r5
80005f66:	fa e8 00 28 	ld.d	r8,sp[40]
80005f6a:	40 85       	lddsp	r5,sp[0x20]
80005f6c:	e0 a0 0f b2 	rcall	80007ed0 <__avr32_f64_mul>
80005f70:	fa eb 00 28 	st.d	sp[40],r10
80005f74:	fa ea 00 08 	ld.d	r10,sp[8]
80005f78:	e0 a0 11 f0 	rcall	80008358 <__avr32_f64_to_s32>
80005f7c:	51 6c       	stdsp	sp[0x58],r12
80005f7e:	e0 a0 12 04 	rcall	80008386 <__avr32_s32_to_f64>
80005f82:	14 98       	mov	r8,r10
80005f84:	16 99       	mov	r9,r11
80005f86:	fa ea 00 08 	ld.d	r10,sp[8]
80005f8a:	e0 a0 10 8f 	rcall	800080a8 <__avr32_f64_sub>
80005f8e:	fa eb 00 08 	st.d	sp[8],r10
80005f92:	41 68       	lddsp	r8,sp[0x58]
80005f94:	2d 08       	sub	r8,-48
80005f96:	0a c8       	st.b	r5++,r8
80005f98:	41 3c       	lddsp	r12,sp[0x4c]
80005f9a:	18 35       	cp.w	r5,r12
80005f9c:	c2 81       	brne	80005fec <_dtoa_r+0x61c>
80005f9e:	30 08       	mov	r8,0
80005fa0:	fc 19 3f e0 	movh	r9,0x3fe0
80005fa4:	fa ea 00 28 	ld.d	r10,sp[40]
80005fa8:	e0 a0 11 4e 	rcall	80008244 <__avr32_f64_add>
80005fac:	40 85       	lddsp	r5,sp[0x20]
80005fae:	fa e8 00 08 	ld.d	r8,sp[8]
80005fb2:	08 05       	add	r5,r4
80005fb4:	e0 a0 12 a0 	rcall	800084f4 <__avr32_f64_cmp_lt>
80005fb8:	e0 81 00 99 	brne	800060ea <_dtoa_r+0x71a>
80005fbc:	fa e8 00 28 	ld.d	r8,sp[40]
80005fc0:	30 0a       	mov	r10,0
80005fc2:	fc 1b 3f e0 	movh	r11,0x3fe0
80005fc6:	e0 a0 10 71 	rcall	800080a8 <__avr32_f64_sub>
80005fca:	14 98       	mov	r8,r10
80005fcc:	16 99       	mov	r9,r11
80005fce:	fa ea 00 08 	ld.d	r10,sp[8]
80005fd2:	e0 a0 12 91 	rcall	800084f4 <__avr32_f64_cmp_lt>
80005fd6:	c1 30       	breq	80005ffc <_dtoa_r+0x62c>
80005fd8:	33 09       	mov	r9,48
80005fda:	0a 98       	mov	r8,r5
80005fdc:	11 7a       	ld.ub	r10,--r8
80005fde:	f2 0a 18 00 	cp.b	r10,r9
80005fe2:	e0 81 02 d1 	brne	80006584 <_dtoa_r+0xbb4>
80005fe6:	10 95       	mov	r5,r8
80005fe8:	cf 9b       	rjmp	80005fda <_dtoa_r+0x60a>
80005fea:	d7 03       	nop
80005fec:	30 08       	mov	r8,0
80005fee:	fc 19 40 24 	movh	r9,0x4024
80005ff2:	e0 a0 0f 6f 	rcall	80007ed0 <__avr32_f64_mul>
80005ff6:	fa eb 00 08 	st.d	sp[8],r10
80005ffa:	cb db       	rjmp	80005f74 <_dtoa_r+0x5a4>
80005ffc:	fa ea 00 3c 	ld.d	r10,sp[60]
80006000:	fa eb 00 08 	st.d	sp[8],r10
80006004:	58 e6       	cp.w	r6,14
80006006:	5f ab       	srle	r11
80006008:	41 8a       	lddsp	r10,sp[0x60]
8000600a:	30 08       	mov	r8,0
8000600c:	f4 09 11 ff 	rsub	r9,r10,-1
80006010:	f7 e9 03 f9 	and	r9,r11,r9>>0x1f
80006014:	f0 09 18 00 	cp.b	r9,r8
80006018:	e0 80 00 82 	breq	8000611c <_dtoa_r+0x74c>
8000601c:	40 ea       	lddsp	r10,sp[0x38]
8000601e:	58 01       	cp.w	r1,0
80006020:	5f a9       	srle	r9
80006022:	f3 ea 03 f9 	and	r9,r9,r10>>0x1f
80006026:	fe ca c9 d2 	sub	r10,pc,-13870
8000602a:	f4 06 02 34 	ld.d	r4,r10[r6<<0x3]
8000602e:	fa e5 00 10 	st.d	sp[16],r4
80006032:	f0 09 18 00 	cp.b	r9,r8
80006036:	c1 40       	breq	8000605e <_dtoa_r+0x68e>
80006038:	58 01       	cp.w	r1,0
8000603a:	e0 81 01 77 	brne	80006328 <_dtoa_r+0x958>
8000603e:	30 08       	mov	r8,0
80006040:	fc 19 40 14 	movh	r9,0x4014
80006044:	08 9a       	mov	r10,r4
80006046:	0a 9b       	mov	r11,r5
80006048:	e0 a0 0f 44 	rcall	80007ed0 <__avr32_f64_mul>
8000604c:	fa e8 00 08 	ld.d	r8,sp[8]
80006050:	e0 a0 12 1e 	rcall	8000848c <__avr32_f64_cmp_ge>
80006054:	e0 81 01 6a 	brne	80006328 <_dtoa_r+0x958>
80006058:	02 92       	mov	r2,r1
8000605a:	e0 8f 01 72 	bral	8000633e <_dtoa_r+0x96e>
8000605e:	40 85       	lddsp	r5,sp[0x20]
80006060:	30 14       	mov	r4,1
80006062:	fa e8 00 10 	ld.d	r8,sp[16]
80006066:	fa ea 00 08 	ld.d	r10,sp[8]
8000606a:	e0 a0 12 79 	rcall	8000855c <__avr32_f64_div>
8000606e:	e0 a0 11 75 	rcall	80008358 <__avr32_f64_to_s32>
80006072:	18 92       	mov	r2,r12
80006074:	e0 a0 11 89 	rcall	80008386 <__avr32_s32_to_f64>
80006078:	fa e8 00 10 	ld.d	r8,sp[16]
8000607c:	e0 a0 0f 2a 	rcall	80007ed0 <__avr32_f64_mul>
80006080:	14 98       	mov	r8,r10
80006082:	16 99       	mov	r9,r11
80006084:	fa ea 00 08 	ld.d	r10,sp[8]
80006088:	e0 a0 10 10 	rcall	800080a8 <__avr32_f64_sub>
8000608c:	fa eb 00 08 	st.d	sp[8],r10
80006090:	e4 c8 ff d0 	sub	r8,r2,-48
80006094:	0a c8       	st.b	r5++,r8
80006096:	fc 19 40 24 	movh	r9,0x4024
8000609a:	30 08       	mov	r8,0
8000609c:	02 34       	cp.w	r4,r1
8000609e:	c3 31       	brne	80006104 <_dtoa_r+0x734>
800060a0:	fa e8 00 08 	ld.d	r8,sp[8]
800060a4:	e0 a0 10 d0 	rcall	80008244 <__avr32_f64_add>
800060a8:	16 91       	mov	r1,r11
800060aa:	14 90       	mov	r0,r10
800060ac:	14 98       	mov	r8,r10
800060ae:	02 99       	mov	r9,r1
800060b0:	fa ea 00 10 	ld.d	r10,sp[16]
800060b4:	e0 a0 12 20 	rcall	800084f4 <__avr32_f64_cmp_lt>
800060b8:	c1 a1       	brne	800060ec <_dtoa_r+0x71c>
800060ba:	fa e8 00 10 	ld.d	r8,sp[16]
800060be:	00 9a       	mov	r10,r0
800060c0:	02 9b       	mov	r11,r1
800060c2:	e0 a0 11 d2 	rcall	80008466 <__avr32_f64_cmp_eq>
800060c6:	e0 80 02 5e 	breq	80006582 <_dtoa_r+0xbb2>
800060ca:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
800060ce:	c0 f1       	brne	800060ec <_dtoa_r+0x71c>
800060d0:	e0 8f 02 59 	bral	80006582 <_dtoa_r+0xbb2>
800060d4:	40 8a       	lddsp	r10,sp[0x20]
800060d6:	14 38       	cp.w	r8,r10
800060d8:	c0 30       	breq	800060de <_dtoa_r+0x70e>
800060da:	10 95       	mov	r5,r8
800060dc:	c0 98       	rjmp	800060ee <_dtoa_r+0x71e>
800060de:	33 08       	mov	r8,48
800060e0:	40 89       	lddsp	r9,sp[0x20]
800060e2:	2f f6       	sub	r6,-1
800060e4:	b2 88       	st.b	r9[0x0],r8
800060e6:	40 88       	lddsp	r8,sp[0x20]
800060e8:	c0 88       	rjmp	800060f8 <_dtoa_r+0x728>
800060ea:	40 66       	lddsp	r6,sp[0x18]
800060ec:	33 99       	mov	r9,57
800060ee:	0a 98       	mov	r8,r5
800060f0:	11 7a       	ld.ub	r10,--r8
800060f2:	f2 0a 18 00 	cp.b	r10,r9
800060f6:	ce f0       	breq	800060d4 <_dtoa_r+0x704>
800060f8:	50 66       	stdsp	sp[0x18],r6
800060fa:	11 89       	ld.ub	r9,r8[0x0]
800060fc:	2f f9       	sub	r9,-1
800060fe:	b0 89       	st.b	r8[0x0],r9
80006100:	e0 8f 02 42 	bral	80006584 <_dtoa_r+0xbb4>
80006104:	e0 a0 0e e6 	rcall	80007ed0 <__avr32_f64_mul>
80006108:	2f f4       	sub	r4,-1
8000610a:	fa eb 00 08 	st.d	sp[8],r10
8000610e:	30 08       	mov	r8,0
80006110:	30 09       	mov	r9,0
80006112:	e0 a0 11 aa 	rcall	80008466 <__avr32_f64_cmp_eq>
80006116:	ca 60       	breq	80006062 <_dtoa_r+0x692>
80006118:	e0 8f 02 35 	bral	80006582 <_dtoa_r+0xbb2>
8000611c:	40 d8       	lddsp	r8,sp[0x34]
8000611e:	58 08       	cp.w	r8,0
80006120:	c0 51       	brne	8000612a <_dtoa_r+0x75a>
80006122:	04 98       	mov	r8,r2
80006124:	00 95       	mov	r5,r0
80006126:	40 d4       	lddsp	r4,sp[0x34]
80006128:	c3 78       	rjmp	80006196 <_dtoa_r+0x7c6>
8000612a:	40 c5       	lddsp	r5,sp[0x30]
8000612c:	58 15       	cp.w	r5,1
8000612e:	e0 89 00 0f 	brgt	8000614c <_dtoa_r+0x77c>
80006132:	41 74       	lddsp	r4,sp[0x5c]
80006134:	58 04       	cp.w	r4,0
80006136:	c0 40       	breq	8000613e <_dtoa_r+0x76e>
80006138:	f4 c9 fb cd 	sub	r9,r10,-1075
8000613c:	c0 48       	rjmp	80006144 <_dtoa_r+0x774>
8000613e:	41 99       	lddsp	r9,sp[0x64]
80006140:	f2 09 11 36 	rsub	r9,r9,54
80006144:	04 98       	mov	r8,r2
80006146:	00 95       	mov	r5,r0
80006148:	c1 c8       	rjmp	80006180 <_dtoa_r+0x7b0>
8000614a:	d7 03       	nop
8000614c:	e2 c8 00 01 	sub	r8,r1,1
80006150:	58 01       	cp.w	r1,0
80006152:	e0 05 17 40 	movge	r5,r0
80006156:	e2 09 17 40 	movge	r9,r1
8000615a:	e1 d1 e5 15 	sublt	r5,r0,r1
8000615e:	f9 b9 05 00 	movlt	r9,0
80006162:	10 32       	cp.w	r2,r8
80006164:	e5 d8 e4 18 	subge	r8,r2,r8
80006168:	f1 d2 e5 18 	sublt	r8,r8,r2
8000616c:	e5 d8 e5 02 	addlt	r2,r2,r8
80006170:	fb fc 50 11 	ld.wlt	r12,sp[0x44]
80006174:	f9 d8 e5 0c 	addlt	r12,r12,r8
80006178:	fb fc 5a 11 	st.wlt	sp[0x44],r12
8000617c:	f9 b8 05 00 	movlt	r8,0
80006180:	40 4b       	lddsp	r11,sp[0x10]
80006182:	12 0b       	add	r11,r9
80006184:	50 08       	stdsp	sp[0x0],r8
80006186:	50 4b       	stdsp	sp[0x10],r11
80006188:	12 00       	add	r0,r9
8000618a:	30 1b       	mov	r11,1
8000618c:	0e 9c       	mov	r12,r7
8000618e:	e0 a0 0a d1 	rcall	80007730 <__i2b>
80006192:	40 08       	lddsp	r8,sp[0x0]
80006194:	18 94       	mov	r4,r12
80006196:	40 4a       	lddsp	r10,sp[0x10]
80006198:	58 05       	cp.w	r5,0
8000619a:	5f 99       	srgt	r9
8000619c:	58 0a       	cp.w	r10,0
8000619e:	5f 9a       	srgt	r10
800061a0:	f5 e9 00 09 	and	r9,r10,r9
800061a4:	c0 80       	breq	800061b4 <_dtoa_r+0x7e4>
800061a6:	40 4c       	lddsp	r12,sp[0x10]
800061a8:	f8 05 0d 49 	min	r9,r12,r5
800061ac:	12 1c       	sub	r12,r9
800061ae:	12 10       	sub	r0,r9
800061b0:	50 4c       	stdsp	sp[0x10],r12
800061b2:	12 15       	sub	r5,r9
800061b4:	58 02       	cp.w	r2,0
800061b6:	e0 8a 00 27 	brle	80006204 <_dtoa_r+0x834>
800061ba:	40 db       	lddsp	r11,sp[0x34]
800061bc:	58 0b       	cp.w	r11,0
800061be:	c1 d0       	breq	800061f8 <_dtoa_r+0x828>
800061c0:	58 08       	cp.w	r8,0
800061c2:	e0 8a 00 17 	brle	800061f0 <_dtoa_r+0x820>
800061c6:	10 9a       	mov	r10,r8
800061c8:	50 08       	stdsp	sp[0x0],r8
800061ca:	08 9b       	mov	r11,r4
800061cc:	0e 9c       	mov	r12,r7
800061ce:	e0 a0 0a f7 	rcall	800077bc <__pow5mult>
800061d2:	06 9a       	mov	r10,r3
800061d4:	18 9b       	mov	r11,r12
800061d6:	18 94       	mov	r4,r12
800061d8:	0e 9c       	mov	r12,r7
800061da:	e0 a0 0a 2b 	rcall	80007630 <__multiply>
800061de:	18 99       	mov	r9,r12
800061e0:	06 9b       	mov	r11,r3
800061e2:	50 19       	stdsp	sp[0x4],r9
800061e4:	0e 9c       	mov	r12,r7
800061e6:	e0 a0 08 d7 	rcall	80007394 <_Bfree>
800061ea:	40 19       	lddsp	r9,sp[0x4]
800061ec:	40 08       	lddsp	r8,sp[0x0]
800061ee:	12 93       	mov	r3,r9
800061f0:	e4 08 01 0a 	sub	r10,r2,r8
800061f4:	c0 80       	breq	80006204 <_dtoa_r+0x834>
800061f6:	c0 28       	rjmp	800061fa <_dtoa_r+0x82a>
800061f8:	04 9a       	mov	r10,r2
800061fa:	06 9b       	mov	r11,r3
800061fc:	0e 9c       	mov	r12,r7
800061fe:	e0 a0 0a df 	rcall	800077bc <__pow5mult>
80006202:	18 93       	mov	r3,r12
80006204:	30 1b       	mov	r11,1
80006206:	0e 9c       	mov	r12,r7
80006208:	e0 a0 0a 94 	rcall	80007730 <__i2b>
8000620c:	41 1a       	lddsp	r10,sp[0x44]
8000620e:	18 92       	mov	r2,r12
80006210:	58 0a       	cp.w	r10,0
80006212:	e0 8a 00 07 	brle	80006220 <_dtoa_r+0x850>
80006216:	18 9b       	mov	r11,r12
80006218:	0e 9c       	mov	r12,r7
8000621a:	e0 a0 0a d1 	rcall	800077bc <__pow5mult>
8000621e:	18 92       	mov	r2,r12
80006220:	40 c9       	lddsp	r9,sp[0x30]
80006222:	58 19       	cp.w	r9,1
80006224:	e0 89 00 14 	brgt	8000624c <_dtoa_r+0x87c>
80006228:	40 38       	lddsp	r8,sp[0xc]
8000622a:	58 08       	cp.w	r8,0
8000622c:	c1 01       	brne	8000624c <_dtoa_r+0x87c>
8000622e:	40 29       	lddsp	r9,sp[0x8]
80006230:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
80006234:	c0 c1       	brne	8000624c <_dtoa_r+0x87c>
80006236:	12 98       	mov	r8,r9
80006238:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000623c:	c0 80       	breq	8000624c <_dtoa_r+0x87c>
8000623e:	40 4c       	lddsp	r12,sp[0x10]
80006240:	30 1b       	mov	r11,1
80006242:	2f fc       	sub	r12,-1
80006244:	2f f0       	sub	r0,-1
80006246:	50 4c       	stdsp	sp[0x10],r12
80006248:	50 6b       	stdsp	sp[0x18],r11
8000624a:	c0 38       	rjmp	80006250 <_dtoa_r+0x880>
8000624c:	30 0a       	mov	r10,0
8000624e:	50 6a       	stdsp	sp[0x18],r10
80006250:	41 19       	lddsp	r9,sp[0x44]
80006252:	58 09       	cp.w	r9,0
80006254:	c0 31       	brne	8000625a <_dtoa_r+0x88a>
80006256:	30 1c       	mov	r12,1
80006258:	c0 98       	rjmp	8000626a <_dtoa_r+0x89a>
8000625a:	64 48       	ld.w	r8,r2[0x10]
8000625c:	2f c8       	sub	r8,-4
8000625e:	e4 08 03 2c 	ld.w	r12,r2[r8<<0x2]
80006262:	e0 a0 08 08 	rcall	80007272 <__hi0bits>
80006266:	f8 0c 11 20 	rsub	r12,r12,32
8000626a:	40 4b       	lddsp	r11,sp[0x10]
8000626c:	f8 0b 00 08 	add	r8,r12,r11
80006270:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80006274:	c0 c0       	breq	8000628c <_dtoa_r+0x8bc>
80006276:	f0 08 11 20 	rsub	r8,r8,32
8000627a:	58 48       	cp.w	r8,4
8000627c:	e0 8a 00 06 	brle	80006288 <_dtoa_r+0x8b8>
80006280:	20 48       	sub	r8,4
80006282:	10 0b       	add	r11,r8
80006284:	50 4b       	stdsp	sp[0x10],r11
80006286:	c0 78       	rjmp	80006294 <_dtoa_r+0x8c4>
80006288:	58 48       	cp.w	r8,4
8000628a:	c0 70       	breq	80006298 <_dtoa_r+0x8c8>
8000628c:	40 4a       	lddsp	r10,sp[0x10]
8000628e:	2e 48       	sub	r8,-28
80006290:	10 0a       	add	r10,r8
80006292:	50 4a       	stdsp	sp[0x10],r10
80006294:	10 00       	add	r0,r8
80006296:	10 05       	add	r5,r8
80006298:	58 00       	cp.w	r0,0
8000629a:	e0 8a 00 08 	brle	800062aa <_dtoa_r+0x8da>
8000629e:	06 9b       	mov	r11,r3
800062a0:	00 9a       	mov	r10,r0
800062a2:	0e 9c       	mov	r12,r7
800062a4:	e0 a0 09 82 	rcall	800075a8 <__lshift>
800062a8:	18 93       	mov	r3,r12
800062aa:	40 49       	lddsp	r9,sp[0x10]
800062ac:	58 09       	cp.w	r9,0
800062ae:	e0 8a 00 08 	brle	800062be <_dtoa_r+0x8ee>
800062b2:	04 9b       	mov	r11,r2
800062b4:	12 9a       	mov	r10,r9
800062b6:	0e 9c       	mov	r12,r7
800062b8:	e0 a0 09 78 	rcall	800075a8 <__lshift>
800062bc:	18 92       	mov	r2,r12
800062be:	41 48       	lddsp	r8,sp[0x50]
800062c0:	58 08       	cp.w	r8,0
800062c2:	c1 b0       	breq	800062f8 <_dtoa_r+0x928>
800062c4:	04 9b       	mov	r11,r2
800062c6:	06 9c       	mov	r12,r3
800062c8:	e0 a0 08 4c 	rcall	80007360 <__mcmp>
800062cc:	c1 64       	brge	800062f8 <_dtoa_r+0x928>
800062ce:	06 9b       	mov	r11,r3
800062d0:	30 09       	mov	r9,0
800062d2:	30 aa       	mov	r10,10
800062d4:	0e 9c       	mov	r12,r7
800062d6:	e0 a0 0a 35 	rcall	80007740 <__multadd>
800062da:	20 16       	sub	r6,1
800062dc:	18 93       	mov	r3,r12
800062de:	40 dc       	lddsp	r12,sp[0x34]
800062e0:	58 0c       	cp.w	r12,0
800062e2:	c0 31       	brne	800062e8 <_dtoa_r+0x918>
800062e4:	40 91       	lddsp	r1,sp[0x24]
800062e6:	c0 98       	rjmp	800062f8 <_dtoa_r+0x928>
800062e8:	08 9b       	mov	r11,r4
800062ea:	40 91       	lddsp	r1,sp[0x24]
800062ec:	30 09       	mov	r9,0
800062ee:	30 aa       	mov	r10,10
800062f0:	0e 9c       	mov	r12,r7
800062f2:	e0 a0 0a 27 	rcall	80007740 <__multadd>
800062f6:	18 94       	mov	r4,r12
800062f8:	58 01       	cp.w	r1,0
800062fa:	5f a9       	srle	r9
800062fc:	40 cb       	lddsp	r11,sp[0x30]
800062fe:	58 2b       	cp.w	r11,2
80006300:	5f 98       	srgt	r8
80006302:	f3 e8 00 08 	and	r8,r9,r8
80006306:	c2 50       	breq	80006350 <_dtoa_r+0x980>
80006308:	58 01       	cp.w	r1,0
8000630a:	c1 11       	brne	8000632c <_dtoa_r+0x95c>
8000630c:	04 9b       	mov	r11,r2
8000630e:	02 99       	mov	r9,r1
80006310:	30 5a       	mov	r10,5
80006312:	0e 9c       	mov	r12,r7
80006314:	e0 a0 0a 16 	rcall	80007740 <__multadd>
80006318:	18 92       	mov	r2,r12
8000631a:	18 9b       	mov	r11,r12
8000631c:	06 9c       	mov	r12,r3
8000631e:	e0 a0 08 21 	rcall	80007360 <__mcmp>
80006322:	e0 89 00 0f 	brgt	80006340 <_dtoa_r+0x970>
80006326:	c0 38       	rjmp	8000632c <_dtoa_r+0x95c>
80006328:	30 02       	mov	r2,0
8000632a:	04 94       	mov	r4,r2
8000632c:	40 ea       	lddsp	r10,sp[0x38]
8000632e:	30 09       	mov	r9,0
80006330:	5c da       	com	r10
80006332:	40 85       	lddsp	r5,sp[0x20]
80006334:	50 6a       	stdsp	sp[0x18],r10
80006336:	50 49       	stdsp	sp[0x10],r9
80006338:	c0 f9       	rjmp	80006556 <_dtoa_r+0xb86>
8000633a:	08 92       	mov	r2,r4
8000633c:	40 66       	lddsp	r6,sp[0x18]
8000633e:	04 94       	mov	r4,r2
80006340:	2f f6       	sub	r6,-1
80006342:	50 66       	stdsp	sp[0x18],r6
80006344:	33 18       	mov	r8,49
80006346:	40 85       	lddsp	r5,sp[0x20]
80006348:	0a c8       	st.b	r5++,r8
8000634a:	30 08       	mov	r8,0
8000634c:	50 48       	stdsp	sp[0x10],r8
8000634e:	c0 49       	rjmp	80006556 <_dtoa_r+0xb86>
80006350:	40 dc       	lddsp	r12,sp[0x34]
80006352:	58 0c       	cp.w	r12,0
80006354:	e0 80 00 b5 	breq	800064be <_dtoa_r+0xaee>
80006358:	58 05       	cp.w	r5,0
8000635a:	e0 8a 00 08 	brle	8000636a <_dtoa_r+0x99a>
8000635e:	08 9b       	mov	r11,r4
80006360:	0a 9a       	mov	r10,r5
80006362:	0e 9c       	mov	r12,r7
80006364:	e0 a0 09 22 	rcall	800075a8 <__lshift>
80006368:	18 94       	mov	r4,r12
8000636a:	40 6b       	lddsp	r11,sp[0x18]
8000636c:	58 0b       	cp.w	r11,0
8000636e:	c0 31       	brne	80006374 <_dtoa_r+0x9a4>
80006370:	08 9c       	mov	r12,r4
80006372:	c1 38       	rjmp	80006398 <_dtoa_r+0x9c8>
80006374:	68 1b       	ld.w	r11,r4[0x4]
80006376:	0e 9c       	mov	r12,r7
80006378:	e0 a0 08 28 	rcall	800073c8 <_Balloc>
8000637c:	68 4a       	ld.w	r10,r4[0x10]
8000637e:	18 95       	mov	r5,r12
80006380:	e8 cb ff f4 	sub	r11,r4,-12
80006384:	2f ea       	sub	r10,-2
80006386:	2f 4c       	sub	r12,-12
80006388:	a3 6a       	lsl	r10,0x2
8000638a:	fe b0 e8 3f 	rcall	80003408 <memcpy>
8000638e:	0a 9b       	mov	r11,r5
80006390:	30 1a       	mov	r10,1
80006392:	0e 9c       	mov	r12,r7
80006394:	e0 a0 09 0a 	rcall	800075a8 <__lshift>
80006398:	50 44       	stdsp	sp[0x10],r4
8000639a:	40 3a       	lddsp	r10,sp[0xc]
8000639c:	30 19       	mov	r9,1
8000639e:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
800063a2:	18 94       	mov	r4,r12
800063a4:	50 da       	stdsp	sp[0x34],r10
800063a6:	40 85       	lddsp	r5,sp[0x20]
800063a8:	50 99       	stdsp	sp[0x24],r9
800063aa:	50 26       	stdsp	sp[0x8],r6
800063ac:	50 e1       	stdsp	sp[0x38],r1
800063ae:	04 9b       	mov	r11,r2
800063b0:	06 9c       	mov	r12,r3
800063b2:	fe b0 fa 7f 	rcall	800058b0 <quorem>
800063b6:	40 4b       	lddsp	r11,sp[0x10]
800063b8:	f8 c0 ff d0 	sub	r0,r12,-48
800063bc:	06 9c       	mov	r12,r3
800063be:	e0 a0 07 d1 	rcall	80007360 <__mcmp>
800063c2:	08 9a       	mov	r10,r4
800063c4:	50 6c       	stdsp	sp[0x18],r12
800063c6:	04 9b       	mov	r11,r2
800063c8:	0e 9c       	mov	r12,r7
800063ca:	e0 a0 08 87 	rcall	800074d8 <__mdiff>
800063ce:	18 91       	mov	r1,r12
800063d0:	78 38       	ld.w	r8,r12[0xc]
800063d2:	58 08       	cp.w	r8,0
800063d4:	c0 30       	breq	800063da <_dtoa_r+0xa0a>
800063d6:	30 16       	mov	r6,1
800063d8:	c0 68       	rjmp	800063e4 <_dtoa_r+0xa14>
800063da:	18 9b       	mov	r11,r12
800063dc:	06 9c       	mov	r12,r3
800063de:	e0 a0 07 c1 	rcall	80007360 <__mcmp>
800063e2:	18 96       	mov	r6,r12
800063e4:	0e 9c       	mov	r12,r7
800063e6:	02 9b       	mov	r11,r1
800063e8:	e0 a0 07 d6 	rcall	80007394 <_Bfree>
800063ec:	40 cc       	lddsp	r12,sp[0x30]
800063ee:	ed ec 10 08 	or	r8,r6,r12
800063f2:	c0 d1       	brne	8000640c <_dtoa_r+0xa3c>
800063f4:	40 db       	lddsp	r11,sp[0x34]
800063f6:	58 0b       	cp.w	r11,0
800063f8:	c0 a1       	brne	8000640c <_dtoa_r+0xa3c>
800063fa:	40 26       	lddsp	r6,sp[0x8]
800063fc:	e0 40 00 39 	cp.w	r0,57
80006400:	c3 00       	breq	80006460 <_dtoa_r+0xa90>
80006402:	40 6a       	lddsp	r10,sp[0x18]
80006404:	58 0a       	cp.w	r10,0
80006406:	e0 89 00 24 	brgt	8000644e <_dtoa_r+0xa7e>
8000640a:	c2 f8       	rjmp	80006468 <_dtoa_r+0xa98>
8000640c:	40 69       	lddsp	r9,sp[0x18]
8000640e:	58 09       	cp.w	r9,0
80006410:	c0 85       	brlt	80006420 <_dtoa_r+0xa50>
80006412:	12 98       	mov	r8,r9
80006414:	40 cc       	lddsp	r12,sp[0x30]
80006416:	18 48       	or	r8,r12
80006418:	c1 d1       	brne	80006452 <_dtoa_r+0xa82>
8000641a:	40 db       	lddsp	r11,sp[0x34]
8000641c:	58 0b       	cp.w	r11,0
8000641e:	c1 a1       	brne	80006452 <_dtoa_r+0xa82>
80006420:	0c 99       	mov	r9,r6
80006422:	40 26       	lddsp	r6,sp[0x8]
80006424:	58 09       	cp.w	r9,0
80006426:	e0 8a 00 21 	brle	80006468 <_dtoa_r+0xa98>
8000642a:	06 9b       	mov	r11,r3
8000642c:	30 1a       	mov	r10,1
8000642e:	0e 9c       	mov	r12,r7
80006430:	e0 a0 08 bc 	rcall	800075a8 <__lshift>
80006434:	04 9b       	mov	r11,r2
80006436:	18 93       	mov	r3,r12
80006438:	e0 a0 07 94 	rcall	80007360 <__mcmp>
8000643c:	e0 89 00 06 	brgt	80006448 <_dtoa_r+0xa78>
80006440:	c1 41       	brne	80006468 <_dtoa_r+0xa98>
80006442:	ed b0 00 00 	bld	r0,0x0
80006446:	c1 11       	brne	80006468 <_dtoa_r+0xa98>
80006448:	e0 40 00 39 	cp.w	r0,57
8000644c:	c0 a0       	breq	80006460 <_dtoa_r+0xa90>
8000644e:	2f f0       	sub	r0,-1
80006450:	c0 c8       	rjmp	80006468 <_dtoa_r+0xa98>
80006452:	58 06       	cp.w	r6,0
80006454:	e0 8a 00 0c 	brle	8000646c <_dtoa_r+0xa9c>
80006458:	40 26       	lddsp	r6,sp[0x8]
8000645a:	e0 40 00 39 	cp.w	r0,57
8000645e:	c0 41       	brne	80006466 <_dtoa_r+0xa96>
80006460:	33 98       	mov	r8,57
80006462:	0a c8       	st.b	r5++,r8
80006464:	c6 78       	rjmp	80006532 <_dtoa_r+0xb62>
80006466:	2f f0       	sub	r0,-1
80006468:	0a c0       	st.b	r5++,r0
8000646a:	c7 58       	rjmp	80006554 <_dtoa_r+0xb84>
8000646c:	0a c0       	st.b	r5++,r0
8000646e:	40 9a       	lddsp	r10,sp[0x24]
80006470:	40 e9       	lddsp	r9,sp[0x38]
80006472:	12 3a       	cp.w	r10,r9
80006474:	c4 30       	breq	800064fa <_dtoa_r+0xb2a>
80006476:	06 9b       	mov	r11,r3
80006478:	30 09       	mov	r9,0
8000647a:	30 aa       	mov	r10,10
8000647c:	0e 9c       	mov	r12,r7
8000647e:	e0 a0 09 61 	rcall	80007740 <__multadd>
80006482:	40 48       	lddsp	r8,sp[0x10]
80006484:	18 93       	mov	r3,r12
80006486:	08 38       	cp.w	r8,r4
80006488:	c0 91       	brne	8000649a <_dtoa_r+0xaca>
8000648a:	10 9b       	mov	r11,r8
8000648c:	30 09       	mov	r9,0
8000648e:	30 aa       	mov	r10,10
80006490:	0e 9c       	mov	r12,r7
80006492:	e0 a0 09 57 	rcall	80007740 <__multadd>
80006496:	50 4c       	stdsp	sp[0x10],r12
80006498:	c0 e8       	rjmp	800064b4 <_dtoa_r+0xae4>
8000649a:	40 4b       	lddsp	r11,sp[0x10]
8000649c:	30 09       	mov	r9,0
8000649e:	30 aa       	mov	r10,10
800064a0:	0e 9c       	mov	r12,r7
800064a2:	e0 a0 09 4f 	rcall	80007740 <__multadd>
800064a6:	08 9b       	mov	r11,r4
800064a8:	50 4c       	stdsp	sp[0x10],r12
800064aa:	30 09       	mov	r9,0
800064ac:	30 aa       	mov	r10,10
800064ae:	0e 9c       	mov	r12,r7
800064b0:	e0 a0 09 48 	rcall	80007740 <__multadd>
800064b4:	18 94       	mov	r4,r12
800064b6:	40 9c       	lddsp	r12,sp[0x24]
800064b8:	2f fc       	sub	r12,-1
800064ba:	50 9c       	stdsp	sp[0x24],r12
800064bc:	c7 9b       	rjmp	800063ae <_dtoa_r+0x9de>
800064be:	30 18       	mov	r8,1
800064c0:	06 90       	mov	r0,r3
800064c2:	40 85       	lddsp	r5,sp[0x20]
800064c4:	08 93       	mov	r3,r4
800064c6:	0c 94       	mov	r4,r6
800064c8:	10 96       	mov	r6,r8
800064ca:	04 9b       	mov	r11,r2
800064cc:	00 9c       	mov	r12,r0
800064ce:	fe b0 f9 f1 	rcall	800058b0 <quorem>
800064d2:	2d 0c       	sub	r12,-48
800064d4:	0a cc       	st.b	r5++,r12
800064d6:	02 36       	cp.w	r6,r1
800064d8:	c0 a4       	brge	800064ec <_dtoa_r+0xb1c>
800064da:	00 9b       	mov	r11,r0
800064dc:	30 09       	mov	r9,0
800064de:	30 aa       	mov	r10,10
800064e0:	0e 9c       	mov	r12,r7
800064e2:	2f f6       	sub	r6,-1
800064e4:	e0 a0 09 2e 	rcall	80007740 <__multadd>
800064e8:	18 90       	mov	r0,r12
800064ea:	cf 0b       	rjmp	800064ca <_dtoa_r+0xafa>
800064ec:	08 96       	mov	r6,r4
800064ee:	30 0b       	mov	r11,0
800064f0:	06 94       	mov	r4,r3
800064f2:	50 4b       	stdsp	sp[0x10],r11
800064f4:	00 93       	mov	r3,r0
800064f6:	18 90       	mov	r0,r12
800064f8:	c0 28       	rjmp	800064fc <_dtoa_r+0xb2c>
800064fa:	40 26       	lddsp	r6,sp[0x8]
800064fc:	06 9b       	mov	r11,r3
800064fe:	30 1a       	mov	r10,1
80006500:	0e 9c       	mov	r12,r7
80006502:	e0 a0 08 53 	rcall	800075a8 <__lshift>
80006506:	04 9b       	mov	r11,r2
80006508:	18 93       	mov	r3,r12
8000650a:	e0 a0 07 2b 	rcall	80007360 <__mcmp>
8000650e:	e0 89 00 12 	brgt	80006532 <_dtoa_r+0xb62>
80006512:	c1 b1       	brne	80006548 <_dtoa_r+0xb78>
80006514:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
80006518:	c0 d1       	brne	80006532 <_dtoa_r+0xb62>
8000651a:	c1 78       	rjmp	80006548 <_dtoa_r+0xb78>
8000651c:	40 89       	lddsp	r9,sp[0x20]
8000651e:	12 38       	cp.w	r8,r9
80006520:	c0 30       	breq	80006526 <_dtoa_r+0xb56>
80006522:	10 95       	mov	r5,r8
80006524:	c0 88       	rjmp	80006534 <_dtoa_r+0xb64>
80006526:	2f f6       	sub	r6,-1
80006528:	50 66       	stdsp	sp[0x18],r6
8000652a:	33 18       	mov	r8,49
8000652c:	40 8c       	lddsp	r12,sp[0x20]
8000652e:	b8 88       	st.b	r12[0x0],r8
80006530:	c1 38       	rjmp	80006556 <_dtoa_r+0xb86>
80006532:	33 9a       	mov	r10,57
80006534:	0a 98       	mov	r8,r5
80006536:	11 79       	ld.ub	r9,--r8
80006538:	f4 09 18 00 	cp.b	r9,r10
8000653c:	cf 00       	breq	8000651c <_dtoa_r+0xb4c>
8000653e:	2f f9       	sub	r9,-1
80006540:	b0 89       	st.b	r8[0x0],r9
80006542:	c0 98       	rjmp	80006554 <_dtoa_r+0xb84>
80006544:	10 95       	mov	r5,r8
80006546:	c0 28       	rjmp	8000654a <_dtoa_r+0xb7a>
80006548:	33 09       	mov	r9,48
8000654a:	0a 98       	mov	r8,r5
8000654c:	11 7a       	ld.ub	r10,--r8
8000654e:	f2 0a 18 00 	cp.b	r10,r9
80006552:	cf 90       	breq	80006544 <_dtoa_r+0xb74>
80006554:	50 66       	stdsp	sp[0x18],r6
80006556:	04 9b       	mov	r11,r2
80006558:	0e 9c       	mov	r12,r7
8000655a:	e0 a0 07 1d 	rcall	80007394 <_Bfree>
8000655e:	58 04       	cp.w	r4,0
80006560:	c1 20       	breq	80006584 <_dtoa_r+0xbb4>
80006562:	40 4b       	lddsp	r11,sp[0x10]
80006564:	08 3b       	cp.w	r11,r4
80006566:	5f 19       	srne	r9
80006568:	58 0b       	cp.w	r11,0
8000656a:	5f 18       	srne	r8
8000656c:	f3 e8 00 08 	and	r8,r9,r8
80006570:	c0 40       	breq	80006578 <_dtoa_r+0xba8>
80006572:	0e 9c       	mov	r12,r7
80006574:	e0 a0 07 10 	rcall	80007394 <_Bfree>
80006578:	08 9b       	mov	r11,r4
8000657a:	0e 9c       	mov	r12,r7
8000657c:	e0 a0 07 0c 	rcall	80007394 <_Bfree>
80006580:	c0 28       	rjmp	80006584 <_dtoa_r+0xbb4>
80006582:	50 66       	stdsp	sp[0x18],r6
80006584:	0e 9c       	mov	r12,r7
80006586:	06 9b       	mov	r11,r3
80006588:	e0 a0 07 06 	rcall	80007394 <_Bfree>
8000658c:	30 08       	mov	r8,0
8000658e:	aa 88       	st.b	r5[0x0],r8
80006590:	40 68       	lddsp	r8,sp[0x18]
80006592:	41 5a       	lddsp	r10,sp[0x54]
80006594:	2f f8       	sub	r8,-1
80006596:	41 29       	lddsp	r9,sp[0x48]
80006598:	95 08       	st.w	r10[0x0],r8
8000659a:	40 8c       	lddsp	r12,sp[0x20]
8000659c:	58 09       	cp.w	r9,0
8000659e:	fb f8 10 12 	ld.wne	r8,sp[0x48]
800065a2:	f1 f5 1a 00 	st.wne	r8[0x0],r5
800065a6:	2e 6d       	sub	sp,-104
800065a8:	d8 32       	popm	r0-r7,pc
800065aa:	d7 03       	nop

800065ac <_fflush_r>:
800065ac:	d4 21       	pushm	r4-r7,lr
800065ae:	16 97       	mov	r7,r11
800065b0:	18 96       	mov	r6,r12
800065b2:	76 48       	ld.w	r8,r11[0x10]
800065b4:	58 08       	cp.w	r8,0
800065b6:	c7 f0       	breq	800066b4 <_fflush_r+0x108>
800065b8:	58 0c       	cp.w	r12,0
800065ba:	c0 50       	breq	800065c4 <_fflush_r+0x18>
800065bc:	78 68       	ld.w	r8,r12[0x18]
800065be:	58 08       	cp.w	r8,0
800065c0:	c0 21       	brne	800065c4 <_fflush_r+0x18>
800065c2:	cc dc       	rcall	8000675c <__sinit>
800065c4:	fe c8 d0 1c 	sub	r8,pc,-12260
800065c8:	10 37       	cp.w	r7,r8
800065ca:	c0 31       	brne	800065d0 <_fflush_r+0x24>
800065cc:	6c 07       	ld.w	r7,r6[0x0]
800065ce:	c0 c8       	rjmp	800065e6 <_fflush_r+0x3a>
800065d0:	fe c8 d0 08 	sub	r8,pc,-12280
800065d4:	10 37       	cp.w	r7,r8
800065d6:	c0 31       	brne	800065dc <_fflush_r+0x30>
800065d8:	6c 17       	ld.w	r7,r6[0x4]
800065da:	c0 68       	rjmp	800065e6 <_fflush_r+0x3a>
800065dc:	fe c8 cf f4 	sub	r8,pc,-12300
800065e0:	10 37       	cp.w	r7,r8
800065e2:	ed f7 00 02 	ld.weq	r7,r6[0x8]
800065e6:	8e 6a       	ld.sh	r10,r7[0xc]
800065e8:	14 98       	mov	r8,r10
800065ea:	ed ba 00 03 	bld	r10,0x3
800065ee:	c4 20       	breq	80006672 <_fflush_r+0xc6>
800065f0:	ab ba       	sbr	r10,0xb
800065f2:	ae 6a       	st.h	r7[0xc],r10
800065f4:	6e 18       	ld.w	r8,r7[0x4]
800065f6:	58 08       	cp.w	r8,0
800065f8:	e0 89 00 06 	brgt	80006604 <_fflush_r+0x58>
800065fc:	6f 08       	ld.w	r8,r7[0x40]
800065fe:	58 08       	cp.w	r8,0
80006600:	e0 8a 00 5a 	brle	800066b4 <_fflush_r+0x108>
80006604:	6e b8       	ld.w	r8,r7[0x2c]
80006606:	58 08       	cp.w	r8,0
80006608:	c5 60       	breq	800066b4 <_fflush_r+0x108>
8000660a:	e2 1a 10 00 	andl	r10,0x1000,COH
8000660e:	c0 30       	breq	80006614 <_fflush_r+0x68>
80006610:	6f 55       	ld.w	r5,r7[0x54]
80006612:	c0 f8       	rjmp	80006630 <_fflush_r+0x84>
80006614:	30 19       	mov	r9,1
80006616:	6e 8b       	ld.w	r11,r7[0x20]
80006618:	0c 9c       	mov	r12,r6
8000661a:	5d 18       	icall	r8
8000661c:	18 95       	mov	r5,r12
8000661e:	5b fc       	cp.w	r12,-1
80006620:	c0 81       	brne	80006630 <_fflush_r+0x84>
80006622:	6c 38       	ld.w	r8,r6[0xc]
80006624:	59 d8       	cp.w	r8,29
80006626:	c4 70       	breq	800066b4 <_fflush_r+0x108>
80006628:	8e 68       	ld.sh	r8,r7[0xc]
8000662a:	a7 a8       	sbr	r8,0x6
8000662c:	ae 68       	st.h	r7[0xc],r8
8000662e:	d8 22       	popm	r4-r7,pc
80006630:	8e 68       	ld.sh	r8,r7[0xc]
80006632:	ed b8 00 02 	bld	r8,0x2
80006636:	c0 91       	brne	80006648 <_fflush_r+0x9c>
80006638:	6e 18       	ld.w	r8,r7[0x4]
8000663a:	10 15       	sub	r5,r8
8000663c:	6e d8       	ld.w	r8,r7[0x34]
8000663e:	58 08       	cp.w	r8,0
80006640:	ef f8 10 10 	ld.wne	r8,r7[0x40]
80006644:	eb d8 e1 15 	subne	r5,r5,r8
80006648:	6e b8       	ld.w	r8,r7[0x2c]
8000664a:	0c 9c       	mov	r12,r6
8000664c:	30 09       	mov	r9,0
8000664e:	0a 9a       	mov	r10,r5
80006650:	6e 8b       	ld.w	r11,r7[0x20]
80006652:	5d 18       	icall	r8
80006654:	8e 68       	ld.sh	r8,r7[0xc]
80006656:	0a 3c       	cp.w	r12,r5
80006658:	c2 61       	brne	800066a4 <_fflush_r+0xf8>
8000665a:	ab d8       	cbr	r8,0xb
8000665c:	30 0c       	mov	r12,0
8000665e:	6e 49       	ld.w	r9,r7[0x10]
80006660:	ae 68       	st.h	r7[0xc],r8
80006662:	8f 1c       	st.w	r7[0x4],r12
80006664:	8f 09       	st.w	r7[0x0],r9
80006666:	ed b8 00 0c 	bld	r8,0xc
8000666a:	c2 51       	brne	800066b4 <_fflush_r+0x108>
8000666c:	ef 45 00 54 	st.w	r7[84],r5
80006670:	d8 22       	popm	r4-r7,pc
80006672:	6e 45       	ld.w	r5,r7[0x10]
80006674:	58 05       	cp.w	r5,0
80006676:	c1 f0       	breq	800066b4 <_fflush_r+0x108>
80006678:	6e 04       	ld.w	r4,r7[0x0]
8000667a:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
8000667e:	8f 05       	st.w	r7[0x0],r5
80006680:	f9 b8 01 00 	movne	r8,0
80006684:	ef f8 00 05 	ld.weq	r8,r7[0x14]
80006688:	0a 14       	sub	r4,r5
8000668a:	8f 28       	st.w	r7[0x8],r8
8000668c:	c1 18       	rjmp	800066ae <_fflush_r+0x102>
8000668e:	08 99       	mov	r9,r4
80006690:	0a 9a       	mov	r10,r5
80006692:	6e a8       	ld.w	r8,r7[0x28]
80006694:	6e 8b       	ld.w	r11,r7[0x20]
80006696:	0c 9c       	mov	r12,r6
80006698:	5d 18       	icall	r8
8000669a:	18 14       	sub	r4,r12
8000669c:	58 0c       	cp.w	r12,0
8000669e:	e0 89 00 07 	brgt	800066ac <_fflush_r+0x100>
800066a2:	8e 68       	ld.sh	r8,r7[0xc]
800066a4:	a7 a8       	sbr	r8,0x6
800066a6:	3f fc       	mov	r12,-1
800066a8:	ae 68       	st.h	r7[0xc],r8
800066aa:	d8 22       	popm	r4-r7,pc
800066ac:	18 05       	add	r5,r12
800066ae:	58 04       	cp.w	r4,0
800066b0:	fe 99 ff ef 	brgt	8000668e <_fflush_r+0xe2>
800066b4:	d8 2a       	popm	r4-r7,pc,r12=0
800066b6:	d7 03       	nop

800066b8 <__sfp_lock_acquire>:
800066b8:	5e fc       	retal	r12

800066ba <__sfp_lock_release>:
800066ba:	5e fc       	retal	r12

800066bc <_cleanup_r>:
800066bc:	d4 01       	pushm	lr
800066be:	fe cb e8 6a 	sub	r11,pc,-6038
800066c2:	e0 a0 02 fd 	rcall	80006cbc <_fwalk>
800066c6:	d8 02       	popm	pc

800066c8 <__sfmoreglue>:
800066c8:	d4 21       	pushm	r4-r7,lr
800066ca:	16 95       	mov	r5,r11
800066cc:	f6 06 10 5c 	mul	r6,r11,92
800066d0:	ec cb ff f4 	sub	r11,r6,-12
800066d4:	e0 a0 03 84 	rcall	80006ddc <_malloc_r>
800066d8:	18 97       	mov	r7,r12
800066da:	c0 90       	breq	800066ec <__sfmoreglue+0x24>
800066dc:	99 15       	st.w	r12[0x4],r5
800066de:	30 0b       	mov	r11,0
800066e0:	2f 4c       	sub	r12,-12
800066e2:	0c 9a       	mov	r10,r6
800066e4:	8f 2c       	st.w	r7[0x8],r12
800066e6:	8f 0b       	st.w	r7[0x0],r11
800066e8:	e0 a0 05 bc 	rcall	80007260 <memset>
800066ec:	0e 9c       	mov	r12,r7
800066ee:	d8 22       	popm	r4-r7,pc

800066f0 <__sfp>:
800066f0:	d4 21       	pushm	r4-r7,lr
800066f2:	fe c8 d5 32 	sub	r8,pc,-10958
800066f6:	18 96       	mov	r6,r12
800066f8:	70 07       	ld.w	r7,r8[0x0]
800066fa:	6e 68       	ld.w	r8,r7[0x18]
800066fc:	58 08       	cp.w	r8,0
800066fe:	c0 31       	brne	80006704 <__sfp+0x14>
80006700:	0e 9c       	mov	r12,r7
80006702:	c2 dc       	rcall	8000675c <__sinit>
80006704:	ee c7 ff 28 	sub	r7,r7,-216
80006708:	30 05       	mov	r5,0
8000670a:	6e 2c       	ld.w	r12,r7[0x8]
8000670c:	6e 18       	ld.w	r8,r7[0x4]
8000670e:	c0 68       	rjmp	8000671a <__sfp+0x2a>
80006710:	98 69       	ld.sh	r9,r12[0xc]
80006712:	ea 09 19 00 	cp.h	r9,r5
80006716:	c1 10       	breq	80006738 <__sfp+0x48>
80006718:	2a 4c       	sub	r12,-92
8000671a:	20 18       	sub	r8,1
8000671c:	cf a7       	brpl	80006710 <__sfp+0x20>
8000671e:	6e 08       	ld.w	r8,r7[0x0]
80006720:	58 08       	cp.w	r8,0
80006722:	c0 61       	brne	8000672e <__sfp+0x3e>
80006724:	30 4b       	mov	r11,4
80006726:	0c 9c       	mov	r12,r6
80006728:	cd 0f       	rcall	800066c8 <__sfmoreglue>
8000672a:	8f 0c       	st.w	r7[0x0],r12
8000672c:	c0 30       	breq	80006732 <__sfp+0x42>
8000672e:	6e 07       	ld.w	r7,r7[0x0]
80006730:	ce db       	rjmp	8000670a <__sfp+0x1a>
80006732:	30 c8       	mov	r8,12
80006734:	8d 38       	st.w	r6[0xc],r8
80006736:	d8 22       	popm	r4-r7,pc
80006738:	30 08       	mov	r8,0
8000673a:	f9 48 00 4c 	st.w	r12[76],r8
8000673e:	99 08       	st.w	r12[0x0],r8
80006740:	99 28       	st.w	r12[0x8],r8
80006742:	99 18       	st.w	r12[0x4],r8
80006744:	99 48       	st.w	r12[0x10],r8
80006746:	99 58       	st.w	r12[0x14],r8
80006748:	99 68       	st.w	r12[0x18],r8
8000674a:	99 d8       	st.w	r12[0x34],r8
8000674c:	99 e8       	st.w	r12[0x38],r8
8000674e:	f9 48 00 48 	st.w	r12[72],r8
80006752:	3f f8       	mov	r8,-1
80006754:	b8 78       	st.h	r12[0xe],r8
80006756:	30 18       	mov	r8,1
80006758:	b8 68       	st.h	r12[0xc],r8
8000675a:	d8 22       	popm	r4-r7,pc

8000675c <__sinit>:
8000675c:	d4 21       	pushm	r4-r7,lr
8000675e:	18 96       	mov	r6,r12
80006760:	78 67       	ld.w	r7,r12[0x18]
80006762:	58 07       	cp.w	r7,0
80006764:	c4 91       	brne	800067f6 <__sinit+0x9a>
80006766:	fe c8 00 aa 	sub	r8,pc,170
8000676a:	30 15       	mov	r5,1
8000676c:	99 a8       	st.w	r12[0x28],r8
8000676e:	f9 47 00 d8 	st.w	r12[216],r7
80006772:	f9 47 00 dc 	st.w	r12[220],r7
80006776:	f9 47 00 e0 	st.w	r12[224],r7
8000677a:	99 65       	st.w	r12[0x18],r5
8000677c:	cb af       	rcall	800066f0 <__sfp>
8000677e:	8d 0c       	st.w	r6[0x0],r12
80006780:	0c 9c       	mov	r12,r6
80006782:	cb 7f       	rcall	800066f0 <__sfp>
80006784:	8d 1c       	st.w	r6[0x4],r12
80006786:	0c 9c       	mov	r12,r6
80006788:	cb 4f       	rcall	800066f0 <__sfp>
8000678a:	6c 09       	ld.w	r9,r6[0x0]
8000678c:	30 48       	mov	r8,4
8000678e:	93 07       	st.w	r9[0x0],r7
80006790:	b2 68       	st.h	r9[0xc],r8
80006792:	93 17       	st.w	r9[0x4],r7
80006794:	93 27       	st.w	r9[0x8],r7
80006796:	6c 18       	ld.w	r8,r6[0x4]
80006798:	b2 77       	st.h	r9[0xe],r7
8000679a:	93 47       	st.w	r9[0x10],r7
8000679c:	93 57       	st.w	r9[0x14],r7
8000679e:	93 67       	st.w	r9[0x18],r7
800067a0:	93 89       	st.w	r9[0x20],r9
800067a2:	91 07       	st.w	r8[0x0],r7
800067a4:	91 17       	st.w	r8[0x4],r7
800067a6:	91 27       	st.w	r8[0x8],r7
800067a8:	fe ce eb e4 	sub	lr,pc,-5148
800067ac:	fe cb ec 14 	sub	r11,pc,-5100
800067b0:	93 9e       	st.w	r9[0x24],lr
800067b2:	93 ab       	st.w	r9[0x28],r11
800067b4:	fe ca ec 3c 	sub	r10,pc,-5060
800067b8:	fe c4 ec 48 	sub	r4,pc,-5048
800067bc:	93 ba       	st.w	r9[0x2c],r10
800067be:	93 c4       	st.w	r9[0x30],r4
800067c0:	30 99       	mov	r9,9
800067c2:	b0 69       	st.h	r8[0xc],r9
800067c4:	b0 75       	st.h	r8[0xe],r5
800067c6:	91 c4       	st.w	r8[0x30],r4
800067c8:	91 47       	st.w	r8[0x10],r7
800067ca:	91 57       	st.w	r8[0x14],r7
800067cc:	91 67       	st.w	r8[0x18],r7
800067ce:	91 88       	st.w	r8[0x20],r8
800067d0:	91 9e       	st.w	r8[0x24],lr
800067d2:	91 ab       	st.w	r8[0x28],r11
800067d4:	91 ba       	st.w	r8[0x2c],r10
800067d6:	8d 2c       	st.w	r6[0x8],r12
800067d8:	31 28       	mov	r8,18
800067da:	99 07       	st.w	r12[0x0],r7
800067dc:	b8 68       	st.h	r12[0xc],r8
800067de:	99 17       	st.w	r12[0x4],r7
800067e0:	99 27       	st.w	r12[0x8],r7
800067e2:	30 28       	mov	r8,2
800067e4:	b8 78       	st.h	r12[0xe],r8
800067e6:	99 c4       	st.w	r12[0x30],r4
800067e8:	99 67       	st.w	r12[0x18],r7
800067ea:	99 9e       	st.w	r12[0x24],lr
800067ec:	99 ab       	st.w	r12[0x28],r11
800067ee:	99 ba       	st.w	r12[0x2c],r10
800067f0:	99 47       	st.w	r12[0x10],r7
800067f2:	99 57       	st.w	r12[0x14],r7
800067f4:	99 8c       	st.w	r12[0x20],r12
800067f6:	d8 22       	popm	r4-r7,pc

800067f8 <_malloc_trim_r>:
800067f8:	d4 21       	pushm	r4-r7,lr
800067fa:	16 95       	mov	r5,r11
800067fc:	18 97       	mov	r7,r12
800067fe:	e0 a0 05 38 	rcall	8000726e <__malloc_lock>
80006802:	e0 64 01 04 	mov	r4,260
80006806:	68 28       	ld.w	r8,r4[0x8]
80006808:	70 16       	ld.w	r6,r8[0x4]
8000680a:	e0 16 ff fc 	andl	r6,0xfffc
8000680e:	ec c8 ff 91 	sub	r8,r6,-111
80006812:	f0 05 01 05 	sub	r5,r8,r5
80006816:	e0 15 ff 80 	andl	r5,0xff80
8000681a:	ea c5 00 80 	sub	r5,r5,128
8000681e:	e0 45 00 7f 	cp.w	r5,127
80006822:	e0 8a 00 25 	brle	8000686c <_malloc_trim_r+0x74>
80006826:	30 0b       	mov	r11,0
80006828:	0e 9c       	mov	r12,r7
8000682a:	e0 a0 09 93 	rcall	80007b50 <_sbrk_r>
8000682e:	68 28       	ld.w	r8,r4[0x8]
80006830:	0c 08       	add	r8,r6
80006832:	10 3c       	cp.w	r12,r8
80006834:	c1 c1       	brne	8000686c <_malloc_trim_r+0x74>
80006836:	ea 0b 11 00 	rsub	r11,r5,0
8000683a:	0e 9c       	mov	r12,r7
8000683c:	e0 a0 09 8a 	rcall	80007b50 <_sbrk_r>
80006840:	5b fc       	cp.w	r12,-1
80006842:	c1 91       	brne	80006874 <_malloc_trim_r+0x7c>
80006844:	30 0b       	mov	r11,0
80006846:	0e 9c       	mov	r12,r7
80006848:	e0 a0 09 84 	rcall	80007b50 <_sbrk_r>
8000684c:	68 28       	ld.w	r8,r4[0x8]
8000684e:	f8 08 01 09 	sub	r9,r12,r8
80006852:	58 f9       	cp.w	r9,15
80006854:	e0 8a 00 0c 	brle	8000686c <_malloc_trim_r+0x74>
80006858:	a1 a9       	sbr	r9,0x0
8000685a:	91 19       	st.w	r8[0x4],r9
8000685c:	e0 68 05 10 	mov	r8,1296
80006860:	70 09       	ld.w	r9,r8[0x0]
80006862:	e0 68 06 34 	mov	r8,1588
80006866:	f8 09 01 09 	sub	r9,r12,r9
8000686a:	91 09       	st.w	r8[0x0],r9
8000686c:	0e 9c       	mov	r12,r7
8000686e:	e0 a0 05 01 	rcall	80007270 <__malloc_unlock>
80006872:	d8 2a       	popm	r4-r7,pc,r12=0
80006874:	68 28       	ld.w	r8,r4[0x8]
80006876:	0a 16       	sub	r6,r5
80006878:	a1 a6       	sbr	r6,0x0
8000687a:	91 16       	st.w	r8[0x4],r6
8000687c:	e0 68 06 34 	mov	r8,1588
80006880:	70 09       	ld.w	r9,r8[0x0]
80006882:	0a 19       	sub	r9,r5
80006884:	0e 9c       	mov	r12,r7
80006886:	91 09       	st.w	r8[0x0],r9
80006888:	e0 a0 04 f4 	rcall	80007270 <__malloc_unlock>
8000688c:	da 2a       	popm	r4-r7,pc,r12=1
8000688e:	d7 03       	nop

80006890 <_free_r>:
80006890:	d4 21       	pushm	r4-r7,lr
80006892:	16 96       	mov	r6,r11
80006894:	18 97       	mov	r7,r12
80006896:	58 0b       	cp.w	r11,0
80006898:	e0 80 00 c0 	breq	80006a18 <_free_r+0x188>
8000689c:	e0 a0 04 e9 	rcall	8000726e <__malloc_lock>
800068a0:	20 86       	sub	r6,8
800068a2:	e0 6a 01 04 	mov	r10,260
800068a6:	6c 18       	ld.w	r8,r6[0x4]
800068a8:	74 2e       	ld.w	lr,r10[0x8]
800068aa:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
800068ae:	a1 c8       	cbr	r8,0x0
800068b0:	ec 08 00 09 	add	r9,r6,r8
800068b4:	72 1b       	ld.w	r11,r9[0x4]
800068b6:	e0 1b ff fc 	andl	r11,0xfffc
800068ba:	1c 39       	cp.w	r9,lr
800068bc:	c1 e1       	brne	800068f8 <_free_r+0x68>
800068be:	f6 08 00 08 	add	r8,r11,r8
800068c2:	58 0c       	cp.w	r12,0
800068c4:	c0 81       	brne	800068d4 <_free_r+0x44>
800068c6:	6c 09       	ld.w	r9,r6[0x0]
800068c8:	12 16       	sub	r6,r9
800068ca:	12 08       	add	r8,r9
800068cc:	6c 3b       	ld.w	r11,r6[0xc]
800068ce:	6c 29       	ld.w	r9,r6[0x8]
800068d0:	97 29       	st.w	r11[0x8],r9
800068d2:	93 3b       	st.w	r9[0xc],r11
800068d4:	10 99       	mov	r9,r8
800068d6:	95 26       	st.w	r10[0x8],r6
800068d8:	a1 a9       	sbr	r9,0x0
800068da:	8d 19       	st.w	r6[0x4],r9
800068dc:	e0 69 05 0c 	mov	r9,1292
800068e0:	72 09       	ld.w	r9,r9[0x0]
800068e2:	12 38       	cp.w	r8,r9
800068e4:	c0 63       	brcs	800068f0 <_free_r+0x60>
800068e6:	e0 68 06 30 	mov	r8,1584
800068ea:	0e 9c       	mov	r12,r7
800068ec:	70 0b       	ld.w	r11,r8[0x0]
800068ee:	c8 5f       	rcall	800067f8 <_malloc_trim_r>
800068f0:	0e 9c       	mov	r12,r7
800068f2:	e0 a0 04 bf 	rcall	80007270 <__malloc_unlock>
800068f6:	d8 22       	popm	r4-r7,pc
800068f8:	93 1b       	st.w	r9[0x4],r11
800068fa:	58 0c       	cp.w	r12,0
800068fc:	c0 30       	breq	80006902 <_free_r+0x72>
800068fe:	30 0c       	mov	r12,0
80006900:	c1 08       	rjmp	80006920 <_free_r+0x90>
80006902:	6c 0e       	ld.w	lr,r6[0x0]
80006904:	f4 c5 ff f8 	sub	r5,r10,-8
80006908:	1c 16       	sub	r6,lr
8000690a:	1c 08       	add	r8,lr
8000690c:	6c 2e       	ld.w	lr,r6[0x8]
8000690e:	0a 3e       	cp.w	lr,r5
80006910:	f9 bc 00 01 	moveq	r12,1
80006914:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80006918:	eb fe 1a 02 	st.wne	r5[0x8],lr
8000691c:	fd f5 1a 03 	st.wne	lr[0xc],r5
80006920:	f2 0b 00 0e 	add	lr,r9,r11
80006924:	7c 1e       	ld.w	lr,lr[0x4]
80006926:	ed be 00 00 	bld	lr,0x0
8000692a:	c1 40       	breq	80006952 <_free_r+0xc2>
8000692c:	16 08       	add	r8,r11
8000692e:	58 0c       	cp.w	r12,0
80006930:	c0 d1       	brne	8000694a <_free_r+0xba>
80006932:	e0 6e 01 04 	mov	lr,260
80006936:	72 2b       	ld.w	r11,r9[0x8]
80006938:	2f 8e       	sub	lr,-8
8000693a:	1c 3b       	cp.w	r11,lr
8000693c:	c0 71       	brne	8000694a <_free_r+0xba>
8000693e:	97 36       	st.w	r11[0xc],r6
80006940:	97 26       	st.w	r11[0x8],r6
80006942:	8d 2b       	st.w	r6[0x8],r11
80006944:	8d 3b       	st.w	r6[0xc],r11
80006946:	30 1c       	mov	r12,1
80006948:	c0 58       	rjmp	80006952 <_free_r+0xc2>
8000694a:	72 2b       	ld.w	r11,r9[0x8]
8000694c:	72 39       	ld.w	r9,r9[0xc]
8000694e:	93 2b       	st.w	r9[0x8],r11
80006950:	97 39       	st.w	r11[0xc],r9
80006952:	10 99       	mov	r9,r8
80006954:	ec 08 09 08 	st.w	r6[r8],r8
80006958:	a1 a9       	sbr	r9,0x0
8000695a:	8d 19       	st.w	r6[0x4],r9
8000695c:	58 0c       	cp.w	r12,0
8000695e:	c5 a1       	brne	80006a12 <_free_r+0x182>
80006960:	e0 48 01 ff 	cp.w	r8,511
80006964:	e0 8b 00 13 	brhi	8000698a <_free_r+0xfa>
80006968:	a3 98       	lsr	r8,0x3
8000696a:	f4 08 00 39 	add	r9,r10,r8<<0x3
8000696e:	72 2b       	ld.w	r11,r9[0x8]
80006970:	8d 39       	st.w	r6[0xc],r9
80006972:	8d 2b       	st.w	r6[0x8],r11
80006974:	97 36       	st.w	r11[0xc],r6
80006976:	93 26       	st.w	r9[0x8],r6
80006978:	a3 48       	asr	r8,0x2
8000697a:	74 19       	ld.w	r9,r10[0x4]
8000697c:	30 1b       	mov	r11,1
8000697e:	f6 08 09 48 	lsl	r8,r11,r8
80006982:	f3 e8 10 08 	or	r8,r9,r8
80006986:	95 18       	st.w	r10[0x4],r8
80006988:	c4 58       	rjmp	80006a12 <_free_r+0x182>
8000698a:	f0 0b 16 09 	lsr	r11,r8,0x9
8000698e:	58 4b       	cp.w	r11,4
80006990:	e0 8b 00 06 	brhi	8000699c <_free_r+0x10c>
80006994:	f0 0b 16 06 	lsr	r11,r8,0x6
80006998:	2c 8b       	sub	r11,-56
8000699a:	c2 08       	rjmp	800069da <_free_r+0x14a>
8000699c:	59 4b       	cp.w	r11,20
8000699e:	e0 8b 00 04 	brhi	800069a6 <_free_r+0x116>
800069a2:	2a 5b       	sub	r11,-91
800069a4:	c1 b8       	rjmp	800069da <_free_r+0x14a>
800069a6:	e0 4b 00 54 	cp.w	r11,84
800069aa:	e0 8b 00 06 	brhi	800069b6 <_free_r+0x126>
800069ae:	f0 0b 16 0c 	lsr	r11,r8,0xc
800069b2:	29 2b       	sub	r11,-110
800069b4:	c1 38       	rjmp	800069da <_free_r+0x14a>
800069b6:	e0 4b 01 54 	cp.w	r11,340
800069ba:	e0 8b 00 06 	brhi	800069c6 <_free_r+0x136>
800069be:	f0 0b 16 0f 	lsr	r11,r8,0xf
800069c2:	28 9b       	sub	r11,-119
800069c4:	c0 b8       	rjmp	800069da <_free_r+0x14a>
800069c6:	e0 4b 05 54 	cp.w	r11,1364
800069ca:	e0 88 00 05 	brls	800069d4 <_free_r+0x144>
800069ce:	37 eb       	mov	r11,126
800069d0:	c0 58       	rjmp	800069da <_free_r+0x14a>
800069d2:	d7 03       	nop
800069d4:	f0 0b 16 12 	lsr	r11,r8,0x12
800069d8:	28 4b       	sub	r11,-124
800069da:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
800069de:	78 29       	ld.w	r9,r12[0x8]
800069e0:	18 39       	cp.w	r9,r12
800069e2:	c0 e1       	brne	800069fe <_free_r+0x16e>
800069e4:	74 18       	ld.w	r8,r10[0x4]
800069e6:	a3 4b       	asr	r11,0x2
800069e8:	30 1c       	mov	r12,1
800069ea:	f8 0b 09 4b 	lsl	r11,r12,r11
800069ee:	f1 eb 10 0b 	or	r11,r8,r11
800069f2:	12 98       	mov	r8,r9
800069f4:	95 1b       	st.w	r10[0x4],r11
800069f6:	c0 a8       	rjmp	80006a0a <_free_r+0x17a>
800069f8:	72 29       	ld.w	r9,r9[0x8]
800069fa:	18 39       	cp.w	r9,r12
800069fc:	c0 60       	breq	80006a08 <_free_r+0x178>
800069fe:	72 1a       	ld.w	r10,r9[0x4]
80006a00:	e0 1a ff fc 	andl	r10,0xfffc
80006a04:	14 38       	cp.w	r8,r10
80006a06:	cf 93       	brcs	800069f8 <_free_r+0x168>
80006a08:	72 38       	ld.w	r8,r9[0xc]
80006a0a:	8d 38       	st.w	r6[0xc],r8
80006a0c:	8d 29       	st.w	r6[0x8],r9
80006a0e:	93 36       	st.w	r9[0xc],r6
80006a10:	91 26       	st.w	r8[0x8],r6
80006a12:	0e 9c       	mov	r12,r7
80006a14:	e0 a0 04 2e 	rcall	80007270 <__malloc_unlock>
80006a18:	d8 22       	popm	r4-r7,pc
80006a1a:	d7 03       	nop

80006a1c <__sfvwrite_r>:
80006a1c:	d4 31       	pushm	r0-r7,lr
80006a1e:	20 3d       	sub	sp,12
80006a20:	14 94       	mov	r4,r10
80006a22:	18 95       	mov	r5,r12
80006a24:	16 97       	mov	r7,r11
80006a26:	74 28       	ld.w	r8,r10[0x8]
80006a28:	58 08       	cp.w	r8,0
80006a2a:	e0 80 01 45 	breq	80006cb4 <__sfvwrite_r+0x298>
80006a2e:	96 68       	ld.sh	r8,r11[0xc]
80006a30:	ed b8 00 03 	bld	r8,0x3
80006a34:	c0 41       	brne	80006a3c <__sfvwrite_r+0x20>
80006a36:	76 48       	ld.w	r8,r11[0x10]
80006a38:	58 08       	cp.w	r8,0
80006a3a:	c0 c1       	brne	80006a52 <__sfvwrite_r+0x36>
80006a3c:	0e 9b       	mov	r11,r7
80006a3e:	0a 9c       	mov	r12,r5
80006a40:	fe b0 f6 ca 	rcall	800057d4 <__swsetup_r>
80006a44:	c0 70       	breq	80006a52 <__sfvwrite_r+0x36>
80006a46:	8e 68       	ld.sh	r8,r7[0xc]
80006a48:	a7 a8       	sbr	r8,0x6
80006a4a:	ae 68       	st.h	r7[0xc],r8
80006a4c:	30 98       	mov	r8,9
80006a4e:	8b 38       	st.w	r5[0xc],r8
80006a50:	c3 09       	rjmp	80006cb0 <__sfvwrite_r+0x294>
80006a52:	8e 63       	ld.sh	r3,r7[0xc]
80006a54:	68 00       	ld.w	r0,r4[0x0]
80006a56:	06 96       	mov	r6,r3
80006a58:	e2 16 00 02 	andl	r6,0x2,COH
80006a5c:	c2 10       	breq	80006a9e <__sfvwrite_r+0x82>
80006a5e:	30 03       	mov	r3,0
80006a60:	e0 62 04 00 	mov	r2,1024
80006a64:	06 96       	mov	r6,r3
80006a66:	c0 48       	rjmp	80006a6e <__sfvwrite_r+0x52>
80006a68:	60 03       	ld.w	r3,r0[0x0]
80006a6a:	60 16       	ld.w	r6,r0[0x4]
80006a6c:	2f 80       	sub	r0,-8
80006a6e:	58 06       	cp.w	r6,0
80006a70:	cf c0       	breq	80006a68 <__sfvwrite_r+0x4c>
80006a72:	e0 46 04 00 	cp.w	r6,1024
80006a76:	ec 09 17 80 	movls	r9,r6
80006a7a:	e4 09 17 b0 	movhi	r9,r2
80006a7e:	06 9a       	mov	r10,r3
80006a80:	6e a8       	ld.w	r8,r7[0x28]
80006a82:	6e 8b       	ld.w	r11,r7[0x20]
80006a84:	0a 9c       	mov	r12,r5
80006a86:	5d 18       	icall	r8
80006a88:	18 16       	sub	r6,r12
80006a8a:	58 0c       	cp.w	r12,0
80006a8c:	e0 8a 01 0f 	brle	80006caa <__sfvwrite_r+0x28e>
80006a90:	68 28       	ld.w	r8,r4[0x8]
80006a92:	18 18       	sub	r8,r12
80006a94:	89 28       	st.w	r4[0x8],r8
80006a96:	e0 80 01 0f 	breq	80006cb4 <__sfvwrite_r+0x298>
80006a9a:	18 03       	add	r3,r12
80006a9c:	ce 9b       	rjmp	80006a6e <__sfvwrite_r+0x52>
80006a9e:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
80006aa2:	c0 70       	breq	80006ab0 <__sfvwrite_r+0x94>
80006aa4:	50 06       	stdsp	sp[0x0],r6
80006aa6:	0c 93       	mov	r3,r6
80006aa8:	0c 91       	mov	r1,r6
80006aaa:	50 15       	stdsp	sp[0x4],r5
80006aac:	08 92       	mov	r2,r4
80006aae:	c9 e8       	rjmp	80006bea <__sfvwrite_r+0x1ce>
80006ab0:	06 96       	mov	r6,r3
80006ab2:	08 91       	mov	r1,r4
80006ab4:	c0 48       	rjmp	80006abc <__sfvwrite_r+0xa0>
80006ab6:	60 03       	ld.w	r3,r0[0x0]
80006ab8:	60 16       	ld.w	r6,r0[0x4]
80006aba:	2f 80       	sub	r0,-8
80006abc:	58 06       	cp.w	r6,0
80006abe:	cf c0       	breq	80006ab6 <__sfvwrite_r+0x9a>
80006ac0:	8e 68       	ld.sh	r8,r7[0xc]
80006ac2:	6e 24       	ld.w	r4,r7[0x8]
80006ac4:	10 99       	mov	r9,r8
80006ac6:	e2 19 02 00 	andl	r9,0x200,COH
80006aca:	c5 50       	breq	80006b74 <__sfvwrite_r+0x158>
80006acc:	08 36       	cp.w	r6,r4
80006ace:	c4 33       	brcs	80006b54 <__sfvwrite_r+0x138>
80006ad0:	10 99       	mov	r9,r8
80006ad2:	e2 19 04 80 	andl	r9,0x480,COH
80006ad6:	c3 f0       	breq	80006b54 <__sfvwrite_r+0x138>
80006ad8:	6e 4b       	ld.w	r11,r7[0x10]
80006ada:	6e 09       	ld.w	r9,r7[0x0]
80006adc:	16 19       	sub	r9,r11
80006ade:	50 09       	stdsp	sp[0x0],r9
80006ae0:	6e 59       	ld.w	r9,r7[0x14]
80006ae2:	10 9c       	mov	r12,r8
80006ae4:	f2 09 00 1a 	add	r10,r9,r9<<0x1
80006ae8:	30 28       	mov	r8,2
80006aea:	f4 08 0c 08 	divs	r8,r10,r8
80006aee:	fa e9 00 04 	st.d	sp[4],r8
80006af2:	10 94       	mov	r4,r8
80006af4:	40 09       	lddsp	r9,sp[0x0]
80006af6:	e2 1c 04 00 	andl	r12,0x400,COH
80006afa:	2f f9       	sub	r9,-1
80006afc:	0c 09       	add	r9,r6
80006afe:	12 38       	cp.w	r8,r9
80006b00:	f2 04 17 30 	movlo	r4,r9
80006b04:	58 0c       	cp.w	r12,0
80006b06:	c1 00       	breq	80006b26 <__sfvwrite_r+0x10a>
80006b08:	08 9b       	mov	r11,r4
80006b0a:	0a 9c       	mov	r12,r5
80006b0c:	c6 8d       	rcall	80006ddc <_malloc_r>
80006b0e:	18 92       	mov	r2,r12
80006b10:	c1 40       	breq	80006b38 <__sfvwrite_r+0x11c>
80006b12:	40 0a       	lddsp	r10,sp[0x0]
80006b14:	6e 4b       	ld.w	r11,r7[0x10]
80006b16:	fe b0 e4 79 	rcall	80003408 <memcpy>
80006b1a:	8e 68       	ld.sh	r8,r7[0xc]
80006b1c:	e0 18 fb 7f 	andl	r8,0xfb7f
80006b20:	a7 b8       	sbr	r8,0x7
80006b22:	ae 68       	st.h	r7[0xc],r8
80006b24:	c0 d8       	rjmp	80006b3e <__sfvwrite_r+0x122>
80006b26:	08 9a       	mov	r10,r4
80006b28:	0a 9c       	mov	r12,r5
80006b2a:	e0 a0 06 8f 	rcall	80007848 <_realloc_r>
80006b2e:	18 92       	mov	r2,r12
80006b30:	c0 71       	brne	80006b3e <__sfvwrite_r+0x122>
80006b32:	6e 4b       	ld.w	r11,r7[0x10]
80006b34:	0a 9c       	mov	r12,r5
80006b36:	ca de       	rcall	80006890 <_free_r>
80006b38:	30 c8       	mov	r8,12
80006b3a:	8b 38       	st.w	r5[0xc],r8
80006b3c:	cb 78       	rjmp	80006caa <__sfvwrite_r+0x28e>
80006b3e:	40 0a       	lddsp	r10,sp[0x0]
80006b40:	40 09       	lddsp	r9,sp[0x0]
80006b42:	e8 0a 01 0a 	sub	r10,r4,r10
80006b46:	e4 09 00 08 	add	r8,r2,r9
80006b4a:	8f 54       	st.w	r7[0x14],r4
80006b4c:	8f 2a       	st.w	r7[0x8],r10
80006b4e:	8f 08       	st.w	r7[0x0],r8
80006b50:	8f 42       	st.w	r7[0x10],r2
80006b52:	0c 94       	mov	r4,r6
80006b54:	08 36       	cp.w	r6,r4
80006b56:	ec 04 17 30 	movlo	r4,r6
80006b5a:	06 9b       	mov	r11,r3
80006b5c:	08 9a       	mov	r10,r4
80006b5e:	6e 0c       	ld.w	r12,r7[0x0]
80006b60:	e0 a0 03 61 	rcall	80007222 <memmove>
80006b64:	6e 08       	ld.w	r8,r7[0x0]
80006b66:	08 08       	add	r8,r4
80006b68:	8f 08       	st.w	r7[0x0],r8
80006b6a:	6e 28       	ld.w	r8,r7[0x8]
80006b6c:	08 18       	sub	r8,r4
80006b6e:	0c 94       	mov	r4,r6
80006b70:	8f 28       	st.w	r7[0x8],r8
80006b72:	c3 08       	rjmp	80006bd2 <__sfvwrite_r+0x1b6>
80006b74:	08 36       	cp.w	r6,r4
80006b76:	5f ba       	srhi	r10
80006b78:	6e 0c       	ld.w	r12,r7[0x0]
80006b7a:	6e 48       	ld.w	r8,r7[0x10]
80006b7c:	10 3c       	cp.w	r12,r8
80006b7e:	5f b8       	srhi	r8
80006b80:	f5 e8 00 08 	and	r8,r10,r8
80006b84:	f2 08 18 00 	cp.b	r8,r9
80006b88:	c0 e0       	breq	80006ba4 <__sfvwrite_r+0x188>
80006b8a:	06 9b       	mov	r11,r3
80006b8c:	08 9a       	mov	r10,r4
80006b8e:	e0 a0 03 4a 	rcall	80007222 <memmove>
80006b92:	6e 08       	ld.w	r8,r7[0x0]
80006b94:	08 08       	add	r8,r4
80006b96:	0e 9b       	mov	r11,r7
80006b98:	8f 08       	st.w	r7[0x0],r8
80006b9a:	0a 9c       	mov	r12,r5
80006b9c:	fe b0 fd 08 	rcall	800065ac <_fflush_r>
80006ba0:	c1 90       	breq	80006bd2 <__sfvwrite_r+0x1b6>
80006ba2:	c8 48       	rjmp	80006caa <__sfvwrite_r+0x28e>
80006ba4:	6e 59       	ld.w	r9,r7[0x14]
80006ba6:	12 36       	cp.w	r6,r9
80006ba8:	c0 a3       	brcs	80006bbc <__sfvwrite_r+0x1a0>
80006baa:	6e a8       	ld.w	r8,r7[0x28]
80006bac:	06 9a       	mov	r10,r3
80006bae:	6e 8b       	ld.w	r11,r7[0x20]
80006bb0:	0a 9c       	mov	r12,r5
80006bb2:	5d 18       	icall	r8
80006bb4:	18 94       	mov	r4,r12
80006bb6:	e0 89 00 0e 	brgt	80006bd2 <__sfvwrite_r+0x1b6>
80006bba:	c7 88       	rjmp	80006caa <__sfvwrite_r+0x28e>
80006bbc:	0c 9a       	mov	r10,r6
80006bbe:	06 9b       	mov	r11,r3
80006bc0:	e0 a0 03 31 	rcall	80007222 <memmove>
80006bc4:	6e 08       	ld.w	r8,r7[0x0]
80006bc6:	0c 08       	add	r8,r6
80006bc8:	0c 94       	mov	r4,r6
80006bca:	8f 08       	st.w	r7[0x0],r8
80006bcc:	6e 28       	ld.w	r8,r7[0x8]
80006bce:	0c 18       	sub	r8,r6
80006bd0:	8f 28       	st.w	r7[0x8],r8
80006bd2:	62 28       	ld.w	r8,r1[0x8]
80006bd4:	08 18       	sub	r8,r4
80006bd6:	83 28       	st.w	r1[0x8],r8
80006bd8:	c6 e0       	breq	80006cb4 <__sfvwrite_r+0x298>
80006bda:	08 16       	sub	r6,r4
80006bdc:	08 03       	add	r3,r4
80006bde:	c6 fb       	rjmp	80006abc <__sfvwrite_r+0xa0>
80006be0:	60 03       	ld.w	r3,r0[0x0]
80006be2:	60 11       	ld.w	r1,r0[0x4]
80006be4:	30 08       	mov	r8,0
80006be6:	2f 80       	sub	r0,-8
80006be8:	50 08       	stdsp	sp[0x0],r8
80006bea:	58 01       	cp.w	r1,0
80006bec:	cf a0       	breq	80006be0 <__sfvwrite_r+0x1c4>
80006bee:	40 0a       	lddsp	r10,sp[0x0]
80006bf0:	58 0a       	cp.w	r10,0
80006bf2:	c1 51       	brne	80006c1c <__sfvwrite_r+0x200>
80006bf4:	e2 c6 ff ff 	sub	r6,r1,-1
80006bf8:	02 9a       	mov	r10,r1
80006bfa:	30 ab       	mov	r11,10
80006bfc:	06 9c       	mov	r12,r3
80006bfe:	e0 a0 03 07 	rcall	8000720c <memchr>
80006c02:	f8 c8 ff ff 	sub	r8,r12,-1
80006c06:	58 0c       	cp.w	r12,0
80006c08:	f1 d3 e1 16 	subne	r6,r8,r3
80006c0c:	f9 b9 01 01 	movne	r9,1
80006c10:	fb f9 1a 00 	st.wne	sp[0x0],r9
80006c14:	f9 b8 00 01 	moveq	r8,1
80006c18:	fb f8 0a 00 	st.weq	sp[0x0],r8
80006c1c:	02 36       	cp.w	r6,r1
80006c1e:	ec 04 17 80 	movls	r4,r6
80006c22:	e2 04 17 b0 	movhi	r4,r1
80006c26:	6e 59       	ld.w	r9,r7[0x14]
80006c28:	6e 25       	ld.w	r5,r7[0x8]
80006c2a:	f2 05 00 05 	add	r5,r9,r5
80006c2e:	0a 34       	cp.w	r4,r5
80006c30:	5f 9a       	srgt	r10
80006c32:	6e 0c       	ld.w	r12,r7[0x0]
80006c34:	6e 48       	ld.w	r8,r7[0x10]
80006c36:	10 3c       	cp.w	r12,r8
80006c38:	5f b8       	srhi	r8
80006c3a:	f5 e8 00 08 	and	r8,r10,r8
80006c3e:	30 0a       	mov	r10,0
80006c40:	f4 08 18 00 	cp.b	r8,r10
80006c44:	c0 e0       	breq	80006c60 <__sfvwrite_r+0x244>
80006c46:	06 9b       	mov	r11,r3
80006c48:	0a 9a       	mov	r10,r5
80006c4a:	e0 a0 02 ec 	rcall	80007222 <memmove>
80006c4e:	6e 08       	ld.w	r8,r7[0x0]
80006c50:	0a 08       	add	r8,r5
80006c52:	0e 9b       	mov	r11,r7
80006c54:	8f 08       	st.w	r7[0x0],r8
80006c56:	40 1c       	lddsp	r12,sp[0x4]
80006c58:	fe b0 fc aa 	rcall	800065ac <_fflush_r>
80006c5c:	c1 80       	breq	80006c8c <__sfvwrite_r+0x270>
80006c5e:	c2 68       	rjmp	80006caa <__sfvwrite_r+0x28e>
80006c60:	12 34       	cp.w	r4,r9
80006c62:	c0 a5       	brlt	80006c76 <__sfvwrite_r+0x25a>
80006c64:	6e a8       	ld.w	r8,r7[0x28]
80006c66:	06 9a       	mov	r10,r3
80006c68:	6e 8b       	ld.w	r11,r7[0x20]
80006c6a:	40 1c       	lddsp	r12,sp[0x4]
80006c6c:	5d 18       	icall	r8
80006c6e:	18 95       	mov	r5,r12
80006c70:	e0 89 00 0e 	brgt	80006c8c <__sfvwrite_r+0x270>
80006c74:	c1 b8       	rjmp	80006caa <__sfvwrite_r+0x28e>
80006c76:	08 9a       	mov	r10,r4
80006c78:	06 9b       	mov	r11,r3
80006c7a:	e0 a0 02 d4 	rcall	80007222 <memmove>
80006c7e:	6e 08       	ld.w	r8,r7[0x0]
80006c80:	08 08       	add	r8,r4
80006c82:	08 95       	mov	r5,r4
80006c84:	8f 08       	st.w	r7[0x0],r8
80006c86:	6e 28       	ld.w	r8,r7[0x8]
80006c88:	08 18       	sub	r8,r4
80006c8a:	8f 28       	st.w	r7[0x8],r8
80006c8c:	0a 16       	sub	r6,r5
80006c8e:	c0 71       	brne	80006c9c <__sfvwrite_r+0x280>
80006c90:	0e 9b       	mov	r11,r7
80006c92:	40 1c       	lddsp	r12,sp[0x4]
80006c94:	fe b0 fc 8c 	rcall	800065ac <_fflush_r>
80006c98:	c0 91       	brne	80006caa <__sfvwrite_r+0x28e>
80006c9a:	50 06       	stdsp	sp[0x0],r6
80006c9c:	64 28       	ld.w	r8,r2[0x8]
80006c9e:	0a 18       	sub	r8,r5
80006ca0:	85 28       	st.w	r2[0x8],r8
80006ca2:	c0 90       	breq	80006cb4 <__sfvwrite_r+0x298>
80006ca4:	0a 11       	sub	r1,r5
80006ca6:	0a 03       	add	r3,r5
80006ca8:	ca 1b       	rjmp	80006bea <__sfvwrite_r+0x1ce>
80006caa:	8e 68       	ld.sh	r8,r7[0xc]
80006cac:	a7 a8       	sbr	r8,0x6
80006cae:	ae 68       	st.h	r7[0xc],r8
80006cb0:	3f fc       	mov	r12,-1
80006cb2:	c0 28       	rjmp	80006cb6 <__sfvwrite_r+0x29a>
80006cb4:	30 0c       	mov	r12,0
80006cb6:	2f dd       	sub	sp,-12
80006cb8:	d8 32       	popm	r0-r7,pc
80006cba:	d7 03       	nop

80006cbc <_fwalk>:
80006cbc:	d4 31       	pushm	r0-r7,lr
80006cbe:	30 05       	mov	r5,0
80006cc0:	16 91       	mov	r1,r11
80006cc2:	f8 c7 ff 28 	sub	r7,r12,-216
80006cc6:	0a 92       	mov	r2,r5
80006cc8:	fe b0 fc f8 	rcall	800066b8 <__sfp_lock_acquire>
80006ccc:	3f f3       	mov	r3,-1
80006cce:	c1 68       	rjmp	80006cfa <_fwalk+0x3e>
80006cd0:	6e 26       	ld.w	r6,r7[0x8]
80006cd2:	6e 14       	ld.w	r4,r7[0x4]
80006cd4:	2f 46       	sub	r6,-12
80006cd6:	c0 c8       	rjmp	80006cee <_fwalk+0x32>
80006cd8:	8c 08       	ld.sh	r8,r6[0x0]
80006cda:	e4 08 19 00 	cp.h	r8,r2
80006cde:	c0 70       	breq	80006cec <_fwalk+0x30>
80006ce0:	8c 18       	ld.sh	r8,r6[0x2]
80006ce2:	e6 08 19 00 	cp.h	r8,r3
80006ce6:	c0 30       	breq	80006cec <_fwalk+0x30>
80006ce8:	5d 11       	icall	r1
80006cea:	18 45       	or	r5,r12
80006cec:	2a 46       	sub	r6,-92
80006cee:	20 14       	sub	r4,1
80006cf0:	ec cc 00 0c 	sub	r12,r6,12
80006cf4:	58 04       	cp.w	r4,0
80006cf6:	cf 14       	brge	80006cd8 <_fwalk+0x1c>
80006cf8:	6e 07       	ld.w	r7,r7[0x0]
80006cfa:	58 07       	cp.w	r7,0
80006cfc:	ce a1       	brne	80006cd0 <_fwalk+0x14>
80006cfe:	fe b0 fc de 	rcall	800066ba <__sfp_lock_release>
80006d02:	0a 9c       	mov	r12,r5
80006d04:	d8 32       	popm	r0-r7,pc
80006d06:	d7 03       	nop

80006d08 <_localeconv_r>:
80006d08:	fe cc d7 00 	sub	r12,pc,-10496
80006d0c:	5e fc       	retal	r12
80006d0e:	d7 03       	nop

80006d10 <__smakebuf_r>:
80006d10:	d4 21       	pushm	r4-r7,lr
80006d12:	20 fd       	sub	sp,60
80006d14:	96 68       	ld.sh	r8,r11[0xc]
80006d16:	16 97       	mov	r7,r11
80006d18:	18 96       	mov	r6,r12
80006d1a:	e2 18 00 02 	andl	r8,0x2,COH
80006d1e:	c3 c1       	brne	80006d96 <__smakebuf_r+0x86>
80006d20:	96 7b       	ld.sh	r11,r11[0xe]
80006d22:	f0 0b 19 00 	cp.h	r11,r8
80006d26:	c0 55       	brlt	80006d30 <__smakebuf_r+0x20>
80006d28:	1a 9a       	mov	r10,sp
80006d2a:	e0 a0 08 9d 	rcall	80007e64 <_fstat_r>
80006d2e:	c0 f4       	brge	80006d4c <__smakebuf_r+0x3c>
80006d30:	8e 65       	ld.sh	r5,r7[0xc]
80006d32:	0a 98       	mov	r8,r5
80006d34:	ab b8       	sbr	r8,0xb
80006d36:	e2 15 00 80 	andl	r5,0x80,COH
80006d3a:	ae 68       	st.h	r7[0xc],r8
80006d3c:	30 04       	mov	r4,0
80006d3e:	e0 68 04 00 	mov	r8,1024
80006d42:	f9 b5 01 40 	movne	r5,64
80006d46:	f0 05 17 00 	moveq	r5,r8
80006d4a:	c1 c8       	rjmp	80006d82 <__smakebuf_r+0x72>
80006d4c:	40 18       	lddsp	r8,sp[0x4]
80006d4e:	e2 18 f0 00 	andl	r8,0xf000,COH
80006d52:	e0 48 20 00 	cp.w	r8,8192
80006d56:	5f 04       	sreq	r4
80006d58:	e0 48 80 00 	cp.w	r8,32768
80006d5c:	c0 e1       	brne	80006d78 <__smakebuf_r+0x68>
80006d5e:	6e b9       	ld.w	r9,r7[0x2c]
80006d60:	fe c8 f1 e8 	sub	r8,pc,-3608
80006d64:	10 39       	cp.w	r9,r8
80006d66:	c0 91       	brne	80006d78 <__smakebuf_r+0x68>
80006d68:	8e 68       	ld.sh	r8,r7[0xc]
80006d6a:	e0 65 04 00 	mov	r5,1024
80006d6e:	ab a8       	sbr	r8,0xa
80006d70:	ef 45 00 50 	st.w	r7[80],r5
80006d74:	ae 68       	st.h	r7[0xc],r8
80006d76:	c0 68       	rjmp	80006d82 <__smakebuf_r+0x72>
80006d78:	8e 68       	ld.sh	r8,r7[0xc]
80006d7a:	e0 65 04 00 	mov	r5,1024
80006d7e:	ab b8       	sbr	r8,0xb
80006d80:	ae 68       	st.h	r7[0xc],r8
80006d82:	0a 9b       	mov	r11,r5
80006d84:	0c 9c       	mov	r12,r6
80006d86:	c2 bc       	rcall	80006ddc <_malloc_r>
80006d88:	8e 68       	ld.sh	r8,r7[0xc]
80006d8a:	c0 d1       	brne	80006da4 <__smakebuf_r+0x94>
80006d8c:	ed b8 00 09 	bld	r8,0x9
80006d90:	c1 b0       	breq	80006dc6 <__smakebuf_r+0xb6>
80006d92:	a1 b8       	sbr	r8,0x1
80006d94:	ae 68       	st.h	r7[0xc],r8
80006d96:	ee c8 ff b9 	sub	r8,r7,-71
80006d9a:	8f 48       	st.w	r7[0x10],r8
80006d9c:	8f 08       	st.w	r7[0x0],r8
80006d9e:	30 18       	mov	r8,1
80006da0:	8f 58       	st.w	r7[0x14],r8
80006da2:	c1 28       	rjmp	80006dc6 <__smakebuf_r+0xb6>
80006da4:	a7 b8       	sbr	r8,0x7
80006da6:	8f 4c       	st.w	r7[0x10],r12
80006da8:	ae 68       	st.h	r7[0xc],r8
80006daa:	8f 55       	st.w	r7[0x14],r5
80006dac:	fe c8 06 f0 	sub	r8,pc,1776
80006db0:	8f 0c       	st.w	r7[0x0],r12
80006db2:	8d a8       	st.w	r6[0x28],r8
80006db4:	58 04       	cp.w	r4,0
80006db6:	c0 80       	breq	80006dc6 <__smakebuf_r+0xb6>
80006db8:	8e 7c       	ld.sh	r12,r7[0xe]
80006dba:	e0 a0 07 47 	rcall	80007c48 <isatty>
80006dbe:	c0 40       	breq	80006dc6 <__smakebuf_r+0xb6>
80006dc0:	8e 68       	ld.sh	r8,r7[0xc]
80006dc2:	a1 a8       	sbr	r8,0x0
80006dc4:	ae 68       	st.h	r7[0xc],r8
80006dc6:	2f 1d       	sub	sp,-60
80006dc8:	d8 22       	popm	r4-r7,pc
80006dca:	d7 03       	nop

80006dcc <malloc>:
80006dcc:	d4 01       	pushm	lr
80006dce:	e0 68 01 00 	mov	r8,256
80006dd2:	18 9b       	mov	r11,r12
80006dd4:	70 0c       	ld.w	r12,r8[0x0]
80006dd6:	c0 3c       	rcall	80006ddc <_malloc_r>
80006dd8:	d8 02       	popm	pc
80006dda:	d7 03       	nop

80006ddc <_malloc_r>:
80006ddc:	d4 31       	pushm	r0-r7,lr
80006dde:	f6 c8 ff f5 	sub	r8,r11,-11
80006de2:	18 95       	mov	r5,r12
80006de4:	10 97       	mov	r7,r8
80006de6:	e0 17 ff f8 	andl	r7,0xfff8
80006dea:	59 68       	cp.w	r8,22
80006dec:	f9 b7 08 10 	movls	r7,16
80006df0:	16 37       	cp.w	r7,r11
80006df2:	5f 38       	srlo	r8
80006df4:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80006df8:	c0 50       	breq	80006e02 <_malloc_r+0x26>
80006dfa:	30 c8       	mov	r8,12
80006dfc:	99 38       	st.w	r12[0xc],r8
80006dfe:	e0 8f 01 f7 	bral	800071ec <_malloc_r+0x410>
80006e02:	e0 a0 02 36 	rcall	8000726e <__malloc_lock>
80006e06:	e0 47 01 f7 	cp.w	r7,503
80006e0a:	e0 8b 00 1d 	brhi	80006e44 <_malloc_r+0x68>
80006e0e:	ee 03 16 03 	lsr	r3,r7,0x3
80006e12:	e0 68 01 04 	mov	r8,260
80006e16:	f0 03 00 38 	add	r8,r8,r3<<0x3
80006e1a:	70 36       	ld.w	r6,r8[0xc]
80006e1c:	10 36       	cp.w	r6,r8
80006e1e:	c0 61       	brne	80006e2a <_malloc_r+0x4e>
80006e20:	ec c8 ff f8 	sub	r8,r6,-8
80006e24:	70 36       	ld.w	r6,r8[0xc]
80006e26:	10 36       	cp.w	r6,r8
80006e28:	c0 c0       	breq	80006e40 <_malloc_r+0x64>
80006e2a:	6c 18       	ld.w	r8,r6[0x4]
80006e2c:	e0 18 ff fc 	andl	r8,0xfffc
80006e30:	6c 3a       	ld.w	r10,r6[0xc]
80006e32:	ec 08 00 09 	add	r9,r6,r8
80006e36:	0a 9c       	mov	r12,r5
80006e38:	6c 28       	ld.w	r8,r6[0x8]
80006e3a:	95 28       	st.w	r10[0x8],r8
80006e3c:	91 3a       	st.w	r8[0xc],r10
80006e3e:	c4 78       	rjmp	80006ecc <_malloc_r+0xf0>
80006e40:	2f e3       	sub	r3,-2
80006e42:	c4 d8       	rjmp	80006edc <_malloc_r+0x100>
80006e44:	ee 03 16 09 	lsr	r3,r7,0x9
80006e48:	c0 41       	brne	80006e50 <_malloc_r+0x74>
80006e4a:	ee 03 16 03 	lsr	r3,r7,0x3
80006e4e:	c2 68       	rjmp	80006e9a <_malloc_r+0xbe>
80006e50:	58 43       	cp.w	r3,4
80006e52:	e0 8b 00 06 	brhi	80006e5e <_malloc_r+0x82>
80006e56:	ee 03 16 06 	lsr	r3,r7,0x6
80006e5a:	2c 83       	sub	r3,-56
80006e5c:	c1 f8       	rjmp	80006e9a <_malloc_r+0xbe>
80006e5e:	59 43       	cp.w	r3,20
80006e60:	e0 8b 00 04 	brhi	80006e68 <_malloc_r+0x8c>
80006e64:	2a 53       	sub	r3,-91
80006e66:	c1 a8       	rjmp	80006e9a <_malloc_r+0xbe>
80006e68:	e0 43 00 54 	cp.w	r3,84
80006e6c:	e0 8b 00 06 	brhi	80006e78 <_malloc_r+0x9c>
80006e70:	ee 03 16 0c 	lsr	r3,r7,0xc
80006e74:	29 23       	sub	r3,-110
80006e76:	c1 28       	rjmp	80006e9a <_malloc_r+0xbe>
80006e78:	e0 43 01 54 	cp.w	r3,340
80006e7c:	e0 8b 00 06 	brhi	80006e88 <_malloc_r+0xac>
80006e80:	ee 03 16 0f 	lsr	r3,r7,0xf
80006e84:	28 93       	sub	r3,-119
80006e86:	c0 a8       	rjmp	80006e9a <_malloc_r+0xbe>
80006e88:	e0 43 05 54 	cp.w	r3,1364
80006e8c:	e0 88 00 04 	brls	80006e94 <_malloc_r+0xb8>
80006e90:	37 e3       	mov	r3,126
80006e92:	c0 48       	rjmp	80006e9a <_malloc_r+0xbe>
80006e94:	ee 03 16 12 	lsr	r3,r7,0x12
80006e98:	28 43       	sub	r3,-124
80006e9a:	e0 6a 01 04 	mov	r10,260
80006e9e:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80006ea2:	74 36       	ld.w	r6,r10[0xc]
80006ea4:	c1 98       	rjmp	80006ed6 <_malloc_r+0xfa>
80006ea6:	6c 19       	ld.w	r9,r6[0x4]
80006ea8:	e0 19 ff fc 	andl	r9,0xfffc
80006eac:	f2 07 01 0b 	sub	r11,r9,r7
80006eb0:	58 fb       	cp.w	r11,15
80006eb2:	e0 8a 00 04 	brle	80006eba <_malloc_r+0xde>
80006eb6:	20 13       	sub	r3,1
80006eb8:	c1 18       	rjmp	80006eda <_malloc_r+0xfe>
80006eba:	6c 38       	ld.w	r8,r6[0xc]
80006ebc:	58 0b       	cp.w	r11,0
80006ebe:	c0 b5       	brlt	80006ed4 <_malloc_r+0xf8>
80006ec0:	6c 2a       	ld.w	r10,r6[0x8]
80006ec2:	ec 09 00 09 	add	r9,r6,r9
80006ec6:	0a 9c       	mov	r12,r5
80006ec8:	91 2a       	st.w	r8[0x8],r10
80006eca:	95 38       	st.w	r10[0xc],r8
80006ecc:	72 18       	ld.w	r8,r9[0x4]
80006ece:	a1 a8       	sbr	r8,0x0
80006ed0:	93 18       	st.w	r9[0x4],r8
80006ed2:	cb c8       	rjmp	8000704a <_malloc_r+0x26e>
80006ed4:	10 96       	mov	r6,r8
80006ed6:	14 36       	cp.w	r6,r10
80006ed8:	ce 71       	brne	80006ea6 <_malloc_r+0xca>
80006eda:	2f f3       	sub	r3,-1
80006edc:	e0 6a 01 04 	mov	r10,260
80006ee0:	f4 cc ff f8 	sub	r12,r10,-8
80006ee4:	78 26       	ld.w	r6,r12[0x8]
80006ee6:	18 36       	cp.w	r6,r12
80006ee8:	c6 c0       	breq	80006fc0 <_malloc_r+0x1e4>
80006eea:	6c 19       	ld.w	r9,r6[0x4]
80006eec:	e0 19 ff fc 	andl	r9,0xfffc
80006ef0:	f2 07 01 08 	sub	r8,r9,r7
80006ef4:	58 f8       	cp.w	r8,15
80006ef6:	e0 89 00 8f 	brgt	80007014 <_malloc_r+0x238>
80006efa:	99 3c       	st.w	r12[0xc],r12
80006efc:	99 2c       	st.w	r12[0x8],r12
80006efe:	58 08       	cp.w	r8,0
80006f00:	c0 55       	brlt	80006f0a <_malloc_r+0x12e>
80006f02:	ec 09 00 09 	add	r9,r6,r9
80006f06:	0a 9c       	mov	r12,r5
80006f08:	ce 2b       	rjmp	80006ecc <_malloc_r+0xf0>
80006f0a:	e0 49 01 ff 	cp.w	r9,511
80006f0e:	e0 8b 00 13 	brhi	80006f34 <_malloc_r+0x158>
80006f12:	a3 99       	lsr	r9,0x3
80006f14:	f4 09 00 38 	add	r8,r10,r9<<0x3
80006f18:	70 2b       	ld.w	r11,r8[0x8]
80006f1a:	8d 38       	st.w	r6[0xc],r8
80006f1c:	8d 2b       	st.w	r6[0x8],r11
80006f1e:	97 36       	st.w	r11[0xc],r6
80006f20:	91 26       	st.w	r8[0x8],r6
80006f22:	a3 49       	asr	r9,0x2
80006f24:	74 18       	ld.w	r8,r10[0x4]
80006f26:	30 1b       	mov	r11,1
80006f28:	f6 09 09 49 	lsl	r9,r11,r9
80006f2c:	f1 e9 10 09 	or	r9,r8,r9
80006f30:	95 19       	st.w	r10[0x4],r9
80006f32:	c4 78       	rjmp	80006fc0 <_malloc_r+0x1e4>
80006f34:	f2 0a 16 09 	lsr	r10,r9,0x9
80006f38:	58 4a       	cp.w	r10,4
80006f3a:	e0 8b 00 07 	brhi	80006f48 <_malloc_r+0x16c>
80006f3e:	f2 0a 16 06 	lsr	r10,r9,0x6
80006f42:	2c 8a       	sub	r10,-56
80006f44:	c2 08       	rjmp	80006f84 <_malloc_r+0x1a8>
80006f46:	d7 03       	nop
80006f48:	59 4a       	cp.w	r10,20
80006f4a:	e0 8b 00 04 	brhi	80006f52 <_malloc_r+0x176>
80006f4e:	2a 5a       	sub	r10,-91
80006f50:	c1 a8       	rjmp	80006f84 <_malloc_r+0x1a8>
80006f52:	e0 4a 00 54 	cp.w	r10,84
80006f56:	e0 8b 00 06 	brhi	80006f62 <_malloc_r+0x186>
80006f5a:	f2 0a 16 0c 	lsr	r10,r9,0xc
80006f5e:	29 2a       	sub	r10,-110
80006f60:	c1 28       	rjmp	80006f84 <_malloc_r+0x1a8>
80006f62:	e0 4a 01 54 	cp.w	r10,340
80006f66:	e0 8b 00 06 	brhi	80006f72 <_malloc_r+0x196>
80006f6a:	f2 0a 16 0f 	lsr	r10,r9,0xf
80006f6e:	28 9a       	sub	r10,-119
80006f70:	c0 a8       	rjmp	80006f84 <_malloc_r+0x1a8>
80006f72:	e0 4a 05 54 	cp.w	r10,1364
80006f76:	e0 88 00 04 	brls	80006f7e <_malloc_r+0x1a2>
80006f7a:	37 ea       	mov	r10,126
80006f7c:	c0 48       	rjmp	80006f84 <_malloc_r+0x1a8>
80006f7e:	f2 0a 16 12 	lsr	r10,r9,0x12
80006f82:	28 4a       	sub	r10,-124
80006f84:	e0 6b 01 04 	mov	r11,260
80006f88:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80006f8c:	68 28       	ld.w	r8,r4[0x8]
80006f8e:	08 38       	cp.w	r8,r4
80006f90:	c0 e1       	brne	80006fac <_malloc_r+0x1d0>
80006f92:	76 19       	ld.w	r9,r11[0x4]
80006f94:	a3 4a       	asr	r10,0x2
80006f96:	30 1e       	mov	lr,1
80006f98:	fc 0a 09 4a 	lsl	r10,lr,r10
80006f9c:	f3 ea 10 0a 	or	r10,r9,r10
80006fa0:	10 99       	mov	r9,r8
80006fa2:	97 1a       	st.w	r11[0x4],r10
80006fa4:	c0 a8       	rjmp	80006fb8 <_malloc_r+0x1dc>
80006fa6:	70 28       	ld.w	r8,r8[0x8]
80006fa8:	08 38       	cp.w	r8,r4
80006faa:	c0 60       	breq	80006fb6 <_malloc_r+0x1da>
80006fac:	70 1a       	ld.w	r10,r8[0x4]
80006fae:	e0 1a ff fc 	andl	r10,0xfffc
80006fb2:	14 39       	cp.w	r9,r10
80006fb4:	cf 93       	brcs	80006fa6 <_malloc_r+0x1ca>
80006fb6:	70 39       	ld.w	r9,r8[0xc]
80006fb8:	8d 39       	st.w	r6[0xc],r9
80006fba:	8d 28       	st.w	r6[0x8],r8
80006fbc:	91 36       	st.w	r8[0xc],r6
80006fbe:	93 26       	st.w	r9[0x8],r6
80006fc0:	e6 08 14 02 	asr	r8,r3,0x2
80006fc4:	30 1b       	mov	r11,1
80006fc6:	e0 64 01 04 	mov	r4,260
80006fca:	f6 08 09 4b 	lsl	r11,r11,r8
80006fce:	68 18       	ld.w	r8,r4[0x4]
80006fd0:	10 3b       	cp.w	r11,r8
80006fd2:	e0 8b 00 69 	brhi	800070a4 <_malloc_r+0x2c8>
80006fd6:	f7 e8 00 09 	and	r9,r11,r8
80006fda:	c0 b1       	brne	80006ff0 <_malloc_r+0x214>
80006fdc:	e0 13 ff fc 	andl	r3,0xfffc
80006fe0:	a1 7b       	lsl	r11,0x1
80006fe2:	2f c3       	sub	r3,-4
80006fe4:	c0 38       	rjmp	80006fea <_malloc_r+0x20e>
80006fe6:	2f c3       	sub	r3,-4
80006fe8:	a1 7b       	lsl	r11,0x1
80006fea:	f7 e8 00 09 	and	r9,r11,r8
80006fee:	cf c0       	breq	80006fe6 <_malloc_r+0x20a>
80006ff0:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80006ff4:	06 92       	mov	r2,r3
80006ff6:	1c 91       	mov	r1,lr
80006ff8:	62 36       	ld.w	r6,r1[0xc]
80006ffa:	c2 d8       	rjmp	80007054 <_malloc_r+0x278>
80006ffc:	6c 1a       	ld.w	r10,r6[0x4]
80006ffe:	e0 1a ff fc 	andl	r10,0xfffc
80007002:	f4 07 01 08 	sub	r8,r10,r7
80007006:	58 f8       	cp.w	r8,15
80007008:	e0 8a 00 15 	brle	80007032 <_malloc_r+0x256>
8000700c:	6c 3a       	ld.w	r10,r6[0xc]
8000700e:	6c 29       	ld.w	r9,r6[0x8]
80007010:	95 29       	st.w	r10[0x8],r9
80007012:	93 3a       	st.w	r9[0xc],r10
80007014:	0e 99       	mov	r9,r7
80007016:	ec 07 00 07 	add	r7,r6,r7
8000701a:	a1 a9       	sbr	r9,0x0
8000701c:	99 37       	st.w	r12[0xc],r7
8000701e:	99 27       	st.w	r12[0x8],r7
80007020:	8d 19       	st.w	r6[0x4],r9
80007022:	ee 08 09 08 	st.w	r7[r8],r8
80007026:	8f 2c       	st.w	r7[0x8],r12
80007028:	8f 3c       	st.w	r7[0xc],r12
8000702a:	a1 a8       	sbr	r8,0x0
8000702c:	0a 9c       	mov	r12,r5
8000702e:	8f 18       	st.w	r7[0x4],r8
80007030:	c0 d8       	rjmp	8000704a <_malloc_r+0x26e>
80007032:	6c 39       	ld.w	r9,r6[0xc]
80007034:	58 08       	cp.w	r8,0
80007036:	c0 e5       	brlt	80007052 <_malloc_r+0x276>
80007038:	ec 0a 00 0a 	add	r10,r6,r10
8000703c:	74 18       	ld.w	r8,r10[0x4]
8000703e:	a1 a8       	sbr	r8,0x0
80007040:	0a 9c       	mov	r12,r5
80007042:	95 18       	st.w	r10[0x4],r8
80007044:	6c 28       	ld.w	r8,r6[0x8]
80007046:	93 28       	st.w	r9[0x8],r8
80007048:	91 39       	st.w	r8[0xc],r9
8000704a:	c1 3d       	rcall	80007270 <__malloc_unlock>
8000704c:	ec cc ff f8 	sub	r12,r6,-8
80007050:	d8 32       	popm	r0-r7,pc
80007052:	12 96       	mov	r6,r9
80007054:	02 36       	cp.w	r6,r1
80007056:	cd 31       	brne	80006ffc <_malloc_r+0x220>
80007058:	2f f2       	sub	r2,-1
8000705a:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
8000705e:	c0 30       	breq	80007064 <_malloc_r+0x288>
80007060:	2f 81       	sub	r1,-8
80007062:	cc bb       	rjmp	80006ff8 <_malloc_r+0x21c>
80007064:	1c 98       	mov	r8,lr
80007066:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
8000706a:	c0 81       	brne	8000707a <_malloc_r+0x29e>
8000706c:	68 19       	ld.w	r9,r4[0x4]
8000706e:	f6 08 11 ff 	rsub	r8,r11,-1
80007072:	f3 e8 00 08 	and	r8,r9,r8
80007076:	89 18       	st.w	r4[0x4],r8
80007078:	c0 78       	rjmp	80007086 <_malloc_r+0x2aa>
8000707a:	f0 c9 00 08 	sub	r9,r8,8
8000707e:	20 13       	sub	r3,1
80007080:	70 08       	ld.w	r8,r8[0x0]
80007082:	12 38       	cp.w	r8,r9
80007084:	cf 10       	breq	80007066 <_malloc_r+0x28a>
80007086:	a1 7b       	lsl	r11,0x1
80007088:	68 18       	ld.w	r8,r4[0x4]
8000708a:	10 3b       	cp.w	r11,r8
8000708c:	e0 8b 00 0c 	brhi	800070a4 <_malloc_r+0x2c8>
80007090:	58 0b       	cp.w	r11,0
80007092:	c0 90       	breq	800070a4 <_malloc_r+0x2c8>
80007094:	04 93       	mov	r3,r2
80007096:	c0 38       	rjmp	8000709c <_malloc_r+0x2c0>
80007098:	2f c3       	sub	r3,-4
8000709a:	a1 7b       	lsl	r11,0x1
8000709c:	f7 e8 00 09 	and	r9,r11,r8
800070a0:	ca 81       	brne	80006ff0 <_malloc_r+0x214>
800070a2:	cf bb       	rjmp	80007098 <_malloc_r+0x2bc>
800070a4:	68 23       	ld.w	r3,r4[0x8]
800070a6:	66 12       	ld.w	r2,r3[0x4]
800070a8:	e0 12 ff fc 	andl	r2,0xfffc
800070ac:	0e 32       	cp.w	r2,r7
800070ae:	5f 39       	srlo	r9
800070b0:	e4 07 01 08 	sub	r8,r2,r7
800070b4:	58 f8       	cp.w	r8,15
800070b6:	5f aa       	srle	r10
800070b8:	f5 e9 10 09 	or	r9,r10,r9
800070bc:	e0 80 00 9a 	breq	800071f0 <_malloc_r+0x414>
800070c0:	e0 68 06 30 	mov	r8,1584
800070c4:	70 01       	ld.w	r1,r8[0x0]
800070c6:	e0 68 05 10 	mov	r8,1296
800070ca:	2f 01       	sub	r1,-16
800070cc:	70 08       	ld.w	r8,r8[0x0]
800070ce:	0e 01       	add	r1,r7
800070d0:	5b f8       	cp.w	r8,-1
800070d2:	c0 40       	breq	800070da <_malloc_r+0x2fe>
800070d4:	28 11       	sub	r1,-127
800070d6:	e0 11 ff 80 	andl	r1,0xff80
800070da:	02 9b       	mov	r11,r1
800070dc:	0a 9c       	mov	r12,r5
800070de:	e0 a0 05 39 	rcall	80007b50 <_sbrk_r>
800070e2:	18 96       	mov	r6,r12
800070e4:	5b fc       	cp.w	r12,-1
800070e6:	c7 50       	breq	800071d0 <_malloc_r+0x3f4>
800070e8:	e6 02 00 08 	add	r8,r3,r2
800070ec:	10 3c       	cp.w	r12,r8
800070ee:	c0 32       	brcc	800070f4 <_malloc_r+0x318>
800070f0:	08 33       	cp.w	r3,r4
800070f2:	c6 f1       	brne	800071d0 <_malloc_r+0x3f4>
800070f4:	e0 6a 06 34 	mov	r10,1588
800070f8:	74 09       	ld.w	r9,r10[0x0]
800070fa:	e2 09 00 09 	add	r9,r1,r9
800070fe:	95 09       	st.w	r10[0x0],r9
80007100:	10 36       	cp.w	r6,r8
80007102:	c0 a1       	brne	80007116 <_malloc_r+0x33a>
80007104:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80007108:	c0 71       	brne	80007116 <_malloc_r+0x33a>
8000710a:	e2 02 00 02 	add	r2,r1,r2
8000710e:	68 28       	ld.w	r8,r4[0x8]
80007110:	a1 a2       	sbr	r2,0x0
80007112:	91 12       	st.w	r8[0x4],r2
80007114:	c4 f8       	rjmp	800071b2 <_malloc_r+0x3d6>
80007116:	e0 6a 05 10 	mov	r10,1296
8000711a:	74 0b       	ld.w	r11,r10[0x0]
8000711c:	5b fb       	cp.w	r11,-1
8000711e:	c0 31       	brne	80007124 <_malloc_r+0x348>
80007120:	95 06       	st.w	r10[0x0],r6
80007122:	c0 78       	rjmp	80007130 <_malloc_r+0x354>
80007124:	ec 09 00 09 	add	r9,r6,r9
80007128:	e0 6a 06 34 	mov	r10,1588
8000712c:	10 19       	sub	r9,r8
8000712e:	95 09       	st.w	r10[0x0],r9
80007130:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80007134:	f0 09 11 08 	rsub	r9,r8,8
80007138:	58 08       	cp.w	r8,0
8000713a:	f2 08 17 10 	movne	r8,r9
8000713e:	ed d8 e1 06 	addne	r6,r6,r8
80007142:	28 08       	sub	r8,-128
80007144:	ec 01 00 01 	add	r1,r6,r1
80007148:	0a 9c       	mov	r12,r5
8000714a:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
8000714e:	f0 01 01 01 	sub	r1,r8,r1
80007152:	02 9b       	mov	r11,r1
80007154:	e0 a0 04 fe 	rcall	80007b50 <_sbrk_r>
80007158:	e0 68 06 34 	mov	r8,1588
8000715c:	5b fc       	cp.w	r12,-1
8000715e:	ec 0c 17 00 	moveq	r12,r6
80007162:	f9 b1 00 00 	moveq	r1,0
80007166:	70 09       	ld.w	r9,r8[0x0]
80007168:	0c 1c       	sub	r12,r6
8000716a:	89 26       	st.w	r4[0x8],r6
8000716c:	02 0c       	add	r12,r1
8000716e:	12 01       	add	r1,r9
80007170:	a1 ac       	sbr	r12,0x0
80007172:	91 01       	st.w	r8[0x0],r1
80007174:	8d 1c       	st.w	r6[0x4],r12
80007176:	08 33       	cp.w	r3,r4
80007178:	c1 d0       	breq	800071b2 <_malloc_r+0x3d6>
8000717a:	58 f2       	cp.w	r2,15
8000717c:	e0 8b 00 05 	brhi	80007186 <_malloc_r+0x3aa>
80007180:	30 18       	mov	r8,1
80007182:	8d 18       	st.w	r6[0x4],r8
80007184:	c2 68       	rjmp	800071d0 <_malloc_r+0x3f4>
80007186:	30 59       	mov	r9,5
80007188:	20 c2       	sub	r2,12
8000718a:	e0 12 ff f8 	andl	r2,0xfff8
8000718e:	e6 02 00 08 	add	r8,r3,r2
80007192:	91 29       	st.w	r8[0x8],r9
80007194:	91 19       	st.w	r8[0x4],r9
80007196:	66 18       	ld.w	r8,r3[0x4]
80007198:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000719c:	e5 e8 10 08 	or	r8,r2,r8
800071a0:	87 18       	st.w	r3[0x4],r8
800071a2:	58 f2       	cp.w	r2,15
800071a4:	e0 88 00 07 	brls	800071b2 <_malloc_r+0x3d6>
800071a8:	e6 cb ff f8 	sub	r11,r3,-8
800071ac:	0a 9c       	mov	r12,r5
800071ae:	fe b0 fb 71 	rcall	80006890 <_free_r>
800071b2:	e0 69 06 2c 	mov	r9,1580
800071b6:	72 0a       	ld.w	r10,r9[0x0]
800071b8:	e0 68 06 34 	mov	r8,1588
800071bc:	70 08       	ld.w	r8,r8[0x0]
800071be:	14 38       	cp.w	r8,r10
800071c0:	f3 f8 ba 00 	st.whi	r9[0x0],r8
800071c4:	e0 69 06 28 	mov	r9,1576
800071c8:	72 0a       	ld.w	r10,r9[0x0]
800071ca:	14 38       	cp.w	r8,r10
800071cc:	f3 f8 ba 00 	st.whi	r9[0x0],r8
800071d0:	68 28       	ld.w	r8,r4[0x8]
800071d2:	70 18       	ld.w	r8,r8[0x4]
800071d4:	e0 18 ff fc 	andl	r8,0xfffc
800071d8:	0e 38       	cp.w	r8,r7
800071da:	5f 39       	srlo	r9
800071dc:	0e 18       	sub	r8,r7
800071de:	58 f8       	cp.w	r8,15
800071e0:	5f aa       	srle	r10
800071e2:	f5 e9 10 09 	or	r9,r10,r9
800071e6:	c0 50       	breq	800071f0 <_malloc_r+0x414>
800071e8:	0a 9c       	mov	r12,r5
800071ea:	c4 3c       	rcall	80007270 <__malloc_unlock>
800071ec:	d8 3a       	popm	r0-r7,pc,r12=0
800071ee:	d7 03       	nop
800071f0:	68 26       	ld.w	r6,r4[0x8]
800071f2:	a1 a8       	sbr	r8,0x0
800071f4:	0e 99       	mov	r9,r7
800071f6:	a1 a9       	sbr	r9,0x0
800071f8:	8d 19       	st.w	r6[0x4],r9
800071fa:	ec 07 00 07 	add	r7,r6,r7
800071fe:	0a 9c       	mov	r12,r5
80007200:	89 27       	st.w	r4[0x8],r7
80007202:	8f 18       	st.w	r7[0x4],r8
80007204:	c3 6c       	rcall	80007270 <__malloc_unlock>
80007206:	ec cc ff f8 	sub	r12,r6,-8
8000720a:	d8 32       	popm	r0-r7,pc

8000720c <memchr>:
8000720c:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
80007210:	c0 68       	rjmp	8000721c <memchr+0x10>
80007212:	20 1a       	sub	r10,1
80007214:	19 88       	ld.ub	r8,r12[0x0]
80007216:	16 38       	cp.w	r8,r11
80007218:	5e 0c       	reteq	r12
8000721a:	2f fc       	sub	r12,-1
8000721c:	58 0a       	cp.w	r10,0
8000721e:	cf a1       	brne	80007212 <memchr+0x6>
80007220:	5e fa       	retal	r10

80007222 <memmove>:
80007222:	d4 01       	pushm	lr
80007224:	18 3b       	cp.w	r11,r12
80007226:	c1 92       	brcc	80007258 <memmove+0x36>
80007228:	f6 0a 00 09 	add	r9,r11,r10
8000722c:	12 3c       	cp.w	r12,r9
8000722e:	c1 52       	brcc	80007258 <memmove+0x36>
80007230:	f8 0a 00 0b 	add	r11,r12,r10
80007234:	30 08       	mov	r8,0
80007236:	c0 68       	rjmp	80007242 <memmove+0x20>
80007238:	f2 08 07 0e 	ld.ub	lr,r9[r8]
8000723c:	20 1a       	sub	r10,1
8000723e:	f6 08 0b 0e 	st.b	r11[r8],lr
80007242:	20 18       	sub	r8,1
80007244:	58 0a       	cp.w	r10,0
80007246:	cf 91       	brne	80007238 <memmove+0x16>
80007248:	d8 02       	popm	pc
8000724a:	f6 08 07 09 	ld.ub	r9,r11[r8]
8000724e:	20 1a       	sub	r10,1
80007250:	f8 08 0b 09 	st.b	r12[r8],r9
80007254:	2f f8       	sub	r8,-1
80007256:	c0 28       	rjmp	8000725a <memmove+0x38>
80007258:	30 08       	mov	r8,0
8000725a:	58 0a       	cp.w	r10,0
8000725c:	cf 71       	brne	8000724a <memmove+0x28>
8000725e:	d8 02       	popm	pc

80007260 <memset>:
80007260:	18 98       	mov	r8,r12
80007262:	c0 38       	rjmp	80007268 <memset+0x8>
80007264:	10 cb       	st.b	r8++,r11
80007266:	20 1a       	sub	r10,1
80007268:	58 0a       	cp.w	r10,0
8000726a:	cf d1       	brne	80007264 <memset+0x4>
8000726c:	5e fc       	retal	r12

8000726e <__malloc_lock>:
8000726e:	5e fc       	retal	r12

80007270 <__malloc_unlock>:
80007270:	5e fc       	retal	r12

80007272 <__hi0bits>:
80007272:	18 98       	mov	r8,r12
80007274:	e0 1c 00 00 	andl	r12,0x0
80007278:	f0 09 15 10 	lsl	r9,r8,0x10
8000727c:	58 0c       	cp.w	r12,0
8000727e:	f2 08 17 00 	moveq	r8,r9
80007282:	f9 bc 00 10 	moveq	r12,16
80007286:	f9 bc 01 00 	movne	r12,0
8000728a:	10 9a       	mov	r10,r8
8000728c:	f0 09 15 08 	lsl	r9,r8,0x8
80007290:	e6 1a ff 00 	andh	r10,0xff00,COH
80007294:	f7 bc 00 f8 	subeq	r12,-8
80007298:	f2 08 17 00 	moveq	r8,r9
8000729c:	10 9a       	mov	r10,r8
8000729e:	f0 09 15 04 	lsl	r9,r8,0x4
800072a2:	e6 1a f0 00 	andh	r10,0xf000,COH
800072a6:	f7 bc 00 fc 	subeq	r12,-4
800072aa:	f2 08 17 00 	moveq	r8,r9
800072ae:	10 9a       	mov	r10,r8
800072b0:	f0 09 15 02 	lsl	r9,r8,0x2
800072b4:	e6 1a c0 00 	andh	r10,0xc000,COH
800072b8:	f7 bc 00 fe 	subeq	r12,-2
800072bc:	f2 08 17 00 	moveq	r8,r9
800072c0:	58 08       	cp.w	r8,0
800072c2:	5e 5c       	retlt	r12
800072c4:	ed b8 00 1e 	bld	r8,0x1e
800072c8:	f9 bc 01 20 	movne	r12,32
800072cc:	f7 bc 00 ff 	subeq	r12,-1
800072d0:	5e fc       	retal	r12

800072d2 <__lo0bits>:
800072d2:	18 99       	mov	r9,r12
800072d4:	78 08       	ld.w	r8,r12[0x0]
800072d6:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
800072da:	c1 50       	breq	80007304 <__lo0bits+0x32>
800072dc:	ed b8 00 00 	bld	r8,0x0
800072e0:	c0 21       	brne	800072e4 <__lo0bits+0x12>
800072e2:	5e fd       	retal	0
800072e4:	10 9b       	mov	r11,r8
800072e6:	f0 0a 16 01 	lsr	r10,r8,0x1
800072ea:	e2 1b 00 02 	andl	r11,0x2,COH
800072ee:	a3 88       	lsr	r8,0x2
800072f0:	58 0b       	cp.w	r11,0
800072f2:	f3 fa 1a 00 	st.wne	r9[0x0],r10
800072f6:	f9 bc 01 01 	movne	r12,1
800072fa:	f3 f8 0a 00 	st.weq	r9[0x0],r8
800072fe:	f9 bc 00 02 	moveq	r12,2
80007302:	5e fc       	retal	r12
80007304:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80007308:	f0 0b 16 10 	lsr	r11,r8,0x10
8000730c:	58 0a       	cp.w	r10,0
8000730e:	f6 08 17 00 	moveq	r8,r11
80007312:	f9 bc 00 10 	moveq	r12,16
80007316:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
8000731a:	f0 0a 16 08 	lsr	r10,r8,0x8
8000731e:	58 0b       	cp.w	r11,0
80007320:	f7 bc 00 f8 	subeq	r12,-8
80007324:	f4 08 17 00 	moveq	r8,r10
80007328:	f7 d8 c0 04 	bfextu	r11,r8,0x0,0x4
8000732c:	f0 0a 16 04 	lsr	r10,r8,0x4
80007330:	58 0b       	cp.w	r11,0
80007332:	f7 bc 00 fc 	subeq	r12,-4
80007336:	f4 08 17 00 	moveq	r8,r10
8000733a:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
8000733e:	f0 0a 16 02 	lsr	r10,r8,0x2
80007342:	58 0b       	cp.w	r11,0
80007344:	f7 bc 00 fe 	subeq	r12,-2
80007348:	f4 08 17 00 	moveq	r8,r10
8000734c:	ed b8 00 00 	bld	r8,0x0
80007350:	c0 60       	breq	8000735c <__lo0bits+0x8a>
80007352:	a1 98       	lsr	r8,0x1
80007354:	c0 31       	brne	8000735a <__lo0bits+0x88>
80007356:	32 0c       	mov	r12,32
80007358:	5e fc       	retal	r12
8000735a:	2f fc       	sub	r12,-1
8000735c:	93 08       	st.w	r9[0x0],r8
8000735e:	5e fc       	retal	r12

80007360 <__mcmp>:
80007360:	d4 01       	pushm	lr
80007362:	18 98       	mov	r8,r12
80007364:	76 49       	ld.w	r9,r11[0x10]
80007366:	78 4c       	ld.w	r12,r12[0x10]
80007368:	12 1c       	sub	r12,r9
8000736a:	c1 31       	brne	80007390 <__mcmp+0x30>
8000736c:	2f b9       	sub	r9,-5
8000736e:	a3 69       	lsl	r9,0x2
80007370:	12 0b       	add	r11,r9
80007372:	f0 09 00 09 	add	r9,r8,r9
80007376:	2e c8       	sub	r8,-20
80007378:	13 4e       	ld.w	lr,--r9
8000737a:	17 4a       	ld.w	r10,--r11
8000737c:	14 3e       	cp.w	lr,r10
8000737e:	c0 60       	breq	8000738a <__mcmp+0x2a>
80007380:	f9 bc 03 ff 	movlo	r12,-1
80007384:	f9 bc 02 01 	movhs	r12,1
80007388:	d8 02       	popm	pc
8000738a:	10 39       	cp.w	r9,r8
8000738c:	fe 9b ff f6 	brhi	80007378 <__mcmp+0x18>
80007390:	d8 02       	popm	pc
80007392:	d7 03       	nop

80007394 <_Bfree>:
80007394:	d4 21       	pushm	r4-r7,lr
80007396:	18 97       	mov	r7,r12
80007398:	16 95       	mov	r5,r11
8000739a:	78 96       	ld.w	r6,r12[0x24]
8000739c:	58 06       	cp.w	r6,0
8000739e:	c0 91       	brne	800073b0 <_Bfree+0x1c>
800073a0:	31 0c       	mov	r12,16
800073a2:	fe b0 fd 15 	rcall	80006dcc <malloc>
800073a6:	99 36       	st.w	r12[0xc],r6
800073a8:	8f 9c       	st.w	r7[0x24],r12
800073aa:	99 16       	st.w	r12[0x4],r6
800073ac:	99 26       	st.w	r12[0x8],r6
800073ae:	99 06       	st.w	r12[0x0],r6
800073b0:	58 05       	cp.w	r5,0
800073b2:	c0 90       	breq	800073c4 <_Bfree+0x30>
800073b4:	6a 19       	ld.w	r9,r5[0x4]
800073b6:	6e 98       	ld.w	r8,r7[0x24]
800073b8:	70 38       	ld.w	r8,r8[0xc]
800073ba:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
800073be:	8b 0a       	st.w	r5[0x0],r10
800073c0:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
800073c4:	d8 22       	popm	r4-r7,pc
800073c6:	d7 03       	nop

800073c8 <_Balloc>:
800073c8:	d4 21       	pushm	r4-r7,lr
800073ca:	18 97       	mov	r7,r12
800073cc:	16 96       	mov	r6,r11
800073ce:	78 95       	ld.w	r5,r12[0x24]
800073d0:	58 05       	cp.w	r5,0
800073d2:	c0 91       	brne	800073e4 <_Balloc+0x1c>
800073d4:	31 0c       	mov	r12,16
800073d6:	fe b0 fc fb 	rcall	80006dcc <malloc>
800073da:	99 35       	st.w	r12[0xc],r5
800073dc:	8f 9c       	st.w	r7[0x24],r12
800073de:	99 15       	st.w	r12[0x4],r5
800073e0:	99 25       	st.w	r12[0x8],r5
800073e2:	99 05       	st.w	r12[0x0],r5
800073e4:	6e 95       	ld.w	r5,r7[0x24]
800073e6:	6a 38       	ld.w	r8,r5[0xc]
800073e8:	58 08       	cp.w	r8,0
800073ea:	c0 b1       	brne	80007400 <_Balloc+0x38>
800073ec:	31 0a       	mov	r10,16
800073ee:	30 4b       	mov	r11,4
800073f0:	0e 9c       	mov	r12,r7
800073f2:	e0 a0 04 93 	rcall	80007d18 <_calloc_r>
800073f6:	8b 3c       	st.w	r5[0xc],r12
800073f8:	6e 98       	ld.w	r8,r7[0x24]
800073fa:	70 3c       	ld.w	r12,r8[0xc]
800073fc:	58 0c       	cp.w	r12,0
800073fe:	c1 b0       	breq	80007434 <_Balloc+0x6c>
80007400:	6e 98       	ld.w	r8,r7[0x24]
80007402:	70 38       	ld.w	r8,r8[0xc]
80007404:	f0 06 00 28 	add	r8,r8,r6<<0x2
80007408:	70 0c       	ld.w	r12,r8[0x0]
8000740a:	58 0c       	cp.w	r12,0
8000740c:	c0 40       	breq	80007414 <_Balloc+0x4c>
8000740e:	78 09       	ld.w	r9,r12[0x0]
80007410:	91 09       	st.w	r8[0x0],r9
80007412:	c0 e8       	rjmp	8000742e <_Balloc+0x66>
80007414:	0e 9c       	mov	r12,r7
80007416:	30 17       	mov	r7,1
80007418:	0e 9b       	mov	r11,r7
8000741a:	ee 06 09 47 	lsl	r7,r7,r6
8000741e:	ee ca ff fb 	sub	r10,r7,-5
80007422:	a3 6a       	lsl	r10,0x2
80007424:	e0 a0 04 7a 	rcall	80007d18 <_calloc_r>
80007428:	c0 60       	breq	80007434 <_Balloc+0x6c>
8000742a:	99 16       	st.w	r12[0x4],r6
8000742c:	99 27       	st.w	r12[0x8],r7
8000742e:	30 08       	mov	r8,0
80007430:	99 38       	st.w	r12[0xc],r8
80007432:	99 48       	st.w	r12[0x10],r8
80007434:	d8 22       	popm	r4-r7,pc
80007436:	d7 03       	nop

80007438 <__d2b>:
80007438:	d4 31       	pushm	r0-r7,lr
8000743a:	20 2d       	sub	sp,8
8000743c:	16 93       	mov	r3,r11
8000743e:	12 96       	mov	r6,r9
80007440:	10 95       	mov	r5,r8
80007442:	14 92       	mov	r2,r10
80007444:	30 1b       	mov	r11,1
80007446:	cc 1f       	rcall	800073c8 <_Balloc>
80007448:	f3 d3 c0 14 	bfextu	r9,r3,0x0,0x14
8000744c:	50 09       	stdsp	sp[0x0],r9
8000744e:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
80007452:	b5 a9       	sbr	r9,0x14
80007454:	f0 01 16 14 	lsr	r1,r8,0x14
80007458:	fb f9 1a 00 	st.wne	sp[0x0],r9
8000745c:	18 94       	mov	r4,r12
8000745e:	58 02       	cp.w	r2,0
80007460:	c1 d0       	breq	8000749a <__d2b+0x62>
80007462:	fa cc ff f8 	sub	r12,sp,-8
80007466:	18 d2       	st.w	--r12,r2
80007468:	c3 5f       	rcall	800072d2 <__lo0bits>
8000746a:	40 18       	lddsp	r8,sp[0x4]
8000746c:	c0 d0       	breq	80007486 <__d2b+0x4e>
8000746e:	40 09       	lddsp	r9,sp[0x0]
80007470:	f8 0a 11 20 	rsub	r10,r12,32
80007474:	f2 0a 09 4a 	lsl	r10,r9,r10
80007478:	f5 e8 10 08 	or	r8,r10,r8
8000747c:	89 58       	st.w	r4[0x14],r8
8000747e:	f2 0c 0a 49 	lsr	r9,r9,r12
80007482:	50 09       	stdsp	sp[0x0],r9
80007484:	c0 28       	rjmp	80007488 <__d2b+0x50>
80007486:	89 58       	st.w	r4[0x14],r8
80007488:	40 08       	lddsp	r8,sp[0x0]
8000748a:	58 08       	cp.w	r8,0
8000748c:	f9 b3 01 02 	movne	r3,2
80007490:	f9 b3 00 01 	moveq	r3,1
80007494:	89 68       	st.w	r4[0x18],r8
80007496:	89 43       	st.w	r4[0x10],r3
80007498:	c0 88       	rjmp	800074a8 <__d2b+0x70>
8000749a:	1a 9c       	mov	r12,sp
8000749c:	c1 bf       	rcall	800072d2 <__lo0bits>
8000749e:	30 13       	mov	r3,1
800074a0:	40 08       	lddsp	r8,sp[0x0]
800074a2:	2e 0c       	sub	r12,-32
800074a4:	89 43       	st.w	r4[0x10],r3
800074a6:	89 58       	st.w	r4[0x14],r8
800074a8:	58 01       	cp.w	r1,0
800074aa:	c0 90       	breq	800074bc <__d2b+0x84>
800074ac:	e2 c1 04 33 	sub	r1,r1,1075
800074b0:	18 01       	add	r1,r12
800074b2:	8d 01       	st.w	r6[0x0],r1
800074b4:	f8 0c 11 35 	rsub	r12,r12,53
800074b8:	8b 0c       	st.w	r5[0x0],r12
800074ba:	c0 c8       	rjmp	800074d2 <__d2b+0x9a>
800074bc:	e6 c8 ff fc 	sub	r8,r3,-4
800074c0:	f8 cc 04 32 	sub	r12,r12,1074
800074c4:	a5 73       	lsl	r3,0x5
800074c6:	8d 0c       	st.w	r6[0x0],r12
800074c8:	e8 08 03 2c 	ld.w	r12,r4[r8<<0x2]
800074cc:	cd 3e       	rcall	80007272 <__hi0bits>
800074ce:	18 13       	sub	r3,r12
800074d0:	8b 03       	st.w	r5[0x0],r3
800074d2:	08 9c       	mov	r12,r4
800074d4:	2f ed       	sub	sp,-8
800074d6:	d8 32       	popm	r0-r7,pc

800074d8 <__mdiff>:
800074d8:	d4 31       	pushm	r0-r7,lr
800074da:	74 48       	ld.w	r8,r10[0x10]
800074dc:	76 45       	ld.w	r5,r11[0x10]
800074de:	16 97       	mov	r7,r11
800074e0:	14 96       	mov	r6,r10
800074e2:	10 15       	sub	r5,r8
800074e4:	c1 31       	brne	8000750a <__mdiff+0x32>
800074e6:	2f b8       	sub	r8,-5
800074e8:	ee ce ff ec 	sub	lr,r7,-20
800074ec:	a3 68       	lsl	r8,0x2
800074ee:	f4 08 00 0b 	add	r11,r10,r8
800074f2:	ee 08 00 08 	add	r8,r7,r8
800074f6:	11 4a       	ld.w	r10,--r8
800074f8:	17 49       	ld.w	r9,--r11
800074fa:	12 3a       	cp.w	r10,r9
800074fc:	c0 30       	breq	80007502 <__mdiff+0x2a>
800074fe:	c0 e2       	brcc	8000751a <__mdiff+0x42>
80007500:	c0 78       	rjmp	8000750e <__mdiff+0x36>
80007502:	1c 38       	cp.w	r8,lr
80007504:	fe 9b ff f9 	brhi	800074f6 <__mdiff+0x1e>
80007508:	c4 98       	rjmp	8000759a <__mdiff+0xc2>
8000750a:	58 05       	cp.w	r5,0
8000750c:	c0 64       	brge	80007518 <__mdiff+0x40>
8000750e:	0e 98       	mov	r8,r7
80007510:	30 15       	mov	r5,1
80007512:	0c 97       	mov	r7,r6
80007514:	10 96       	mov	r6,r8
80007516:	c0 28       	rjmp	8000751a <__mdiff+0x42>
80007518:	30 05       	mov	r5,0
8000751a:	6e 1b       	ld.w	r11,r7[0x4]
8000751c:	c5 6f       	rcall	800073c8 <_Balloc>
8000751e:	6e 49       	ld.w	r9,r7[0x10]
80007520:	6c 44       	ld.w	r4,r6[0x10]
80007522:	99 35       	st.w	r12[0xc],r5
80007524:	2f b4       	sub	r4,-5
80007526:	f2 c5 ff fb 	sub	r5,r9,-5
8000752a:	ec 04 00 24 	add	r4,r6,r4<<0x2
8000752e:	ee 05 00 25 	add	r5,r7,r5<<0x2
80007532:	2e c6       	sub	r6,-20
80007534:	2e c7       	sub	r7,-20
80007536:	f8 c8 ff ec 	sub	r8,r12,-20
8000753a:	30 0a       	mov	r10,0
8000753c:	0f 0e       	ld.w	lr,r7++
8000753e:	0d 0b       	ld.w	r11,r6++
80007540:	fc 02 16 10 	lsr	r2,lr,0x10
80007544:	f6 03 16 10 	lsr	r3,r11,0x10
80007548:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000754c:	e4 03 01 03 	sub	r3,r2,r3
80007550:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80007554:	fc 0b 01 0b 	sub	r11,lr,r11
80007558:	f6 0a 00 0a 	add	r10,r11,r10
8000755c:	b0 1a       	st.h	r8[0x2],r10
8000755e:	b1 4a       	asr	r10,0x10
80007560:	e6 0a 00 0a 	add	r10,r3,r10
80007564:	b0 0a       	st.h	r8[0x0],r10
80007566:	2f c8       	sub	r8,-4
80007568:	b1 4a       	asr	r10,0x10
8000756a:	08 36       	cp.w	r6,r4
8000756c:	ce 83       	brcs	8000753c <__mdiff+0x64>
8000756e:	c0 d8       	rjmp	80007588 <__mdiff+0xb0>
80007570:	0f 0b       	ld.w	r11,r7++
80007572:	f6 0e 16 10 	lsr	lr,r11,0x10
80007576:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000757a:	16 0a       	add	r10,r11
8000757c:	b0 1a       	st.h	r8[0x2],r10
8000757e:	b1 4a       	asr	r10,0x10
80007580:	1c 0a       	add	r10,lr
80007582:	b0 0a       	st.h	r8[0x0],r10
80007584:	2f c8       	sub	r8,-4
80007586:	b1 4a       	asr	r10,0x10
80007588:	0a 37       	cp.w	r7,r5
8000758a:	cf 33       	brcs	80007570 <__mdiff+0x98>
8000758c:	c0 28       	rjmp	80007590 <__mdiff+0xb8>
8000758e:	20 19       	sub	r9,1
80007590:	11 4a       	ld.w	r10,--r8
80007592:	58 0a       	cp.w	r10,0
80007594:	cf d0       	breq	8000758e <__mdiff+0xb6>
80007596:	99 49       	st.w	r12[0x10],r9
80007598:	d8 32       	popm	r0-r7,pc
8000759a:	30 0b       	mov	r11,0
8000759c:	c1 6f       	rcall	800073c8 <_Balloc>
8000759e:	30 18       	mov	r8,1
800075a0:	99 48       	st.w	r12[0x10],r8
800075a2:	30 08       	mov	r8,0
800075a4:	99 58       	st.w	r12[0x14],r8
800075a6:	d8 32       	popm	r0-r7,pc

800075a8 <__lshift>:
800075a8:	d4 31       	pushm	r0-r7,lr
800075aa:	16 97       	mov	r7,r11
800075ac:	76 46       	ld.w	r6,r11[0x10]
800075ae:	f4 02 14 05 	asr	r2,r10,0x5
800075b2:	2f f6       	sub	r6,-1
800075b4:	14 93       	mov	r3,r10
800075b6:	18 94       	mov	r4,r12
800075b8:	04 06       	add	r6,r2
800075ba:	76 1b       	ld.w	r11,r11[0x4]
800075bc:	6e 28       	ld.w	r8,r7[0x8]
800075be:	c0 38       	rjmp	800075c4 <__lshift+0x1c>
800075c0:	2f fb       	sub	r11,-1
800075c2:	a1 78       	lsl	r8,0x1
800075c4:	10 36       	cp.w	r6,r8
800075c6:	fe 99 ff fd 	brgt	800075c0 <__lshift+0x18>
800075ca:	08 9c       	mov	r12,r4
800075cc:	cf ee       	rcall	800073c8 <_Balloc>
800075ce:	30 09       	mov	r9,0
800075d0:	18 95       	mov	r5,r12
800075d2:	f8 c8 ff ec 	sub	r8,r12,-20
800075d6:	12 9a       	mov	r10,r9
800075d8:	c0 38       	rjmp	800075de <__lshift+0x36>
800075da:	10 aa       	st.w	r8++,r10
800075dc:	2f f9       	sub	r9,-1
800075de:	04 39       	cp.w	r9,r2
800075e0:	cf d5       	brlt	800075da <__lshift+0x32>
800075e2:	6e 4b       	ld.w	r11,r7[0x10]
800075e4:	e7 d3 c0 05 	bfextu	r3,r3,0x0,0x5
800075e8:	2f bb       	sub	r11,-5
800075ea:	ee c9 ff ec 	sub	r9,r7,-20
800075ee:	ee 0b 00 2b 	add	r11,r7,r11<<0x2
800075f2:	58 03       	cp.w	r3,0
800075f4:	c1 30       	breq	8000761a <__lshift+0x72>
800075f6:	e6 0c 11 20 	rsub	r12,r3,32
800075fa:	30 0a       	mov	r10,0
800075fc:	72 02       	ld.w	r2,r9[0x0]
800075fe:	e4 03 09 42 	lsl	r2,r2,r3
80007602:	04 4a       	or	r10,r2
80007604:	10 aa       	st.w	r8++,r10
80007606:	13 0a       	ld.w	r10,r9++
80007608:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000760c:	16 39       	cp.w	r9,r11
8000760e:	cf 73       	brcs	800075fc <__lshift+0x54>
80007610:	91 0a       	st.w	r8[0x0],r10
80007612:	58 0a       	cp.w	r10,0
80007614:	c0 70       	breq	80007622 <__lshift+0x7a>
80007616:	2f f6       	sub	r6,-1
80007618:	c0 58       	rjmp	80007622 <__lshift+0x7a>
8000761a:	13 0a       	ld.w	r10,r9++
8000761c:	10 aa       	st.w	r8++,r10
8000761e:	16 39       	cp.w	r9,r11
80007620:	cf d3       	brcs	8000761a <__lshift+0x72>
80007622:	08 9c       	mov	r12,r4
80007624:	20 16       	sub	r6,1
80007626:	0e 9b       	mov	r11,r7
80007628:	8b 46       	st.w	r5[0x10],r6
8000762a:	cb 5e       	rcall	80007394 <_Bfree>
8000762c:	0a 9c       	mov	r12,r5
8000762e:	d8 32       	popm	r0-r7,pc

80007630 <__multiply>:
80007630:	d4 31       	pushm	r0-r7,lr
80007632:	20 2d       	sub	sp,8
80007634:	76 49       	ld.w	r9,r11[0x10]
80007636:	74 48       	ld.w	r8,r10[0x10]
80007638:	16 96       	mov	r6,r11
8000763a:	14 95       	mov	r5,r10
8000763c:	10 39       	cp.w	r9,r8
8000763e:	ec 08 17 50 	movlt	r8,r6
80007642:	ea 06 17 50 	movlt	r6,r5
80007646:	f0 05 17 50 	movlt	r5,r8
8000764a:	6c 28       	ld.w	r8,r6[0x8]
8000764c:	76 43       	ld.w	r3,r11[0x10]
8000764e:	74 42       	ld.w	r2,r10[0x10]
80007650:	76 1b       	ld.w	r11,r11[0x4]
80007652:	e4 03 00 07 	add	r7,r2,r3
80007656:	10 37       	cp.w	r7,r8
80007658:	f7 bb 09 ff 	subgt	r11,-1
8000765c:	cb 6e       	rcall	800073c8 <_Balloc>
8000765e:	ee c4 ff fb 	sub	r4,r7,-5
80007662:	f8 c9 ff ec 	sub	r9,r12,-20
80007666:	f8 04 00 24 	add	r4,r12,r4<<0x2
8000766a:	30 0a       	mov	r10,0
8000766c:	12 98       	mov	r8,r9
8000766e:	c0 28       	rjmp	80007672 <__multiply+0x42>
80007670:	10 aa       	st.w	r8++,r10
80007672:	08 38       	cp.w	r8,r4
80007674:	cf e3       	brcs	80007670 <__multiply+0x40>
80007676:	2f b3       	sub	r3,-5
80007678:	2f b2       	sub	r2,-5
8000767a:	ec 03 00 23 	add	r3,r6,r3<<0x2
8000767e:	ea 02 00 22 	add	r2,r5,r2<<0x2
80007682:	ec cb ff ec 	sub	r11,r6,-20
80007686:	50 12       	stdsp	sp[0x4],r2
80007688:	ea ca ff ec 	sub	r10,r5,-20
8000768c:	c4 48       	rjmp	80007714 <__multiply+0xe4>
8000768e:	94 95       	ld.uh	r5,r10[0x2]
80007690:	58 05       	cp.w	r5,0
80007692:	c2 00       	breq	800076d2 <__multiply+0xa2>
80007694:	12 98       	mov	r8,r9
80007696:	16 96       	mov	r6,r11
80007698:	30 0e       	mov	lr,0
8000769a:	50 09       	stdsp	sp[0x0],r9
8000769c:	0d 02       	ld.w	r2,r6++
8000769e:	e4 00 16 10 	lsr	r0,r2,0x10
800076a2:	70 01       	ld.w	r1,r8[0x0]
800076a4:	70 09       	ld.w	r9,r8[0x0]
800076a6:	b1 81       	lsr	r1,0x10
800076a8:	e5 d2 c0 10 	bfextu	r2,r2,0x0,0x10
800076ac:	e0 05 03 41 	mac	r1,r0,r5
800076b0:	ab 32       	mul	r2,r5
800076b2:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
800076b6:	00 02       	add	r2,r0
800076b8:	e4 0e 00 0e 	add	lr,r2,lr
800076bc:	b0 1e       	st.h	r8[0x2],lr
800076be:	b1 8e       	lsr	lr,0x10
800076c0:	1c 01       	add	r1,lr
800076c2:	b0 01       	st.h	r8[0x0],r1
800076c4:	e2 0e 16 10 	lsr	lr,r1,0x10
800076c8:	2f c8       	sub	r8,-4
800076ca:	06 36       	cp.w	r6,r3
800076cc:	ce 83       	brcs	8000769c <__multiply+0x6c>
800076ce:	40 09       	lddsp	r9,sp[0x0]
800076d0:	91 0e       	st.w	r8[0x0],lr
800076d2:	94 86       	ld.uh	r6,r10[0x0]
800076d4:	58 06       	cp.w	r6,0
800076d6:	c1 d0       	breq	80007710 <__multiply+0xe0>
800076d8:	72 02       	ld.w	r2,r9[0x0]
800076da:	12 98       	mov	r8,r9
800076dc:	16 9e       	mov	lr,r11
800076de:	30 05       	mov	r5,0
800076e0:	b0 12       	st.h	r8[0x2],r2
800076e2:	1d 01       	ld.w	r1,lr++
800076e4:	90 82       	ld.uh	r2,r8[0x0]
800076e6:	e1 d1 c0 10 	bfextu	r0,r1,0x0,0x10
800076ea:	ad 30       	mul	r0,r6
800076ec:	e0 02 00 02 	add	r2,r0,r2
800076f0:	e4 05 00 05 	add	r5,r2,r5
800076f4:	b0 05       	st.h	r8[0x0],r5
800076f6:	b1 85       	lsr	r5,0x10
800076f8:	b1 81       	lsr	r1,0x10
800076fa:	2f c8       	sub	r8,-4
800076fc:	ad 31       	mul	r1,r6
800076fe:	90 92       	ld.uh	r2,r8[0x2]
80007700:	e2 02 00 02 	add	r2,r1,r2
80007704:	0a 02       	add	r2,r5
80007706:	e4 05 16 10 	lsr	r5,r2,0x10
8000770a:	06 3e       	cp.w	lr,r3
8000770c:	ce a3       	brcs	800076e0 <__multiply+0xb0>
8000770e:	91 02       	st.w	r8[0x0],r2
80007710:	2f ca       	sub	r10,-4
80007712:	2f c9       	sub	r9,-4
80007714:	40 18       	lddsp	r8,sp[0x4]
80007716:	10 3a       	cp.w	r10,r8
80007718:	cb b3       	brcs	8000768e <__multiply+0x5e>
8000771a:	c0 28       	rjmp	8000771e <__multiply+0xee>
8000771c:	20 17       	sub	r7,1
8000771e:	58 07       	cp.w	r7,0
80007720:	e0 8a 00 05 	brle	8000772a <__multiply+0xfa>
80007724:	09 48       	ld.w	r8,--r4
80007726:	58 08       	cp.w	r8,0
80007728:	cf a0       	breq	8000771c <__multiply+0xec>
8000772a:	99 47       	st.w	r12[0x10],r7
8000772c:	2f ed       	sub	sp,-8
8000772e:	d8 32       	popm	r0-r7,pc

80007730 <__i2b>:
80007730:	d4 21       	pushm	r4-r7,lr
80007732:	16 97       	mov	r7,r11
80007734:	30 1b       	mov	r11,1
80007736:	c4 9e       	rcall	800073c8 <_Balloc>
80007738:	30 19       	mov	r9,1
8000773a:	99 57       	st.w	r12[0x14],r7
8000773c:	99 49       	st.w	r12[0x10],r9
8000773e:	d8 22       	popm	r4-r7,pc

80007740 <__multadd>:
80007740:	d4 31       	pushm	r0-r7,lr
80007742:	30 08       	mov	r8,0
80007744:	12 95       	mov	r5,r9
80007746:	16 97       	mov	r7,r11
80007748:	18 96       	mov	r6,r12
8000774a:	76 44       	ld.w	r4,r11[0x10]
8000774c:	f6 c9 ff ec 	sub	r9,r11,-20
80007750:	72 0b       	ld.w	r11,r9[0x0]
80007752:	f6 0c 16 10 	lsr	r12,r11,0x10
80007756:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000775a:	f4 0c 02 4c 	mul	r12,r10,r12
8000775e:	f4 0b 03 45 	mac	r5,r10,r11
80007762:	f7 d5 c0 10 	bfextu	r11,r5,0x0,0x10
80007766:	b1 85       	lsr	r5,0x10
80007768:	18 05       	add	r5,r12
8000776a:	ea 0c 15 10 	lsl	r12,r5,0x10
8000776e:	f8 0b 00 0b 	add	r11,r12,r11
80007772:	12 ab       	st.w	r9++,r11
80007774:	2f f8       	sub	r8,-1
80007776:	b1 85       	lsr	r5,0x10
80007778:	08 38       	cp.w	r8,r4
8000777a:	ce b5       	brlt	80007750 <__multadd+0x10>
8000777c:	58 05       	cp.w	r5,0
8000777e:	c1 c0       	breq	800077b6 <__multadd+0x76>
80007780:	6e 28       	ld.w	r8,r7[0x8]
80007782:	10 34       	cp.w	r4,r8
80007784:	c1 35       	brlt	800077aa <__multadd+0x6a>
80007786:	6e 1b       	ld.w	r11,r7[0x4]
80007788:	0c 9c       	mov	r12,r6
8000778a:	2f fb       	sub	r11,-1
8000778c:	c1 ee       	rcall	800073c8 <_Balloc>
8000778e:	6e 4a       	ld.w	r10,r7[0x10]
80007790:	ee cb ff f4 	sub	r11,r7,-12
80007794:	18 93       	mov	r3,r12
80007796:	2f ea       	sub	r10,-2
80007798:	2f 4c       	sub	r12,-12
8000779a:	a3 6a       	lsl	r10,0x2
8000779c:	fe b0 de 36 	rcall	80003408 <memcpy>
800077a0:	0e 9b       	mov	r11,r7
800077a2:	0c 9c       	mov	r12,r6
800077a4:	fe b0 fd f8 	rcall	80007394 <_Bfree>
800077a8:	06 97       	mov	r7,r3
800077aa:	e8 c8 ff ff 	sub	r8,r4,-1
800077ae:	2f b4       	sub	r4,-5
800077b0:	8f 48       	st.w	r7[0x10],r8
800077b2:	ee 04 09 25 	st.w	r7[r4<<0x2],r5
800077b6:	0e 9c       	mov	r12,r7
800077b8:	d8 32       	popm	r0-r7,pc
800077ba:	d7 03       	nop

800077bc <__pow5mult>:
800077bc:	d4 31       	pushm	r0-r7,lr
800077be:	14 96       	mov	r6,r10
800077c0:	18 97       	mov	r7,r12
800077c2:	16 94       	mov	r4,r11
800077c4:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
800077c8:	c0 90       	breq	800077da <__pow5mult+0x1e>
800077ca:	20 18       	sub	r8,1
800077cc:	fe c9 e1 84 	sub	r9,pc,-7804
800077d0:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
800077d4:	30 09       	mov	r9,0
800077d6:	cb 5f       	rcall	80007740 <__multadd>
800077d8:	18 94       	mov	r4,r12
800077da:	a3 46       	asr	r6,0x2
800077dc:	c3 40       	breq	80007844 <__pow5mult+0x88>
800077de:	6e 95       	ld.w	r5,r7[0x24]
800077e0:	58 05       	cp.w	r5,0
800077e2:	c0 91       	brne	800077f4 <__pow5mult+0x38>
800077e4:	31 0c       	mov	r12,16
800077e6:	fe b0 fa f3 	rcall	80006dcc <malloc>
800077ea:	99 35       	st.w	r12[0xc],r5
800077ec:	8f 9c       	st.w	r7[0x24],r12
800077ee:	99 15       	st.w	r12[0x4],r5
800077f0:	99 25       	st.w	r12[0x8],r5
800077f2:	99 05       	st.w	r12[0x0],r5
800077f4:	6e 93       	ld.w	r3,r7[0x24]
800077f6:	66 25       	ld.w	r5,r3[0x8]
800077f8:	58 05       	cp.w	r5,0
800077fa:	c0 c1       	brne	80007812 <__pow5mult+0x56>
800077fc:	e0 6b 02 71 	mov	r11,625
80007800:	0e 9c       	mov	r12,r7
80007802:	c9 7f       	rcall	80007730 <__i2b>
80007804:	87 2c       	st.w	r3[0x8],r12
80007806:	30 08       	mov	r8,0
80007808:	18 95       	mov	r5,r12
8000780a:	99 08       	st.w	r12[0x0],r8
8000780c:	c0 38       	rjmp	80007812 <__pow5mult+0x56>
8000780e:	06 9c       	mov	r12,r3
80007810:	18 95       	mov	r5,r12
80007812:	ed b6 00 00 	bld	r6,0x0
80007816:	c0 b1       	brne	8000782c <__pow5mult+0x70>
80007818:	08 9b       	mov	r11,r4
8000781a:	0a 9a       	mov	r10,r5
8000781c:	0e 9c       	mov	r12,r7
8000781e:	c0 9f       	rcall	80007630 <__multiply>
80007820:	08 9b       	mov	r11,r4
80007822:	18 93       	mov	r3,r12
80007824:	0e 9c       	mov	r12,r7
80007826:	06 94       	mov	r4,r3
80007828:	fe b0 fd b6 	rcall	80007394 <_Bfree>
8000782c:	a1 56       	asr	r6,0x1
8000782e:	c0 b0       	breq	80007844 <__pow5mult+0x88>
80007830:	6a 03       	ld.w	r3,r5[0x0]
80007832:	58 03       	cp.w	r3,0
80007834:	ce d1       	brne	8000780e <__pow5mult+0x52>
80007836:	0a 9a       	mov	r10,r5
80007838:	0a 9b       	mov	r11,r5
8000783a:	0e 9c       	mov	r12,r7
8000783c:	cf ae       	rcall	80007630 <__multiply>
8000783e:	8b 0c       	st.w	r5[0x0],r12
80007840:	99 03       	st.w	r12[0x0],r3
80007842:	ce 7b       	rjmp	80007810 <__pow5mult+0x54>
80007844:	08 9c       	mov	r12,r4
80007846:	d8 32       	popm	r0-r7,pc

80007848 <_realloc_r>:
80007848:	d4 31       	pushm	r0-r7,lr
8000784a:	20 1d       	sub	sp,4
8000784c:	16 94       	mov	r4,r11
8000784e:	18 92       	mov	r2,r12
80007850:	14 9b       	mov	r11,r10
80007852:	58 04       	cp.w	r4,0
80007854:	c0 51       	brne	8000785e <_realloc_r+0x16>
80007856:	fe b0 fa c3 	rcall	80006ddc <_malloc_r>
8000785a:	18 95       	mov	r5,r12
8000785c:	c5 39       	rjmp	80007b02 <_realloc_r+0x2ba>
8000785e:	50 0a       	stdsp	sp[0x0],r10
80007860:	fe b0 fd 07 	rcall	8000726e <__malloc_lock>
80007864:	40 0b       	lddsp	r11,sp[0x0]
80007866:	f6 c8 ff f5 	sub	r8,r11,-11
8000786a:	e8 c1 00 08 	sub	r1,r4,8
8000786e:	10 96       	mov	r6,r8
80007870:	62 1c       	ld.w	r12,r1[0x4]
80007872:	e0 16 ff f8 	andl	r6,0xfff8
80007876:	59 68       	cp.w	r8,22
80007878:	f9 b6 08 10 	movls	r6,16
8000787c:	16 36       	cp.w	r6,r11
8000787e:	5f 38       	srlo	r8
80007880:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
80007884:	c0 50       	breq	8000788e <_realloc_r+0x46>
80007886:	30 c8       	mov	r8,12
80007888:	30 05       	mov	r5,0
8000788a:	85 38       	st.w	r2[0xc],r8
8000788c:	c3 b9       	rjmp	80007b02 <_realloc_r+0x2ba>
8000788e:	18 90       	mov	r0,r12
80007890:	e0 10 ff fc 	andl	r0,0xfffc
80007894:	0c 30       	cp.w	r0,r6
80007896:	e0 84 01 0b 	brge	80007aac <_realloc_r+0x264>
8000789a:	e0 68 01 04 	mov	r8,260
8000789e:	e2 00 00 09 	add	r9,r1,r0
800078a2:	70 25       	ld.w	r5,r8[0x8]
800078a4:	0a 39       	cp.w	r9,r5
800078a6:	c0 90       	breq	800078b8 <_realloc_r+0x70>
800078a8:	72 1a       	ld.w	r10,r9[0x4]
800078aa:	a1 ca       	cbr	r10,0x0
800078ac:	f2 0a 00 0a 	add	r10,r9,r10
800078b0:	74 1a       	ld.w	r10,r10[0x4]
800078b2:	ed ba 00 00 	bld	r10,0x0
800078b6:	c2 20       	breq	800078fa <_realloc_r+0xb2>
800078b8:	72 1a       	ld.w	r10,r9[0x4]
800078ba:	e0 1a ff fc 	andl	r10,0xfffc
800078be:	f4 00 00 03 	add	r3,r10,r0
800078c2:	0a 39       	cp.w	r9,r5
800078c4:	c1 31       	brne	800078ea <_realloc_r+0xa2>
800078c6:	ec c7 ff f0 	sub	r7,r6,-16
800078ca:	0e 33       	cp.w	r3,r7
800078cc:	c1 95       	brlt	800078fe <_realloc_r+0xb6>
800078ce:	e2 06 00 09 	add	r9,r1,r6
800078d2:	0c 13       	sub	r3,r6
800078d4:	a1 a3       	sbr	r3,0x0
800078d6:	93 13       	st.w	r9[0x4],r3
800078d8:	91 29       	st.w	r8[0x8],r9
800078da:	04 9c       	mov	r12,r2
800078dc:	62 18       	ld.w	r8,r1[0x4]
800078de:	08 95       	mov	r5,r4
800078e0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800078e4:	10 46       	or	r6,r8
800078e6:	83 16       	st.w	r1[0x4],r6
800078e8:	c0 b9       	rjmp	80007afe <_realloc_r+0x2b6>
800078ea:	0c 33       	cp.w	r3,r6
800078ec:	c0 95       	brlt	800078fe <_realloc_r+0xb6>
800078ee:	72 28       	ld.w	r8,r9[0x8]
800078f0:	02 97       	mov	r7,r1
800078f2:	72 39       	ld.w	r9,r9[0xc]
800078f4:	93 28       	st.w	r9[0x8],r8
800078f6:	91 39       	st.w	r8[0xc],r9
800078f8:	cd c8       	rjmp	80007ab0 <_realloc_r+0x268>
800078fa:	30 0a       	mov	r10,0
800078fc:	14 99       	mov	r9,r10
800078fe:	ed bc 00 00 	bld	r12,0x0
80007902:	e0 80 00 95 	breq	80007a2c <_realloc_r+0x1e4>
80007906:	62 07       	ld.w	r7,r1[0x0]
80007908:	e2 07 01 07 	sub	r7,r1,r7
8000790c:	6e 1c       	ld.w	r12,r7[0x4]
8000790e:	e0 1c ff fc 	andl	r12,0xfffc
80007912:	58 09       	cp.w	r9,0
80007914:	c5 60       	breq	800079c0 <_realloc_r+0x178>
80007916:	f8 00 00 03 	add	r3,r12,r0
8000791a:	0a 39       	cp.w	r9,r5
8000791c:	c4 81       	brne	800079ac <_realloc_r+0x164>
8000791e:	14 03       	add	r3,r10
80007920:	ec c9 ff f0 	sub	r9,r6,-16
80007924:	12 33       	cp.w	r3,r9
80007926:	c4 d5       	brlt	800079c0 <_realloc_r+0x178>
80007928:	6e 3a       	ld.w	r10,r7[0xc]
8000792a:	6e 29       	ld.w	r9,r7[0x8]
8000792c:	95 29       	st.w	r10[0x8],r9
8000792e:	93 3a       	st.w	r9[0xc],r10
80007930:	ee c5 ff f8 	sub	r5,r7,-8
80007934:	e0 ca 00 04 	sub	r10,r0,4
80007938:	e0 4a 00 24 	cp.w	r10,36
8000793c:	e0 8b 00 25 	brhi	80007986 <_realloc_r+0x13e>
80007940:	0a 99       	mov	r9,r5
80007942:	59 3a       	cp.w	r10,19
80007944:	e0 88 00 1a 	brls	80007978 <_realloc_r+0x130>
80007948:	09 09       	ld.w	r9,r4++
8000794a:	8b 09       	st.w	r5[0x0],r9
8000794c:	09 09       	ld.w	r9,r4++
8000794e:	8f 39       	st.w	r7[0xc],r9
80007950:	ee c9 ff f0 	sub	r9,r7,-16
80007954:	59 ba       	cp.w	r10,27
80007956:	e0 88 00 11 	brls	80007978 <_realloc_r+0x130>
8000795a:	09 0b       	ld.w	r11,r4++
8000795c:	93 0b       	st.w	r9[0x0],r11
8000795e:	09 09       	ld.w	r9,r4++
80007960:	8f 59       	st.w	r7[0x14],r9
80007962:	ee c9 ff e8 	sub	r9,r7,-24
80007966:	e0 4a 00 24 	cp.w	r10,36
8000796a:	c0 71       	brne	80007978 <_realloc_r+0x130>
8000796c:	09 0a       	ld.w	r10,r4++
8000796e:	93 0a       	st.w	r9[0x0],r10
80007970:	ee c9 ff e0 	sub	r9,r7,-32
80007974:	09 0a       	ld.w	r10,r4++
80007976:	8f 7a       	st.w	r7[0x1c],r10
80007978:	09 0a       	ld.w	r10,r4++
8000797a:	12 aa       	st.w	r9++,r10
8000797c:	68 0a       	ld.w	r10,r4[0x0]
8000797e:	93 0a       	st.w	r9[0x0],r10
80007980:	68 1a       	ld.w	r10,r4[0x4]
80007982:	93 1a       	st.w	r9[0x4],r10
80007984:	c0 78       	rjmp	80007992 <_realloc_r+0x14a>
80007986:	50 08       	stdsp	sp[0x0],r8
80007988:	08 9b       	mov	r11,r4
8000798a:	0a 9c       	mov	r12,r5
8000798c:	fe b0 fc 4b 	rcall	80007222 <memmove>
80007990:	40 08       	lddsp	r8,sp[0x0]
80007992:	ee 06 00 09 	add	r9,r7,r6
80007996:	0c 13       	sub	r3,r6
80007998:	a1 a3       	sbr	r3,0x0
8000799a:	93 13       	st.w	r9[0x4],r3
8000799c:	91 29       	st.w	r8[0x8],r9
8000799e:	04 9c       	mov	r12,r2
800079a0:	6e 18       	ld.w	r8,r7[0x4]
800079a2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800079a6:	10 46       	or	r6,r8
800079a8:	8f 16       	st.w	r7[0x4],r6
800079aa:	ca a8       	rjmp	80007afe <_realloc_r+0x2b6>
800079ac:	14 03       	add	r3,r10
800079ae:	0c 33       	cp.w	r3,r6
800079b0:	c0 85       	brlt	800079c0 <_realloc_r+0x178>
800079b2:	72 28       	ld.w	r8,r9[0x8]
800079b4:	72 39       	ld.w	r9,r9[0xc]
800079b6:	93 28       	st.w	r9[0x8],r8
800079b8:	91 39       	st.w	r8[0xc],r9
800079ba:	6e 28       	ld.w	r8,r7[0x8]
800079bc:	6e 39       	ld.w	r9,r7[0xc]
800079be:	c0 78       	rjmp	800079cc <_realloc_r+0x184>
800079c0:	f8 00 00 03 	add	r3,r12,r0
800079c4:	0c 33       	cp.w	r3,r6
800079c6:	c3 35       	brlt	80007a2c <_realloc_r+0x1e4>
800079c8:	6e 39       	ld.w	r9,r7[0xc]
800079ca:	6e 28       	ld.w	r8,r7[0x8]
800079cc:	93 28       	st.w	r9[0x8],r8
800079ce:	91 39       	st.w	r8[0xc],r9
800079d0:	e0 ca 00 04 	sub	r10,r0,4
800079d4:	ee cc ff f8 	sub	r12,r7,-8
800079d8:	e0 4a 00 24 	cp.w	r10,36
800079dc:	e0 8b 00 24 	brhi	80007a24 <_realloc_r+0x1dc>
800079e0:	59 3a       	cp.w	r10,19
800079e2:	e0 88 00 1a 	brls	80007a16 <_realloc_r+0x1ce>
800079e6:	09 08       	ld.w	r8,r4++
800079e8:	99 08       	st.w	r12[0x0],r8
800079ea:	09 08       	ld.w	r8,r4++
800079ec:	8f 38       	st.w	r7[0xc],r8
800079ee:	ee cc ff f0 	sub	r12,r7,-16
800079f2:	59 ba       	cp.w	r10,27
800079f4:	e0 88 00 11 	brls	80007a16 <_realloc_r+0x1ce>
800079f8:	09 08       	ld.w	r8,r4++
800079fa:	99 08       	st.w	r12[0x0],r8
800079fc:	09 08       	ld.w	r8,r4++
800079fe:	8f 58       	st.w	r7[0x14],r8
80007a00:	ee cc ff e8 	sub	r12,r7,-24
80007a04:	e0 4a 00 24 	cp.w	r10,36
80007a08:	c0 71       	brne	80007a16 <_realloc_r+0x1ce>
80007a0a:	09 08       	ld.w	r8,r4++
80007a0c:	99 08       	st.w	r12[0x0],r8
80007a0e:	ee cc ff e0 	sub	r12,r7,-32
80007a12:	09 08       	ld.w	r8,r4++
80007a14:	8f 78       	st.w	r7[0x1c],r8
80007a16:	09 08       	ld.w	r8,r4++
80007a18:	18 a8       	st.w	r12++,r8
80007a1a:	68 08       	ld.w	r8,r4[0x0]
80007a1c:	99 08       	st.w	r12[0x0],r8
80007a1e:	68 18       	ld.w	r8,r4[0x4]
80007a20:	99 18       	st.w	r12[0x4],r8
80007a22:	c4 78       	rjmp	80007ab0 <_realloc_r+0x268>
80007a24:	08 9b       	mov	r11,r4
80007a26:	fe b0 fb fe 	rcall	80007222 <memmove>
80007a2a:	c4 38       	rjmp	80007ab0 <_realloc_r+0x268>
80007a2c:	04 9c       	mov	r12,r2
80007a2e:	fe b0 f9 d7 	rcall	80006ddc <_malloc_r>
80007a32:	18 95       	mov	r5,r12
80007a34:	c3 a0       	breq	80007aa8 <_realloc_r+0x260>
80007a36:	62 18       	ld.w	r8,r1[0x4]
80007a38:	f8 c9 00 08 	sub	r9,r12,8
80007a3c:	a1 c8       	cbr	r8,0x0
80007a3e:	e2 08 00 08 	add	r8,r1,r8
80007a42:	10 39       	cp.w	r9,r8
80007a44:	c0 71       	brne	80007a52 <_realloc_r+0x20a>
80007a46:	72 13       	ld.w	r3,r9[0x4]
80007a48:	02 97       	mov	r7,r1
80007a4a:	e0 13 ff fc 	andl	r3,0xfffc
80007a4e:	00 03       	add	r3,r0
80007a50:	c3 08       	rjmp	80007ab0 <_realloc_r+0x268>
80007a52:	e0 ca 00 04 	sub	r10,r0,4
80007a56:	e0 4a 00 24 	cp.w	r10,36
80007a5a:	e0 8b 00 20 	brhi	80007a9a <_realloc_r+0x252>
80007a5e:	08 99       	mov	r9,r4
80007a60:	18 98       	mov	r8,r12
80007a62:	59 3a       	cp.w	r10,19
80007a64:	e0 88 00 14 	brls	80007a8c <_realloc_r+0x244>
80007a68:	13 0b       	ld.w	r11,r9++
80007a6a:	10 ab       	st.w	r8++,r11
80007a6c:	13 0b       	ld.w	r11,r9++
80007a6e:	10 ab       	st.w	r8++,r11
80007a70:	59 ba       	cp.w	r10,27
80007a72:	e0 88 00 0d 	brls	80007a8c <_realloc_r+0x244>
80007a76:	13 0b       	ld.w	r11,r9++
80007a78:	10 ab       	st.w	r8++,r11
80007a7a:	13 0b       	ld.w	r11,r9++
80007a7c:	10 ab       	st.w	r8++,r11
80007a7e:	e0 4a 00 24 	cp.w	r10,36
80007a82:	c0 51       	brne	80007a8c <_realloc_r+0x244>
80007a84:	13 0a       	ld.w	r10,r9++
80007a86:	10 aa       	st.w	r8++,r10
80007a88:	13 0a       	ld.w	r10,r9++
80007a8a:	10 aa       	st.w	r8++,r10
80007a8c:	13 0a       	ld.w	r10,r9++
80007a8e:	10 aa       	st.w	r8++,r10
80007a90:	72 0a       	ld.w	r10,r9[0x0]
80007a92:	91 0a       	st.w	r8[0x0],r10
80007a94:	72 19       	ld.w	r9,r9[0x4]
80007a96:	91 19       	st.w	r8[0x4],r9
80007a98:	c0 48       	rjmp	80007aa0 <_realloc_r+0x258>
80007a9a:	08 9b       	mov	r11,r4
80007a9c:	fe b0 fb c3 	rcall	80007222 <memmove>
80007aa0:	08 9b       	mov	r11,r4
80007aa2:	04 9c       	mov	r12,r2
80007aa4:	fe b0 f6 f6 	rcall	80006890 <_free_r>
80007aa8:	04 9c       	mov	r12,r2
80007aaa:	c2 a8       	rjmp	80007afe <_realloc_r+0x2b6>
80007aac:	00 93       	mov	r3,r0
80007aae:	02 97       	mov	r7,r1
80007ab0:	e6 06 01 09 	sub	r9,r3,r6
80007ab4:	6e 18       	ld.w	r8,r7[0x4]
80007ab6:	58 f9       	cp.w	r9,15
80007ab8:	e0 88 00 16 	brls	80007ae4 <_realloc_r+0x29c>
80007abc:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007ac0:	ed e8 10 08 	or	r8,r6,r8
80007ac4:	8f 18       	st.w	r7[0x4],r8
80007ac6:	12 98       	mov	r8,r9
80007ac8:	a1 a8       	sbr	r8,0x0
80007aca:	ee 06 00 0b 	add	r11,r7,r6
80007ace:	f6 09 00 09 	add	r9,r11,r9
80007ad2:	97 18       	st.w	r11[0x4],r8
80007ad4:	72 18       	ld.w	r8,r9[0x4]
80007ad6:	a1 a8       	sbr	r8,0x0
80007ad8:	2f 8b       	sub	r11,-8
80007ada:	93 18       	st.w	r9[0x4],r8
80007adc:	04 9c       	mov	r12,r2
80007ade:	fe b0 f6 d9 	rcall	80006890 <_free_r>
80007ae2:	c0 b8       	rjmp	80007af8 <_realloc_r+0x2b0>
80007ae4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007ae8:	e7 e8 10 08 	or	r8,r3,r8
80007aec:	8f 18       	st.w	r7[0x4],r8
80007aee:	ee 03 00 03 	add	r3,r7,r3
80007af2:	66 18       	ld.w	r8,r3[0x4]
80007af4:	a1 a8       	sbr	r8,0x0
80007af6:	87 18       	st.w	r3[0x4],r8
80007af8:	04 9c       	mov	r12,r2
80007afa:	ee c5 ff f8 	sub	r5,r7,-8
80007afe:	fe b0 fb b9 	rcall	80007270 <__malloc_unlock>
80007b02:	0a 9c       	mov	r12,r5
80007b04:	2f fd       	sub	sp,-4
80007b06:	d8 32       	popm	r0-r7,pc

80007b08 <__isinfd>:
80007b08:	14 98       	mov	r8,r10
80007b0a:	fc 19 7f f0 	movh	r9,0x7ff0
80007b0e:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
80007b12:	f0 0b 11 00 	rsub	r11,r8,0
80007b16:	f7 e8 10 08 	or	r8,r11,r8
80007b1a:	f5 e8 13 f8 	or	r8,r10,r8>>0x1f
80007b1e:	f2 08 01 08 	sub	r8,r9,r8
80007b22:	f0 0c 11 00 	rsub	r12,r8,0
80007b26:	f9 e8 10 08 	or	r8,r12,r8
80007b2a:	f0 0c 14 1f 	asr	r12,r8,0x1f
80007b2e:	2f fc       	sub	r12,-1
80007b30:	5e fc       	retal	r12

80007b32 <__isnand>:
80007b32:	14 98       	mov	r8,r10
80007b34:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
80007b38:	f0 0c 11 00 	rsub	r12,r8,0
80007b3c:	10 4c       	or	r12,r8
80007b3e:	fc 18 7f f0 	movh	r8,0x7ff0
80007b42:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
80007b46:	f0 0c 01 0c 	sub	r12,r8,r12
80007b4a:	bf 9c       	lsr	r12,0x1f
80007b4c:	5e fc       	retal	r12
80007b4e:	d7 03       	nop

80007b50 <_sbrk_r>:
80007b50:	d4 21       	pushm	r4-r7,lr
80007b52:	30 08       	mov	r8,0
80007b54:	18 97       	mov	r7,r12
80007b56:	e0 66 06 70 	mov	r6,1648
80007b5a:	16 9c       	mov	r12,r11
80007b5c:	8d 08       	st.w	r6[0x0],r8
80007b5e:	ca fc       	rcall	80007cbc <_sbrk>
80007b60:	5b fc       	cp.w	r12,-1
80007b62:	c0 51       	brne	80007b6c <_sbrk_r+0x1c>
80007b64:	6c 08       	ld.w	r8,r6[0x0]
80007b66:	58 08       	cp.w	r8,0
80007b68:	ef f8 1a 03 	st.wne	r7[0xc],r8
80007b6c:	d8 22       	popm	r4-r7,pc
80007b6e:	d7 03       	nop

80007b70 <__sclose>:
80007b70:	d4 01       	pushm	lr
80007b72:	96 7b       	ld.sh	r11,r11[0xe]
80007b74:	cf ec       	rcall	80007d70 <_close_r>
80007b76:	d8 02       	popm	pc

80007b78 <__sseek>:
80007b78:	d4 21       	pushm	r4-r7,lr
80007b7a:	16 97       	mov	r7,r11
80007b7c:	96 7b       	ld.sh	r11,r11[0xe]
80007b7e:	c8 5d       	rcall	80007e88 <_lseek_r>
80007b80:	8e 68       	ld.sh	r8,r7[0xc]
80007b82:	10 99       	mov	r9,r8
80007b84:	ad c8       	cbr	r8,0xc
80007b86:	ad a9       	sbr	r9,0xc
80007b88:	5b fc       	cp.w	r12,-1
80007b8a:	ef f8 0c 06 	st.heq	r7[0xc],r8
80007b8e:	ef f9 1c 06 	st.hne	r7[0xc],r9
80007b92:	ef fc 1a 15 	st.wne	r7[0x54],r12
80007b96:	d8 22       	popm	r4-r7,pc

80007b98 <__swrite>:
80007b98:	d4 21       	pushm	r4-r7,lr
80007b9a:	96 68       	ld.sh	r8,r11[0xc]
80007b9c:	16 97       	mov	r7,r11
80007b9e:	14 95       	mov	r5,r10
80007ba0:	12 94       	mov	r4,r9
80007ba2:	e2 18 01 00 	andl	r8,0x100,COH
80007ba6:	18 96       	mov	r6,r12
80007ba8:	c0 50       	breq	80007bb2 <__swrite+0x1a>
80007baa:	30 29       	mov	r9,2
80007bac:	30 0a       	mov	r10,0
80007bae:	96 7b       	ld.sh	r11,r11[0xe]
80007bb0:	c6 cd       	rcall	80007e88 <_lseek_r>
80007bb2:	8e 68       	ld.sh	r8,r7[0xc]
80007bb4:	ad c8       	cbr	r8,0xc
80007bb6:	08 99       	mov	r9,r4
80007bb8:	0a 9a       	mov	r10,r5
80007bba:	8e 7b       	ld.sh	r11,r7[0xe]
80007bbc:	0c 9c       	mov	r12,r6
80007bbe:	ae 68       	st.h	r7[0xc],r8
80007bc0:	c9 ac       	rcall	80007cf4 <_write_r>
80007bc2:	d8 22       	popm	r4-r7,pc

80007bc4 <__sread>:
80007bc4:	d4 21       	pushm	r4-r7,lr
80007bc6:	16 97       	mov	r7,r11
80007bc8:	96 7b       	ld.sh	r11,r11[0xe]
80007bca:	c7 1d       	rcall	80007eac <_read_r>
80007bcc:	c0 65       	brlt	80007bd8 <__sread+0x14>
80007bce:	6f 58       	ld.w	r8,r7[0x54]
80007bd0:	18 08       	add	r8,r12
80007bd2:	ef 48 00 54 	st.w	r7[84],r8
80007bd6:	d8 22       	popm	r4-r7,pc
80007bd8:	8e 68       	ld.sh	r8,r7[0xc]
80007bda:	ad c8       	cbr	r8,0xc
80007bdc:	ae 68       	st.h	r7[0xc],r8
80007bde:	d8 22       	popm	r4-r7,pc

80007be0 <strlen>:
80007be0:	30 09       	mov	r9,0
80007be2:	18 98       	mov	r8,r12
80007be4:	c0 28       	rjmp	80007be8 <strlen+0x8>
80007be6:	2f f8       	sub	r8,-1
80007be8:	11 8a       	ld.ub	r10,r8[0x0]
80007bea:	f2 0a 18 00 	cp.b	r10,r9
80007bee:	cf c1       	brne	80007be6 <strlen+0x6>
80007bf0:	f0 0c 01 0c 	sub	r12,r8,r12
80007bf4:	5e fc       	retal	r12
80007bf6:	d7 03       	nop

80007bf8 <_close>:
80007bf8:	30 28       	mov	r8,2
80007bfa:	d6 73       	breakpoint
80007bfc:	3f fc       	mov	r12,-1
80007bfe:	35 8b       	mov	r11,88
80007c00:	58 0c       	cp.w	r12,0
80007c02:	5e 4c       	retge	r12
80007c04:	e0 6a 06 70 	mov	r10,1648
80007c08:	95 0b       	st.w	r10[0x0],r11
80007c0a:	5e fc       	retal	r12

80007c0c <_lseek>:
80007c0c:	30 58       	mov	r8,5
80007c0e:	d6 73       	breakpoint
80007c10:	3f fc       	mov	r12,-1
80007c12:	35 8b       	mov	r11,88
80007c14:	58 0c       	cp.w	r12,0
80007c16:	5e 4c       	retge	r12
80007c18:	e0 6a 06 70 	mov	r10,1648
80007c1c:	95 0b       	st.w	r10[0x0],r11
80007c1e:	5e fc       	retal	r12

80007c20 <_read>:
80007c20:	30 38       	mov	r8,3
80007c22:	d6 73       	breakpoint
80007c24:	3f fc       	mov	r12,-1
80007c26:	35 8b       	mov	r11,88
80007c28:	58 0c       	cp.w	r12,0
80007c2a:	5e 4c       	retge	r12
80007c2c:	e0 6a 06 70 	mov	r10,1648
80007c30:	95 0b       	st.w	r10[0x0],r11
80007c32:	5e fc       	retal	r12

80007c34 <_write>:
80007c34:	30 48       	mov	r8,4
80007c36:	d6 73       	breakpoint
80007c38:	3f fc       	mov	r12,-1
80007c3a:	35 8b       	mov	r11,88
80007c3c:	58 0c       	cp.w	r12,0
80007c3e:	5e 4c       	retge	r12
80007c40:	e0 6a 06 70 	mov	r10,1648
80007c44:	95 0b       	st.w	r10[0x0],r11
80007c46:	5e fc       	retal	r12

80007c48 <isatty>:
80007c48:	30 b8       	mov	r8,11
80007c4a:	d6 73       	breakpoint
80007c4c:	3f fc       	mov	r12,-1
80007c4e:	35 8b       	mov	r11,88
80007c50:	58 0c       	cp.w	r12,0
80007c52:	5e 4c       	retge	r12
80007c54:	e0 6a 06 70 	mov	r10,1648
80007c58:	95 0b       	st.w	r10[0x0],r11
80007c5a:	5e fc       	retal	r12

80007c5c <_fstat_host>:
80007c5c:	30 98       	mov	r8,9
80007c5e:	d6 73       	breakpoint
80007c60:	3f fc       	mov	r12,-1
80007c62:	35 8b       	mov	r11,88
80007c64:	58 0c       	cp.w	r12,0
80007c66:	5e 4c       	retge	r12
80007c68:	e0 6a 06 70 	mov	r10,1648
80007c6c:	95 0b       	st.w	r10[0x0],r11
80007c6e:	5e fc       	retal	r12

80007c70 <_fstat>:
80007c70:	d4 21       	pushm	r4-r7,lr
80007c72:	21 0d       	sub	sp,64
80007c74:	16 97       	mov	r7,r11
80007c76:	1a 9b       	mov	r11,sp
80007c78:	cf 2f       	rcall	80007c5c <_fstat_host>
80007c7a:	c0 34       	brge	80007c80 <_fstat+0x10>
80007c7c:	3f fc       	mov	r12,-1
80007c7e:	c1 c8       	rjmp	80007cb6 <_fstat+0x46>
80007c80:	40 08       	lddsp	r8,sp[0x0]
80007c82:	ae 08       	st.h	r7[0x0],r8
80007c84:	40 18       	lddsp	r8,sp[0x4]
80007c86:	ae 18       	st.h	r7[0x2],r8
80007c88:	40 28       	lddsp	r8,sp[0x8]
80007c8a:	8f 18       	st.w	r7[0x4],r8
80007c8c:	40 38       	lddsp	r8,sp[0xc]
80007c8e:	ae 48       	st.h	r7[0x8],r8
80007c90:	40 48       	lddsp	r8,sp[0x10]
80007c92:	ae 58       	st.h	r7[0xa],r8
80007c94:	40 58       	lddsp	r8,sp[0x14]
80007c96:	ae 68       	st.h	r7[0xc],r8
80007c98:	40 68       	lddsp	r8,sp[0x18]
80007c9a:	ae 78       	st.h	r7[0xe],r8
80007c9c:	40 88       	lddsp	r8,sp[0x20]
80007c9e:	8f 48       	st.w	r7[0x10],r8
80007ca0:	40 a8       	lddsp	r8,sp[0x28]
80007ca2:	8f b8       	st.w	r7[0x2c],r8
80007ca4:	40 c8       	lddsp	r8,sp[0x30]
80007ca6:	8f c8       	st.w	r7[0x30],r8
80007ca8:	40 d8       	lddsp	r8,sp[0x34]
80007caa:	8f 58       	st.w	r7[0x14],r8
80007cac:	40 e8       	lddsp	r8,sp[0x38]
80007cae:	30 0c       	mov	r12,0
80007cb0:	8f 78       	st.w	r7[0x1c],r8
80007cb2:	40 f8       	lddsp	r8,sp[0x3c]
80007cb4:	8f 98       	st.w	r7[0x24],r8
80007cb6:	2f 0d       	sub	sp,-64
80007cb8:	d8 22       	popm	r4-r7,pc
80007cba:	d7 03       	nop

80007cbc <_sbrk>:
80007cbc:	d4 01       	pushm	lr
80007cbe:	e0 68 06 5c 	mov	r8,1628
80007cc2:	70 09       	ld.w	r9,r8[0x0]
80007cc4:	58 09       	cp.w	r9,0
80007cc6:	c0 41       	brne	80007cce <_sbrk+0x12>
80007cc8:	e0 69 06 78 	mov	r9,1656
80007ccc:	91 09       	st.w	r8[0x0],r9
80007cce:	e0 69 06 5c 	mov	r9,1628
80007cd2:	e0 6a f0 00 	mov	r10,61440
80007cd6:	72 08       	ld.w	r8,r9[0x0]
80007cd8:	f0 0c 00 0c 	add	r12,r8,r12
80007cdc:	14 3c       	cp.w	r12,r10
80007cde:	e0 8b 00 04 	brhi	80007ce6 <_sbrk+0x2a>
80007ce2:	93 0c       	st.w	r9[0x0],r12
80007ce4:	c0 58       	rjmp	80007cee <_sbrk+0x32>
80007ce6:	c5 5c       	rcall	80007d90 <__errno>
80007ce8:	30 c8       	mov	r8,12
80007cea:	99 08       	st.w	r12[0x0],r8
80007cec:	3f f8       	mov	r8,-1
80007cee:	10 9c       	mov	r12,r8
80007cf0:	d8 02       	popm	pc
80007cf2:	d7 03       	nop

80007cf4 <_write_r>:
80007cf4:	d4 21       	pushm	r4-r7,lr
80007cf6:	16 98       	mov	r8,r11
80007cf8:	18 97       	mov	r7,r12
80007cfa:	10 9c       	mov	r12,r8
80007cfc:	30 08       	mov	r8,0
80007cfe:	14 9b       	mov	r11,r10
80007d00:	e0 66 06 70 	mov	r6,1648
80007d04:	12 9a       	mov	r10,r9
80007d06:	8d 08       	st.w	r6[0x0],r8
80007d08:	c9 6f       	rcall	80007c34 <_write>
80007d0a:	5b fc       	cp.w	r12,-1
80007d0c:	c0 51       	brne	80007d16 <_write_r+0x22>
80007d0e:	6c 08       	ld.w	r8,r6[0x0]
80007d10:	58 08       	cp.w	r8,0
80007d12:	ef f8 1a 03 	st.wne	r7[0xc],r8
80007d16:	d8 22       	popm	r4-r7,pc

80007d18 <_calloc_r>:
80007d18:	d4 21       	pushm	r4-r7,lr
80007d1a:	f4 0b 02 4b 	mul	r11,r10,r11
80007d1e:	fe b0 f8 5f 	rcall	80006ddc <_malloc_r>
80007d22:	18 97       	mov	r7,r12
80007d24:	c2 30       	breq	80007d6a <_calloc_r+0x52>
80007d26:	f8 fa ff fc 	ld.w	r10,r12[-4]
80007d2a:	e0 1a ff fc 	andl	r10,0xfffc
80007d2e:	20 4a       	sub	r10,4
80007d30:	e0 4a 00 24 	cp.w	r10,36
80007d34:	e0 8b 00 18 	brhi	80007d64 <_calloc_r+0x4c>
80007d38:	18 98       	mov	r8,r12
80007d3a:	59 3a       	cp.w	r10,19
80007d3c:	e0 88 00 0f 	brls	80007d5a <_calloc_r+0x42>
80007d40:	30 09       	mov	r9,0
80007d42:	10 a9       	st.w	r8++,r9
80007d44:	10 a9       	st.w	r8++,r9
80007d46:	59 ba       	cp.w	r10,27
80007d48:	e0 88 00 09 	brls	80007d5a <_calloc_r+0x42>
80007d4c:	10 a9       	st.w	r8++,r9
80007d4e:	10 a9       	st.w	r8++,r9
80007d50:	e0 4a 00 24 	cp.w	r10,36
80007d54:	c0 31       	brne	80007d5a <_calloc_r+0x42>
80007d56:	10 a9       	st.w	r8++,r9
80007d58:	10 a9       	st.w	r8++,r9
80007d5a:	30 09       	mov	r9,0
80007d5c:	10 a9       	st.w	r8++,r9
80007d5e:	91 19       	st.w	r8[0x4],r9
80007d60:	91 09       	st.w	r8[0x0],r9
80007d62:	c0 48       	rjmp	80007d6a <_calloc_r+0x52>
80007d64:	30 0b       	mov	r11,0
80007d66:	fe b0 fa 7d 	rcall	80007260 <memset>
80007d6a:	0e 9c       	mov	r12,r7
80007d6c:	d8 22       	popm	r4-r7,pc
80007d6e:	d7 03       	nop

80007d70 <_close_r>:
80007d70:	d4 21       	pushm	r4-r7,lr
80007d72:	30 08       	mov	r8,0
80007d74:	18 97       	mov	r7,r12
80007d76:	e0 66 06 70 	mov	r6,1648
80007d7a:	16 9c       	mov	r12,r11
80007d7c:	8d 08       	st.w	r6[0x0],r8
80007d7e:	c3 df       	rcall	80007bf8 <_close>
80007d80:	5b fc       	cp.w	r12,-1
80007d82:	c0 51       	brne	80007d8c <_close_r+0x1c>
80007d84:	6c 08       	ld.w	r8,r6[0x0]
80007d86:	58 08       	cp.w	r8,0
80007d88:	ef f8 1a 03 	st.wne	r7[0xc],r8
80007d8c:	d8 22       	popm	r4-r7,pc
80007d8e:	d7 03       	nop

80007d90 <__errno>:
80007d90:	e0 68 01 00 	mov	r8,256
80007d94:	70 0c       	ld.w	r12,r8[0x0]
80007d96:	2f 4c       	sub	r12,-12
80007d98:	5e fc       	retal	r12
80007d9a:	d7 03       	nop

80007d9c <_fclose_r>:
80007d9c:	d4 21       	pushm	r4-r7,lr
80007d9e:	18 96       	mov	r6,r12
80007da0:	16 97       	mov	r7,r11
80007da2:	58 0b       	cp.w	r11,0
80007da4:	c0 31       	brne	80007daa <_fclose_r+0xe>
80007da6:	16 95       	mov	r5,r11
80007da8:	c5 38       	rjmp	80007e4e <_fclose_r+0xb2>
80007daa:	fe b0 f4 87 	rcall	800066b8 <__sfp_lock_acquire>
80007dae:	58 06       	cp.w	r6,0
80007db0:	c0 70       	breq	80007dbe <_fclose_r+0x22>
80007db2:	6c 68       	ld.w	r8,r6[0x18]
80007db4:	58 08       	cp.w	r8,0
80007db6:	c0 41       	brne	80007dbe <_fclose_r+0x22>
80007db8:	0c 9c       	mov	r12,r6
80007dba:	fe b0 f4 d1 	rcall	8000675c <__sinit>
80007dbe:	fe c8 e8 16 	sub	r8,pc,-6122
80007dc2:	10 37       	cp.w	r7,r8
80007dc4:	c0 31       	brne	80007dca <_fclose_r+0x2e>
80007dc6:	6c 07       	ld.w	r7,r6[0x0]
80007dc8:	c0 c8       	rjmp	80007de0 <_fclose_r+0x44>
80007dca:	fe c8 e8 02 	sub	r8,pc,-6142
80007dce:	10 37       	cp.w	r7,r8
80007dd0:	c0 31       	brne	80007dd6 <_fclose_r+0x3a>
80007dd2:	6c 17       	ld.w	r7,r6[0x4]
80007dd4:	c0 68       	rjmp	80007de0 <_fclose_r+0x44>
80007dd6:	fe c8 e7 ee 	sub	r8,pc,-6162
80007dda:	10 37       	cp.w	r7,r8
80007ddc:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80007de0:	8e 69       	ld.sh	r9,r7[0xc]
80007de2:	30 08       	mov	r8,0
80007de4:	f0 09 19 00 	cp.h	r9,r8
80007de8:	c0 51       	brne	80007df2 <_fclose_r+0x56>
80007dea:	fe b0 f4 68 	rcall	800066ba <__sfp_lock_release>
80007dee:	30 05       	mov	r5,0
80007df0:	c2 f8       	rjmp	80007e4e <_fclose_r+0xb2>
80007df2:	0e 9b       	mov	r11,r7
80007df4:	0c 9c       	mov	r12,r6
80007df6:	fe b0 f3 db 	rcall	800065ac <_fflush_r>
80007dfa:	6e c8       	ld.w	r8,r7[0x30]
80007dfc:	18 95       	mov	r5,r12
80007dfe:	58 08       	cp.w	r8,0
80007e00:	c0 60       	breq	80007e0c <_fclose_r+0x70>
80007e02:	6e 8b       	ld.w	r11,r7[0x20]
80007e04:	0c 9c       	mov	r12,r6
80007e06:	5d 18       	icall	r8
80007e08:	f9 b5 05 ff 	movlt	r5,-1
80007e0c:	8e 68       	ld.sh	r8,r7[0xc]
80007e0e:	ed b8 00 07 	bld	r8,0x7
80007e12:	c0 51       	brne	80007e1c <_fclose_r+0x80>
80007e14:	6e 4b       	ld.w	r11,r7[0x10]
80007e16:	0c 9c       	mov	r12,r6
80007e18:	fe b0 f5 3c 	rcall	80006890 <_free_r>
80007e1c:	6e db       	ld.w	r11,r7[0x34]
80007e1e:	58 0b       	cp.w	r11,0
80007e20:	c0 a0       	breq	80007e34 <_fclose_r+0x98>
80007e22:	ee c8 ff bc 	sub	r8,r7,-68
80007e26:	10 3b       	cp.w	r11,r8
80007e28:	c0 40       	breq	80007e30 <_fclose_r+0x94>
80007e2a:	0c 9c       	mov	r12,r6
80007e2c:	fe b0 f5 32 	rcall	80006890 <_free_r>
80007e30:	30 08       	mov	r8,0
80007e32:	8f d8       	st.w	r7[0x34],r8
80007e34:	6f 2b       	ld.w	r11,r7[0x48]
80007e36:	58 0b       	cp.w	r11,0
80007e38:	c0 70       	breq	80007e46 <_fclose_r+0xaa>
80007e3a:	0c 9c       	mov	r12,r6
80007e3c:	fe b0 f5 2a 	rcall	80006890 <_free_r>
80007e40:	30 08       	mov	r8,0
80007e42:	ef 48 00 48 	st.w	r7[72],r8
80007e46:	30 08       	mov	r8,0
80007e48:	ae 68       	st.h	r7[0xc],r8
80007e4a:	fe b0 f4 38 	rcall	800066ba <__sfp_lock_release>
80007e4e:	0a 9c       	mov	r12,r5
80007e50:	d8 22       	popm	r4-r7,pc
80007e52:	d7 03       	nop

80007e54 <fclose>:
80007e54:	d4 01       	pushm	lr
80007e56:	e0 68 01 00 	mov	r8,256
80007e5a:	18 9b       	mov	r11,r12
80007e5c:	70 0c       	ld.w	r12,r8[0x0]
80007e5e:	c9 ff       	rcall	80007d9c <_fclose_r>
80007e60:	d8 02       	popm	pc
80007e62:	d7 03       	nop

80007e64 <_fstat_r>:
80007e64:	d4 21       	pushm	r4-r7,lr
80007e66:	16 98       	mov	r8,r11
80007e68:	18 97       	mov	r7,r12
80007e6a:	10 9c       	mov	r12,r8
80007e6c:	30 08       	mov	r8,0
80007e6e:	e0 66 06 70 	mov	r6,1648
80007e72:	14 9b       	mov	r11,r10
80007e74:	8d 08       	st.w	r6[0x0],r8
80007e76:	cf de       	rcall	80007c70 <_fstat>
80007e78:	5b fc       	cp.w	r12,-1
80007e7a:	c0 51       	brne	80007e84 <_fstat_r+0x20>
80007e7c:	6c 08       	ld.w	r8,r6[0x0]
80007e7e:	58 08       	cp.w	r8,0
80007e80:	ef f8 1a 03 	st.wne	r7[0xc],r8
80007e84:	d8 22       	popm	r4-r7,pc
80007e86:	d7 03       	nop

80007e88 <_lseek_r>:
80007e88:	d4 21       	pushm	r4-r7,lr
80007e8a:	16 98       	mov	r8,r11
80007e8c:	18 97       	mov	r7,r12
80007e8e:	10 9c       	mov	r12,r8
80007e90:	30 08       	mov	r8,0
80007e92:	14 9b       	mov	r11,r10
80007e94:	e0 66 06 70 	mov	r6,1648
80007e98:	12 9a       	mov	r10,r9
80007e9a:	8d 08       	st.w	r6[0x0],r8
80007e9c:	cb 8e       	rcall	80007c0c <_lseek>
80007e9e:	5b fc       	cp.w	r12,-1
80007ea0:	c0 51       	brne	80007eaa <_lseek_r+0x22>
80007ea2:	6c 08       	ld.w	r8,r6[0x0]
80007ea4:	58 08       	cp.w	r8,0
80007ea6:	ef f8 1a 03 	st.wne	r7[0xc],r8
80007eaa:	d8 22       	popm	r4-r7,pc

80007eac <_read_r>:
80007eac:	d4 21       	pushm	r4-r7,lr
80007eae:	16 98       	mov	r8,r11
80007eb0:	18 97       	mov	r7,r12
80007eb2:	10 9c       	mov	r12,r8
80007eb4:	30 08       	mov	r8,0
80007eb6:	14 9b       	mov	r11,r10
80007eb8:	e0 66 06 70 	mov	r6,1648
80007ebc:	12 9a       	mov	r10,r9
80007ebe:	8d 08       	st.w	r6[0x0],r8
80007ec0:	cb 0e       	rcall	80007c20 <_read>
80007ec2:	5b fc       	cp.w	r12,-1
80007ec4:	c0 51       	brne	80007ece <_read_r+0x22>
80007ec6:	6c 08       	ld.w	r8,r6[0x0]
80007ec8:	58 08       	cp.w	r8,0
80007eca:	ef f8 1a 03 	st.wne	r7[0xc],r8
80007ece:	d8 22       	popm	r4-r7,pc

80007ed0 <__avr32_f64_mul>:
80007ed0:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
80007ed4:	e0 80 00 dc 	breq	8000808c <__avr32_f64_mul_op1_zero>
80007ed8:	d4 21       	pushm	r4-r7,lr
80007eda:	f7 e9 20 0e 	eor	lr,r11,r9
80007ede:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80007ee2:	30 15       	mov	r5,1
80007ee4:	c4 30       	breq	80007f6a <__avr32_f64_mul_op1_subnormal>
80007ee6:	ab 6b       	lsl	r11,0xa
80007ee8:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
80007eec:	ab 6a       	lsl	r10,0xa
80007eee:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
80007ef2:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80007ef6:	c5 c0       	breq	80007fae <__avr32_f64_mul_op2_subnormal>
80007ef8:	a1 78       	lsl	r8,0x1
80007efa:	5c f9       	rol	r9
80007efc:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
80007f00:	e0 47 07 ff 	cp.w	r7,2047
80007f04:	c7 70       	breq	80007ff2 <__avr32_f64_mul_op_nan_or_inf>
80007f06:	e0 46 07 ff 	cp.w	r6,2047
80007f0a:	c7 40       	breq	80007ff2 <__avr32_f64_mul_op_nan_or_inf>
80007f0c:	ee 06 00 0c 	add	r12,r7,r6
80007f10:	e0 2c 03 fe 	sub	r12,1022
80007f14:	f6 08 06 44 	mulu.d	r4,r11,r8
80007f18:	f4 09 07 44 	macu.d	r4,r10,r9
80007f1c:	f4 08 06 46 	mulu.d	r6,r10,r8
80007f20:	f6 09 06 4a 	mulu.d	r10,r11,r9
80007f24:	08 07       	add	r7,r4
80007f26:	f4 05 00 4a 	adc	r10,r10,r5
80007f2a:	5c 0b       	acr	r11
80007f2c:	ed bb 00 14 	bld	r11,0x14
80007f30:	c0 50       	breq	80007f3a <__avr32_f64_mul+0x6a>
80007f32:	a1 77       	lsl	r7,0x1
80007f34:	5c fa       	rol	r10
80007f36:	5c fb       	rol	r11
80007f38:	20 1c       	sub	r12,1
80007f3a:	58 0c       	cp.w	r12,0
80007f3c:	e0 8a 00 6f 	brle	8000801a <__avr32_f64_mul_res_subnormal>
80007f40:	e0 4c 07 ff 	cp.w	r12,2047
80007f44:	e0 84 00 9c 	brge	8000807c <__avr32_f64_mul_res_inf>
80007f48:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
80007f4c:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
80007f50:	ef e6 12 17 	or	r7,r7,r6>>0x1
80007f54:	ee 17 80 00 	eorh	r7,0x8000
80007f58:	f1 b7 04 20 	satu	r7,0x1
80007f5c:	0e 0a       	add	r10,r7
80007f5e:	5c 0b       	acr	r11
80007f60:	ed be 00 1f 	bld	lr,0x1f
80007f64:	ef bb 00 1f 	bst	r11,0x1f
80007f68:	d8 22       	popm	r4-r7,pc

80007f6a <__avr32_f64_mul_op1_subnormal>:
80007f6a:	e4 1b 00 0f 	andh	r11,0xf
80007f6e:	f4 0c 12 00 	clz	r12,r10
80007f72:	f6 06 12 00 	clz	r6,r11
80007f76:	f7 bc 03 e1 	sublo	r12,-31
80007f7a:	f8 06 17 30 	movlo	r6,r12
80007f7e:	f7 b6 02 01 	subhs	r6,1
80007f82:	e0 46 00 20 	cp.w	r6,32
80007f86:	c0 d4       	brge	80007fa0 <__avr32_f64_mul_op1_subnormal+0x36>
80007f88:	ec 0c 11 20 	rsub	r12,r6,32
80007f8c:	f6 06 09 4b 	lsl	r11,r11,r6
80007f90:	f4 0c 0a 4c 	lsr	r12,r10,r12
80007f94:	18 4b       	or	r11,r12
80007f96:	f4 06 09 4a 	lsl	r10,r10,r6
80007f9a:	20 b6       	sub	r6,11
80007f9c:	0c 17       	sub	r7,r6
80007f9e:	ca ab       	rjmp	80007ef2 <__avr32_f64_mul+0x22>
80007fa0:	f4 06 09 4b 	lsl	r11,r10,r6
80007fa4:	c6 40       	breq	8000806c <__avr32_f64_mul_res_zero>
80007fa6:	30 0a       	mov	r10,0
80007fa8:	20 b6       	sub	r6,11
80007faa:	0c 17       	sub	r7,r6
80007fac:	ca 3b       	rjmp	80007ef2 <__avr32_f64_mul+0x22>

80007fae <__avr32_f64_mul_op2_subnormal>:
80007fae:	e4 19 00 0f 	andh	r9,0xf
80007fb2:	f0 0c 12 00 	clz	r12,r8
80007fb6:	f2 05 12 00 	clz	r5,r9
80007fba:	f7 bc 03 ea 	sublo	r12,-22
80007fbe:	f8 05 17 30 	movlo	r5,r12
80007fc2:	f7 b5 02 0a 	subhs	r5,10
80007fc6:	e0 45 00 20 	cp.w	r5,32
80007fca:	c0 d4       	brge	80007fe4 <__avr32_f64_mul_op2_subnormal+0x36>
80007fcc:	ea 0c 11 20 	rsub	r12,r5,32
80007fd0:	f2 05 09 49 	lsl	r9,r9,r5
80007fd4:	f0 0c 0a 4c 	lsr	r12,r8,r12
80007fd8:	18 49       	or	r9,r12
80007fda:	f0 05 09 48 	lsl	r8,r8,r5
80007fde:	20 25       	sub	r5,2
80007fe0:	0a 16       	sub	r6,r5
80007fe2:	c8 fb       	rjmp	80007f00 <__avr32_f64_mul+0x30>
80007fe4:	f0 05 09 49 	lsl	r9,r8,r5
80007fe8:	c4 20       	breq	8000806c <__avr32_f64_mul_res_zero>
80007fea:	30 08       	mov	r8,0
80007fec:	20 25       	sub	r5,2
80007fee:	0a 16       	sub	r6,r5
80007ff0:	c8 8b       	rjmp	80007f00 <__avr32_f64_mul+0x30>

80007ff2 <__avr32_f64_mul_op_nan_or_inf>:
80007ff2:	e4 19 00 0f 	andh	r9,0xf
80007ff6:	e4 1b 00 0f 	andh	r11,0xf
80007ffa:	14 4b       	or	r11,r10
80007ffc:	10 49       	or	r9,r8
80007ffe:	e0 47 07 ff 	cp.w	r7,2047
80008002:	c0 91       	brne	80008014 <__avr32_f64_mul_op1_not_naninf>
80008004:	58 0b       	cp.w	r11,0
80008006:	c3 81       	brne	80008076 <__avr32_f64_mul_res_nan>
80008008:	e0 46 07 ff 	cp.w	r6,2047
8000800c:	c3 81       	brne	8000807c <__avr32_f64_mul_res_inf>
8000800e:	58 09       	cp.w	r9,0
80008010:	c3 60       	breq	8000807c <__avr32_f64_mul_res_inf>
80008012:	c3 28       	rjmp	80008076 <__avr32_f64_mul_res_nan>

80008014 <__avr32_f64_mul_op1_not_naninf>:
80008014:	58 09       	cp.w	r9,0
80008016:	c3 30       	breq	8000807c <__avr32_f64_mul_res_inf>
80008018:	c2 f8       	rjmp	80008076 <__avr32_f64_mul_res_nan>

8000801a <__avr32_f64_mul_res_subnormal>:
8000801a:	5c 3c       	neg	r12
8000801c:	2f fc       	sub	r12,-1
8000801e:	f1 bc 04 c0 	satu	r12,0x6
80008022:	e0 4c 00 20 	cp.w	r12,32
80008026:	c1 14       	brge	80008048 <__avr32_f64_mul_res_subnormal+0x2e>
80008028:	f8 08 11 20 	rsub	r8,r12,32
8000802c:	0e 46       	or	r6,r7
8000802e:	ee 0c 0a 47 	lsr	r7,r7,r12
80008032:	f4 08 09 49 	lsl	r9,r10,r8
80008036:	12 47       	or	r7,r9
80008038:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000803c:	f6 08 09 49 	lsl	r9,r11,r8
80008040:	12 4a       	or	r10,r9
80008042:	f6 0c 0a 4b 	lsr	r11,r11,r12
80008046:	c8 3b       	rjmp	80007f4c <__avr32_f64_mul+0x7c>
80008048:	f8 08 11 20 	rsub	r8,r12,32
8000804c:	f9 b9 00 00 	moveq	r9,0
80008050:	c0 30       	breq	80008056 <__avr32_f64_mul_res_subnormal+0x3c>
80008052:	f6 08 09 49 	lsl	r9,r11,r8
80008056:	0e 46       	or	r6,r7
80008058:	ed ea 10 16 	or	r6,r6,r10<<0x1
8000805c:	f4 0c 0a 4a 	lsr	r10,r10,r12
80008060:	f3 ea 10 07 	or	r7,r9,r10
80008064:	f6 0c 0a 4a 	lsr	r10,r11,r12
80008068:	30 0b       	mov	r11,0
8000806a:	c7 1b       	rjmp	80007f4c <__avr32_f64_mul+0x7c>

8000806c <__avr32_f64_mul_res_zero>:
8000806c:	1c 9b       	mov	r11,lr
8000806e:	e6 1b 80 00 	andh	r11,0x8000,COH
80008072:	30 0a       	mov	r10,0
80008074:	d8 22       	popm	r4-r7,pc

80008076 <__avr32_f64_mul_res_nan>:
80008076:	3f fb       	mov	r11,-1
80008078:	3f fa       	mov	r10,-1
8000807a:	d8 22       	popm	r4-r7,pc

8000807c <__avr32_f64_mul_res_inf>:
8000807c:	f0 6b 00 00 	mov	r11,-1048576
80008080:	ed be 00 1f 	bld	lr,0x1f
80008084:	ef bb 00 1f 	bst	r11,0x1f
80008088:	30 0a       	mov	r10,0
8000808a:	d8 22       	popm	r4-r7,pc

8000808c <__avr32_f64_mul_op1_zero>:
8000808c:	f7 e9 20 0b 	eor	r11,r11,r9
80008090:	e6 1b 80 00 	andh	r11,0x8000,COH
80008094:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
80008098:	e0 4c 07 ff 	cp.w	r12,2047
8000809c:	5e 1c       	retne	r12
8000809e:	3f fa       	mov	r10,-1
800080a0:	3f fb       	mov	r11,-1
800080a2:	5e fc       	retal	r12

800080a4 <__avr32_f64_sub_from_add>:
800080a4:	ee 19 80 00 	eorh	r9,0x8000

800080a8 <__avr32_f64_sub>:
800080a8:	f7 e9 20 0c 	eor	r12,r11,r9
800080ac:	e0 86 00 ca 	brmi	80008240 <__avr32_f64_add_from_sub>
800080b0:	eb cd 40 e0 	pushm	r5-r7,lr
800080b4:	16 9c       	mov	r12,r11
800080b6:	e6 1c 80 00 	andh	r12,0x8000,COH
800080ba:	bf db       	cbr	r11,0x1f
800080bc:	bf d9       	cbr	r9,0x1f
800080be:	10 3a       	cp.w	r10,r8
800080c0:	f2 0b 13 00 	cpc	r11,r9
800080c4:	c0 92       	brcc	800080d6 <__avr32_f64_sub+0x2e>
800080c6:	16 97       	mov	r7,r11
800080c8:	12 9b       	mov	r11,r9
800080ca:	0e 99       	mov	r9,r7
800080cc:	14 97       	mov	r7,r10
800080ce:	10 9a       	mov	r10,r8
800080d0:	0e 98       	mov	r8,r7
800080d2:	ee 1c 80 00 	eorh	r12,0x8000
800080d6:	f6 07 16 14 	lsr	r7,r11,0x14
800080da:	ab 7b       	lsl	r11,0xb
800080dc:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
800080e0:	ab 7a       	lsl	r10,0xb
800080e2:	bf bb       	sbr	r11,0x1f
800080e4:	f2 06 16 14 	lsr	r6,r9,0x14
800080e8:	c4 40       	breq	80008170 <__avr32_f64_sub_opL_subnormal>
800080ea:	ab 79       	lsl	r9,0xb
800080ec:	f3 e8 13 59 	or	r9,r9,r8>>0x15
800080f0:	ab 78       	lsl	r8,0xb
800080f2:	bf b9       	sbr	r9,0x1f

800080f4 <__avr32_f64_sub_opL_subnormal_done>:
800080f4:	e0 47 07 ff 	cp.w	r7,2047
800080f8:	c4 f0       	breq	80008196 <__avr32_f64_sub_opH_nan_or_inf>
800080fa:	0e 26       	rsub	r6,r7
800080fc:	c1 20       	breq	80008120 <__avr32_f64_sub_shift_done>
800080fe:	ec 05 11 20 	rsub	r5,r6,32
80008102:	e0 46 00 20 	cp.w	r6,32
80008106:	c7 c2       	brcc	800081fe <__avr32_f64_sub_longshift>
80008108:	f0 05 09 4e 	lsl	lr,r8,r5
8000810c:	f2 05 09 45 	lsl	r5,r9,r5
80008110:	f0 06 0a 48 	lsr	r8,r8,r6
80008114:	f2 06 0a 49 	lsr	r9,r9,r6
80008118:	0a 48       	or	r8,r5
8000811a:	58 0e       	cp.w	lr,0
8000811c:	5f 1e       	srne	lr
8000811e:	1c 48       	or	r8,lr

80008120 <__avr32_f64_sub_shift_done>:
80008120:	10 1a       	sub	r10,r8
80008122:	f6 09 01 4b 	sbc	r11,r11,r9
80008126:	f6 06 12 00 	clz	r6,r11
8000812a:	c0 e0       	breq	80008146 <__avr32_f64_sub_longnormalize_done>
8000812c:	c7 83       	brcs	8000821c <__avr32_f64_sub_longnormalize>
8000812e:	ec 0e 11 20 	rsub	lr,r6,32
80008132:	f6 06 09 4b 	lsl	r11,r11,r6
80008136:	f4 0e 0a 4e 	lsr	lr,r10,lr
8000813a:	1c 4b       	or	r11,lr
8000813c:	f4 06 09 4a 	lsl	r10,r10,r6
80008140:	0c 17       	sub	r7,r6
80008142:	e0 8a 00 39 	brle	800081b4 <__avr32_f64_sub_subnormal_result>

80008146 <__avr32_f64_sub_longnormalize_done>:
80008146:	f4 09 15 15 	lsl	r9,r10,0x15
8000814a:	ab 9a       	lsr	r10,0xb
8000814c:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80008150:	ab 9b       	lsr	r11,0xb
80008152:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80008156:	18 4b       	or	r11,r12

80008158 <__avr32_f64_sub_round>:
80008158:	fc 17 80 00 	movh	r7,0x8000
8000815c:	ed ba 00 00 	bld	r10,0x0
80008160:	f7 b7 01 ff 	subne	r7,-1
80008164:	0e 39       	cp.w	r9,r7
80008166:	5f 29       	srhs	r9
80008168:	12 0a       	add	r10,r9
8000816a:	5c 0b       	acr	r11
8000816c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008170 <__avr32_f64_sub_opL_subnormal>:
80008170:	ab 79       	lsl	r9,0xb
80008172:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80008176:	ab 78       	lsl	r8,0xb
80008178:	f3 e8 10 0e 	or	lr,r9,r8
8000817c:	f9 b6 01 01 	movne	r6,1
80008180:	ee 0e 11 00 	rsub	lr,r7,0
80008184:	f9 b7 00 01 	moveq	r7,1
80008188:	ef bb 00 1f 	bst	r11,0x1f
8000818c:	f7 ea 10 0e 	or	lr,r11,r10
80008190:	f9 b7 00 00 	moveq	r7,0
80008194:	cb 0b       	rjmp	800080f4 <__avr32_f64_sub_opL_subnormal_done>

80008196 <__avr32_f64_sub_opH_nan_or_inf>:
80008196:	bf db       	cbr	r11,0x1f
80008198:	f7 ea 10 0e 	or	lr,r11,r10
8000819c:	c0 81       	brne	800081ac <__avr32_f64_sub_return_nan>
8000819e:	e0 46 07 ff 	cp.w	r6,2047
800081a2:	c0 50       	breq	800081ac <__avr32_f64_sub_return_nan>
800081a4:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
800081a8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800081ac <__avr32_f64_sub_return_nan>:
800081ac:	3f fa       	mov	r10,-1
800081ae:	3f fb       	mov	r11,-1
800081b0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800081b4 <__avr32_f64_sub_subnormal_result>:
800081b4:	5c 37       	neg	r7
800081b6:	2f f7       	sub	r7,-1
800081b8:	f1 b7 04 c0 	satu	r7,0x6
800081bc:	e0 47 00 20 	cp.w	r7,32
800081c0:	c1 14       	brge	800081e2 <__avr32_f64_sub_subnormal_result+0x2e>
800081c2:	ee 08 11 20 	rsub	r8,r7,32
800081c6:	f4 08 09 49 	lsl	r9,r10,r8
800081ca:	5f 16       	srne	r6
800081cc:	f4 07 0a 4a 	lsr	r10,r10,r7
800081d0:	0c 4a       	or	r10,r6
800081d2:	f6 08 09 49 	lsl	r9,r11,r8
800081d6:	f5 e9 10 0a 	or	r10,r10,r9
800081da:	f4 07 0a 4b 	lsr	r11,r10,r7
800081de:	30 07       	mov	r7,0
800081e0:	cb 3b       	rjmp	80008146 <__avr32_f64_sub_longnormalize_done>
800081e2:	ee 08 11 40 	rsub	r8,r7,64
800081e6:	f6 08 09 49 	lsl	r9,r11,r8
800081ea:	14 49       	or	r9,r10
800081ec:	5f 16       	srne	r6
800081ee:	f6 07 0a 4a 	lsr	r10,r11,r7
800081f2:	0c 4a       	or	r10,r6
800081f4:	30 0b       	mov	r11,0
800081f6:	30 07       	mov	r7,0
800081f8:	ca 7b       	rjmp	80008146 <__avr32_f64_sub_longnormalize_done>
800081fa:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800081fe <__avr32_f64_sub_longshift>:
800081fe:	f1 b6 04 c0 	satu	r6,0x6
80008202:	f0 0e 17 00 	moveq	lr,r8
80008206:	c0 40       	breq	8000820e <__avr32_f64_sub_longshift+0x10>
80008208:	f2 05 09 4e 	lsl	lr,r9,r5
8000820c:	10 4e       	or	lr,r8
8000820e:	f2 06 0a 48 	lsr	r8,r9,r6
80008212:	30 09       	mov	r9,0
80008214:	58 0e       	cp.w	lr,0
80008216:	5f 1e       	srne	lr
80008218:	1c 48       	or	r8,lr
8000821a:	c8 3b       	rjmp	80008120 <__avr32_f64_sub_shift_done>

8000821c <__avr32_f64_sub_longnormalize>:
8000821c:	f4 06 12 00 	clz	r6,r10
80008220:	f9 b7 03 00 	movlo	r7,0
80008224:	f9 b6 03 00 	movlo	r6,0
80008228:	f9 bc 03 00 	movlo	r12,0
8000822c:	f7 b6 02 e0 	subhs	r6,-32
80008230:	f4 06 09 4b 	lsl	r11,r10,r6
80008234:	30 0a       	mov	r10,0
80008236:	0c 17       	sub	r7,r6
80008238:	fe 9a ff be 	brle	800081b4 <__avr32_f64_sub_subnormal_result>
8000823c:	c8 5b       	rjmp	80008146 <__avr32_f64_sub_longnormalize_done>
8000823e:	d7 03       	nop

80008240 <__avr32_f64_add_from_sub>:
80008240:	ee 19 80 00 	eorh	r9,0x8000

80008244 <__avr32_f64_add>:
80008244:	f7 e9 20 0c 	eor	r12,r11,r9
80008248:	fe 96 ff 2e 	brmi	800080a4 <__avr32_f64_sub_from_add>
8000824c:	eb cd 40 e0 	pushm	r5-r7,lr
80008250:	16 9c       	mov	r12,r11
80008252:	e6 1c 80 00 	andh	r12,0x8000,COH
80008256:	bf db       	cbr	r11,0x1f
80008258:	bf d9       	cbr	r9,0x1f
8000825a:	12 3b       	cp.w	r11,r9
8000825c:	c0 72       	brcc	8000826a <__avr32_f64_add+0x26>
8000825e:	16 97       	mov	r7,r11
80008260:	12 9b       	mov	r11,r9
80008262:	0e 99       	mov	r9,r7
80008264:	14 97       	mov	r7,r10
80008266:	10 9a       	mov	r10,r8
80008268:	0e 98       	mov	r8,r7
8000826a:	30 0e       	mov	lr,0
8000826c:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80008270:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
80008274:	b5 ab       	sbr	r11,0x14
80008276:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8000827a:	c6 20       	breq	8000833e <__avr32_f64_add_op2_subnormal>
8000827c:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
80008280:	b5 a9       	sbr	r9,0x14
80008282:	e0 47 07 ff 	cp.w	r7,2047
80008286:	c2 80       	breq	800082d6 <__avr32_f64_add_opH_nan_or_inf>
80008288:	0e 26       	rsub	r6,r7
8000828a:	c1 20       	breq	800082ae <__avr32_f64_add_shift_done>
8000828c:	e0 46 00 36 	cp.w	r6,54
80008290:	c1 52       	brcc	800082ba <__avr32_f64_add_res_of_done>
80008292:	ec 05 11 20 	rsub	r5,r6,32
80008296:	e0 46 00 20 	cp.w	r6,32
8000829a:	c3 52       	brcc	80008304 <__avr32_f64_add_longshift>
8000829c:	f0 05 09 4e 	lsl	lr,r8,r5
800082a0:	f2 05 09 45 	lsl	r5,r9,r5
800082a4:	f0 06 0a 48 	lsr	r8,r8,r6
800082a8:	f2 06 0a 49 	lsr	r9,r9,r6
800082ac:	0a 48       	or	r8,r5

800082ae <__avr32_f64_add_shift_done>:
800082ae:	10 0a       	add	r10,r8
800082b0:	f6 09 00 4b 	adc	r11,r11,r9
800082b4:	ed bb 00 15 	bld	r11,0x15
800082b8:	c3 40       	breq	80008320 <__avr32_f64_add_res_of>

800082ba <__avr32_f64_add_res_of_done>:
800082ba:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
800082be:	18 4b       	or	r11,r12

800082c0 <__avr32_f64_add_round>:
800082c0:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
800082c4:	18 4e       	or	lr,r12
800082c6:	ee 1e 80 00 	eorh	lr,0x8000
800082ca:	f1 be 04 20 	satu	lr,0x1
800082ce:	1c 0a       	add	r10,lr
800082d0:	5c 0b       	acr	r11
800082d2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800082d6 <__avr32_f64_add_opH_nan_or_inf>:
800082d6:	b5 cb       	cbr	r11,0x14
800082d8:	f7 ea 10 0e 	or	lr,r11,r10
800082dc:	c1 01       	brne	800082fc <__avr32_f64_add_return_nan>
800082de:	e0 46 07 ff 	cp.w	r6,2047
800082e2:	c0 30       	breq	800082e8 <__avr32_f64_add_opL_nan_or_inf>
800082e4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800082e8 <__avr32_f64_add_opL_nan_or_inf>:
800082e8:	b5 c9       	cbr	r9,0x14
800082ea:	f3 e8 10 0e 	or	lr,r9,r8
800082ee:	c0 71       	brne	800082fc <__avr32_f64_add_return_nan>
800082f0:	30 0a       	mov	r10,0
800082f2:	fc 1b 7f f0 	movh	r11,0x7ff0
800082f6:	18 4b       	or	r11,r12
800082f8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800082fc <__avr32_f64_add_return_nan>:
800082fc:	3f fa       	mov	r10,-1
800082fe:	3f fb       	mov	r11,-1
80008300:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008304 <__avr32_f64_add_longshift>:
80008304:	f1 b6 04 c0 	satu	r6,0x6
80008308:	f0 0e 17 00 	moveq	lr,r8
8000830c:	c0 60       	breq	80008318 <__avr32_f64_add_longshift+0x14>
8000830e:	f2 05 09 4e 	lsl	lr,r9,r5
80008312:	58 08       	cp.w	r8,0
80008314:	5f 18       	srne	r8
80008316:	10 4e       	or	lr,r8
80008318:	f2 06 0a 48 	lsr	r8,r9,r6
8000831c:	30 09       	mov	r9,0
8000831e:	cc 8b       	rjmp	800082ae <__avr32_f64_add_shift_done>

80008320 <__avr32_f64_add_res_of>:
80008320:	fd ee 10 1e 	or	lr,lr,lr<<0x1
80008324:	a1 9b       	lsr	r11,0x1
80008326:	5d 0a       	ror	r10
80008328:	5d 0e       	ror	lr
8000832a:	2f f7       	sub	r7,-1
8000832c:	e0 47 07 ff 	cp.w	r7,2047
80008330:	f9 ba 00 00 	moveq	r10,0
80008334:	f9 bb 00 00 	moveq	r11,0
80008338:	f9 be 00 00 	moveq	lr,0
8000833c:	cb fb       	rjmp	800082ba <__avr32_f64_add_res_of_done>

8000833e <__avr32_f64_add_op2_subnormal>:
8000833e:	30 16       	mov	r6,1
80008340:	58 07       	cp.w	r7,0
80008342:	ca 01       	brne	80008282 <__avr32_f64_add+0x3e>
80008344:	b5 cb       	cbr	r11,0x14
80008346:	10 0a       	add	r10,r8
80008348:	f6 09 00 4b 	adc	r11,r11,r9
8000834c:	18 4b       	or	r11,r12
8000834e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80008352:	d7 03       	nop

80008354 <__avr32_f64_to_u32>:
80008354:	58 0b       	cp.w	r11,0
80008356:	5e 6d       	retmi	0

80008358 <__avr32_f64_to_s32>:
80008358:	f6 0c 15 01 	lsl	r12,r11,0x1
8000835c:	b5 9c       	lsr	r12,0x15
8000835e:	e0 2c 03 ff 	sub	r12,1023
80008362:	5e 3d       	retlo	0
80008364:	f8 0c 11 1f 	rsub	r12,r12,31
80008368:	16 99       	mov	r9,r11
8000836a:	ab 7b       	lsl	r11,0xb
8000836c:	bf bb       	sbr	r11,0x1f
8000836e:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
80008372:	f6 0c 0a 4b 	lsr	r11,r11,r12
80008376:	a1 79       	lsl	r9,0x1
80008378:	5e 2b       	reths	r11
8000837a:	5c 3b       	neg	r11
8000837c:	5e fb       	retal	r11

8000837e <__avr32_u32_to_f64>:
8000837e:	f8 cb 00 00 	sub	r11,r12,0
80008382:	30 0c       	mov	r12,0
80008384:	c0 38       	rjmp	8000838a <__avr32_s32_to_f64+0x4>

80008386 <__avr32_s32_to_f64>:
80008386:	18 9b       	mov	r11,r12
80008388:	5c 4b       	abs	r11
8000838a:	30 0a       	mov	r10,0
8000838c:	5e 0b       	reteq	r11
8000838e:	d4 01       	pushm	lr
80008390:	e0 69 04 1e 	mov	r9,1054
80008394:	f6 08 12 00 	clz	r8,r11
80008398:	c1 70       	breq	800083c6 <__avr32_s32_to_f64+0x40>
8000839a:	c0 c3       	brcs	800083b2 <__avr32_s32_to_f64+0x2c>
8000839c:	f0 0e 11 20 	rsub	lr,r8,32
800083a0:	f6 08 09 4b 	lsl	r11,r11,r8
800083a4:	f4 0e 0a 4e 	lsr	lr,r10,lr
800083a8:	1c 4b       	or	r11,lr
800083aa:	f4 08 09 4a 	lsl	r10,r10,r8
800083ae:	10 19       	sub	r9,r8
800083b0:	c0 b8       	rjmp	800083c6 <__avr32_s32_to_f64+0x40>
800083b2:	f4 08 12 00 	clz	r8,r10
800083b6:	f9 b8 03 00 	movlo	r8,0
800083ba:	f7 b8 02 e0 	subhs	r8,-32
800083be:	f4 08 09 4b 	lsl	r11,r10,r8
800083c2:	30 0a       	mov	r10,0
800083c4:	10 19       	sub	r9,r8
800083c6:	58 09       	cp.w	r9,0
800083c8:	e0 89 00 30 	brgt	80008428 <__avr32_s32_to_f64+0xa2>
800083cc:	5c 39       	neg	r9
800083ce:	2f f9       	sub	r9,-1
800083d0:	e0 49 00 36 	cp.w	r9,54
800083d4:	c0 43       	brcs	800083dc <__avr32_s32_to_f64+0x56>
800083d6:	30 0b       	mov	r11,0
800083d8:	30 0a       	mov	r10,0
800083da:	c2 68       	rjmp	80008426 <__avr32_s32_to_f64+0xa0>
800083dc:	2f 69       	sub	r9,-10
800083de:	f2 08 11 20 	rsub	r8,r9,32
800083e2:	e0 49 00 20 	cp.w	r9,32
800083e6:	c0 b2       	brcc	800083fc <__avr32_s32_to_f64+0x76>
800083e8:	f4 08 09 4e 	lsl	lr,r10,r8
800083ec:	f6 08 09 48 	lsl	r8,r11,r8
800083f0:	f4 09 0a 4a 	lsr	r10,r10,r9
800083f4:	f6 09 0a 4b 	lsr	r11,r11,r9
800083f8:	10 4b       	or	r11,r8
800083fa:	c0 88       	rjmp	8000840a <__avr32_s32_to_f64+0x84>
800083fc:	f6 08 09 4e 	lsl	lr,r11,r8
80008400:	14 4e       	or	lr,r10
80008402:	16 9a       	mov	r10,r11
80008404:	30 0b       	mov	r11,0
80008406:	f4 09 0a 4a 	lsr	r10,r10,r9
8000840a:	ed ba 00 00 	bld	r10,0x0
8000840e:	c0 92       	brcc	80008420 <__avr32_s32_to_f64+0x9a>
80008410:	1c 7e       	tst	lr,lr
80008412:	c0 41       	brne	8000841a <__avr32_s32_to_f64+0x94>
80008414:	ed ba 00 01 	bld	r10,0x1
80008418:	c0 42       	brcc	80008420 <__avr32_s32_to_f64+0x9a>
8000841a:	2f fa       	sub	r10,-1
8000841c:	f7 bb 02 ff 	subhs	r11,-1
80008420:	5c fc       	rol	r12
80008422:	5d 0b       	ror	r11
80008424:	5d 0a       	ror	r10
80008426:	d8 02       	popm	pc
80008428:	e0 68 03 ff 	mov	r8,1023
8000842c:	ed ba 00 0b 	bld	r10,0xb
80008430:	f7 b8 00 ff 	subeq	r8,-1
80008434:	10 0a       	add	r10,r8
80008436:	5c 0b       	acr	r11
80008438:	f7 b9 03 fe 	sublo	r9,-2
8000843c:	e0 49 07 ff 	cp.w	r9,2047
80008440:	c0 55       	brlt	8000844a <__avr32_s32_to_f64+0xc4>
80008442:	30 0a       	mov	r10,0
80008444:	fc 1b ff e0 	movh	r11,0xffe0
80008448:	c0 c8       	rjmp	80008460 <__floatsidf_return_op1>
8000844a:	ed bb 00 1f 	bld	r11,0x1f
8000844e:	f7 b9 01 01 	subne	r9,1
80008452:	ab 9a       	lsr	r10,0xb
80008454:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80008458:	a1 7b       	lsl	r11,0x1
8000845a:	ab 9b       	lsr	r11,0xb
8000845c:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

80008460 <__floatsidf_return_op1>:
80008460:	a1 7c       	lsl	r12,0x1
80008462:	5d 0b       	ror	r11
80008464:	d8 02       	popm	pc

80008466 <__avr32_f64_cmp_eq>:
80008466:	10 3a       	cp.w	r10,r8
80008468:	f2 0b 13 00 	cpc	r11,r9
8000846c:	c0 80       	breq	8000847c <__avr32_f64_cmp_eq+0x16>
8000846e:	a1 7b       	lsl	r11,0x1
80008470:	a1 79       	lsl	r9,0x1
80008472:	14 4b       	or	r11,r10
80008474:	12 4b       	or	r11,r9
80008476:	10 4b       	or	r11,r8
80008478:	5e 0f       	reteq	1
8000847a:	5e fd       	retal	0
8000847c:	a1 7b       	lsl	r11,0x1
8000847e:	fc 1c ff e0 	movh	r12,0xffe0
80008482:	58 0a       	cp.w	r10,0
80008484:	f8 0b 13 00 	cpc	r11,r12
80008488:	5e 8f       	retls	1
8000848a:	5e fd       	retal	0

8000848c <__avr32_f64_cmp_ge>:
8000848c:	1a de       	st.w	--sp,lr
8000848e:	1a d7       	st.w	--sp,r7
80008490:	a1 7b       	lsl	r11,0x1
80008492:	5f 3c       	srlo	r12
80008494:	a1 79       	lsl	r9,0x1
80008496:	5f 37       	srlo	r7
80008498:	5c fc       	rol	r12
8000849a:	fc 1e ff e0 	movh	lr,0xffe0
8000849e:	58 0a       	cp.w	r10,0
800084a0:	fc 0b 13 00 	cpc	r11,lr
800084a4:	e0 8b 00 1d 	brhi	800084de <__avr32_f64_cmp_ge+0x52>
800084a8:	58 08       	cp.w	r8,0
800084aa:	fc 09 13 00 	cpc	r9,lr
800084ae:	e0 8b 00 18 	brhi	800084de <__avr32_f64_cmp_ge+0x52>
800084b2:	58 0b       	cp.w	r11,0
800084b4:	f5 ba 00 00 	subfeq	r10,0
800084b8:	c1 50       	breq	800084e2 <__avr32_f64_cmp_ge+0x56>
800084ba:	1b 07       	ld.w	r7,sp++
800084bc:	1b 0e       	ld.w	lr,sp++
800084be:	58 3c       	cp.w	r12,3
800084c0:	c0 a0       	breq	800084d4 <__avr32_f64_cmp_ge+0x48>
800084c2:	58 1c       	cp.w	r12,1
800084c4:	c0 33       	brcs	800084ca <__avr32_f64_cmp_ge+0x3e>
800084c6:	5e 0f       	reteq	1
800084c8:	5e 1d       	retne	0
800084ca:	10 3a       	cp.w	r10,r8
800084cc:	f2 0b 13 00 	cpc	r11,r9
800084d0:	5e 2f       	reths	1
800084d2:	5e 3d       	retlo	0
800084d4:	14 38       	cp.w	r8,r10
800084d6:	f6 09 13 00 	cpc	r9,r11
800084da:	5e 2f       	reths	1
800084dc:	5e 3d       	retlo	0
800084de:	1b 07       	ld.w	r7,sp++
800084e0:	d8 0a       	popm	pc,r12=0
800084e2:	58 17       	cp.w	r7,1
800084e4:	5f 0c       	sreq	r12
800084e6:	58 09       	cp.w	r9,0
800084e8:	f5 b8 00 00 	subfeq	r8,0
800084ec:	1b 07       	ld.w	r7,sp++
800084ee:	1b 0e       	ld.w	lr,sp++
800084f0:	5e 0f       	reteq	1
800084f2:	5e fc       	retal	r12

800084f4 <__avr32_f64_cmp_lt>:
800084f4:	1a de       	st.w	--sp,lr
800084f6:	1a d7       	st.w	--sp,r7
800084f8:	a1 7b       	lsl	r11,0x1
800084fa:	5f 3c       	srlo	r12
800084fc:	a1 79       	lsl	r9,0x1
800084fe:	5f 37       	srlo	r7
80008500:	5c fc       	rol	r12
80008502:	fc 1e ff e0 	movh	lr,0xffe0
80008506:	58 0a       	cp.w	r10,0
80008508:	fc 0b 13 00 	cpc	r11,lr
8000850c:	e0 8b 00 1d 	brhi	80008546 <__avr32_f64_cmp_lt+0x52>
80008510:	58 08       	cp.w	r8,0
80008512:	fc 09 13 00 	cpc	r9,lr
80008516:	e0 8b 00 18 	brhi	80008546 <__avr32_f64_cmp_lt+0x52>
8000851a:	58 0b       	cp.w	r11,0
8000851c:	f5 ba 00 00 	subfeq	r10,0
80008520:	c1 50       	breq	8000854a <__avr32_f64_cmp_lt+0x56>
80008522:	1b 07       	ld.w	r7,sp++
80008524:	1b 0e       	ld.w	lr,sp++
80008526:	58 3c       	cp.w	r12,3
80008528:	c0 a0       	breq	8000853c <__avr32_f64_cmp_lt+0x48>
8000852a:	58 1c       	cp.w	r12,1
8000852c:	c0 33       	brcs	80008532 <__avr32_f64_cmp_lt+0x3e>
8000852e:	5e 0d       	reteq	0
80008530:	5e 1f       	retne	1
80008532:	10 3a       	cp.w	r10,r8
80008534:	f2 0b 13 00 	cpc	r11,r9
80008538:	5e 2d       	reths	0
8000853a:	5e 3f       	retlo	1
8000853c:	14 38       	cp.w	r8,r10
8000853e:	f6 09 13 00 	cpc	r9,r11
80008542:	5e 2d       	reths	0
80008544:	5e 3f       	retlo	1
80008546:	1b 07       	ld.w	r7,sp++
80008548:	d8 0a       	popm	pc,r12=0
8000854a:	58 17       	cp.w	r7,1
8000854c:	5f 1c       	srne	r12
8000854e:	58 09       	cp.w	r9,0
80008550:	f5 b8 00 00 	subfeq	r8,0
80008554:	1b 07       	ld.w	r7,sp++
80008556:	1b 0e       	ld.w	lr,sp++
80008558:	5e 0d       	reteq	0
8000855a:	5e fc       	retal	r12

8000855c <__avr32_f64_div>:
8000855c:	eb cd 40 ff 	pushm	r0-r7,lr
80008560:	f7 e9 20 0e 	eor	lr,r11,r9
80008564:	f6 07 16 14 	lsr	r7,r11,0x14
80008568:	a9 7b       	lsl	r11,0x9
8000856a:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
8000856e:	a9 7a       	lsl	r10,0x9
80008570:	bd bb       	sbr	r11,0x1d
80008572:	e4 1b 3f ff 	andh	r11,0x3fff
80008576:	ab d7       	cbr	r7,0xb
80008578:	e0 80 00 cc 	breq	80008710 <__avr32_f64_div_round_subnormal+0x54>
8000857c:	e0 47 07 ff 	cp.w	r7,2047
80008580:	e0 84 00 b5 	brge	800086ea <__avr32_f64_div_round_subnormal+0x2e>
80008584:	f2 06 16 14 	lsr	r6,r9,0x14
80008588:	a9 79       	lsl	r9,0x9
8000858a:	f3 e8 13 79 	or	r9,r9,r8>>0x17
8000858e:	a9 78       	lsl	r8,0x9
80008590:	bd b9       	sbr	r9,0x1d
80008592:	e4 19 3f ff 	andh	r9,0x3fff
80008596:	ab d6       	cbr	r6,0xb
80008598:	e0 80 00 e2 	breq	8000875c <__avr32_f64_div_round_subnormal+0xa0>
8000859c:	e0 46 07 ff 	cp.w	r6,2047
800085a0:	e0 84 00 b2 	brge	80008704 <__avr32_f64_div_round_subnormal+0x48>
800085a4:	0c 17       	sub	r7,r6
800085a6:	fe 37 fc 01 	sub	r7,-1023
800085aa:	fc 1c 80 00 	movh	r12,0x8000
800085ae:	f8 03 16 01 	lsr	r3,r12,0x1
800085b2:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
800085b6:	5c d4       	com	r4
800085b8:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
800085bc:	e6 09 06 44 	mulu.d	r4,r3,r9
800085c0:	f8 05 01 25 	sub	r5,r12,r5<<0x2
800085c4:	e6 05 06 44 	mulu.d	r4,r3,r5
800085c8:	ea 03 15 02 	lsl	r3,r5,0x2
800085cc:	e6 09 06 44 	mulu.d	r4,r3,r9
800085d0:	f8 05 01 25 	sub	r5,r12,r5<<0x2
800085d4:	e6 05 06 44 	mulu.d	r4,r3,r5
800085d8:	ea 03 15 02 	lsl	r3,r5,0x2
800085dc:	e6 09 06 44 	mulu.d	r4,r3,r9
800085e0:	f8 05 01 25 	sub	r5,r12,r5<<0x2
800085e4:	e6 05 06 44 	mulu.d	r4,r3,r5
800085e8:	ea 03 15 02 	lsl	r3,r5,0x2
800085ec:	e6 08 06 40 	mulu.d	r0,r3,r8
800085f0:	e4 09 07 40 	macu.d	r0,r2,r9
800085f4:	e6 09 06 44 	mulu.d	r4,r3,r9
800085f8:	02 04       	add	r4,r1
800085fa:	5c 05       	acr	r5
800085fc:	a3 65       	lsl	r5,0x2
800085fe:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
80008602:	a3 64       	lsl	r4,0x2
80008604:	5c 34       	neg	r4
80008606:	f8 05 01 45 	sbc	r5,r12,r5
8000860a:	e6 04 06 40 	mulu.d	r0,r3,r4
8000860e:	e4 05 07 40 	macu.d	r0,r2,r5
80008612:	e6 05 06 44 	mulu.d	r4,r3,r5
80008616:	02 04       	add	r4,r1
80008618:	5c 05       	acr	r5
8000861a:	ea 03 15 02 	lsl	r3,r5,0x2
8000861e:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
80008622:	e8 02 15 02 	lsl	r2,r4,0x2
80008626:	e6 08 06 40 	mulu.d	r0,r3,r8
8000862a:	e4 09 07 40 	macu.d	r0,r2,r9
8000862e:	e6 09 06 44 	mulu.d	r4,r3,r9
80008632:	02 04       	add	r4,r1
80008634:	5c 05       	acr	r5
80008636:	a3 65       	lsl	r5,0x2
80008638:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
8000863c:	a3 64       	lsl	r4,0x2
8000863e:	5c 34       	neg	r4
80008640:	f8 05 01 45 	sbc	r5,r12,r5
80008644:	e6 04 06 40 	mulu.d	r0,r3,r4
80008648:	e4 05 07 40 	macu.d	r0,r2,r5
8000864c:	e6 05 06 44 	mulu.d	r4,r3,r5
80008650:	02 04       	add	r4,r1
80008652:	5c 05       	acr	r5
80008654:	ea 03 15 02 	lsl	r3,r5,0x2
80008658:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
8000865c:	e8 02 15 02 	lsl	r2,r4,0x2
80008660:	e6 0a 06 40 	mulu.d	r0,r3,r10
80008664:	e4 0b 07 40 	macu.d	r0,r2,r11
80008668:	e6 0b 06 42 	mulu.d	r2,r3,r11
8000866c:	02 02       	add	r2,r1
8000866e:	5c 03       	acr	r3
80008670:	ed b3 00 1c 	bld	r3,0x1c
80008674:	c0 90       	breq	80008686 <__avr32_f64_div+0x12a>
80008676:	a1 72       	lsl	r2,0x1
80008678:	5c f3       	rol	r3
8000867a:	20 17       	sub	r7,1
8000867c:	a3 9a       	lsr	r10,0x3
8000867e:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
80008682:	a3 9b       	lsr	r11,0x3
80008684:	c0 58       	rjmp	8000868e <__avr32_f64_div+0x132>
80008686:	a5 8a       	lsr	r10,0x4
80008688:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
8000868c:	a5 8b       	lsr	r11,0x4
8000868e:	58 07       	cp.w	r7,0
80008690:	e0 8a 00 8b 	brle	800087a6 <__avr32_f64_div_res_subnormal>
80008694:	e0 12 ff 00 	andl	r2,0xff00
80008698:	e8 12 00 80 	orl	r2,0x80
8000869c:	e6 08 06 40 	mulu.d	r0,r3,r8
800086a0:	e4 09 07 40 	macu.d	r0,r2,r9
800086a4:	e4 08 06 44 	mulu.d	r4,r2,r8
800086a8:	e6 09 06 48 	mulu.d	r8,r3,r9
800086ac:	00 05       	add	r5,r0
800086ae:	f0 01 00 48 	adc	r8,r8,r1
800086b2:	5c 09       	acr	r9
800086b4:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
800086b8:	58 04       	cp.w	r4,0
800086ba:	5c 25       	cpc	r5

800086bc <__avr32_f64_div_round_subnormal>:
800086bc:	f4 08 13 00 	cpc	r8,r10
800086c0:	f6 09 13 00 	cpc	r9,r11
800086c4:	5f 36       	srlo	r6
800086c6:	f8 06 17 00 	moveq	r6,r12
800086ca:	e4 0a 16 08 	lsr	r10,r2,0x8
800086ce:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
800086d2:	e6 0b 16 08 	lsr	r11,r3,0x8
800086d6:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
800086da:	ed be 00 1f 	bld	lr,0x1f
800086de:	ef bb 00 1f 	bst	r11,0x1f
800086e2:	0c 0a       	add	r10,r6
800086e4:	5c 0b       	acr	r11
800086e6:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
800086ea:	e4 1b 00 0f 	andh	r11,0xf
800086ee:	14 4b       	or	r11,r10
800086f0:	e0 81 00 a7 	brne	8000883e <__avr32_f64_div_res_subnormal+0x98>
800086f4:	f2 06 16 14 	lsr	r6,r9,0x14
800086f8:	ab d6       	cbr	r6,0xb
800086fa:	e0 46 07 ff 	cp.w	r6,2047
800086fe:	e0 81 00 a4 	brne	80008846 <__avr32_f64_div_res_subnormal+0xa0>
80008702:	c9 e8       	rjmp	8000883e <__avr32_f64_div_res_subnormal+0x98>
80008704:	e4 19 00 0f 	andh	r9,0xf
80008708:	10 49       	or	r9,r8
8000870a:	e0 81 00 9a 	brne	8000883e <__avr32_f64_div_res_subnormal+0x98>
8000870e:	c9 28       	rjmp	80008832 <__avr32_f64_div_res_subnormal+0x8c>
80008710:	a3 7b       	lsl	r11,0x3
80008712:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
80008716:	a3 7a       	lsl	r10,0x3
80008718:	f5 eb 10 04 	or	r4,r10,r11
8000871c:	e0 80 00 a0 	breq	8000885c <__avr32_f64_div_op1_zero>
80008720:	f6 04 12 00 	clz	r4,r11
80008724:	c1 70       	breq	80008752 <__avr32_f64_div_round_subnormal+0x96>
80008726:	c0 c3       	brcs	8000873e <__avr32_f64_div_round_subnormal+0x82>
80008728:	e8 05 11 20 	rsub	r5,r4,32
8000872c:	f6 04 09 4b 	lsl	r11,r11,r4
80008730:	f4 05 0a 45 	lsr	r5,r10,r5
80008734:	0a 4b       	or	r11,r5
80008736:	f4 04 09 4a 	lsl	r10,r10,r4
8000873a:	08 17       	sub	r7,r4
8000873c:	c0 b8       	rjmp	80008752 <__avr32_f64_div_round_subnormal+0x96>
8000873e:	f4 04 12 00 	clz	r4,r10
80008742:	f9 b4 03 00 	movlo	r4,0
80008746:	f7 b4 02 e0 	subhs	r4,-32
8000874a:	f4 04 09 4b 	lsl	r11,r10,r4
8000874e:	30 0a       	mov	r10,0
80008750:	08 17       	sub	r7,r4
80008752:	a3 8a       	lsr	r10,0x2
80008754:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
80008758:	a3 8b       	lsr	r11,0x2
8000875a:	c1 1b       	rjmp	8000857c <__avr32_f64_div+0x20>
8000875c:	a3 79       	lsl	r9,0x3
8000875e:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
80008762:	a3 78       	lsl	r8,0x3
80008764:	f3 e8 10 04 	or	r4,r9,r8
80008768:	c6 f0       	breq	80008846 <__avr32_f64_div_res_subnormal+0xa0>
8000876a:	f2 04 12 00 	clz	r4,r9
8000876e:	c1 70       	breq	8000879c <__avr32_f64_div_round_subnormal+0xe0>
80008770:	c0 c3       	brcs	80008788 <__avr32_f64_div_round_subnormal+0xcc>
80008772:	e8 05 11 20 	rsub	r5,r4,32
80008776:	f2 04 09 49 	lsl	r9,r9,r4
8000877a:	f0 05 0a 45 	lsr	r5,r8,r5
8000877e:	0a 49       	or	r9,r5
80008780:	f0 04 09 48 	lsl	r8,r8,r4
80008784:	08 16       	sub	r6,r4
80008786:	c0 b8       	rjmp	8000879c <__avr32_f64_div_round_subnormal+0xe0>
80008788:	f0 04 12 00 	clz	r4,r8
8000878c:	f9 b4 03 00 	movlo	r4,0
80008790:	f7 b4 02 e0 	subhs	r4,-32
80008794:	f0 04 09 49 	lsl	r9,r8,r4
80008798:	30 08       	mov	r8,0
8000879a:	08 16       	sub	r6,r4
8000879c:	a3 88       	lsr	r8,0x2
8000879e:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
800087a2:	a3 89       	lsr	r9,0x2
800087a4:	cf ca       	rjmp	8000859c <__avr32_f64_div+0x40>

800087a6 <__avr32_f64_div_res_subnormal>:
800087a6:	5c 37       	neg	r7
800087a8:	2f f7       	sub	r7,-1
800087aa:	f1 b7 04 c0 	satu	r7,0x6
800087ae:	e0 47 00 20 	cp.w	r7,32
800087b2:	c1 54       	brge	800087dc <__avr32_f64_div_res_subnormal+0x36>
800087b4:	ee 06 11 20 	rsub	r6,r7,32
800087b8:	e4 07 0a 42 	lsr	r2,r2,r7
800087bc:	e6 06 09 4c 	lsl	r12,r3,r6
800087c0:	18 42       	or	r2,r12
800087c2:	e6 07 0a 43 	lsr	r3,r3,r7
800087c6:	f4 06 09 41 	lsl	r1,r10,r6
800087ca:	f4 07 0a 4a 	lsr	r10,r10,r7
800087ce:	f6 06 09 4c 	lsl	r12,r11,r6
800087d2:	18 4a       	or	r10,r12
800087d4:	f6 07 0a 4b 	lsr	r11,r11,r7
800087d8:	30 00       	mov	r0,0
800087da:	c1 58       	rjmp	80008804 <__avr32_f64_div_res_subnormal+0x5e>
800087dc:	ee 06 11 20 	rsub	r6,r7,32
800087e0:	f9 b0 00 00 	moveq	r0,0
800087e4:	f9 bc 00 00 	moveq	r12,0
800087e8:	c0 50       	breq	800087f2 <__avr32_f64_div_res_subnormal+0x4c>
800087ea:	f4 06 09 40 	lsl	r0,r10,r6
800087ee:	f6 06 09 4c 	lsl	r12,r11,r6
800087f2:	e6 07 0a 42 	lsr	r2,r3,r7
800087f6:	30 03       	mov	r3,0
800087f8:	f4 07 0a 41 	lsr	r1,r10,r7
800087fc:	18 41       	or	r1,r12
800087fe:	f6 07 0a 4a 	lsr	r10,r11,r7
80008802:	30 0b       	mov	r11,0
80008804:	e0 12 ff 00 	andl	r2,0xff00
80008808:	e8 12 00 80 	orl	r2,0x80
8000880c:	e6 08 06 46 	mulu.d	r6,r3,r8
80008810:	e4 09 07 46 	macu.d	r6,r2,r9
80008814:	e4 08 06 44 	mulu.d	r4,r2,r8
80008818:	e6 09 06 48 	mulu.d	r8,r3,r9
8000881c:	0c 05       	add	r5,r6
8000881e:	f0 07 00 48 	adc	r8,r8,r7
80008822:	5c 09       	acr	r9
80008824:	30 07       	mov	r7,0
80008826:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
8000882a:	00 34       	cp.w	r4,r0
8000882c:	e2 05 13 00 	cpc	r5,r1
80008830:	c4 6b       	rjmp	800086bc <__avr32_f64_div_round_subnormal>
80008832:	1c 9b       	mov	r11,lr
80008834:	e6 1b 80 00 	andh	r11,0x8000,COH
80008838:	30 0a       	mov	r10,0
8000883a:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000883e:	3f fb       	mov	r11,-1
80008840:	30 0a       	mov	r10,0
80008842:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80008846:	f5 eb 10 04 	or	r4,r10,r11
8000884a:	c0 90       	breq	8000885c <__avr32_f64_div_op1_zero>
8000884c:	1c 9b       	mov	r11,lr
8000884e:	e6 1b 80 00 	andh	r11,0x8000,COH
80008852:	ea 1b 7f f0 	orh	r11,0x7ff0
80008856:	30 0a       	mov	r10,0
80008858:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

8000885c <__avr32_f64_div_op1_zero>:
8000885c:	f1 e9 10 15 	or	r5,r8,r9<<0x1
80008860:	ce f0       	breq	8000883e <__avr32_f64_div_res_subnormal+0x98>
80008862:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
80008866:	e0 44 07 ff 	cp.w	r4,2047
8000886a:	ce 41       	brne	80008832 <__avr32_f64_div_res_subnormal+0x8c>
8000886c:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
80008870:	ce 10       	breq	80008832 <__avr32_f64_div_res_subnormal+0x8c>
80008872:	ce 6b       	rjmp	8000883e <__avr32_f64_div_res_subnormal+0x98>

80008874 <__avr32_udiv64>:
80008874:	d4 31       	pushm	r0-r7,lr
80008876:	1a 97       	mov	r7,sp
80008878:	20 3d       	sub	sp,12
8000887a:	10 9c       	mov	r12,r8
8000887c:	12 9e       	mov	lr,r9
8000887e:	14 93       	mov	r3,r10
80008880:	58 09       	cp.w	r9,0
80008882:	e0 81 00 bd 	brne	800089fc <__avr32_udiv64+0x188>
80008886:	16 38       	cp.w	r8,r11
80008888:	e0 88 00 40 	brls	80008908 <__avr32_udiv64+0x94>
8000888c:	f0 08 12 00 	clz	r8,r8
80008890:	c0 d0       	breq	800088aa <__avr32_udiv64+0x36>
80008892:	f6 08 09 4b 	lsl	r11,r11,r8
80008896:	f0 09 11 20 	rsub	r9,r8,32
8000889a:	f8 08 09 4c 	lsl	r12,r12,r8
8000889e:	f4 09 0a 49 	lsr	r9,r10,r9
800088a2:	f4 08 09 43 	lsl	r3,r10,r8
800088a6:	f3 eb 10 0b 	or	r11,r9,r11
800088aa:	f8 0e 16 10 	lsr	lr,r12,0x10
800088ae:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
800088b2:	f6 0e 0d 00 	divu	r0,r11,lr
800088b6:	e6 0b 16 10 	lsr	r11,r3,0x10
800088ba:	00 99       	mov	r9,r0
800088bc:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800088c0:	e0 0a 02 48 	mul	r8,r0,r10
800088c4:	10 3b       	cp.w	r11,r8
800088c6:	c0 a2       	brcc	800088da <__avr32_udiv64+0x66>
800088c8:	20 19       	sub	r9,1
800088ca:	18 0b       	add	r11,r12
800088cc:	18 3b       	cp.w	r11,r12
800088ce:	c0 63       	brcs	800088da <__avr32_udiv64+0x66>
800088d0:	10 3b       	cp.w	r11,r8
800088d2:	f7 b9 03 01 	sublo	r9,1
800088d6:	f7 dc e3 0b 	addcs	r11,r11,r12
800088da:	f6 08 01 01 	sub	r1,r11,r8
800088de:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
800088e2:	e2 0e 0d 00 	divu	r0,r1,lr
800088e6:	e7 e1 11 03 	or	r3,r3,r1<<0x10
800088ea:	00 98       	mov	r8,r0
800088ec:	e0 0a 02 4a 	mul	r10,r0,r10
800088f0:	14 33       	cp.w	r3,r10
800088f2:	c0 82       	brcc	80008902 <__avr32_udiv64+0x8e>
800088f4:	20 18       	sub	r8,1
800088f6:	18 03       	add	r3,r12
800088f8:	18 33       	cp.w	r3,r12
800088fa:	c0 43       	brcs	80008902 <__avr32_udiv64+0x8e>
800088fc:	14 33       	cp.w	r3,r10
800088fe:	f7 b8 03 01 	sublo	r8,1
80008902:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80008906:	cd f8       	rjmp	80008ac4 <__avr32_udiv64+0x250>
80008908:	58 08       	cp.w	r8,0
8000890a:	c0 51       	brne	80008914 <__avr32_udiv64+0xa0>
8000890c:	30 19       	mov	r9,1
8000890e:	f2 08 0d 08 	divu	r8,r9,r8
80008912:	10 9c       	mov	r12,r8
80008914:	f8 06 12 00 	clz	r6,r12
80008918:	c0 41       	brne	80008920 <__avr32_udiv64+0xac>
8000891a:	18 1b       	sub	r11,r12
8000891c:	30 19       	mov	r9,1
8000891e:	c4 08       	rjmp	8000899e <__avr32_udiv64+0x12a>
80008920:	ec 01 11 20 	rsub	r1,r6,32
80008924:	f4 01 0a 49 	lsr	r9,r10,r1
80008928:	f8 06 09 4c 	lsl	r12,r12,r6
8000892c:	f6 06 09 48 	lsl	r8,r11,r6
80008930:	f6 01 0a 41 	lsr	r1,r11,r1
80008934:	f3 e8 10 08 	or	r8,r9,r8
80008938:	f8 03 16 10 	lsr	r3,r12,0x10
8000893c:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80008940:	e2 03 0d 00 	divu	r0,r1,r3
80008944:	f0 0b 16 10 	lsr	r11,r8,0x10
80008948:	00 9e       	mov	lr,r0
8000894a:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000894e:	e0 05 02 49 	mul	r9,r0,r5
80008952:	12 3b       	cp.w	r11,r9
80008954:	c0 a2       	brcc	80008968 <__avr32_udiv64+0xf4>
80008956:	20 1e       	sub	lr,1
80008958:	18 0b       	add	r11,r12
8000895a:	18 3b       	cp.w	r11,r12
8000895c:	c0 63       	brcs	80008968 <__avr32_udiv64+0xf4>
8000895e:	12 3b       	cp.w	r11,r9
80008960:	f7 be 03 01 	sublo	lr,1
80008964:	f7 dc e3 0b 	addcs	r11,r11,r12
80008968:	12 1b       	sub	r11,r9
8000896a:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
8000896e:	f6 03 0d 02 	divu	r2,r11,r3
80008972:	f1 e3 11 08 	or	r8,r8,r3<<0x10
80008976:	04 99       	mov	r9,r2
80008978:	e4 05 02 4b 	mul	r11,r2,r5
8000897c:	16 38       	cp.w	r8,r11
8000897e:	c0 a2       	brcc	80008992 <__avr32_udiv64+0x11e>
80008980:	20 19       	sub	r9,1
80008982:	18 08       	add	r8,r12
80008984:	18 38       	cp.w	r8,r12
80008986:	c0 63       	brcs	80008992 <__avr32_udiv64+0x11e>
80008988:	16 38       	cp.w	r8,r11
8000898a:	f7 b9 03 01 	sublo	r9,1
8000898e:	f1 dc e3 08 	addcs	r8,r8,r12
80008992:	f4 06 09 43 	lsl	r3,r10,r6
80008996:	f0 0b 01 0b 	sub	r11,r8,r11
8000899a:	f3 ee 11 09 	or	r9,r9,lr<<0x10
8000899e:	f8 06 16 10 	lsr	r6,r12,0x10
800089a2:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
800089a6:	f6 06 0d 00 	divu	r0,r11,r6
800089aa:	e6 0b 16 10 	lsr	r11,r3,0x10
800089ae:	00 9a       	mov	r10,r0
800089b0:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800089b4:	e0 0e 02 48 	mul	r8,r0,lr
800089b8:	10 3b       	cp.w	r11,r8
800089ba:	c0 a2       	brcc	800089ce <__avr32_udiv64+0x15a>
800089bc:	20 1a       	sub	r10,1
800089be:	18 0b       	add	r11,r12
800089c0:	18 3b       	cp.w	r11,r12
800089c2:	c0 63       	brcs	800089ce <__avr32_udiv64+0x15a>
800089c4:	10 3b       	cp.w	r11,r8
800089c6:	f7 ba 03 01 	sublo	r10,1
800089ca:	f7 dc e3 0b 	addcs	r11,r11,r12
800089ce:	f6 08 01 01 	sub	r1,r11,r8
800089d2:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
800089d6:	e2 06 0d 00 	divu	r0,r1,r6
800089da:	e7 e1 11 03 	or	r3,r3,r1<<0x10
800089de:	00 98       	mov	r8,r0
800089e0:	e0 0e 02 4b 	mul	r11,r0,lr
800089e4:	16 33       	cp.w	r3,r11
800089e6:	c0 82       	brcc	800089f6 <__avr32_udiv64+0x182>
800089e8:	20 18       	sub	r8,1
800089ea:	18 03       	add	r3,r12
800089ec:	18 33       	cp.w	r3,r12
800089ee:	c0 43       	brcs	800089f6 <__avr32_udiv64+0x182>
800089f0:	16 33       	cp.w	r3,r11
800089f2:	f7 b8 03 01 	sublo	r8,1
800089f6:	f1 ea 11 08 	or	r8,r8,r10<<0x10
800089fa:	c6 98       	rjmp	80008acc <__avr32_udiv64+0x258>
800089fc:	16 39       	cp.w	r9,r11
800089fe:	e0 8b 00 65 	brhi	80008ac8 <__avr32_udiv64+0x254>
80008a02:	f2 09 12 00 	clz	r9,r9
80008a06:	c0 b1       	brne	80008a1c <__avr32_udiv64+0x1a8>
80008a08:	10 3a       	cp.w	r10,r8
80008a0a:	5f 2a       	srhs	r10
80008a0c:	1c 3b       	cp.w	r11,lr
80008a0e:	5f b8       	srhi	r8
80008a10:	10 4a       	or	r10,r8
80008a12:	f2 0a 18 00 	cp.b	r10,r9
80008a16:	c5 90       	breq	80008ac8 <__avr32_udiv64+0x254>
80008a18:	30 18       	mov	r8,1
80008a1a:	c5 98       	rjmp	80008acc <__avr32_udiv64+0x258>
80008a1c:	f0 09 09 46 	lsl	r6,r8,r9
80008a20:	f2 03 11 20 	rsub	r3,r9,32
80008a24:	fc 09 09 4e 	lsl	lr,lr,r9
80008a28:	f0 03 0a 48 	lsr	r8,r8,r3
80008a2c:	f6 09 09 4c 	lsl	r12,r11,r9
80008a30:	f4 03 0a 42 	lsr	r2,r10,r3
80008a34:	ef 46 ff f4 	st.w	r7[-12],r6
80008a38:	f6 03 0a 43 	lsr	r3,r11,r3
80008a3c:	18 42       	or	r2,r12
80008a3e:	f1 ee 10 0c 	or	r12,r8,lr
80008a42:	f8 01 16 10 	lsr	r1,r12,0x10
80008a46:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80008a4a:	e6 01 0d 04 	divu	r4,r3,r1
80008a4e:	e4 03 16 10 	lsr	r3,r2,0x10
80008a52:	08 9e       	mov	lr,r4
80008a54:	e7 e5 11 03 	or	r3,r3,r5<<0x10
80008a58:	e8 06 02 48 	mul	r8,r4,r6
80008a5c:	10 33       	cp.w	r3,r8
80008a5e:	c0 a2       	brcc	80008a72 <__avr32_udiv64+0x1fe>
80008a60:	20 1e       	sub	lr,1
80008a62:	18 03       	add	r3,r12
80008a64:	18 33       	cp.w	r3,r12
80008a66:	c0 63       	brcs	80008a72 <__avr32_udiv64+0x1fe>
80008a68:	10 33       	cp.w	r3,r8
80008a6a:	f7 be 03 01 	sublo	lr,1
80008a6e:	e7 dc e3 03 	addcs	r3,r3,r12
80008a72:	10 13       	sub	r3,r8
80008a74:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
80008a78:	e6 01 0d 00 	divu	r0,r3,r1
80008a7c:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80008a80:	00 98       	mov	r8,r0
80008a82:	e0 06 02 46 	mul	r6,r0,r6
80008a86:	0c 3b       	cp.w	r11,r6
80008a88:	c0 a2       	brcc	80008a9c <__avr32_udiv64+0x228>
80008a8a:	20 18       	sub	r8,1
80008a8c:	18 0b       	add	r11,r12
80008a8e:	18 3b       	cp.w	r11,r12
80008a90:	c0 63       	brcs	80008a9c <__avr32_udiv64+0x228>
80008a92:	0c 3b       	cp.w	r11,r6
80008a94:	f7 dc e3 0b 	addcs	r11,r11,r12
80008a98:	f7 b8 03 01 	sublo	r8,1
80008a9c:	f1 ee 11 08 	or	r8,r8,lr<<0x10
80008aa0:	ee f4 ff f4 	ld.w	r4,r7[-12]
80008aa4:	0c 1b       	sub	r11,r6
80008aa6:	f0 04 06 42 	mulu.d	r2,r8,r4
80008aaa:	06 95       	mov	r5,r3
80008aac:	16 35       	cp.w	r5,r11
80008aae:	e0 8b 00 0a 	brhi	80008ac2 <__avr32_udiv64+0x24e>
80008ab2:	5f 0b       	sreq	r11
80008ab4:	f4 09 09 49 	lsl	r9,r10,r9
80008ab8:	12 32       	cp.w	r2,r9
80008aba:	5f b9       	srhi	r9
80008abc:	f7 e9 00 09 	and	r9,r11,r9
80008ac0:	c0 60       	breq	80008acc <__avr32_udiv64+0x258>
80008ac2:	20 18       	sub	r8,1
80008ac4:	30 09       	mov	r9,0
80008ac6:	c0 38       	rjmp	80008acc <__avr32_udiv64+0x258>
80008ac8:	30 09       	mov	r9,0
80008aca:	12 98       	mov	r8,r9
80008acc:	10 9a       	mov	r10,r8
80008ace:	12 93       	mov	r3,r9
80008ad0:	10 92       	mov	r2,r8
80008ad2:	12 9b       	mov	r11,r9
80008ad4:	2f dd       	sub	sp,-12
80008ad6:	d8 32       	popm	r0-r7,pc

80008ad8 <__avr32_umod64>:
80008ad8:	d4 31       	pushm	r0-r7,lr
80008ada:	1a 97       	mov	r7,sp
80008adc:	20 3d       	sub	sp,12
80008ade:	10 9c       	mov	r12,r8
80008ae0:	12 95       	mov	r5,r9
80008ae2:	14 9e       	mov	lr,r10
80008ae4:	16 91       	mov	r1,r11
80008ae6:	16 96       	mov	r6,r11
80008ae8:	58 09       	cp.w	r9,0
80008aea:	e0 81 00 81 	brne	80008bec <__avr32_umod64+0x114>
80008aee:	16 38       	cp.w	r8,r11
80008af0:	e0 88 00 12 	brls	80008b14 <__avr32_umod64+0x3c>
80008af4:	f0 08 12 00 	clz	r8,r8
80008af8:	c4 e0       	breq	80008b94 <__avr32_umod64+0xbc>
80008afa:	f6 08 09 46 	lsl	r6,r11,r8
80008afe:	f8 08 09 4c 	lsl	r12,r12,r8
80008b02:	f0 0b 11 20 	rsub	r11,r8,32
80008b06:	f4 08 09 4e 	lsl	lr,r10,r8
80008b0a:	f4 0b 0a 4b 	lsr	r11,r10,r11
80008b0e:	f7 e6 10 06 	or	r6,r11,r6
80008b12:	c4 18       	rjmp	80008b94 <__avr32_umod64+0xbc>
80008b14:	58 08       	cp.w	r8,0
80008b16:	c0 51       	brne	80008b20 <__avr32_umod64+0x48>
80008b18:	30 19       	mov	r9,1
80008b1a:	f2 08 0d 08 	divu	r8,r9,r8
80008b1e:	10 9c       	mov	r12,r8
80008b20:	f8 08 12 00 	clz	r8,r12
80008b24:	c0 31       	brne	80008b2a <__avr32_umod64+0x52>
80008b26:	18 16       	sub	r6,r12
80008b28:	c3 68       	rjmp	80008b94 <__avr32_umod64+0xbc>
80008b2a:	f0 03 11 20 	rsub	r3,r8,32
80008b2e:	f4 03 0a 4b 	lsr	r11,r10,r3
80008b32:	f8 08 09 4c 	lsl	r12,r12,r8
80008b36:	ec 08 09 49 	lsl	r9,r6,r8
80008b3a:	ec 03 0a 43 	lsr	r3,r6,r3
80008b3e:	f7 e9 10 09 	or	r9,r11,r9
80008b42:	f8 05 16 10 	lsr	r5,r12,0x10
80008b46:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80008b4a:	e6 05 0d 02 	divu	r2,r3,r5
80008b4e:	f2 0e 16 10 	lsr	lr,r9,0x10
80008b52:	ec 02 02 4b 	mul	r11,r6,r2
80008b56:	fd e3 11 0e 	or	lr,lr,r3<<0x10
80008b5a:	16 3e       	cp.w	lr,r11
80008b5c:	c0 72       	brcc	80008b6a <__avr32_umod64+0x92>
80008b5e:	18 0e       	add	lr,r12
80008b60:	18 3e       	cp.w	lr,r12
80008b62:	c0 43       	brcs	80008b6a <__avr32_umod64+0x92>
80008b64:	16 3e       	cp.w	lr,r11
80008b66:	fd dc e3 0e 	addcs	lr,lr,r12
80008b6a:	fc 0b 01 03 	sub	r3,lr,r11
80008b6e:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
80008b72:	e6 05 0d 02 	divu	r2,r3,r5
80008b76:	f3 e3 11 09 	or	r9,r9,r3<<0x10
80008b7a:	a5 36       	mul	r6,r2
80008b7c:	0c 39       	cp.w	r9,r6
80008b7e:	c0 72       	brcc	80008b8c <__avr32_umod64+0xb4>
80008b80:	18 09       	add	r9,r12
80008b82:	18 39       	cp.w	r9,r12
80008b84:	c0 43       	brcs	80008b8c <__avr32_umod64+0xb4>
80008b86:	0c 39       	cp.w	r9,r6
80008b88:	f3 dc e3 09 	addcs	r9,r9,r12
80008b8c:	f2 06 01 06 	sub	r6,r9,r6
80008b90:	f4 08 09 4e 	lsl	lr,r10,r8
80008b94:	f8 0a 16 10 	lsr	r10,r12,0x10
80008b98:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80008b9c:	ec 0a 0d 02 	divu	r2,r6,r10
80008ba0:	fc 09 16 10 	lsr	r9,lr,0x10
80008ba4:	ea 02 02 4b 	mul	r11,r5,r2
80008ba8:	f3 e3 11 09 	or	r9,r9,r3<<0x10
80008bac:	16 39       	cp.w	r9,r11
80008bae:	c0 72       	brcc	80008bbc <__avr32_umod64+0xe4>
80008bb0:	18 09       	add	r9,r12
80008bb2:	18 39       	cp.w	r9,r12
80008bb4:	c0 43       	brcs	80008bbc <__avr32_umod64+0xe4>
80008bb6:	16 39       	cp.w	r9,r11
80008bb8:	f3 dc e3 09 	addcs	r9,r9,r12
80008bbc:	f2 0b 01 0b 	sub	r11,r9,r11
80008bc0:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80008bc4:	f6 0a 0d 0a 	divu	r10,r11,r10
80008bc8:	fd eb 11 0e 	or	lr,lr,r11<<0x10
80008bcc:	ea 0a 02 4a 	mul	r10,r5,r10
80008bd0:	14 3e       	cp.w	lr,r10
80008bd2:	c0 72       	brcc	80008be0 <__avr32_umod64+0x108>
80008bd4:	18 0e       	add	lr,r12
80008bd6:	18 3e       	cp.w	lr,r12
80008bd8:	c0 43       	brcs	80008be0 <__avr32_umod64+0x108>
80008bda:	14 3e       	cp.w	lr,r10
80008bdc:	fd dc e3 0e 	addcs	lr,lr,r12
80008be0:	fc 0a 01 0a 	sub	r10,lr,r10
80008be4:	30 0b       	mov	r11,0
80008be6:	f4 08 0a 4a 	lsr	r10,r10,r8
80008bea:	c7 b8       	rjmp	80008ce0 <__avr32_umod64+0x208>
80008bec:	16 39       	cp.w	r9,r11
80008bee:	e0 8b 00 79 	brhi	80008ce0 <__avr32_umod64+0x208>
80008bf2:	f2 09 12 00 	clz	r9,r9
80008bf6:	c1 21       	brne	80008c1a <__avr32_umod64+0x142>
80008bf8:	10 3a       	cp.w	r10,r8
80008bfa:	5f 2b       	srhs	r11
80008bfc:	0a 31       	cp.w	r1,r5
80008bfe:	5f ba       	srhi	r10
80008c00:	f7 ea 10 0a 	or	r10,r11,r10
80008c04:	f2 0a 18 00 	cp.b	r10,r9
80008c08:	c0 60       	breq	80008c14 <__avr32_umod64+0x13c>
80008c0a:	fc 08 01 0c 	sub	r12,lr,r8
80008c0e:	e2 05 01 46 	sbc	r6,r1,r5
80008c12:	18 9e       	mov	lr,r12
80008c14:	0c 9b       	mov	r11,r6
80008c16:	1c 9a       	mov	r10,lr
80008c18:	c6 48       	rjmp	80008ce0 <__avr32_umod64+0x208>
80008c1a:	ea 09 09 4c 	lsl	r12,r5,r9
80008c1e:	f2 06 11 20 	rsub	r6,r9,32
80008c22:	f6 09 09 4b 	lsl	r11,r11,r9
80008c26:	f0 09 09 42 	lsl	r2,r8,r9
80008c2a:	ef 46 ff f4 	st.w	r7[-12],r6
80008c2e:	f0 06 0a 48 	lsr	r8,r8,r6
80008c32:	18 48       	or	r8,r12
80008c34:	e2 06 0a 4c 	lsr	r12,r1,r6
80008c38:	f4 09 09 43 	lsl	r3,r10,r9
80008c3c:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
80008c40:	f4 06 0a 4a 	lsr	r10,r10,r6
80008c44:	16 4a       	or	r10,r11
80008c46:	f0 0b 16 10 	lsr	r11,r8,0x10
80008c4a:	f8 0b 0d 04 	divu	r4,r12,r11
80008c4e:	f4 0c 16 10 	lsr	r12,r10,0x10
80008c52:	08 91       	mov	r1,r4
80008c54:	f9 e5 11 0c 	or	r12,r12,r5<<0x10
80008c58:	e8 0e 02 46 	mul	r6,r4,lr
80008c5c:	0c 3c       	cp.w	r12,r6
80008c5e:	c0 a2       	brcc	80008c72 <__avr32_umod64+0x19a>
80008c60:	20 11       	sub	r1,1
80008c62:	10 0c       	add	r12,r8
80008c64:	10 3c       	cp.w	r12,r8
80008c66:	c0 63       	brcs	80008c72 <__avr32_umod64+0x19a>
80008c68:	0c 3c       	cp.w	r12,r6
80008c6a:	f7 b1 03 01 	sublo	r1,1
80008c6e:	f9 d8 e3 0c 	addcs	r12,r12,r8
80008c72:	0c 1c       	sub	r12,r6
80008c74:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
80008c78:	f8 0b 0d 04 	divu	r4,r12,r11
80008c7c:	f5 e5 11 0b 	or	r11,r10,r5<<0x10
80008c80:	08 96       	mov	r6,r4
80008c82:	e8 0e 02 4e 	mul	lr,r4,lr
80008c86:	1c 3b       	cp.w	r11,lr
80008c88:	c0 a2       	brcc	80008c9c <__avr32_umod64+0x1c4>
80008c8a:	20 16       	sub	r6,1
80008c8c:	10 0b       	add	r11,r8
80008c8e:	10 3b       	cp.w	r11,r8
80008c90:	c0 63       	brcs	80008c9c <__avr32_umod64+0x1c4>
80008c92:	1c 3b       	cp.w	r11,lr
80008c94:	f7 b6 03 01 	sublo	r6,1
80008c98:	f7 d8 e3 0b 	addcs	r11,r11,r8
80008c9c:	ed e1 11 01 	or	r1,r6,r1<<0x10
80008ca0:	1c 1b       	sub	r11,lr
80008ca2:	e2 02 06 40 	mulu.d	r0,r1,r2
80008ca6:	00 9e       	mov	lr,r0
80008ca8:	02 9c       	mov	r12,r1
80008caa:	16 3c       	cp.w	r12,r11
80008cac:	e0 8b 00 08 	brhi	80008cbc <__avr32_umod64+0x1e4>
80008cb0:	5f 06       	sreq	r6
80008cb2:	06 30       	cp.w	r0,r3
80008cb4:	5f ba       	srhi	r10
80008cb6:	ed ea 00 0a 	and	r10,r6,r10
80008cba:	c0 60       	breq	80008cc6 <__avr32_umod64+0x1ee>
80008cbc:	fc 02 01 04 	sub	r4,lr,r2
80008cc0:	f8 08 01 4c 	sbc	r12,r12,r8
80008cc4:	08 9e       	mov	lr,r4
80008cc6:	e6 0e 01 0a 	sub	r10,r3,lr
80008cca:	f6 0c 01 4c 	sbc	r12,r11,r12
80008cce:	ee f1 ff f4 	ld.w	r1,r7[-12]
80008cd2:	f8 09 0a 4b 	lsr	r11,r12,r9
80008cd6:	f4 09 0a 4a 	lsr	r10,r10,r9
80008cda:	f8 01 09 4c 	lsl	r12,r12,r1
80008cde:	18 4a       	or	r10,r12
80008ce0:	2f dd       	sub	sp,-12
80008ce2:	d8 32       	popm	r0-r7,pc

Disassembly of section .exception:

80008e00 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80008e00:	c0 08       	rjmp	80008e00 <_evba>
	...

80008e04 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80008e04:	c0 08       	rjmp	80008e04 <_handle_TLB_Multiple_Hit>
	...

80008e08 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80008e08:	c0 08       	rjmp	80008e08 <_handle_Bus_Error_Data_Fetch>
	...

80008e0c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
80008e0c:	c0 08       	rjmp	80008e0c <_handle_Bus_Error_Instruction_Fetch>
	...

80008e10 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80008e10:	c0 08       	rjmp	80008e10 <_handle_NMI>
	...

80008e14 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80008e14:	c0 08       	rjmp	80008e14 <_handle_Instruction_Address>
	...

80008e18 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80008e18:	c0 08       	rjmp	80008e18 <_handle_ITLB_Protection>
	...

80008e1c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
80008e1c:	c0 08       	rjmp	80008e1c <_handle_Breakpoint>
	...

80008e20 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80008e20:	c0 08       	rjmp	80008e20 <_handle_Illegal_Opcode>
	...

80008e24 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80008e24:	c0 08       	rjmp	80008e24 <_handle_Unimplemented_Instruction>
	...

80008e28 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80008e28:	c0 08       	rjmp	80008e28 <_handle_Privilege_Violation>
	...

80008e2c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
80008e2c:	c0 08       	rjmp	80008e2c <_handle_Floating_Point>
	...

80008e30 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80008e30:	c0 08       	rjmp	80008e30 <_handle_Coprocessor_Absent>
	...

80008e34 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80008e34:	c0 08       	rjmp	80008e34 <_handle_Data_Address_Read>
	...

80008e38 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80008e38:	c0 08       	rjmp	80008e38 <_handle_Data_Address_Write>
	...

80008e3c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
80008e3c:	c0 08       	rjmp	80008e3c <_handle_DTLB_Protection_Read>
	...

80008e40 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80008e40:	c0 08       	rjmp	80008e40 <_handle_DTLB_Protection_Write>
	...

80008e44 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80008e44:	c0 08       	rjmp	80008e44 <_handle_DTLB_Modified>
	...

80008e50 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80008e50:	c0 08       	rjmp	80008e50 <_handle_ITLB_Miss>
	...

80008e60 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80008e60:	c0 08       	rjmp	80008e60 <_handle_DTLB_Miss_Read>
	...

80008e70 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80008e70:	c0 08       	rjmp	80008e70 <_handle_DTLB_Miss_Write>
	...

80008f00 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80008f00:	c0 08       	rjmp	80008f00 <_handle_Supervisor_Call>
80008f02:	d7 03       	nop

80008f04 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80008f04:	30 0c       	mov	r12,0
80008f06:	fe b0 d0 a5 	rcall	80003050 <_get_interrupt_handler>
80008f0a:	58 0c       	cp.w	r12,0
80008f0c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80008f10:	d6 03       	rete

80008f12 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80008f12:	30 1c       	mov	r12,1
80008f14:	fe b0 d0 9e 	rcall	80003050 <_get_interrupt_handler>
80008f18:	58 0c       	cp.w	r12,0
80008f1a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80008f1e:	d6 03       	rete

80008f20 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80008f20:	30 2c       	mov	r12,2
80008f22:	fe b0 d0 97 	rcall	80003050 <_get_interrupt_handler>
80008f26:	58 0c       	cp.w	r12,0
80008f28:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80008f2c:	d6 03       	rete

80008f2e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80008f2e:	30 3c       	mov	r12,3
80008f30:	fe b0 d0 90 	rcall	80003050 <_get_interrupt_handler>
80008f34:	58 0c       	cp.w	r12,0
80008f36:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80008f3a:	d6 03       	rete
80008f3c:	d7 03       	nop
80008f3e:	d7 03       	nop
80008f40:	d7 03       	nop
80008f42:	d7 03       	nop
80008f44:	d7 03       	nop
80008f46:	d7 03       	nop
80008f48:	d7 03       	nop
80008f4a:	d7 03       	nop
80008f4c:	d7 03       	nop
80008f4e:	d7 03       	nop
80008f50:	d7 03       	nop
80008f52:	d7 03       	nop
80008f54:	d7 03       	nop
80008f56:	d7 03       	nop
80008f58:	d7 03       	nop
80008f5a:	d7 03       	nop
80008f5c:	d7 03       	nop
80008f5e:	d7 03       	nop
80008f60:	d7 03       	nop
80008f62:	d7 03       	nop
80008f64:	d7 03       	nop
80008f66:	d7 03       	nop
80008f68:	d7 03       	nop
80008f6a:	d7 03       	nop
80008f6c:	d7 03       	nop
80008f6e:	d7 03       	nop
80008f70:	d7 03       	nop
80008f72:	d7 03       	nop
80008f74:	d7 03       	nop
80008f76:	d7 03       	nop
80008f78:	d7 03       	nop
80008f7a:	d7 03       	nop
80008f7c:	d7 03       	nop
80008f7e:	d7 03       	nop
80008f80:	d7 03       	nop
80008f82:	d7 03       	nop
80008f84:	d7 03       	nop
80008f86:	d7 03       	nop
80008f88:	d7 03       	nop
80008f8a:	d7 03       	nop
80008f8c:	d7 03       	nop
80008f8e:	d7 03       	nop
80008f90:	d7 03       	nop
80008f92:	d7 03       	nop
80008f94:	d7 03       	nop
80008f96:	d7 03       	nop
80008f98:	d7 03       	nop
80008f9a:	d7 03       	nop
80008f9c:	d7 03       	nop
80008f9e:	d7 03       	nop
80008fa0:	d7 03       	nop
80008fa2:	d7 03       	nop
80008fa4:	d7 03       	nop
80008fa6:	d7 03       	nop
80008fa8:	d7 03       	nop
80008faa:	d7 03       	nop
80008fac:	d7 03       	nop
80008fae:	d7 03       	nop
80008fb0:	d7 03       	nop
80008fb2:	d7 03       	nop
80008fb4:	d7 03       	nop
80008fb6:	d7 03       	nop
80008fb8:	d7 03       	nop
80008fba:	d7 03       	nop
80008fbc:	d7 03       	nop
80008fbe:	d7 03       	nop
80008fc0:	d7 03       	nop
80008fc2:	d7 03       	nop
80008fc4:	d7 03       	nop
80008fc6:	d7 03       	nop
80008fc8:	d7 03       	nop
80008fca:	d7 03       	nop
80008fcc:	d7 03       	nop
80008fce:	d7 03       	nop
80008fd0:	d7 03       	nop
80008fd2:	d7 03       	nop
80008fd4:	d7 03       	nop
80008fd6:	d7 03       	nop
80008fd8:	d7 03       	nop
80008fda:	d7 03       	nop
80008fdc:	d7 03       	nop
80008fde:	d7 03       	nop
80008fe0:	d7 03       	nop
80008fe2:	d7 03       	nop
80008fe4:	d7 03       	nop
80008fe6:	d7 03       	nop
80008fe8:	d7 03       	nop
80008fea:	d7 03       	nop
80008fec:	d7 03       	nop
80008fee:	d7 03       	nop
80008ff0:	d7 03       	nop
80008ff2:	d7 03       	nop
80008ff4:	d7 03       	nop
80008ff6:	d7 03       	nop
80008ff8:	d7 03       	nop
80008ffa:	d7 03       	nop
80008ffc:	d7 03       	nop
80008ffe:	d7 03       	nop
