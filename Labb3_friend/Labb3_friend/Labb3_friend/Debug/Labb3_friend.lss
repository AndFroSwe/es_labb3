
Labb3_friend.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006e08  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80009000  80009000  00009400  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000744  80009200  80009200  00009600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  80009944  80009944  00009d44  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         0000050c  00000008  80009948  0000a008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .balign       00000004  00000514  80009e54  0000a514  2**0
                  ALLOC
  9 .bss          00000160  00000518  00000518  00000000  2**2
                  ALLOC
 10 .heap         0000e988  00000678  00000678  00000000  2**0
                  ALLOC
 11 .comment      00000030  00000000  00000000  0000a514  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 00000d00  00000000  00000000  0000a548  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubnames 0000177b  00000000  00000000  0000b248  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_info   0001d87f  00000000  00000000  0000c9c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 000050df  00000000  00000000  0002a242  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000d63a  00000000  00000000  0002f321  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00001e6c  00000000  00000000  0003c95c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00003d84  00000000  00000000  0003e7c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    00009c5a  00000000  00000000  0004254c  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macinfo 0084c649  00000000  00000000  0004c1a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 22 .debug_ranges 00000f68  00000000  00000000  008987f0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	fe cf cb 0c 	sub	pc,pc,-13556

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
  rjmp    program_start

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002004:	fe cf eb 10 	sub	pc,pc,-5360

Disassembly of section .text:

80002008 <ClearMessages>:
80002008:	30 08       	mov	r8,0
8000200a:	b8 88       	st.b	r12[0x0],r8
 * Example:			ClearMessages(msg);
 ********************************************************************/
void ClearMessages(UINT8* Msg)
{
	Msg[0] = 0;
	Msg[1] = 0;
8000200c:	b8 98       	st.b	r12[0x1],r8
	Msg[2] = 0;
8000200e:	b8 a8       	st.b	r12[0x2],r8
	Msg[3] = 0;
80002010:	b8 b8       	st.b	r12[0x3],r8
	Msg[4] = 0;
80002012:	b8 c8       	st.b	r12[0x4],r8
	Msg[5] = 0;
80002014:	b8 d8       	st.b	r12[0x5],r8
	Msg[6] = 0;
80002016:	b8 e8       	st.b	r12[0x6],r8
	Msg[7] = 0;
80002018:	b8 f8       	st.b	r12[0x7],r8
}
8000201a:	5e fc       	retal	r12

8000201c <config_dpi204>:
 *
 * Note:            None.
 *
 * Example:         config_dpi204();
 ********************************************************************/
void config_dpi204(void){
8000201c:	eb cd 40 80 	pushm	r7,lr
80002020:	20 4d       	sub	sp,16
	.spck_delay   = 0,
	.trans_delay  = 0,
	.stay_act     = 1,
	.spi_mode     = 0,
	.modfdis      = 1
	};
80002022:	49 68       	lddpc	r8,80002078 <config_dpi204+0x5c>
80002024:	1a 97       	mov	r7,sp
80002026:	f0 ea 00 00 	ld.d	r10,r8[0]
8000202a:	fa eb 00 00 	st.d	sp[0],r10
8000202e:	f0 e8 00 08 	ld.d	r8,r8[8]
80002032:	fa e9 00 08 	st.d	sp[8],r8
	gpio_enable_module(DIP204_SPI_GPIO_MAP,
80002036:	30 4b       	mov	r11,4
80002038:	49 1c       	lddpc	r12,8000207c <config_dpi204+0x60>
8000203a:	f0 1f 00 12 	mcall	80002080 <config_dpi204+0x64>
	sizeof(DIP204_SPI_GPIO_MAP) / sizeof(DIP204_SPI_GPIO_MAP[0]));

	spi_initMaster(DIP204_SPI, &spiOptions2);
8000203e:	1a 9b       	mov	r11,sp
80002040:	fe 7c 28 00 	mov	r12,-55296
80002044:	f0 1f 00 10 	mcall	80002084 <config_dpi204+0x68>
	spi_selectionMode(DIP204_SPI, 0, 0, 0);
80002048:	30 09       	mov	r9,0
8000204a:	12 9a       	mov	r10,r9
8000204c:	12 9b       	mov	r11,r9
8000204e:	fe 7c 28 00 	mov	r12,-55296
80002052:	f0 1f 00 0e 	mcall	80002088 <config_dpi204+0x6c>
	spi_enable(DIP204_SPI);
80002056:	fe 7c 28 00 	mov	r12,-55296
8000205a:	f0 1f 00 0d 	mcall	8000208c <config_dpi204+0x70>
	spi_setupChipReg(DIP204_SPI, &spiOptions2, FOSC0);
8000205e:	e0 6a 1b 00 	mov	r10,6912
80002062:	ea 1a 00 b7 	orh	r10,0xb7
80002066:	1a 9b       	mov	r11,sp
80002068:	fe 7c 28 00 	mov	r12,-55296
8000206c:	f0 1f 00 09 	mcall	80002090 <config_dpi204+0x74>
}
80002070:	2f cd       	sub	sp,-16
80002072:	e3 cd 80 80 	ldm	sp++,r7,pc
80002076:	00 00       	add	r0,r0
80002078:	80 00       	ld.sh	r0,r0[0x0]
8000207a:	92 30       	ld.sh	r0,r9[0x6]
8000207c:	80 00       	ld.sh	r0,r0[0x0]
8000207e:	92 40       	ld.sh	r0,r9[0x8]
80002080:	80 00       	ld.sh	r0,r0[0x0]
80002082:	30 bc       	mov	r12,11
80002084:	80 00       	ld.sh	r0,r0[0x0]
80002086:	33 1a       	mov	r10,49
80002088:	80 00       	ld.sh	r0,r0[0x0]
8000208a:	33 52       	mov	r2,53
8000208c:	80 00       	ld.sh	r0,r0[0x0]
8000208e:	34 a8       	mov	r8,74
80002090:	80 00       	ld.sh	r0,r0[0x0]
80002092:	33 f0       	mov	r0,63

80002094 <mASSERT_CS>:
 *
 * Overview:		See the documentation for spi_selectchip in spi.h
 *
 * Note:            spi.h has to be included.
 ********************************************************************/
void mASSERT_CS(unsigned char channel){
80002094:	d4 01       	pushm	lr
	spi_selectChip(SPARE_SPI,channel);
80002096:	18 9b       	mov	r11,r12
80002098:	fe 7c 24 00 	mov	r12,-56320
8000209c:	f0 1f 00 02 	mcall	800020a4 <mASSERT_CS+0x10>
}
800020a0:	d8 02       	popm	pc
800020a2:	00 00       	add	r0,r0
800020a4:	80 00       	ld.sh	r0,r0[0x0]
800020a6:	33 7e       	mov	lr,55

800020a8 <config_SPI_SPARE>:
 *
 * Note:            None.
 *
 * Example: 	    config_SPI_SPARE();
 ********************************************************************/
void config_SPI_SPARE(void){
800020a8:	eb cd 40 80 	pushm	r7,lr
800020ac:	20 4d       	sub	sp,16
.spck_delay   = 0,
.trans_delay  = 0,
.stay_act     = 0,
.spi_mode     = 0,
.modfdis      = 1
};
800020ae:	49 88       	lddpc	r8,8000210c <config_SPI_SPARE+0x64>
800020b0:	1a 97       	mov	r7,sp
800020b2:	f0 ea 00 00 	ld.d	r10,r8[0]
800020b6:	fa eb 00 00 	st.d	sp[0],r10
800020ba:	f0 e8 00 08 	ld.d	r8,r8[8]
800020be:	fa e9 00 08 	st.d	sp[8],r8

gpio_enable_module(SPARE_SPI_GPIO_MAP,
800020c2:	30 4b       	mov	r11,4
800020c4:	49 3c       	lddpc	r12,80002110 <config_SPI_SPARE+0x68>
800020c6:	f0 1f 00 14 	mcall	80002114 <config_SPI_SPARE+0x6c>
sizeof(SPARE_SPI_GPIO_MAP) / sizeof(SPARE_SPI_GPIO_MAP[0]));

spi_initMaster(SPARE_SPI,&spiOptions);
800020ca:	1a 9b       	mov	r11,sp
800020cc:	fe 7c 24 00 	mov	r12,-56320
800020d0:	f0 1f 00 12 	mcall	80002118 <config_SPI_SPARE+0x70>
spi_selectionMode(SPARE_SPI, 0, 0, 0);
800020d4:	30 09       	mov	r9,0
800020d6:	12 9a       	mov	r10,r9
800020d8:	12 9b       	mov	r11,r9
800020da:	fe 7c 24 00 	mov	r12,-56320
800020de:	f0 1f 00 10 	mcall	8000211c <config_SPI_SPARE+0x74>
spi_selectChip(SPARE_SPI,0);
800020e2:	30 0b       	mov	r11,0
800020e4:	fe 7c 24 00 	mov	r12,-56320
800020e8:	f0 1f 00 0e 	mcall	80002120 <config_SPI_SPARE+0x78>
spi_setupChipReg(SPARE_SPI, &spiOptions, FOSC0);
800020ec:	e0 6a 1b 00 	mov	r10,6912
800020f0:	ea 1a 00 b7 	orh	r10,0xb7
800020f4:	1a 9b       	mov	r11,sp
800020f6:	fe 7c 24 00 	mov	r12,-56320
800020fa:	f0 1f 00 0b 	mcall	80002124 <config_SPI_SPARE+0x7c>
spi_enable(SPARE_SPI);
800020fe:	fe 7c 24 00 	mov	r12,-56320
80002102:	f0 1f 00 0a 	mcall	80002128 <config_SPI_SPARE+0x80>
}
80002106:	2f cd       	sub	sp,-16
80002108:	e3 cd 80 80 	ldm	sp++,r7,pc
8000210c:	80 00       	ld.sh	r0,r0[0x0]
8000210e:	92 20       	ld.sh	r0,r9[0x4]
80002110:	80 00       	ld.sh	r0,r0[0x0]
80002112:	92 00       	ld.sh	r0,r9[0x0]
80002114:	80 00       	ld.sh	r0,r0[0x0]
80002116:	30 bc       	mov	r12,11
80002118:	80 00       	ld.sh	r0,r0[0x0]
8000211a:	33 1a       	mov	r10,49
8000211c:	80 00       	ld.sh	r0,r0[0x0]
8000211e:	33 52       	mov	r2,53
80002120:	80 00       	ld.sh	r0,r0[0x0]
80002122:	33 7e       	mov	lr,55
80002124:	80 00       	ld.sh	r0,r0[0x0]
80002126:	33 f0       	mov	r0,63
80002128:	80 00       	ld.sh	r0,r0[0x0]
8000212a:	34 a8       	mov	r8,74

8000212c <XferSPI_send>:
 *         			one data word to it. See the documentation for spi_write in spi.h
 *
 * Note:            spi.h has to be included.
 ********************************************************************/
PRIVATE UINT8 XferSPI_send( int Channel, UINT8 dat )
{
8000212c:	d4 01       	pushm	lr
	spi_write(SPARE_SPI, dat);
8000212e:	fe 7c 24 00 	mov	r12,-56320
80002132:	f0 1f 00 02 	mcall	80002138 <XferSPI_send+0xc>
	return 0;
}
80002136:	d8 0a       	popm	pc,r12=0
80002138:	80 00       	ld.sh	r0,r0[0x0]
8000213a:	34 ae       	mov	lr,74

8000213c <ReadStatus2515>:
 * Overview:		Reads status from MCP2515
 *
 * Note:            None.
 ********************************************************************/
PRIVATE UINT8 ReadStatus2515(int Channel)
{
8000213c:	d4 01       	pushm	lr
8000213e:	20 1d       	sub	sp,4
	unsigned short *spidatareadpointer_temp;
	unsigned short spidataread_temp;
	spidatareadpointer_temp=&spidataread_temp;

	spi_selectChip(SPARE_SPI,0);
80002140:	30 0b       	mov	r11,0
80002142:	fe 7c 24 00 	mov	r12,-56320
80002146:	f0 1f 00 0e 	mcall	8000217c <ReadStatus2515+0x40>

	spi_write(SPARE_SPI,CAN_RD_STATUS);
8000214a:	e0 6b 00 a0 	mov	r11,160
8000214e:	fe 7c 24 00 	mov	r12,-56320
80002152:	f0 1f 00 0c 	mcall	80002180 <ReadStatus2515+0x44>

	spi_write(SPARE_SPI,DUMMY_BYTE);
80002156:	30 0b       	mov	r11,0
80002158:	fe 7c 24 00 	mov	r12,-56320
8000215c:	f0 1f 00 09 	mcall	80002180 <ReadStatus2515+0x44>
	spi_read(SPARE_SPI,spidatareadpointer_temp);
80002160:	fa cb ff fe 	sub	r11,sp,-2
80002164:	fe 7c 24 00 	mov	r12,-56320
80002168:	f0 1f 00 07 	mcall	80002184 <ReadStatus2515+0x48>

	spi_unselectChip(SPARE_SPI,0);
8000216c:	30 0b       	mov	r11,0
8000216e:	fe 7c 24 00 	mov	r12,-56320
80002172:	f0 1f 00 06 	mcall	80002188 <ReadStatus2515+0x4c>

	return spidataread_temp;
}
80002176:	1b bc       	ld.ub	r12,sp[0x3]
80002178:	2f fd       	sub	sp,-4
8000217a:	d8 02       	popm	pc
8000217c:	80 00       	ld.sh	r0,r0[0x0]
8000217e:	33 7e       	mov	lr,55
80002180:	80 00       	ld.sh	r0,r0[0x0]
80002182:	34 ae       	mov	lr,74
80002184:	80 00       	ld.sh	r0,r0[0x0]
80002186:	34 d2       	mov	r2,77
80002188:	80 00       	ld.sh	r0,r0[0x0]
8000218a:	33 ca       	mov	r10,60

8000218c <CANRxReady>:
 * Note:            None.
 *
 * Example:			CANRxReady(0);
 ********************************************************************/
inline Bool CANRxReady( int Channel )
{
8000218c:	d4 01       	pushm	lr
	return (ReadStatus2515(Channel)&0x3) != 0;
8000218e:	f0 1f 00 04 	mcall	8000219c <CANRxReady+0x10>
80002192:	f9 dc c0 02 	bfextu	r12,r12,0x0,0x2
}
80002196:	5f 1c       	srne	r12
80002198:	d8 02       	popm	pc
8000219a:	00 00       	add	r0,r0
8000219c:	80 00       	ld.sh	r0,r0[0x0]
8000219e:	21 3c       	sub	r12,19

800021a0 <CANTxReady>:
 * Note:            None.
 *
 * Example:			CANTxReady(0);
 ********************************************************************/
inline Bool CANTxReady( int Channel )
{
800021a0:	d4 01       	pushm	lr
	return (ReadStatus2515(Channel)&0x04) == 0;
800021a2:	f0 1f 00 04 	mcall	800021b0 <CANTxReady+0x10>
800021a6:	ec 1c 00 04 	eorl	r12,0x4
}
800021aa:	f9 dc c0 41 	bfextu	r12,r12,0x2,0x1
800021ae:	d8 02       	popm	pc
800021b0:	80 00       	ld.sh	r0,r0[0x0]
800021b2:	21 3c       	sub	r12,19

800021b4 <mDEASSERT_CS>:
 *
 * Overview:		See the documentation for spi_unselectchip in spi.h
 *
 * Note:            spi.h has to be included.
 ********************************************************************/
void mDEASSERT_CS(unsigned char channel){
800021b4:	d4 01       	pushm	lr
	spi_unselectChip(SPARE_SPI,channel);
800021b6:	18 9b       	mov	r11,r12
800021b8:	fe 7c 24 00 	mov	r12,-56320
800021bc:	f0 1f 00 02 	mcall	800021c4 <mDEASSERT_CS+0x10>
}
800021c0:	d8 02       	popm	pc
800021c2:	00 00       	add	r0,r0
800021c4:	80 00       	ld.sh	r0,r0[0x0]
800021c6:	33 ca       	mov	r10,60

800021c8 <CAN2515ByteWrite>:
 * Note:            None.
 *
 * Example:         CANReset(0)
 ********************************************************************/
void CAN2515ByteWrite(int Channel, unsigned char addr, unsigned char value )
{
800021c8:	d4 21       	pushm	r4-r7,lr
800021ca:	18 97       	mov	r7,r12
800021cc:	16 95       	mov	r5,r11
800021ce:	14 94       	mov	r4,r10
	mASSERT_CS(Channel);
800021d0:	18 96       	mov	r6,r12
800021d2:	5c 56       	castu.b	r6
800021d4:	0c 9c       	mov	r12,r6
800021d6:	f0 1f 00 0a 	mcall	800021fc <CAN2515ByteWrite+0x34>
	XferSPI_send(Channel, CAN_WRITE);
800021da:	30 2b       	mov	r11,2
800021dc:	0e 9c       	mov	r12,r7
800021de:	f0 1f 00 09 	mcall	80002200 <CAN2515ByteWrite+0x38>
	XferSPI_send(Channel, addr);
800021e2:	0a 9b       	mov	r11,r5
800021e4:	0e 9c       	mov	r12,r7
800021e6:	f0 1f 00 07 	mcall	80002200 <CAN2515ByteWrite+0x38>
	XferSPI_send(Channel, value);
800021ea:	08 9b       	mov	r11,r4
800021ec:	0e 9c       	mov	r12,r7
800021ee:	f0 1f 00 05 	mcall	80002200 <CAN2515ByteWrite+0x38>
	mDEASSERT_CS(Channel);
800021f2:	0c 9c       	mov	r12,r6
800021f4:	f0 1f 00 04 	mcall	80002204 <CAN2515ByteWrite+0x3c>
}
800021f8:	d8 22       	popm	r4-r7,pc
800021fa:	00 00       	add	r0,r0
800021fc:	80 00       	ld.sh	r0,r0[0x0]
800021fe:	20 94       	sub	r4,9
80002200:	80 00       	ld.sh	r0,r0[0x0]
80002202:	21 2c       	sub	r12,18
80002204:	80 00       	ld.sh	r0,r0[0x0]
80002206:	21 b4       	sub	r4,27

80002208 <CAN2515SetRXB1FiltersEx>:
 * Note:            None.
 *
 * Example:			CAN2515SetRXB0Filters(Channel, 0, Flt);
 ********************************************************************/
void CAN2515SetRXB1FiltersEx(int Channel, UINT32 Mask1, UINT32* pFlt2_5)
{ 
80002208:	eb cd 40 e0 	pushm	r5-r7,lr
8000220c:	18 97       	mov	r7,r12
8000220e:	16 96       	mov	r6,r11
80002210:	14 95       	mov	r5,r10
	    //Set the mask associated with RXB1
	    CAN2515ByteWrite(Channel, RXM1EID0, Mask1);
80002212:	f5 db c0 08 	bfextu	r10,r11,0x0,0x8
80002216:	32 7b       	mov	r11,39
80002218:	f0 1f 00 50 	mcall	80002358 <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXM1EID8, Mask1 >> 8);
8000221c:	f5 d6 c1 08 	bfextu	r10,r6,0x8,0x8
80002220:	32 6b       	mov	r11,38
80002222:	0e 9c       	mov	r12,r7
80002224:	f0 1f 00 4d 	mcall	80002358 <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXM1SIDL, ((Mask1 >> 13) & 0b11100000) | ((Mask1 >> 16) & 0b00000011));
80002228:	f1 d6 c2 02 	bfextu	r8,r6,0x10,0x2
8000222c:	ec 0a 16 0d 	lsr	r10,r6,0xd
80002230:	e2 1a 00 e0 	andl	r10,0xe0,COH
80002234:	10 4a       	or	r10,r8
80002236:	32 5b       	mov	r11,37
80002238:	0e 9c       	mov	r12,r7
8000223a:	f0 1f 00 48 	mcall	80002358 <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXM1SIDH, Mask1 >> 21);
8000223e:	f5 d6 c2 a8 	bfextu	r10,r6,0x15,0x8
80002242:	32 4b       	mov	r11,36
80002244:	0e 9c       	mov	r12,r7
80002246:	f0 1f 00 45 	mcall	80002358 <CAN2515SetRXB1FiltersEx+0x150>
	    
	    //Set the 4 filters associated with RXB1
	    CAN2515ByteWrite(Channel, RXF2EID0, *pFlt2_5);
8000224a:	0b ba       	ld.ub	r10,r5[0x3]
8000224c:	30 bb       	mov	r11,11
8000224e:	0e 9c       	mov	r12,r7
80002250:	f0 1f 00 42 	mcall	80002358 <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF2EID8, *pFlt2_5 >> 8);
80002254:	0b aa       	ld.ub	r10,r5[0x2]
80002256:	30 ab       	mov	r11,10
80002258:	0e 9c       	mov	r12,r7
8000225a:	f0 1f 00 40 	mcall	80002358 <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF2SIDL, ((*pFlt2_5 >> 13) & 0b11100000) | 0b00001000 | ((*pFlt2_5 >> 16) & 0b00000011));
8000225e:	6a 08       	ld.w	r8,r5[0x0]
80002260:	f0 0a 16 0d 	lsr	r10,r8,0xd
80002264:	f1 d8 c2 02 	bfextu	r8,r8,0x10,0x2
80002268:	e2 1a 00 e0 	andl	r10,0xe0,COH
8000226c:	f1 ea 10 0a 	or	r10,r8,r10
80002270:	a3 ba       	sbr	r10,0x3
80002272:	e2 1a 00 eb 	andl	r10,0xeb,COH
80002276:	30 9b       	mov	r11,9
80002278:	0e 9c       	mov	r12,r7
8000227a:	f0 1f 00 38 	mcall	80002358 <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF2SIDH, *pFlt2_5 >> 21);
8000227e:	0b 0a       	ld.w	r10,r5++
80002280:	f5 da c2 a8 	bfextu	r10,r10,0x15,0x8
80002284:	30 8b       	mov	r11,8
80002286:	0e 9c       	mov	r12,r7
80002288:	f0 1f 00 34 	mcall	80002358 <CAN2515SetRXB1FiltersEx+0x150>
	    
	    pFlt2_5++;
	    CAN2515ByteWrite(Channel, RXF3EID0, *pFlt2_5);
8000228c:	0b ba       	ld.ub	r10,r5[0x3]
8000228e:	31 3b       	mov	r11,19
80002290:	0e 9c       	mov	r12,r7
80002292:	f0 1f 00 32 	mcall	80002358 <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF3EID8, *pFlt2_5 >> 8);
80002296:	0b aa       	ld.ub	r10,r5[0x2]
80002298:	31 2b       	mov	r11,18
8000229a:	0e 9c       	mov	r12,r7
8000229c:	f0 1f 00 2f 	mcall	80002358 <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF3SIDL, ((*pFlt2_5 >> 13) & 0b11100000) | 0b00001000 | ((*pFlt2_5 >> 16) & 0b00000011));
800022a0:	6a 08       	ld.w	r8,r5[0x0]
800022a2:	f0 0a 16 0d 	lsr	r10,r8,0xd
800022a6:	f1 d8 c2 02 	bfextu	r8,r8,0x10,0x2
800022aa:	e2 1a 00 e0 	andl	r10,0xe0,COH
800022ae:	f1 ea 10 0a 	or	r10,r8,r10
800022b2:	a3 ba       	sbr	r10,0x3
800022b4:	e2 1a 00 eb 	andl	r10,0xeb,COH
800022b8:	31 1b       	mov	r11,17
800022ba:	0e 9c       	mov	r12,r7
800022bc:	f0 1f 00 27 	mcall	80002358 <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF3SIDH, *pFlt2_5 >> 21);
800022c0:	0b 0a       	ld.w	r10,r5++
800022c2:	f5 da c2 a8 	bfextu	r10,r10,0x15,0x8
800022c6:	31 0b       	mov	r11,16
800022c8:	0e 9c       	mov	r12,r7
800022ca:	f0 1f 00 24 	mcall	80002358 <CAN2515SetRXB1FiltersEx+0x150>
	    
	    pFlt2_5++;
	    CAN2515ByteWrite(Channel, RXF4EID0, *pFlt2_5);
800022ce:	0b ba       	ld.ub	r10,r5[0x3]
800022d0:	31 7b       	mov	r11,23
800022d2:	0e 9c       	mov	r12,r7
800022d4:	f0 1f 00 21 	mcall	80002358 <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF4EID8, *pFlt2_5 >> 8);
800022d8:	0b aa       	ld.ub	r10,r5[0x2]
800022da:	31 6b       	mov	r11,22
800022dc:	0e 9c       	mov	r12,r7
800022de:	f0 1f 00 1f 	mcall	80002358 <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF4SIDL, ((*pFlt2_5 >> 13) & 0b11100000) | 0b00001000 | ((*pFlt2_5 >> 16) & 0b00000011));
800022e2:	6a 08       	ld.w	r8,r5[0x0]
800022e4:	f0 0a 16 0d 	lsr	r10,r8,0xd
800022e8:	f1 d8 c2 02 	bfextu	r8,r8,0x10,0x2
800022ec:	e2 1a 00 e0 	andl	r10,0xe0,COH
800022f0:	f1 ea 10 0a 	or	r10,r8,r10
800022f4:	a3 ba       	sbr	r10,0x3
800022f6:	e2 1a 00 eb 	andl	r10,0xeb,COH
800022fa:	31 5b       	mov	r11,21
800022fc:	0e 9c       	mov	r12,r7
800022fe:	f0 1f 00 17 	mcall	80002358 <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF4SIDH, *pFlt2_5 >> 21);
80002302:	0b 0a       	ld.w	r10,r5++
80002304:	f5 da c2 a8 	bfextu	r10,r10,0x15,0x8
80002308:	31 4b       	mov	r11,20
8000230a:	0e 9c       	mov	r12,r7
8000230c:	f0 1f 00 13 	mcall	80002358 <CAN2515SetRXB1FiltersEx+0x150>
	    
	    pFlt2_5++;
	    CAN2515ByteWrite(Channel, RXF5EID0, *pFlt2_5);
80002310:	0b ba       	ld.ub	r10,r5[0x3]
80002312:	31 bb       	mov	r11,27
80002314:	0e 9c       	mov	r12,r7
80002316:	f0 1f 00 11 	mcall	80002358 <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF5EID8, *pFlt2_5 >> 8);
8000231a:	0b aa       	ld.ub	r10,r5[0x2]
8000231c:	31 ab       	mov	r11,26
8000231e:	0e 9c       	mov	r12,r7
80002320:	f0 1f 00 0e 	mcall	80002358 <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF5SIDL, ((*pFlt2_5 >> 13) & 0b11100000) | 0b00001000 | ((*pFlt2_5 >> 16) & 0b00000011));
80002324:	6a 08       	ld.w	r8,r5[0x0]
80002326:	f0 0a 16 0d 	lsr	r10,r8,0xd
8000232a:	f1 d8 c2 02 	bfextu	r8,r8,0x10,0x2
8000232e:	e2 1a 00 e0 	andl	r10,0xe0,COH
80002332:	f1 ea 10 0a 	or	r10,r8,r10
80002336:	a3 ba       	sbr	r10,0x3
80002338:	e2 1a 00 eb 	andl	r10,0xeb,COH
8000233c:	31 9b       	mov	r11,25
8000233e:	0e 9c       	mov	r12,r7
80002340:	f0 1f 00 06 	mcall	80002358 <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF5SIDH, *pFlt2_5 >> 21);
80002344:	6a 0a       	ld.w	r10,r5[0x0]
80002346:	f5 da c2 a8 	bfextu	r10,r10,0x15,0x8
8000234a:	31 8b       	mov	r11,24
8000234c:	0e 9c       	mov	r12,r7
8000234e:	f0 1f 00 03 	mcall	80002358 <CAN2515SetRXB1FiltersEx+0x150>
}
80002352:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80002356:	00 00       	add	r0,r0
80002358:	80 00       	ld.sh	r0,r0[0x0]
8000235a:	21 c8       	sub	r8,28

8000235c <CAN2515SetRXB0FiltersEx>:
 * Note:            None.
 *
 * Example:			CAN2515SetRXB0Filters(Channel, 0, Flt);
 ********************************************************************/
void CAN2515SetRXB0FiltersEx(int Channel, UINT32 Mask0, UINT32* pFlt0_1)
{	
8000235c:	eb cd 40 e0 	pushm	r5-r7,lr
80002360:	18 97       	mov	r7,r12
80002362:	16 96       	mov	r6,r11
80002364:	14 95       	mov	r5,r10
	//Set the mask associated with RXB0
	CAN2515ByteWrite(Channel, RXM0EID0, Mask0);
80002366:	f5 db c0 08 	bfextu	r10,r11,0x0,0x8
8000236a:	32 3b       	mov	r11,35
8000236c:	f0 1f 00 2f 	mcall	80002428 <CAN2515SetRXB0FiltersEx+0xcc>
	CAN2515ByteWrite(Channel, RXM0EID8, Mask0 >> 8);
80002370:	f5 d6 c1 08 	bfextu	r10,r6,0x8,0x8
80002374:	32 2b       	mov	r11,34
80002376:	0e 9c       	mov	r12,r7
80002378:	f0 1f 00 2c 	mcall	80002428 <CAN2515SetRXB0FiltersEx+0xcc>
	CAN2515ByteWrite(Channel, RXM0SIDL, ((Mask0 >> 13) & 0b11100000) | ((Mask0 >> 16) & 0b00000011));
8000237c:	f1 d6 c2 02 	bfextu	r8,r6,0x10,0x2
80002380:	ec 0a 16 0d 	lsr	r10,r6,0xd
80002384:	e2 1a 00 e0 	andl	r10,0xe0,COH
80002388:	10 4a       	or	r10,r8
8000238a:	32 1b       	mov	r11,33
8000238c:	0e 9c       	mov	r12,r7
8000238e:	f0 1f 00 27 	mcall	80002428 <CAN2515SetRXB0FiltersEx+0xcc>
	CAN2515ByteWrite(Channel, RXM0SIDH, Mask0 >> 21);
80002392:	f5 d6 c2 a8 	bfextu	r10,r6,0x15,0x8
80002396:	32 0b       	mov	r11,32
80002398:	0e 9c       	mov	r12,r7
8000239a:	f0 1f 00 24 	mcall	80002428 <CAN2515SetRXB0FiltersEx+0xcc>
	    
	//Set the two filters associated with RXB0
	CAN2515ByteWrite(Channel, RXF0EID0, *pFlt0_1);
8000239e:	0b ba       	ld.ub	r10,r5[0x3]
800023a0:	30 3b       	mov	r11,3
800023a2:	0e 9c       	mov	r12,r7
800023a4:	f0 1f 00 21 	mcall	80002428 <CAN2515SetRXB0FiltersEx+0xcc>
	CAN2515ByteWrite(Channel, RXF0EID8, *pFlt0_1 >> 8);
800023a8:	0b aa       	ld.ub	r10,r5[0x2]
800023aa:	30 2b       	mov	r11,2
800023ac:	0e 9c       	mov	r12,r7
800023ae:	f0 1f 00 1f 	mcall	80002428 <CAN2515SetRXB0FiltersEx+0xcc>
	CAN2515ByteWrite(Channel, RXF0SIDL, ((*pFlt0_1 >> 13) & 0b11100000) | 0b00001000 | ((*pFlt0_1 >> 16) & 0b00000011));
800023b2:	6a 08       	ld.w	r8,r5[0x0]
800023b4:	f0 0a 16 0d 	lsr	r10,r8,0xd
800023b8:	f1 d8 c2 02 	bfextu	r8,r8,0x10,0x2
800023bc:	e2 1a 00 e0 	andl	r10,0xe0,COH
800023c0:	f1 ea 10 0a 	or	r10,r8,r10
800023c4:	a3 ba       	sbr	r10,0x3
800023c6:	e2 1a 00 eb 	andl	r10,0xeb,COH
800023ca:	30 1b       	mov	r11,1
800023cc:	0e 9c       	mov	r12,r7
800023ce:	f0 1f 00 17 	mcall	80002428 <CAN2515SetRXB0FiltersEx+0xcc>
	CAN2515ByteWrite(Channel, RXF0SIDH, *pFlt0_1 >> 21);
800023d2:	0b 0a       	ld.w	r10,r5++
800023d4:	f5 da c2 a8 	bfextu	r10,r10,0x15,0x8
800023d8:	30 0b       	mov	r11,0
800023da:	0e 9c       	mov	r12,r7
800023dc:	f0 1f 00 13 	mcall	80002428 <CAN2515SetRXB0FiltersEx+0xcc>
	    
	pFlt0_1++;
	CAN2515ByteWrite(Channel, RXF1EID0, *pFlt0_1);
800023e0:	0b ba       	ld.ub	r10,r5[0x3]
800023e2:	30 7b       	mov	r11,7
800023e4:	0e 9c       	mov	r12,r7
800023e6:	f0 1f 00 11 	mcall	80002428 <CAN2515SetRXB0FiltersEx+0xcc>
	CAN2515ByteWrite(Channel, RXF1EID8, *pFlt0_1 >> 8);
800023ea:	0b aa       	ld.ub	r10,r5[0x2]
800023ec:	30 6b       	mov	r11,6
800023ee:	0e 9c       	mov	r12,r7
800023f0:	f0 1f 00 0e 	mcall	80002428 <CAN2515SetRXB0FiltersEx+0xcc>
	CAN2515ByteWrite(Channel, RXF1SIDL, ((*pFlt0_1 >> 13) & 0b11100000) | 0b00001000 | ((*pFlt0_1 >> 16) & 0b00000011));
800023f4:	6a 08       	ld.w	r8,r5[0x0]
800023f6:	f0 0a 16 0d 	lsr	r10,r8,0xd
800023fa:	f1 d8 c2 02 	bfextu	r8,r8,0x10,0x2
800023fe:	e2 1a 00 e0 	andl	r10,0xe0,COH
80002402:	f1 ea 10 0a 	or	r10,r8,r10
80002406:	a3 ba       	sbr	r10,0x3
80002408:	e2 1a 00 eb 	andl	r10,0xeb,COH
8000240c:	30 5b       	mov	r11,5
8000240e:	0e 9c       	mov	r12,r7
80002410:	f0 1f 00 06 	mcall	80002428 <CAN2515SetRXB0FiltersEx+0xcc>
	CAN2515ByteWrite(Channel, RXF1SIDH, *pFlt0_1 >> 21);
80002414:	6a 0a       	ld.w	r10,r5[0x0]
80002416:	f5 da c2 a8 	bfextu	r10,r10,0x15,0x8
8000241a:	30 4b       	mov	r11,4
8000241c:	0e 9c       	mov	r12,r7
8000241e:	f0 1f 00 03 	mcall	80002428 <CAN2515SetRXB0FiltersEx+0xcc>
}
80002422:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80002426:	00 00       	add	r0,r0
80002428:	80 00       	ld.sh	r0,r0[0x0]
8000242a:	21 c8       	sub	r8,28

8000242c <CANReset>:
 * Overview:		Sends a software reset commmand over spi port to MCP2515 chip
 *
 * Note:            None.
 ********************************************************************/
void CANReset(int Channel)
{
8000242c:	eb cd 40 c0 	pushm	r6-r7,lr
80002430:	18 96       	mov	r6,r12
	mASSERT_CS(Channel);
80002432:	ef dc c0 08 	bfextu	r7,r12,0x0,0x8
80002436:	0e 9c       	mov	r12,r7
80002438:	f0 1f 00 06 	mcall	80002450 <CANReset+0x24>
	XferSPI_send(Channel, CAN_RESET);
8000243c:	e0 6b 00 c0 	mov	r11,192
80002440:	0c 9c       	mov	r12,r6
80002442:	f0 1f 00 05 	mcall	80002454 <CANReset+0x28>
	mDEASSERT_CS(Channel);
80002446:	0e 9c       	mov	r12,r7
80002448:	f0 1f 00 04 	mcall	80002458 <CANReset+0x2c>
}
8000244c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002450:	80 00       	ld.sh	r0,r0[0x0]
80002452:	20 94       	sub	r4,9
80002454:	80 00       	ld.sh	r0,r0[0x0]
80002456:	21 2c       	sub	r12,18
80002458:	80 00       	ld.sh	r0,r0[0x0]
8000245a:	21 b4       	sub	r4,27

8000245c <CAN2515ByteRead>:
 * Overview:		This function reads the value of a byte. It is used to read register values in e.g. the MCP2515 module
 *
 * Note:            None.
 ********************************************************************/
PRIVATE UINT8 CAN2515ByteRead(int Channel, unsigned char addr)
{
8000245c:	eb cd 40 e0 	pushm	r5-r7,lr
80002460:	20 1d       	sub	sp,4
80002462:	18 97       	mov	r7,r12
80002464:	16 95       	mov	r5,r11
unsigned char tempdata;

	mASSERT_CS(Channel);
80002466:	18 96       	mov	r6,r12
80002468:	5c 56       	castu.b	r6
8000246a:	0c 9c       	mov	r12,r6
8000246c:	f0 1f 00 13 	mcall	800024b8 <CAN2515ByteRead+0x5c>
	XferSPI_send(Channel, CAN_READ);
80002470:	30 3b       	mov	r11,3
80002472:	0e 9c       	mov	r12,r7
80002474:	f0 1f 00 12 	mcall	800024bc <CAN2515ByteRead+0x60>
	XferSPI_send(Channel, addr);
80002478:	0a 9b       	mov	r11,r5
8000247a:	0e 9c       	mov	r12,r7
8000247c:	f0 1f 00 10 	mcall	800024bc <CAN2515ByteRead+0x60>
{
	unsigned short *spidatareadpointer_temp;
	unsigned short spidataread_temp;
	spidatareadpointer_temp=&spidataread_temp;

	spi_write(SPARE_SPI, DUMMY_BYTE);
80002480:	30 0b       	mov	r11,0
80002482:	fe 7c 24 00 	mov	r12,-56320
80002486:	f0 1f 00 0f 	mcall	800024c0 <CAN2515ByteRead+0x64>
	while(spi_readRegisterFullCheck(SPARE_SPI)==0){
8000248a:	fe 77 24 00 	mov	r7,-56320
8000248e:	c0 28       	rjmp	80002492 <CAN2515ByteRead+0x36>
		asm("NOP;");
80002490:	d7 03       	nop
	unsigned short *spidatareadpointer_temp;
	unsigned short spidataread_temp;
	spidatareadpointer_temp=&spidataread_temp;

	spi_write(SPARE_SPI, DUMMY_BYTE);
	while(spi_readRegisterFullCheck(SPARE_SPI)==0){
80002492:	0e 9c       	mov	r12,r7
80002494:	f0 1f 00 0c 	mcall	800024c4 <CAN2515ByteRead+0x68>
80002498:	cf c0       	breq	80002490 <CAN2515ByteRead+0x34>
		asm("NOP;");
	}
	spi_read(SPARE_SPI,spidatareadpointer_temp);
8000249a:	fa cb ff fe 	sub	r11,sp,-2
8000249e:	fe 7c 24 00 	mov	r12,-56320
800024a2:	f0 1f 00 0a 	mcall	800024c8 <CAN2515ByteRead+0x6c>
	return spidataread_temp;
800024a6:	1b b7       	ld.ub	r7,sp[0x3]

	mASSERT_CS(Channel);
	XferSPI_send(Channel, CAN_READ);
	XferSPI_send(Channel, addr);
	tempdata = XferSPI_receive(Channel,0);
	mDEASSERT_CS(Channel);
800024a8:	0c 9c       	mov	r12,r6
800024aa:	f0 1f 00 09 	mcall	800024cc <CAN2515ByteRead+0x70>

	return tempdata;
}
800024ae:	0e 9c       	mov	r12,r7
800024b0:	2f fd       	sub	sp,-4
800024b2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800024b6:	00 00       	add	r0,r0
800024b8:	80 00       	ld.sh	r0,r0[0x0]
800024ba:	20 94       	sub	r4,9
800024bc:	80 00       	ld.sh	r0,r0[0x0]
800024be:	21 2c       	sub	r12,18
800024c0:	80 00       	ld.sh	r0,r0[0x0]
800024c2:	34 ae       	mov	lr,74
800024c4:	80 00       	ld.sh	r0,r0[0x0]
800024c6:	34 ca       	mov	r10,76
800024c8:	80 00       	ld.sh	r0,r0[0x0]
800024ca:	34 d2       	mov	r2,77
800024cc:	80 00       	ld.sh	r0,r0[0x0]
800024ce:	21 b4       	sub	r4,27

800024d0 <CANEnable>:
 * Overview:		Sets the CAN bus speed and turns on the CAN controller.
 *
 * Note:            None.
 ********************************************************************/
void CANEnable( int Channel, int BusSpeed )
{
800024d0:	eb cd 40 80 	pushm	r7,lr
800024d4:	18 97       	mov	r7,r12
	// CNF1 -> 0x03 = 125kB. 0x01 = 250 kB, 0x00 = 500kB

	if (BusSpeed==10) // For 125 kB
800024d6:	58 ab       	cp.w	r11,10
800024d8:	c1 11       	brne	800024fa <CANEnable+0x2a>
	{
		CAN2515ByteWrite(Channel, CNF1,0x03); //used to be: BusSpeed
800024da:	30 3a       	mov	r10,3
800024dc:	32 ab       	mov	r11,42
800024de:	f0 1f 00 30 	mcall	8000259c <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF2,0xac); //used to be: BusSpeed
800024e2:	e0 6a 00 ac 	mov	r10,172
800024e6:	32 9b       	mov	r11,41
800024e8:	0e 9c       	mov	r12,r7
800024ea:	f0 1f 00 2d 	mcall	8000259c <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF3,0x07); //used to be: BusSpeed
800024ee:	30 7a       	mov	r10,7
800024f0:	32 8b       	mov	r11,40
800024f2:	0e 9c       	mov	r12,r7
800024f4:	f0 1f 00 2a 	mcall	8000259c <CANEnable+0xcc>
800024f8:	c3 68       	rjmp	80002564 <CANEnable+0x94>
	}
	else if (BusSpeed==7) // For 250 kB
800024fa:	58 7b       	cp.w	r11,7
800024fc:	c1 11       	brne	8000251e <CANEnable+0x4e>
	{
		CAN2515ByteWrite(Channel, CNF1,0x01); //used to be: BusSpeed
800024fe:	30 1a       	mov	r10,1
80002500:	32 ab       	mov	r11,42
80002502:	f0 1f 00 27 	mcall	8000259c <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF2,0xac); //used to be: BusSpeed
80002506:	e0 6a 00 ac 	mov	r10,172
8000250a:	32 9b       	mov	r11,41
8000250c:	0e 9c       	mov	r12,r7
8000250e:	f0 1f 00 24 	mcall	8000259c <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF3,0x07); //used to be: BusSpeed
80002512:	30 7a       	mov	r10,7
80002514:	32 8b       	mov	r11,40
80002516:	0e 9c       	mov	r12,r7
80002518:	f0 1f 00 21 	mcall	8000259c <CANEnable+0xcc>
8000251c:	c2 48       	rjmp	80002564 <CANEnable+0x94>
	}
	else if(BusSpeed==5) // For 500 kB
8000251e:	58 5b       	cp.w	r11,5
80002520:	c1 11       	brne	80002542 <CANEnable+0x72>
	{
		CAN2515ByteWrite(Channel, CNF1,0x00); //used to be: BusSpeed
80002522:	30 0a       	mov	r10,0
80002524:	32 ab       	mov	r11,42
80002526:	f0 1f 00 1e 	mcall	8000259c <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF2,0xac); //used to be: BusSpeed
8000252a:	e0 6a 00 ac 	mov	r10,172
8000252e:	32 9b       	mov	r11,41
80002530:	0e 9c       	mov	r12,r7
80002532:	f0 1f 00 1b 	mcall	8000259c <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF3,0x07); //used to be: BusSpeed
80002536:	30 7a       	mov	r10,7
80002538:	32 8b       	mov	r11,40
8000253a:	0e 9c       	mov	r12,r7
8000253c:	f0 1f 00 18 	mcall	8000259c <CANEnable+0xcc>
80002540:	c1 28       	rjmp	80002564 <CANEnable+0x94>

	}
	else if (BusSpeed==1) // For 1000 kB
80002542:	58 1b       	cp.w	r11,1
80002544:	c1 01       	brne	80002564 <CANEnable+0x94>
	{
		CAN2515ByteWrite(Channel, CNF1,0x00); //used to be: BusSpeed
80002546:	30 0a       	mov	r10,0
80002548:	32 ab       	mov	r11,42
8000254a:	f0 1f 00 15 	mcall	8000259c <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF2,0x91); //used to be: BusSpeed
8000254e:	e0 6a 00 91 	mov	r10,145
80002552:	32 9b       	mov	r11,41
80002554:	0e 9c       	mov	r12,r7
80002556:	f0 1f 00 12 	mcall	8000259c <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF3,0x03); //used to be: BusSpeed
8000255a:	30 3a       	mov	r10,3
8000255c:	32 8b       	mov	r11,40
8000255e:	0e 9c       	mov	r12,r7
80002560:	f0 1f 00 0f 	mcall	8000259c <CANEnable+0xcc>
	}

	//Interrupt on RXB0 - CANINTE
	CAN2515ByteWrite(Channel, CANINTE,0x03); // Interrupts are on
80002564:	30 3a       	mov	r10,3
80002566:	32 bb       	mov	r11,43
80002568:	0e 9c       	mov	r12,r7
8000256a:	f0 1f 00 0d 	mcall	8000259c <CANEnable+0xcc>

	//Set NORMAL mode
	CAN2515ByteWrite(Channel, CANCTRL,REQOP_NORMAL  | CLKOUT_ENABLED);
8000256e:	30 4a       	mov	r10,4
80002570:	30 fb       	mov	r11,15
80002572:	0e 9c       	mov	r12,r7
80002574:	f0 1f 00 0a 	mcall	8000259c <CANEnable+0xcc>

	CAN2515ByteRead(Channel, CANSTAT); //dummy read to give 2515 time to switch to normal mode
80002578:	30 eb       	mov	r11,14
8000257a:	0e 9c       	mov	r12,r7
8000257c:	f0 1f 00 09 	mcall	800025a0 <CANEnable+0xd0>

	if( (CAN2515ByteRead(Channel, CANSTAT) & 0xE0) != OPMODE_NORMAL )
80002580:	30 eb       	mov	r11,14
80002582:	0e 9c       	mov	r12,r7
80002584:	f0 1f 00 07 	mcall	800025a0 <CANEnable+0xd0>
80002588:	e2 1c 00 e0 	andl	r12,0xe0,COH
8000258c:	c0 60       	breq	80002598 <CANEnable+0xc8>
		CAN2515ByteWrite(Channel, CANCTRL,REQOP_NORMAL | CLKOUT_ENABLED);
8000258e:	30 4a       	mov	r10,4
80002590:	30 fb       	mov	r11,15
80002592:	0e 9c       	mov	r12,r7
80002594:	f0 1f 00 02 	mcall	8000259c <CANEnable+0xcc>
80002598:	e3 cd 80 80 	ldm	sp++,r7,pc
8000259c:	80 00       	ld.sh	r0,r0[0x0]
8000259e:	21 c8       	sub	r8,28
800025a0:	80 00       	ld.sh	r0,r0[0x0]
800025a2:	24 5c       	sub	r12,69

800025a4 <InitializeCANExtended>:
 * Note:            None.
 *
 * Example:         InitializeCAN(0,CAN_125kbps, 0, 0) (no filter)
 ********************************************************************/
void InitializeCANExtended( int Channel , int BusSpeed, UINT32 Mask, UINT32 Flt[6])
{
800025a4:	d4 21       	pushm	r4-r7,lr
800025a6:	18 97       	mov	r7,r12
800025a8:	16 94       	mov	r4,r11
800025aa:	14 95       	mov	r5,r10
800025ac:	12 96       	mov	r6,r9
	CANReset(Channel);
800025ae:	f0 1f 00 0f 	mcall	800025e8 <InitializeCANExtended+0x44>
	CAN2515ByteWrite(Channel, RXB0CTRL, 0x02<<5); //Receive only extended id messages to buffer 0
800025b2:	34 0a       	mov	r10,64
800025b4:	36 0b       	mov	r11,96
800025b6:	0e 9c       	mov	r12,r7
800025b8:	f0 1f 00 0d 	mcall	800025ec <InitializeCANExtended+0x48>
	CAN2515ByteWrite(Channel, RXB1CTRL, 0x02<<5); //Receive only extended id messages to buffer 1
800025bc:	34 0a       	mov	r10,64
800025be:	37 0b       	mov	r11,112
800025c0:	0e 9c       	mov	r12,r7
800025c2:	f0 1f 00 0b 	mcall	800025ec <InitializeCANExtended+0x48>
	CAN2515SetRXB0FiltersEx(Channel, Mask, Flt);
800025c6:	0c 9a       	mov	r10,r6
800025c8:	0a 9b       	mov	r11,r5
800025ca:	0e 9c       	mov	r12,r7
800025cc:	f0 1f 00 09 	mcall	800025f0 <InitializeCANExtended+0x4c>
	CAN2515SetRXB1FiltersEx(Channel, Mask, &Flt[2]);
800025d0:	ec ca ff f8 	sub	r10,r6,-8
800025d4:	0a 9b       	mov	r11,r5
800025d6:	0e 9c       	mov	r12,r7
800025d8:	f0 1f 00 07 	mcall	800025f4 <InitializeCANExtended+0x50>
	CANEnable(Channel, BusSpeed);
800025dc:	08 9b       	mov	r11,r4
800025de:	0e 9c       	mov	r12,r7
800025e0:	f0 1f 00 06 	mcall	800025f8 <InitializeCANExtended+0x54>
}
800025e4:	d8 22       	popm	r4-r7,pc
800025e6:	00 00       	add	r0,r0
800025e8:	80 00       	ld.sh	r0,r0[0x0]
800025ea:	24 2c       	sub	r12,66
800025ec:	80 00       	ld.sh	r0,r0[0x0]
800025ee:	21 c8       	sub	r8,28
800025f0:	80 00       	ld.sh	r0,r0[0x0]
800025f2:	23 5c       	sub	r12,53
800025f4:	80 00       	ld.sh	r0,r0[0x0]
800025f6:	22 08       	sub	r8,32
800025f8:	80 00       	ld.sh	r0,r0[0x0]
800025fa:	24 d0       	sub	r0,77

800025fc <Evk1100PrintDisp>:
 * Note:            None.
 *
 * Example:			Evk1100PrintDisp(&Ident, msg, &mSize );
 ********************************************************************/
void Evk1100PrintDisp(UINT32* pIdentifier, UINT8* Msg, UINT8* pMsgSize )
{
800025fc:	d4 21       	pushm	r4-r7,lr
800025fe:	18 95       	mov	r5,r12
80002600:	16 96       	mov	r6,r11
80002602:	14 94       	mov	r4,r10
    dip204_set_cursor_position(1,1);
80002604:	30 1b       	mov	r11,1
80002606:	16 9c       	mov	r12,r11
80002608:	f0 1f 00 35 	mcall	800026dc <Evk1100PrintDisp+0xe0>
    dip204_printf_string("%x", Msg[0]);
8000260c:	4b 57       	lddpc	r7,800026e0 <Evk1100PrintDisp+0xe4>
8000260e:	0d 88       	ld.ub	r8,r6[0x0]
80002610:	1a d8       	st.w	--sp,r8
80002612:	0e 9c       	mov	r12,r7
80002614:	f0 1f 00 34 	mcall	800026e4 <Evk1100PrintDisp+0xe8>
    dip204_set_cursor_position(6,1);
80002618:	30 1b       	mov	r11,1
8000261a:	30 6c       	mov	r12,6
8000261c:	f0 1f 00 30 	mcall	800026dc <Evk1100PrintDisp+0xe0>
    dip204_printf_string("%x", Msg[1]);
80002620:	0d 98       	ld.ub	r8,r6[0x1]
80002622:	1a d8       	st.w	--sp,r8
80002624:	0e 9c       	mov	r12,r7
80002626:	f0 1f 00 30 	mcall	800026e4 <Evk1100PrintDisp+0xe8>
    dip204_set_cursor_position(11,1);
8000262a:	30 1b       	mov	r11,1
8000262c:	30 bc       	mov	r12,11
8000262e:	f0 1f 00 2c 	mcall	800026dc <Evk1100PrintDisp+0xe0>
    dip204_printf_string("%x", Msg[2]);
80002632:	0d a8       	ld.ub	r8,r6[0x2]
80002634:	1a d8       	st.w	--sp,r8
80002636:	0e 9c       	mov	r12,r7
80002638:	f0 1f 00 2b 	mcall	800026e4 <Evk1100PrintDisp+0xe8>
    dip204_set_cursor_position(16,1);
8000263c:	30 1b       	mov	r11,1
8000263e:	31 0c       	mov	r12,16
80002640:	f0 1f 00 27 	mcall	800026dc <Evk1100PrintDisp+0xe0>
    dip204_printf_string("%x", Msg[3]);
80002644:	0d b8       	ld.ub	r8,r6[0x3]
80002646:	1a d8       	st.w	--sp,r8
80002648:	0e 9c       	mov	r12,r7
8000264a:	f0 1f 00 27 	mcall	800026e4 <Evk1100PrintDisp+0xe8>
    dip204_set_cursor_position(1,2);
8000264e:	30 2b       	mov	r11,2
80002650:	30 1c       	mov	r12,1
80002652:	f0 1f 00 23 	mcall	800026dc <Evk1100PrintDisp+0xe0>
    dip204_printf_string("%x", Msg[4]);
80002656:	0d c8       	ld.ub	r8,r6[0x4]
80002658:	1a d8       	st.w	--sp,r8
8000265a:	0e 9c       	mov	r12,r7
8000265c:	f0 1f 00 22 	mcall	800026e4 <Evk1100PrintDisp+0xe8>
    dip204_set_cursor_position(6,2);
80002660:	30 2b       	mov	r11,2
80002662:	30 6c       	mov	r12,6
80002664:	f0 1f 00 1e 	mcall	800026dc <Evk1100PrintDisp+0xe0>
    dip204_printf_string("%x", Msg[5]);
80002668:	0d d8       	ld.ub	r8,r6[0x5]
8000266a:	1a d8       	st.w	--sp,r8
8000266c:	0e 9c       	mov	r12,r7
8000266e:	f0 1f 00 1e 	mcall	800026e4 <Evk1100PrintDisp+0xe8>
    dip204_set_cursor_position(11,2);
80002672:	30 2b       	mov	r11,2
80002674:	30 bc       	mov	r12,11
80002676:	f0 1f 00 1a 	mcall	800026dc <Evk1100PrintDisp+0xe0>
    dip204_printf_string("%x", Msg[6]);
8000267a:	0d e8       	ld.ub	r8,r6[0x6]
8000267c:	1a d8       	st.w	--sp,r8
8000267e:	0e 9c       	mov	r12,r7
80002680:	f0 1f 00 19 	mcall	800026e4 <Evk1100PrintDisp+0xe8>
    dip204_set_cursor_position(16,2);
80002684:	30 2b       	mov	r11,2
80002686:	31 0c       	mov	r12,16
80002688:	f0 1f 00 15 	mcall	800026dc <Evk1100PrintDisp+0xe0>
    dip204_printf_string("%x", Msg[7]);
8000268c:	0d f8       	ld.ub	r8,r6[0x7]
8000268e:	1a d8       	st.w	--sp,r8
80002690:	0e 9c       	mov	r12,r7
80002692:	f0 1f 00 15 	mcall	800026e4 <Evk1100PrintDisp+0xe8>
    dip204_set_cursor_position(1,3);
80002696:	2f 8d       	sub	sp,-32
80002698:	30 3b       	mov	r11,3
8000269a:	30 1c       	mov	r12,1
8000269c:	f0 1f 00 10 	mcall	800026dc <Evk1100PrintDisp+0xe0>
    dip204_printf_string("Id: ");
800026a0:	49 2c       	lddpc	r12,800026e8 <Evk1100PrintDisp+0xec>
800026a2:	f0 1f 00 11 	mcall	800026e4 <Evk1100PrintDisp+0xe8>
    dip204_set_cursor_position(4,3);
800026a6:	30 3b       	mov	r11,3
800026a8:	30 4c       	mov	r12,4
800026aa:	f0 1f 00 0d 	mcall	800026dc <Evk1100PrintDisp+0xe0>
    dip204_printf_string("%x", *pIdentifier);
800026ae:	6a 08       	ld.w	r8,r5[0x0]
800026b0:	1a d8       	st.w	--sp,r8
800026b2:	0e 9c       	mov	r12,r7
800026b4:	f0 1f 00 0c 	mcall	800026e4 <Evk1100PrintDisp+0xe8>
    dip204_set_cursor_position(13,3);
800026b8:	30 3b       	mov	r11,3
800026ba:	30 dc       	mov	r12,13
800026bc:	f0 1f 00 08 	mcall	800026dc <Evk1100PrintDisp+0xe0>
    dip204_printf_string("DLC:");
800026c0:	48 bc       	lddpc	r12,800026ec <Evk1100PrintDisp+0xf0>
800026c2:	f0 1f 00 09 	mcall	800026e4 <Evk1100PrintDisp+0xe8>
    dip204_set_cursor_position(17,3);
800026c6:	30 3b       	mov	r11,3
800026c8:	31 1c       	mov	r12,17
800026ca:	f0 1f 00 05 	mcall	800026dc <Evk1100PrintDisp+0xe0>
    dip204_printf_string("%x", *pMsgSize);
800026ce:	09 88       	ld.ub	r8,r4[0x0]
800026d0:	1a d8       	st.w	--sp,r8
800026d2:	0e 9c       	mov	r12,r7
800026d4:	f0 1f 00 04 	mcall	800026e4 <Evk1100PrintDisp+0xe8>
800026d8:	2f ed       	sub	sp,-8
}
800026da:	d8 22       	popm	r4-r7,pc
800026dc:	80 00       	ld.sh	r0,r0[0x0]
800026de:	2d 58       	sub	r8,-43
800026e0:	80 00       	ld.sh	r0,r0[0x0]
800026e2:	92 60       	ld.sh	r0,r9[0xc]
800026e4:	80 00       	ld.sh	r0,r0[0x0]
800026e6:	2c c0       	sub	r0,-52
800026e8:	80 00       	ld.sh	r0,r0[0x0]
800026ea:	92 64       	ld.sh	r4,r9[0xc]
800026ec:	80 00       	ld.sh	r0,r0[0x0]
800026ee:	92 6c       	ld.sh	r12,r9[0xc]

800026f0 <CANSendMsg>:
					// Extended id
                    CANSendMsg( 0, 0x8ff, msg, 8, 0 );(no remote frame)
				    CANSendMsg( 0, 0x8ff, msg, 8, R );(remote frame)
 ********************************************************************/
Bool CANSendMsg( int Channel, UINT32 IdentifierS, UINT8* MsgS, UINT8 MsgSizeS, int r )
{
800026f0:	eb cd 40 fe 	pushm	r1-r7,lr
800026f4:	18 96       	mov	r6,r12
800026f6:	16 93       	mov	r3,r11
800026f8:	14 94       	mov	r4,r10
800026fa:	12 92       	mov	r2,r9
800026fc:	10 91       	mov	r1,r8
800026fe:	30 07       	mov	r7,0
	int WaitCntr = 0;

	// wait for TXB0 to get ready.  If not ready within XMIT_TIMEOUT ms,then return false
	while( CAN2515ByteRead( Channel, TXB0CTRL ) & 0x08 ) //TXREQ == 1
80002700:	33 05       	mov	r5,48
80002702:	c1 78       	rjmp	80002730 <CANSendMsg+0x40>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002704:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002708:	f0 ca d1 20 	sub	r10,r8,-12000
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000270c:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002710:	14 38       	cp.w	r8,r10
80002712:	e0 88 00 08 	brls	80002722 <CANSendMsg+0x32>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002716:	12 38       	cp.w	r8,r9
80002718:	fe 98 ff fa 	brls	8000270c <CANSendMsg+0x1c>
8000271c:	12 3a       	cp.w	r10,r9
8000271e:	c7 63       	brcs	8000280a <CANSendMsg+0x11a>
80002720:	cf 6b       	rjmp	8000270c <CANSendMsg+0x1c>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002722:	12 38       	cp.w	r8,r9
80002724:	e0 8b 00 73 	brhi	8000280a <CANSendMsg+0x11a>
80002728:	12 3a       	cp.w	r10,r9
8000272a:	c7 03       	brcs	8000280a <CANSendMsg+0x11a>
8000272c:	cf 0b       	rjmp	8000270c <CANSendMsg+0x1c>
	{
		delay_ms( 1 );
		if( WaitCntr++ >= XMIT_TIMEOUT )
8000272e:	2f f7       	sub	r7,-1
Bool CANSendMsg( int Channel, UINT32 IdentifierS, UINT8* MsgS, UINT8 MsgSizeS, int r )
{
	int WaitCntr = 0;

	// wait for TXB0 to get ready.  If not ready within XMIT_TIMEOUT ms,then return false
	while( CAN2515ByteRead( Channel, TXB0CTRL ) & 0x08 ) //TXREQ == 1
80002730:	0a 9b       	mov	r11,r5
80002732:	0c 9c       	mov	r12,r6
80002734:	f0 1f 00 38 	mcall	80002814 <CANSendMsg+0x124>
80002738:	e2 1c 00 08 	andl	r12,0x8,COH
8000273c:	ce 41       	brne	80002704 <CANSendMsg+0x14>
	{
		delay_ms( 1 );
		if( WaitCntr++ >= XMIT_TIMEOUT )
			return FALSE;
	}
	if ((IdentifierS>>11)==0) // Standard id
8000273e:	e6 08 16 0b 	lsr	r8,r3,0xb
80002742:	c1 01       	brne	80002762 <CANSendMsg+0x72>
	{
		CAN2515ByteWrite(Channel, TXB0SIDH, (IdentifierS >> 3) & 0xff );    //Set TXB0 SIDH
80002744:	f5 d3 c0 68 	bfextu	r10,r3,0x3,0x8
80002748:	33 1b       	mov	r11,49
8000274a:	0c 9c       	mov	r12,r6
8000274c:	f0 1f 00 33 	mcall	80002818 <CANSendMsg+0x128>
		CAN2515ByteWrite(Channel, TXB0SIDL,((IdentifierS << 5) & 0xe0));    //Set TXB0 SIDL
80002750:	e6 0a 15 05 	lsl	r10,r3,0x5
80002754:	e2 1a 00 e0 	andl	r10,0xe0,COH
80002758:	33 2b       	mov	r11,50
8000275a:	0c 9c       	mov	r12,r6
8000275c:	f0 1f 00 2f 	mcall	80002818 <CANSendMsg+0x128>
80002760:	c2 18       	rjmp	800027a2 <CANSendMsg+0xb2>
	}
	else // Extended id
	{
		CAN2515ByteWrite(Channel, TXB0SIDH, (IdentifierS >> 21) & 0xff );    //Set TXB0 SIDH
80002762:	f5 d3 c2 a8 	bfextu	r10,r3,0x15,0x8
80002766:	33 1b       	mov	r11,49
80002768:	0c 9c       	mov	r12,r6
8000276a:	f0 1f 00 2c 	mcall	80002818 <CANSendMsg+0x128>
		CAN2515ByteWrite(Channel, TXB0SIDL,(((IdentifierS >> 13)& 0xe0) | ((IdentifierS>>16) & 0x03) )| 0x08 ); //Set TXB0 SIDL
8000276e:	e6 08 16 0d 	lsr	r8,r3,0xd
80002772:	f5 d3 c2 02 	bfextu	r10,r3,0x10,0x2
80002776:	e2 18 00 e0 	andl	r8,0xe0,COH
8000277a:	10 4a       	or	r10,r8
8000277c:	a3 ba       	sbr	r10,0x3
8000277e:	e2 1a 00 eb 	andl	r10,0xeb,COH
80002782:	33 2b       	mov	r11,50
80002784:	0c 9c       	mov	r12,r6
80002786:	f0 1f 00 25 	mcall	80002818 <CANSendMsg+0x128>
		CAN2515ByteWrite(Channel, TXB0EID8, (IdentifierS>>8) & 0xff);
8000278a:	f5 d3 c1 08 	bfextu	r10,r3,0x8,0x8
8000278e:	33 3b       	mov	r11,51
80002790:	0c 9c       	mov	r12,r6
80002792:	f0 1f 00 22 	mcall	80002818 <CANSendMsg+0x128>
		CAN2515ByteWrite(Channel, TXB0EID0, (IdentifierS & 0xff));
80002796:	f5 d3 c0 08 	bfextu	r10,r3,0x0,0x8
8000279a:	33 4b       	mov	r11,52
8000279c:	0c 9c       	mov	r12,r6
8000279e:	f0 1f 00 1f 	mcall	80002818 <CANSendMsg+0x128>
800027a2:	30 85       	mov	r5,8
800027a4:	ea 02 18 00 	cp.b	r2,r5
800027a8:	e4 05 17 80 	movls	r5,r2
800027ac:	f9 b5 0b 08 	movhi	r5,8
	}

	if( MsgSizeS > 8 )
		MsgSizeS = 8;

	if( r==82) //Remote frame
800027b0:	e0 41 00 52 	cp.w	r1,82
800027b4:	c1 01       	brne	800027d4 <CANSendMsg+0xe4>
		{
			CAN2515ByteWrite(Channel, TXB0DLC, (MsgSizeS |=0x40));  //Set DLC
800027b6:	a7 a5       	sbr	r5,0x6
800027b8:	5c 55       	castu.b	r5
800027ba:	0a 9a       	mov	r10,r5
800027bc:	33 5b       	mov	r11,53
800027be:	0c 9c       	mov	r12,r6
800027c0:	f0 1f 00 16 	mcall	80002818 <CANSendMsg+0x128>
			dip204_set_cursor_position(17,4);
800027c4:	30 4b       	mov	r11,4
800027c6:	31 1c       	mov	r12,17
800027c8:	f0 1f 00 15 	mcall	8000281c <CANSendMsg+0x12c>
			dip204_printf_string("Re F");
800027cc:	49 5c       	lddpc	r12,80002820 <CANSendMsg+0x130>
800027ce:	f0 1f 00 16 	mcall	80002824 <CANSendMsg+0x134>
800027d2:	c0 68       	rjmp	800027de <CANSendMsg+0xee>
		}
	else // No remote frame
		{
		CAN2515ByteWrite(Channel, TXB0DLC, MsgSizeS);  //Set DLC
800027d4:	0a 9a       	mov	r10,r5
800027d6:	33 5b       	mov	r11,53
800027d8:	0c 9c       	mov	r12,r6
800027da:	f0 1f 00 10 	mcall	80002818 <CANSendMsg+0x128>
		}

	int temp;
	for( temp = 0; temp < MsgSizeS; temp++ )
800027de:	58 05       	cp.w	r5,0
800027e0:	e0 8a 00 0e 	brle	800027fc <CANSendMsg+0x10c>
800027e4:	30 07       	mov	r7,0
	  CAN2515ByteWrite( Channel, TXB0D0+temp, MsgS[temp] );
800027e6:	0e 9b       	mov	r11,r7
800027e8:	2c ab       	sub	r11,-54
800027ea:	e8 07 07 0a 	ld.ub	r10,r4[r7]
800027ee:	5c 5b       	castu.b	r11
800027f0:	0c 9c       	mov	r12,r6
800027f2:	f0 1f 00 0a 	mcall	80002818 <CANSendMsg+0x128>
		{
		CAN2515ByteWrite(Channel, TXB0DLC, MsgSizeS);  //Set DLC
		}

	int temp;
	for( temp = 0; temp < MsgSizeS; temp++ )
800027f6:	2f f7       	sub	r7,-1
800027f8:	0a 37       	cp.w	r7,r5
800027fa:	cf 65       	brlt	800027e6 <CANSendMsg+0xf6>
	  CAN2515ByteWrite( Channel, TXB0D0+temp, MsgS[temp] );

	CAN2515ByteWrite( Channel, TXB0CTRL, 0x08 ); //Start Transmission.
800027fc:	30 8a       	mov	r10,8
800027fe:	33 0b       	mov	r11,48
80002800:	0c 9c       	mov	r12,r6
80002802:	f0 1f 00 06 	mcall	80002818 <CANSendMsg+0x128>
80002806:	e3 cf 90 fe 	ldm	sp++,r1-r7,pc,r12=1

	// wait for TXB0 to get ready.  If not ready within XMIT_TIMEOUT ms,then return false
	while( CAN2515ByteRead( Channel, TXB0CTRL ) & 0x08 ) //TXREQ == 1
	{
		delay_ms( 1 );
		if( WaitCntr++ >= XMIT_TIMEOUT )
8000280a:	e0 47 00 64 	cp.w	r7,100
8000280e:	c9 01       	brne	8000272e <CANSendMsg+0x3e>
80002810:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
80002814:	80 00       	ld.sh	r0,r0[0x0]
80002816:	24 5c       	sub	r12,69
80002818:	80 00       	ld.sh	r0,r0[0x0]
8000281a:	21 c8       	sub	r8,28
8000281c:	80 00       	ld.sh	r0,r0[0x0]
8000281e:	2d 58       	sub	r8,-43
80002820:	80 00       	ld.sh	r0,r0[0x0]
80002822:	92 74       	ld.sh	r4,r9[0xe]
80002824:	80 00       	ld.sh	r0,r0[0x0]
80002826:	2c c0       	sub	r0,-52

80002828 <CANGetMsg>:
 * Note:            None.
 *
 * Example:         CANGetMsg(0, &Ident, msg, &mSize );
 ********************************************************************/
Bool CANGetMsg( int Channel, UINT32* pIdentifier, UINT8* Msg, UINT8* pMsgSize )
{
80002828:	d4 31       	pushm	r0-r7,lr
8000282a:	18 95       	mov	r5,r12
8000282c:	16 92       	mov	r2,r11
8000282e:	14 93       	mov	r3,r10
80002830:	12 94       	mov	r4,r9
        int temp;
        UINT8 loc, S1, S2, S3, S4;

        temp = ReadStatus2515(Channel);
80002832:	f0 1f 00 5c 	mcall	800029a0 <CANGetMsg+0x178>

        if( (temp & 3) == 0 )
80002836:	f9 dc c0 02 	bfextu	r12,r12,0x0,0x2
8000283a:	e0 80 00 b1 	breq	8000299c <CANGetMsg+0x174>
            return FALSE;
        temp&=0x03;
        if(temp==1){
8000283e:	58 1c       	cp.w	r12,1
80002840:	c0 31       	brne	80002846 <CANGetMsg+0x1e>
80002842:	36 16       	mov	r6,97
80002844:	c0 58       	rjmp	8000284e <CANGetMsg+0x26>
            loc=0x61;
        }
        else if (temp==2){
80002846:	58 2c       	cp.w	r12,2
80002848:	e0 81 00 aa 	brne	8000299c <CANGetMsg+0x174>
8000284c:	37 16       	mov	r6,113
        }
        else{
            return FALSE;
        }

        S1=CAN2515ByteRead(Channel, loc);
8000284e:	0c 9b       	mov	r11,r6
80002850:	0a 9c       	mov	r12,r5
80002852:	f0 1f 00 55 	mcall	800029a4 <CANGetMsg+0x17c>
80002856:	18 91       	mov	r1,r12
        S2=CAN2515ByteRead(Channel, loc+1);
80002858:	ec cb ff ff 	sub	r11,r6,-1
8000285c:	5c 5b       	castu.b	r11
8000285e:	0a 9c       	mov	r12,r5
80002860:	f0 1f 00 51 	mcall	800029a4 <CANGetMsg+0x17c>
80002864:	18 97       	mov	r7,r12
        S3=CAN2515ByteRead(Channel, loc+2);
80002866:	ec cb ff fe 	sub	r11,r6,-2
8000286a:	5c 5b       	castu.b	r11
8000286c:	0a 9c       	mov	r12,r5
8000286e:	f0 1f 00 4e 	mcall	800029a4 <CANGetMsg+0x17c>
80002872:	18 90       	mov	r0,r12
        S4=CAN2515ByteRead(Channel, loc+3);
80002874:	ec cb ff fd 	sub	r11,r6,-3
80002878:	5c 5b       	castu.b	r11
8000287a:	0a 9c       	mov	r12,r5
8000287c:	f0 1f 00 4a 	mcall	800029a4 <CANGetMsg+0x17c>

        if (((S2>>3)&0x01)==0) //format the 11 bit identifier
80002880:	f1 d7 c0 68 	bfextu	r8,r7,0x3,0x8
80002884:	f3 d8 c0 01 	bfextu	r9,r8,0x0,0x1
80002888:	c1 41       	brne	800028b0 <CANGetMsg+0x88>
        {
            *pIdentifier = S1<<3 | S2>>5;
8000288a:	ef d7 c0 a8 	bfextu	r7,r7,0x5,0x8
8000288e:	ef e1 10 31 	or	r1,r7,r1<<0x3
80002892:	85 01       	st.w	r2[0x0],r1
            LED_On(LED0);
80002894:	30 1c       	mov	r12,1
80002896:	f0 1f 00 45 	mcall	800029a8 <CANGetMsg+0x180>
            LED_Off(LED1);
8000289a:	30 2c       	mov	r12,2
8000289c:	f0 1f 00 44 	mcall	800029ac <CANGetMsg+0x184>

             dip204_set_cursor_position(1,4);
800028a0:	30 4b       	mov	r11,4
800028a2:	30 1c       	mov	r12,1
800028a4:	f0 1f 00 43 	mcall	800029b0 <CANGetMsg+0x188>
             dip204_printf_string("St Id");
800028a8:	4c 3c       	lddpc	r12,800029b4 <CANGetMsg+0x18c>
800028aa:	f0 1f 00 44 	mcall	800029b8 <CANGetMsg+0x190>
800028ae:	c1 b8       	rjmp	800028e4 <CANGetMsg+0xbc>
        }
        else if (((S2>>3)&0x01)==1) //format the 29 bit identifier
        {
            *pIdentifier =  (S1<<21 |((S2>>3 & 0x1c)|(S2&0x03))<<16 | S3 <<8 |  S4);
800028b0:	a9 60       	lsl	r0,0x8
800028b2:	e1 e1 11 51 	or	r1,r0,r1<<0x15
800028b6:	e3 ec 10 0c 	or	r12,r1,r12
800028ba:	e2 18 00 1c 	andl	r8,0x1c,COH
800028be:	ef d7 c0 02 	bfextu	r7,r7,0x0,0x2
800028c2:	0e 48       	or	r8,r7
800028c4:	f9 e8 11 0c 	or	r12,r12,r8<<0x10
800028c8:	85 0c       	st.w	r2[0x0],r12
            LED_On(LED1);
800028ca:	30 2c       	mov	r12,2
800028cc:	f0 1f 00 37 	mcall	800029a8 <CANGetMsg+0x180>
            LED_Off(LED0);
800028d0:	30 1c       	mov	r12,1
800028d2:	f0 1f 00 37 	mcall	800029ac <CANGetMsg+0x184>

            dip204_set_cursor_position(1,4);
800028d6:	30 4b       	mov	r11,4
800028d8:	30 1c       	mov	r12,1
800028da:	f0 1f 00 36 	mcall	800029b0 <CANGetMsg+0x188>
            dip204_printf_string("Ex Id");
800028de:	4b 8c       	lddpc	r12,800029bc <CANGetMsg+0x194>
800028e0:	f0 1f 00 36 	mcall	800029b8 <CANGetMsg+0x190>
        }

        *pMsgSize = CAN2515ByteRead(Channel, loc+4) & 0x0F; //Data Length
800028e4:	ec cb ff fc 	sub	r11,r6,-4
800028e8:	5c 5b       	castu.b	r11
800028ea:	0a 9c       	mov	r12,r5
800028ec:	f0 1f 00 2e 	mcall	800029a4 <CANGetMsg+0x17c>
800028f0:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
800028f4:	a8 8c       	st.b	r4[0x0],r12

        if(*pMsgSize>8)
800028f6:	30 88       	mov	r8,8
800028f8:	f0 0c 18 00 	cp.b	r12,r8
800028fc:	e0 88 00 07 	brls	8000290a <CANGetMsg+0xe2>
            *pMsgSize = 8;
80002900:	a8 88       	st.b	r4[0x0],r8
80002902:	2f b6       	sub	r6,-5
80002904:	5c 56       	castu.b	r6
80002906:	30 07       	mov	r7,0
80002908:	c0 58       	rjmp	80002912 <CANGetMsg+0xea>

        for( temp = 0; temp < *pMsgSize; temp++ ){
8000290a:	58 0c       	cp.w	r12,0
8000290c:	fe 99 ff fb 	brgt	80002902 <CANGetMsg+0xda>
80002910:	c0 e8       	rjmp	8000292c <CANGetMsg+0x104>
            Msg[temp] = CAN2515ByteRead(Channel, loc+5+temp);
80002912:	0c 9b       	mov	r11,r6
80002914:	0a 9c       	mov	r12,r5
80002916:	f0 1f 00 24 	mcall	800029a4 <CANGetMsg+0x17c>
8000291a:	e6 07 0b 0c 	st.b	r3[r7],r12
        *pMsgSize = CAN2515ByteRead(Channel, loc+4) & 0x0F; //Data Length

        if(*pMsgSize>8)
            *pMsgSize = 8;

        for( temp = 0; temp < *pMsgSize; temp++ ){
8000291e:	2f f7       	sub	r7,-1
80002920:	2f f6       	sub	r6,-1
80002922:	5c 56       	castu.b	r6
80002924:	09 88       	ld.ub	r8,r4[0x0]
80002926:	0e 38       	cp.w	r8,r7
80002928:	fe 99 ff f5 	brgt	80002912 <CANGetMsg+0xea>

        // Here the RXRTR bit is check to see if a remote frame was received.
        // Here is the identifier of the remote frame being set. When a remote frame messages with the same identifier as defined here the
        //node will respond with a user predefined message.
        //UINT8 RemoteFrameId=User defined;
        LED_Off(LED2);
8000292c:	30 4c       	mov	r12,4
8000292e:	f0 1f 00 20 	mcall	800029ac <CANGetMsg+0x184>
        if ( ((CAN2515ByteRead( Channel, RXB0CTRL ) & 0x08) || (CAN2515ByteRead( Channel, RXB1CTRL ) & 0x08)) && *pIdentifier==RemoteFrameId)
80002932:	36 0b       	mov	r11,96
80002934:	0a 9c       	mov	r12,r5
80002936:	f0 1f 00 1c 	mcall	800029a4 <CANGetMsg+0x17c>
8000293a:	e2 1c 00 08 	andl	r12,0x8,COH
8000293e:	c0 81       	brne	8000294e <CANGetMsg+0x126>
80002940:	37 0b       	mov	r11,112
80002942:	0a 9c       	mov	r12,r5
80002944:	f0 1f 00 18 	mcall	800029a4 <CANGetMsg+0x17c>
80002948:	e2 1c 00 08 	andl	r12,0x8,COH
8000294c:	c1 d0       	breq	80002986 <CANGetMsg+0x15e>
8000294e:	64 08       	ld.w	r8,r2[0x0]
80002950:	58 18       	cp.w	r8,1
80002952:	c1 a1       	brne	80002986 <CANGetMsg+0x15e>
                    {
                    Msg[0] = 0;
80002954:	30 08       	mov	r8,0
80002956:	a6 88       	st.b	r3[0x0],r8
                    Msg[1] = 1;
80002958:	30 18       	mov	r8,1
8000295a:	a6 98       	st.b	r3[0x1],r8
                    Msg[2] = 2;
8000295c:	30 28       	mov	r8,2
8000295e:	a6 a8       	st.b	r3[0x2],r8
                    Msg[3] = 3;
80002960:	30 38       	mov	r8,3
80002962:	a6 b8       	st.b	r3[0x3],r8

                    CANSendMsg( Channel,*pIdentifier, Msg, 4, 0 );
80002964:	30 08       	mov	r8,0
80002966:	30 49       	mov	r9,4
80002968:	06 9a       	mov	r10,r3
8000296a:	64 0b       	ld.w	r11,r2[0x0]
8000296c:	0a 9c       	mov	r12,r5
8000296e:	f0 1f 00 15 	mcall	800029c0 <CANGetMsg+0x198>
                    dip204_set_cursor_position(17,4);
80002972:	30 4b       	mov	r11,4
80002974:	31 1c       	mov	r12,17
80002976:	f0 1f 00 0f 	mcall	800029b0 <CANGetMsg+0x188>
                    dip204_printf_string("Re F");
8000297a:	49 3c       	lddpc	r12,800029c4 <CANGetMsg+0x19c>
8000297c:	f0 1f 00 0f 	mcall	800029b8 <CANGetMsg+0x190>
                    LED_On(LED2);
80002980:	30 4c       	mov	r12,4
80002982:	f0 1f 00 0a 	mcall	800029a8 <CANGetMsg+0x180>
                }

        //clear CANINTF RX01F_RESET=0x00. To be able to receive new messages
        CAN2515ByteWrite(0,CANINTF,RX0IF_RESET);
80002986:	30 0a       	mov	r10,0
80002988:	32 cb       	mov	r11,44
8000298a:	14 9c       	mov	r12,r10
8000298c:	f0 1f 00 0f 	mcall	800029c8 <CANGetMsg+0x1a0>
        CAN2515ByteWrite(0,CANINTF,RX1IF_RESET);
80002990:	30 0a       	mov	r10,0
80002992:	32 cb       	mov	r11,44
80002994:	14 9c       	mov	r12,r10
80002996:	f0 1f 00 0d 	mcall	800029c8 <CANGetMsg+0x1a0>
8000299a:	da 3a       	popm	r0-r7,pc,r12=1

    return TRUE;
8000299c:	d8 3a       	popm	r0-r7,pc,r12=0
8000299e:	00 00       	add	r0,r0
800029a0:	80 00       	ld.sh	r0,r0[0x0]
800029a2:	21 3c       	sub	r12,19
800029a4:	80 00       	ld.sh	r0,r0[0x0]
800029a6:	24 5c       	sub	r12,69
800029a8:	80 00       	ld.sh	r0,r0[0x0]
800029aa:	2b 2c       	sub	r12,-78
800029ac:	80 00       	ld.sh	r0,r0[0x0]
800029ae:	2b 7c       	sub	r12,-73
800029b0:	80 00       	ld.sh	r0,r0[0x0]
800029b2:	2d 58       	sub	r8,-43
800029b4:	80 00       	ld.sh	r0,r0[0x0]
800029b6:	92 7c       	ld.sh	r12,r9[0xe]
800029b8:	80 00       	ld.sh	r0,r0[0x0]
800029ba:	2c c0       	sub	r0,-52
800029bc:	80 00       	ld.sh	r0,r0[0x0]
800029be:	92 84       	ld.uh	r4,r9[0x0]
800029c0:	80 00       	ld.sh	r0,r0[0x0]
800029c2:	26 f0       	sub	r0,111
800029c4:	80 00       	ld.sh	r0,r0[0x0]
800029c6:	92 74       	ld.sh	r4,r9[0xe]
800029c8:	80 00       	ld.sh	r0,r0[0x0]
800029ca:	21 c8       	sub	r8,28

800029cc <main>:
#define CAN_125kbps 10

UINT32 Ident;
UINT8 msg[8], mSize;

int main(void) {
800029cc:	d4 31       	pushm	r0-r7,lr
800029ce:	20 3d       	sub	sp,12
	//spidatareadpointer=&spidataread;
	pm_switch_to_osc0(&AVR32_PM, FOSC0, OSC0_STARTUP);
800029d0:	30 3a       	mov	r10,3
800029d2:	e0 6b 1b 00 	mov	r11,6912
800029d6:	ea 1b 00 b7 	orh	r11,0xb7
800029da:	fe 7c 0c 00 	mov	r12,-62464
800029de:	f0 1f 00 41 	mcall	80002ae0 <main+0x114>
	
	// Configures the MCP2515 SPI communication.
	config_SPI_SPARE();
800029e2:	f0 1f 00 41 	mcall	80002ae4 <main+0x118>

	// Enables receive interrupts.
	Disable_global_interrupt();
800029e6:	d3 03       	ssrf	0x10
	INTC_init_interrupts();
800029e8:	f0 1f 00 40 	mcall	80002ae8 <main+0x11c>
	Enable_global_interrupt();
800029ec:	d5 03       	csrf	0x10
	
	// Delay to let the Oscillator get started
	delay_init( FOSC0 );
	
	// Initializes the display
	config_dpi204();
800029ee:	f0 1f 00 40 	mcall	80002aec <main+0x120>
	dip204_init(100,1);
800029f2:	30 1b       	mov	r11,1
800029f4:	36 4c       	mov	r12,100
800029f6:	f0 1f 00 3f 	mcall	80002af0 <main+0x124>
	dip204_clear_display();
800029fa:	f0 1f 00 3f 	mcall	80002af4 <main+0x128>
	UINT16 ambient = 0x18FEF527;
	
	// Set filter and mask
	UINT16 Mask = 0xFFFFFFF; 
	UINT16 flt = time;
	UINT16 Flt[] = {flt,flt,flt,flt,flt,flt};
800029fe:	fe 78 e6 ee 	mov	r8,-6418
80002a02:	ba 08       	st.h	sp[0x0],r8
80002a04:	ba 18       	st.h	sp[0x2],r8
80002a06:	ba 28       	st.h	sp[0x4],r8
80002a08:	ba 38       	st.h	sp[0x6],r8
80002a0a:	ba 48       	st.h	sp[0x8],r8
80002a0c:	ba 58       	st.h	sp[0xa],r8
	InitializeCANExtended(0, CAN_250kbps, Mask, Flt);
80002a0e:	1a 99       	mov	r9,sp
80002a10:	e0 6a ff ff 	mov	r10,65535
80002a14:	30 7b       	mov	r11,7
80002a16:	30 0c       	mov	r12,0
80002a18:	f0 1f 00 38 	mcall	80002af8 <main+0x12c>
	
	dip204_set_cursor_position(1,1);
80002a1c:	30 1b       	mov	r11,1
80002a1e:	16 9c       	mov	r12,r11
80002a20:	f0 1f 00 37 	mcall	80002afc <main+0x130>
	dip204_printf_string("ES1 CAN EXAMPLE");
80002a24:	4b 7c       	lddpc	r12,80002b00 <main+0x134>
80002a26:	f0 1f 00 38 	mcall	80002b04 <main+0x138>
	dip204_hide_cursor();
80002a2a:	f0 1f 00 38 	mcall	80002b08 <main+0x13c>

	while(1){
		//Clear memory contents
		ClearMessages(msg);
80002a2e:	4b 87       	lddpc	r7,80002b0c <main+0x140>
		//Read any message available
		if(CANRxReady(0)){
80002a30:	30 06       	mov	r6,0
			if( CANGetMsg(0, &Ident, msg, &mSize )) // Gets message and returns //TRUE if message received.
80002a32:	4b 84       	lddpc	r4,80002b10 <main+0x144>
80002a34:	4b 83       	lddpc	r3,80002b14 <main+0x148>
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002a36:	e0 60 1b 00 	mov	r0,6912
80002a3a:	ea 10 00 b7 	orh	r0,0xb7
			}
		}
		// Send messages if possible
		if(CANTxReady(0))
		{
			msg[0]=0;
80002a3e:	30 05       	mov	r5,0
			msg[2]=0;
			msg[3]=0;
			msg[4]=0;
			msg[5]=0;
			msg[6]=0;
			msg[7]=100;
80002a40:	36 42       	mov	r2,100
80002a42:	e0 61 4f 80 	mov	r1,20352
80002a46:	ea 11 00 12 	orh	r1,0x12
	dip204_printf_string("ES1 CAN EXAMPLE");
	dip204_hide_cursor();

	while(1){
		//Clear memory contents
		ClearMessages(msg);
80002a4a:	0e 9c       	mov	r12,r7
80002a4c:	f0 1f 00 33 	mcall	80002b18 <main+0x14c>
		//Read any message available
		if(CANRxReady(0)){
80002a50:	0c 9c       	mov	r12,r6
80002a52:	f0 1f 00 33 	mcall	80002b1c <main+0x150>
80002a56:	c2 30       	breq	80002a9c <main+0xd0>
			if( CANGetMsg(0, &Ident, msg, &mSize )) // Gets message and returns //TRUE if message received.
80002a58:	08 99       	mov	r9,r4
80002a5a:	0e 9a       	mov	r10,r7
80002a5c:	06 9b       	mov	r11,r3
80002a5e:	0c 9c       	mov	r12,r6
80002a60:	f0 1f 00 30 	mcall	80002b20 <main+0x154>
80002a64:	c1 c0       	breq	80002a9c <main+0xd0>
			{	
				// Evk1100PrintDisplay prints 4 message values, the Identifier and the data size on the display
				dip204_clear_display();
80002a66:	f0 1f 00 24 	mcall	80002af4 <main+0x128>
				Evk1100PrintDisp(&Ident, msg, &mSize );	
80002a6a:	08 9a       	mov	r10,r4
80002a6c:	0e 9b       	mov	r11,r7
80002a6e:	06 9c       	mov	r12,r3
80002a70:	f0 1f 00 2d 	mcall	80002b24 <main+0x158>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002a74:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002a78:	f0 00 00 0a 	add	r10,r8,r0
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002a7c:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002a80:	14 38       	cp.w	r8,r10
80002a82:	e0 88 00 08 	brls	80002a92 <main+0xc6>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002a86:	12 38       	cp.w	r8,r9
80002a88:	fe 98 ff fa 	brls	80002a7c <main+0xb0>
80002a8c:	12 3a       	cp.w	r10,r9
80002a8e:	c0 73       	brcs	80002a9c <main+0xd0>
80002a90:	cf 6b       	rjmp	80002a7c <main+0xb0>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002a92:	12 38       	cp.w	r8,r9
80002a94:	e0 8b 00 04 	brhi	80002a9c <main+0xd0>
80002a98:	12 3a       	cp.w	r10,r9
80002a9a:	cf 12       	brcc	80002a7c <main+0xb0>
				delay_ms(1000);
				//dip204_clear_display();
			}
		}
		// Send messages if possible
		if(CANTxReady(0))
80002a9c:	0c 9c       	mov	r12,r6
80002a9e:	f0 1f 00 23 	mcall	80002b28 <main+0x15c>
80002aa2:	cd 40       	breq	80002a4a <main+0x7e>
		{
			msg[0]=0;
80002aa4:	ae 85       	st.b	r7[0x0],r5
			msg[1]=0;
80002aa6:	ae 95       	st.b	r7[0x1],r5
			msg[2]=0;
80002aa8:	ae a5       	st.b	r7[0x2],r5
			msg[3]=0;
80002aaa:	ae b5       	st.b	r7[0x3],r5
			msg[4]=0;
80002aac:	ae c5       	st.b	r7[0x4],r5
			msg[5]=0;
80002aae:	ae d5       	st.b	r7[0x5],r5
			msg[6]=0;
80002ab0:	ae e5       	st.b	r7[0x6],r5
			msg[7]=100;
80002ab2:	ae f2       	st.b	r7[0x7],r2
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002ab4:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002ab8:	f0 01 00 0a 	add	r10,r8,r1
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002abc:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002ac0:	14 38       	cp.w	r8,r10
80002ac2:	e0 88 00 08 	brls	80002ad2 <main+0x106>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002ac6:	12 38       	cp.w	r8,r9
80002ac8:	fe 98 ff fa 	brls	80002abc <main+0xf0>
80002acc:	12 3a       	cp.w	r10,r9
80002ace:	cb e3       	brcs	80002a4a <main+0x7e>
80002ad0:	cf 6b       	rjmp	80002abc <main+0xf0>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002ad2:	12 38       	cp.w	r8,r9
80002ad4:	fe 9b ff bb 	brhi	80002a4a <main+0x7e>
80002ad8:	12 3a       	cp.w	r10,r9
80002ada:	cb 83       	brcs	80002a4a <main+0x7e>
80002adc:	cf 0b       	rjmp	80002abc <main+0xf0>
80002ade:	00 00       	add	r0,r0
80002ae0:	80 00       	ld.sh	r0,r0[0x0]
80002ae2:	32 40       	mov	r0,36
80002ae4:	80 00       	ld.sh	r0,r0[0x0]
80002ae6:	20 a8       	sub	r8,10
80002ae8:	80 00       	ld.sh	r0,r0[0x0]
80002aea:	31 28       	mov	r8,18
80002aec:	80 00       	ld.sh	r0,r0[0x0]
80002aee:	20 1c       	sub	r12,1
80002af0:	80 00       	ld.sh	r0,r0[0x0]
80002af2:	2e 40       	sub	r0,-28
80002af4:	80 00       	ld.sh	r0,r0[0x0]
80002af6:	2d e4       	sub	r4,-34
80002af8:	80 00       	ld.sh	r0,r0[0x0]
80002afa:	25 a4       	sub	r4,90
80002afc:	80 00       	ld.sh	r0,r0[0x0]
80002afe:	2d 58       	sub	r8,-43
80002b00:	80 00       	ld.sh	r0,r0[0x0]
80002b02:	92 8c       	ld.uh	r12,r9[0x0]
80002b04:	80 00       	ld.sh	r0,r0[0x0]
80002b06:	2c c0       	sub	r0,-52
80002b08:	80 00       	ld.sh	r0,r0[0x0]
80002b0a:	2d b4       	sub	r4,-37
80002b0c:	00 00       	add	r0,r0
80002b0e:	06 60       	and	r0,r3
80002b10:	00 00       	add	r0,r0
80002b12:	06 68       	and	r8,r3
80002b14:	00 00       	add	r0,r0
80002b16:	06 6c       	and	r12,r3
80002b18:	80 00       	ld.sh	r0,r0[0x0]
80002b1a:	20 08       	sub	r8,0
80002b1c:	80 00       	ld.sh	r0,r0[0x0]
80002b1e:	21 8c       	sub	r12,24
80002b20:	80 00       	ld.sh	r0,r0[0x0]
80002b22:	28 28       	sub	r8,-126
80002b24:	80 00       	ld.sh	r0,r0[0x0]
80002b26:	25 fc       	sub	r12,95
80002b28:	80 00       	ld.sh	r0,r0[0x0]
80002b2a:	21 a0       	sub	r0,26

80002b2c <LED_On>:
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
80002b2c:	f9 dc c0 08 	bfextu	r12,r12,0x0,0x8

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);
80002b30:	49 18       	lddpc	r8,80002b74 <LED_On+0x48>
80002b32:	70 09       	ld.w	r9,r8[0x0]
80002b34:	f9 e9 10 09 	or	r9,r12,r9
80002b38:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
80002b3a:	58 0c       	cp.w	r12,0
80002b3c:	5e 0c       	reteq	r12
80002b3e:	48 f8       	lddpc	r8,80002b78 <LED_On+0x4c>
80002b40:	21 08       	sub	r8,16
  {
    // Select the next specified LED and turn it on.
    led_shift = 1 + ctz(leds);
80002b42:	18 9a       	mov	r10,r12
80002b44:	5c 9a       	brev	r10
80002b46:	f4 0a 12 00 	clz	r10,r10
80002b4a:	2f fa       	sub	r10,-1
    led_descriptor += led_shift;
80002b4c:	f4 09 15 04 	lsl	r9,r10,0x4
80002b50:	12 08       	add	r8,r9
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
80002b52:	70 09       	ld.w	r9,r8[0x0]
80002b54:	a9 69       	lsl	r9,0x8
80002b56:	e0 29 f0 00 	sub	r9,61440
    led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
80002b5a:	70 1b       	ld.w	r11,r8[0x4]
80002b5c:	f3 4b 00 58 	st.w	r9[88],r11
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80002b60:	70 1b       	ld.w	r11,r8[0x4]
80002b62:	f3 4b 00 44 	st.w	r9[68],r11
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
80002b66:	70 1b       	ld.w	r11,r8[0x4]
80002b68:	93 1b       	st.w	r9[0x4],r11
    leds >>= led_shift;
80002b6a:	f8 0a 0a 4c 	lsr	r12,r12,r10

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
80002b6e:	ce a1       	brne	80002b42 <LED_On+0x16>
80002b70:	5e fc       	retal	r12
80002b72:	00 00       	add	r0,r0
80002b74:	00 00       	add	r0,r0
80002b76:	00 08       	add	r8,r0
80002b78:	80 00       	ld.sh	r0,r0[0x0]
80002b7a:	92 9c       	ld.uh	r12,r9[0x2]

80002b7c <LED_Off>:
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
80002b7c:	f9 dc c0 08 	bfextu	r12,r12,0x0,0x8

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);
80002b80:	49 28       	lddpc	r8,80002bc8 <LED_Off+0x4c>
80002b82:	70 09       	ld.w	r9,r8[0x0]
80002b84:	f8 0a 11 ff 	rsub	r10,r12,-1
80002b88:	f5 e9 00 09 	and	r9,r10,r9
80002b8c:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
80002b8e:	58 0c       	cp.w	r12,0
80002b90:	5e 0c       	reteq	r12
80002b92:	48 f8       	lddpc	r8,80002bcc <LED_Off+0x50>
80002b94:	21 08       	sub	r8,16
  {
    // Select the next specified LED and turn it off.
    led_shift = 1 + ctz(leds);
80002b96:	18 9a       	mov	r10,r12
80002b98:	5c 9a       	brev	r10
80002b9a:	f4 0a 12 00 	clz	r10,r10
80002b9e:	2f fa       	sub	r10,-1
    led_descriptor += led_shift;
80002ba0:	f4 09 15 04 	lsl	r9,r10,0x4
80002ba4:	12 08       	add	r8,r9
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
80002ba6:	70 09       	ld.w	r9,r8[0x0]
80002ba8:	a9 69       	lsl	r9,0x8
80002baa:	e0 29 f0 00 	sub	r9,61440
    led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
80002bae:	70 1b       	ld.w	r11,r8[0x4]
80002bb0:	f3 4b 00 54 	st.w	r9[84],r11
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80002bb4:	70 1b       	ld.w	r11,r8[0x4]
80002bb6:	f3 4b 00 44 	st.w	r9[68],r11
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
80002bba:	70 1b       	ld.w	r11,r8[0x4]
80002bbc:	93 1b       	st.w	r9[0x4],r11
    leds >>= led_shift;
80002bbe:	f8 0a 0a 4c 	lsr	r12,r12,r10

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
80002bc2:	ce a1       	brne	80002b96 <LED_Off+0x1a>
80002bc4:	5e fc       	retal	r12
80002bc6:	00 00       	add	r0,r0
80002bc8:	00 00       	add	r0,r0
80002bca:	00 08       	add	r8,r0
80002bcc:	80 00       	ld.sh	r0,r0[0x0]
80002bce:	92 9c       	ld.uh	r12,r9[0x2]

80002bd0 <dip204_select>:

/*! \brief function to select the LCD
 *
 */
static void dip204_select(void)
{
80002bd0:	d4 01       	pushm	lr
  spi_selectChip(DIP204_SPI, DIP204_SPI_NPCS);
80002bd2:	30 2b       	mov	r11,2
80002bd4:	fe 7c 28 00 	mov	r12,-55296
80002bd8:	f0 1f 00 02 	mcall	80002be0 <dip204_select+0x10>
}
80002bdc:	d8 02       	popm	pc
80002bde:	00 00       	add	r0,r0
80002be0:	80 00       	ld.sh	r0,r0[0x0]
80002be2:	33 7e       	mov	lr,55

80002be4 <dip204_write_byte>:
 *
 *  \param  byte  Input. byte to write to the LCD (D7 .. D0)
 *
 */
static void dip204_write_byte(unsigned char byte)
{
80002be4:	eb cd 40 80 	pushm	r7,lr
  unsigned char reverse;

  switch (byte)
80002be8:	f8 c8 ff f8 	sub	r8,r12,-8
80002bec:	30 69       	mov	r9,6
80002bee:	f2 08 18 00 	cp.b	r8,r9
80002bf2:	e0 8b 00 0f 	brhi	80002c10 <dip204_write_byte+0x2c>
80002bf6:	30 19       	mov	r9,1
80002bf8:	f2 08 09 48 	lsl	r8,r9,r8
80002bfc:	e2 18 00 55 	andl	r8,0x55,COH
80002c00:	c0 80       	breq	80002c10 <dip204_write_byte+0x2c>
    {
      /* send D7 to D0 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, byte);
80002c02:	18 9b       	mov	r11,r12
80002c04:	fe 7c 28 00 	mov	r12,-55296
80002c08:	f0 1f 00 0c 	mcall	80002c38 <dip204_write_byte+0x54>
      Assert( SPI_OK==spi_status );
      break;
80002c0c:	e3 cd 80 80 	ldm	sp++,r7,pc
    }
    /* LSB first for all other data */
    default:
    {
      /* reverse byte */
      reverse = bit_reverse8(byte);
80002c10:	5c 9c       	brev	r12
      /* send D0 to D3 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, (reverse & 0xF0));
80002c12:	f8 07 16 18 	lsr	r7,r12,0x18
80002c16:	0e 9b       	mov	r11,r7
80002c18:	e2 1b 00 f0 	andl	r11,0xf0,COH
80002c1c:	fe 7c 28 00 	mov	r12,-55296
80002c20:	f0 1f 00 06 	mcall	80002c38 <dip204_write_byte+0x54>
      Assert( SPI_OK==spi_status );
      /* send D4 to D7 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, ((reverse << 4) & 0xF0));
80002c24:	ee 0b 15 04 	lsl	r11,r7,0x4
80002c28:	e2 1b 00 f0 	andl	r11,0xf0,COH
80002c2c:	fe 7c 28 00 	mov	r12,-55296
80002c30:	f0 1f 00 02 	mcall	80002c38 <dip204_write_byte+0x54>
80002c34:	e3 cd 80 80 	ldm	sp++,r7,pc
80002c38:	80 00       	ld.sh	r0,r0[0x0]
80002c3a:	34 ae       	mov	lr,74

80002c3c <dip204_read_byte>:
 *
 *  \param  byte  Input. byte read from the LCD (D7 .. D0)
 *
 */
static void dip204_read_byte(unsigned char *byte)
{
80002c3c:	eb cd 40 c0 	pushm	r6-r7,lr
80002c40:	20 1d       	sub	sp,4
80002c42:	18 96       	mov	r6,r12
  unsigned short reverse = 0x00;
80002c44:	fa c7 ff fc 	sub	r7,sp,-4
80002c48:	30 08       	mov	r8,0
80002c4a:	0e e8       	st.h	--r7,r8

  /* dummy write */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_write(DIP204_SPI, 0x00);
80002c4c:	30 0b       	mov	r11,0
80002c4e:	fe 7c 28 00 	mov	r12,-55296
80002c52:	f0 1f 00 08 	mcall	80002c70 <dip204_read_byte+0x34>
  Assert( SPI_OK==spi_status );
  /* read RSR register */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_read(DIP204_SPI, &reverse);
80002c56:	0e 9b       	mov	r11,r7
80002c58:	fe 7c 28 00 	mov	r12,-55296
80002c5c:	f0 1f 00 06 	mcall	80002c74 <dip204_read_byte+0x38>
  Assert( SPI_OK==spi_status );
  /* Revert received byte (issued LSB first by the LCD) */
  *byte = bit_reverse8(reverse);
80002c60:	1b b8       	ld.ub	r8,sp[0x3]
80002c62:	5c 98       	brev	r8
80002c64:	b9 88       	lsr	r8,0x18
80002c66:	ac 88       	st.b	r6[0x0],r8
}
80002c68:	2f fd       	sub	sp,-4
80002c6a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002c6e:	00 00       	add	r0,r0
80002c70:	80 00       	ld.sh	r0,r0[0x0]
80002c72:	34 ae       	mov	lr,74
80002c74:	80 00       	ld.sh	r0,r0[0x0]
80002c76:	34 d2       	mov	r2,77

80002c78 <dip204_wait_busy>:

/*! \brief function to wait for LCD becomes not busy
 *
 */
static void dip204_wait_busy(void)
{
80002c78:	eb cd 40 c0 	pushm	r6-r7,lr
80002c7c:	20 1d       	sub	sp,4
  unsigned char status = 0x00;
80002c7e:	fa c7 ff fc 	sub	r7,sp,-4
80002c82:	30 08       	mov	r8,0
80002c84:	0e f8       	st.b	--r7,r8

  /* send read command to LCD */
  dip204_write_byte(DIP204_READ_COMMAND);
80002c86:	e0 6c 00 fc 	mov	r12,252
80002c8a:	f0 1f 00 07 	mcall	80002ca4 <dip204_wait_busy+0x2c>
  /* read next byte */
  do {
  dip204_read_byte(&status);
  /* keep D7 to know status */
  }while (status & 0x80);
80002c8e:	30 06       	mov	r6,0

  /* send read command to LCD */
  dip204_write_byte(DIP204_READ_COMMAND);
  /* read next byte */
  do {
  dip204_read_byte(&status);
80002c90:	0e 9c       	mov	r12,r7
80002c92:	f0 1f 00 06 	mcall	80002ca8 <dip204_wait_busy+0x30>
  /* keep D7 to know status */
  }while (status & 0x80);
80002c96:	1b b8       	ld.ub	r8,sp[0x3]
80002c98:	ec 08 18 00 	cp.b	r8,r6
80002c9c:	cf a5       	brlt	80002c90 <dip204_wait_busy+0x18>
}
80002c9e:	2f fd       	sub	sp,-4
80002ca0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002ca4:	80 00       	ld.sh	r0,r0[0x0]
80002ca6:	2b e4       	sub	r4,-66
80002ca8:	80 00       	ld.sh	r0,r0[0x0]
80002caa:	2c 3c       	sub	r12,-61

80002cac <dip204_unselect>:

/*! \brief function to unselect the LCD
 *
 */
static void dip204_unselect(void)
{
80002cac:	d4 01       	pushm	lr
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_unselectChip(DIP204_SPI, DIP204_SPI_NPCS);
80002cae:	30 2b       	mov	r11,2
80002cb0:	fe 7c 28 00 	mov	r12,-55296
80002cb4:	f0 1f 00 02 	mcall	80002cbc <dip204_unselect+0x10>
  Assert( SPI_OK==spi_status );
}
80002cb8:	d8 02       	popm	pc
80002cba:	00 00       	add	r0,r0
80002cbc:	80 00       	ld.sh	r0,r0[0x0]
80002cbe:	33 ca       	mov	r10,60

80002cc0 <dip204_printf_string>:
  dip204_unselect();
}


void dip204_printf_string(const char *format, ...)
{
80002cc0:	d4 21       	pushm	r4-r7,lr
80002cc2:	20 6d       	sub	sp,24
  va_list arg;
  char string[21];
  unsigned char i=0;

  va_start(arg, format);
  i = vsprintf(string, format, arg);
80002cc4:	fa ca ff d4 	sub	r10,sp,-44
80002cc8:	18 9b       	mov	r11,r12
80002cca:	1a 9c       	mov	r12,sp
80002ccc:	f0 1f 00 1e 	mcall	80002d44 <dip204_printf_string+0x84>
80002cd0:	5c 5c       	castu.b	r12
  while (i < sizeof(string) - 1) string[i++] = '\0';
80002cd2:	31 38       	mov	r8,19
80002cd4:	f0 0c 18 00 	cp.b	r12,r8
80002cd8:	e0 8b 00 0e 	brhi	80002cf4 <dip204_printf_string+0x34>
80002cdc:	30 0a       	mov	r10,0
80002cde:	31 49       	mov	r9,20
80002ce0:	fa c8 ff e8 	sub	r8,sp,-24
80002ce4:	18 08       	add	r8,r12
80002ce6:	f1 6a ff e8 	st.b	r8[-24],r10
80002cea:	2f fc       	sub	r12,-1
80002cec:	5c 5c       	castu.b	r12
80002cee:	f2 0c 18 00 	cp.b	r12,r9
80002cf2:	cf 71       	brne	80002ce0 <dip204_printf_string+0x20>
  va_end(arg);
  dip204_select();
80002cf4:	f0 1f 00 15 	mcall	80002d48 <dip204_printf_string+0x88>
  /* for all chars in string */
  i = 0;
  while(string[i]!='\0')
80002cf8:	30 08       	mov	r8,0
80002cfa:	1b 89       	ld.ub	r9,sp[0x0]
80002cfc:	f0 09 18 00 	cp.b	r9,r8
80002d00:	c1 e0       	breq	80002d3c <dip204_printf_string+0x7c>
80002d02:	30 06       	mov	r6,0
80002d04:	0c 97       	mov	r7,r6
  {
    /* Send Write Data Start Byte */
    dip204_write_byte(DIP204_WRITE_DATA);
80002d06:	e0 64 00 fa 	mov	r4,250
  while (i < sizeof(string) - 1) string[i++] = '\0';
  va_end(arg);
  dip204_select();
  /* for all chars in string */
  i = 0;
  while(string[i]!='\0')
80002d0a:	10 95       	mov	r5,r8
  {
    /* Send Write Data Start Byte */
    dip204_write_byte(DIP204_WRITE_DATA);
80002d0c:	08 9c       	mov	r12,r4
80002d0e:	f0 1f 00 10 	mcall	80002d4c <dip204_printf_string+0x8c>
    /* Send byte */
    dip204_write_byte(string[i]);
80002d12:	fa c8 ff e8 	sub	r8,sp,-24
80002d16:	f0 06 00 06 	add	r6,r8,r6
80002d1a:	ed 3c ff e8 	ld.ub	r12,r6[-24]
80002d1e:	f0 1f 00 0c 	mcall	80002d4c <dip204_printf_string+0x8c>
    /* go to next char */
    i++;
80002d22:	2f f7       	sub	r7,-1
80002d24:	5c 57       	castu.b	r7
    dip204_wait_busy();
80002d26:	f0 1f 00 0b 	mcall	80002d50 <dip204_printf_string+0x90>
  while (i < sizeof(string) - 1) string[i++] = '\0';
  va_end(arg);
  dip204_select();
  /* for all chars in string */
  i = 0;
  while(string[i]!='\0')
80002d2a:	0e 96       	mov	r6,r7
80002d2c:	fa c8 ff e8 	sub	r8,sp,-24
80002d30:	0e 08       	add	r8,r7
80002d32:	f1 38 ff e8 	ld.ub	r8,r8[-24]
80002d36:	ea 08 18 00 	cp.b	r8,r5
80002d3a:	ce 91       	brne	80002d0c <dip204_printf_string+0x4c>
    dip204_write_byte(string[i]);
    /* go to next char */
    i++;
    dip204_wait_busy();
  }
  dip204_unselect();
80002d3c:	f0 1f 00 06 	mcall	80002d54 <dip204_printf_string+0x94>
}
80002d40:	2f ad       	sub	sp,-24
80002d42:	d8 22       	popm	r4-r7,pc
80002d44:	80 00       	ld.sh	r0,r0[0x0]
80002d46:	36 a8       	mov	r8,106
80002d48:	80 00       	ld.sh	r0,r0[0x0]
80002d4a:	2b d0       	sub	r0,-67
80002d4c:	80 00       	ld.sh	r0,r0[0x0]
80002d4e:	2b e4       	sub	r4,-66
80002d50:	80 00       	ld.sh	r0,r0[0x0]
80002d52:	2c 78       	sub	r8,-57
80002d54:	80 00       	ld.sh	r0,r0[0x0]
80002d56:	2c ac       	sub	r12,-54

80002d58 <dip204_set_cursor_position>:
  dip204_set_cursor_position(column, line);
}


void dip204_set_cursor_position(unsigned char column, unsigned char line)
{
80002d58:	eb cd 40 c0 	pushm	r6-r7,lr
80002d5c:	18 96       	mov	r6,r12
80002d5e:	16 97       	mov	r7,r11
  unsigned char address = 0;

  dip204_select();
80002d60:	f0 1f 00 11 	mcall	80002da4 <dip204_set_cursor_position+0x4c>
  if ((column <= 20) && (line <= 4))
80002d64:	31 48       	mov	r8,20
80002d66:	f0 06 18 00 	cp.b	r6,r8
80002d6a:	5f 89       	srls	r9
80002d6c:	30 48       	mov	r8,4
80002d6e:	f0 07 18 00 	cp.b	r7,r8
80002d72:	5f 88       	srls	r8
80002d74:	f3 e8 00 08 	and	r8,r9,r8
80002d78:	c0 31       	brne	80002d7e <dip204_set_cursor_position+0x26>
80002d7a:	30 06       	mov	r6,0
80002d7c:	c0 68       	rjmp	80002d88 <dip204_set_cursor_position+0x30>
  {
    /* Calculate DDRAM address from line and row values */
    address = ( (line-1) * 32 ) + ( column-1 ) + 128;
80002d7e:	28 16       	sub	r6,-127
80002d80:	20 17       	sub	r7,1
80002d82:	a5 77       	lsl	r7,0x5
80002d84:	0e 06       	add	r6,r7
80002d86:	5c 56       	castu.b	r6
  }
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002d88:	e0 6c 00 f8 	mov	r12,248
80002d8c:	f0 1f 00 07 	mcall	80002da8 <dip204_set_cursor_position+0x50>
  /* Send Address lower Nibble */
  dip204_write_byte(address);
80002d90:	0c 9c       	mov	r12,r6
80002d92:	f0 1f 00 06 	mcall	80002da8 <dip204_set_cursor_position+0x50>
  dip204_wait_busy();
80002d96:	f0 1f 00 06 	mcall	80002dac <dip204_set_cursor_position+0x54>
  dip204_unselect();
80002d9a:	f0 1f 00 06 	mcall	80002db0 <dip204_set_cursor_position+0x58>
}
80002d9e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002da2:	00 00       	add	r0,r0
80002da4:	80 00       	ld.sh	r0,r0[0x0]
80002da6:	2b d0       	sub	r0,-67
80002da8:	80 00       	ld.sh	r0,r0[0x0]
80002daa:	2b e4       	sub	r4,-66
80002dac:	80 00       	ld.sh	r0,r0[0x0]
80002dae:	2c 78       	sub	r8,-57
80002db0:	80 00       	ld.sh	r0,r0[0x0]
80002db2:	2c ac       	sub	r12,-54

80002db4 <dip204_hide_cursor>:
  dip204_unselect();
}


void dip204_hide_cursor(void)
{
80002db4:	d4 01       	pushm	lr
  /* select the LCD chip */
  dip204_select();
80002db6:	f0 1f 00 08 	mcall	80002dd4 <dip204_hide_cursor+0x20>
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002dba:	e0 6c 00 f8 	mov	r12,248
80002dbe:	f0 1f 00 07 	mcall	80002dd8 <dip204_hide_cursor+0x24>
  /* Send "Display On Command: Display On, Cursor On, Blink On" */
  dip204_write_byte(0x0C);
80002dc2:	30 cc       	mov	r12,12
80002dc4:	f0 1f 00 05 	mcall	80002dd8 <dip204_hide_cursor+0x24>
  dip204_wait_busy();
80002dc8:	f0 1f 00 05 	mcall	80002ddc <dip204_hide_cursor+0x28>
  /* unselect chip */
  dip204_unselect();
80002dcc:	f0 1f 00 05 	mcall	80002de0 <dip204_hide_cursor+0x2c>
}
80002dd0:	d8 02       	popm	pc
80002dd2:	00 00       	add	r0,r0
80002dd4:	80 00       	ld.sh	r0,r0[0x0]
80002dd6:	2b d0       	sub	r0,-67
80002dd8:	80 00       	ld.sh	r0,r0[0x0]
80002dda:	2b e4       	sub	r4,-66
80002ddc:	80 00       	ld.sh	r0,r0[0x0]
80002dde:	2c 78       	sub	r8,-57
80002de0:	80 00       	ld.sh	r0,r0[0x0]
80002de2:	2c ac       	sub	r12,-54

80002de4 <dip204_clear_display>:
  dip204_unselect();
}


void dip204_clear_display(void)
{
80002de4:	d4 01       	pushm	lr
  dip204_select();
80002de6:	f0 1f 00 13 	mcall	80002e30 <dip204_clear_display+0x4c>
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002dea:	e0 6c 00 f8 	mov	r12,248
80002dee:	f0 1f 00 12 	mcall	80002e34 <dip204_clear_display+0x50>
  /* Send Display Clear Command */
  dip204_write_byte(0x01);
80002df2:	30 1c       	mov	r12,1
80002df4:	f0 1f 00 10 	mcall	80002e34 <dip204_clear_display+0x50>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002df8:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002dfc:	e0 69 bb 80 	mov	r9,48000
80002e00:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002e04:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002e08:	14 38       	cp.w	r8,r10
80002e0a:	e0 88 00 08 	brls	80002e1a <dip204_clear_display+0x36>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002e0e:	12 38       	cp.w	r8,r9
80002e10:	fe 98 ff fa 	brls	80002e04 <dip204_clear_display+0x20>
80002e14:	12 3a       	cp.w	r10,r9
80002e16:	c0 73       	brcs	80002e24 <dip204_clear_display+0x40>
80002e18:	cf 6b       	rjmp	80002e04 <dip204_clear_display+0x20>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002e1a:	12 38       	cp.w	r8,r9
80002e1c:	e0 8b 00 04 	brhi	80002e24 <dip204_clear_display+0x40>
80002e20:	12 3a       	cp.w	r10,r9
80002e22:	cf 12       	brcc	80002e04 <dip204_clear_display+0x20>
  /* Wait for command execution */
  delay_ms(4);
  dip204_wait_busy();
80002e24:	f0 1f 00 05 	mcall	80002e38 <dip204_clear_display+0x54>
  dip204_unselect();
80002e28:	f0 1f 00 05 	mcall	80002e3c <dip204_clear_display+0x58>
}
80002e2c:	d8 02       	popm	pc
80002e2e:	00 00       	add	r0,r0
80002e30:	80 00       	ld.sh	r0,r0[0x0]
80002e32:	2b d0       	sub	r0,-67
80002e34:	80 00       	ld.sh	r0,r0[0x0]
80002e36:	2b e4       	sub	r4,-66
80002e38:	80 00       	ld.sh	r0,r0[0x0]
80002e3a:	2c 78       	sub	r8,-57
80002e3c:	80 00       	ld.sh	r0,r0[0x0]
80002e3e:	2c ac       	sub	r12,-54

80002e40 <dip204_init>:


/****************************** global functions *****************************/

void dip204_init(backlight_options option, bool backlight_on)
{
80002e40:	eb cd 40 80 	pushm	r7,lr
80002e44:	20 4d       	sub	sp,16
80002e46:	16 97       	mov	r7,r11
  pwm_opt_t pwm_opt;  // pwm option config

  if (option == backlight_PWM)
80002e48:	58 1c       	cp.w	r12,1
80002e4a:	c3 01       	brne	80002eaa <dip204_init+0x6a>
  {
    channel_id = DIP204_PWM_CHANNEL;
80002e4c:	30 69       	mov	r9,6
80002e4e:	4f a8       	lddpc	r8,80003034 <dip204_init+0x1f4>
80002e50:	91 09       	st.w	r8[0x0],r9
    gpio_enable_module_pin(DIP204_PWM_PIN, DIP204_PWM_FUNCTION);
80002e52:	30 2b       	mov	r11,2
80002e54:	33 2c       	mov	r12,50
80002e56:	f0 1f 00 79 	mcall	80003038 <dip204_init+0x1f8>

    // PWM controller configuration
    pwm_opt.diva=0;
80002e5a:	30 08       	mov	r8,0
80002e5c:	50 18       	stdsp	sp[0x4],r8
    pwm_opt.divb=0;
80002e5e:	50 08       	stdsp	sp[0x0],r8
    pwm_opt.prea=0;
80002e60:	50 38       	stdsp	sp[0xc],r8
    pwm_opt.preb=0;
80002e62:	50 28       	stdsp	sp[0x8],r8

    pwm_init(&pwm_opt);
80002e64:	1a 9c       	mov	r12,sp
80002e66:	f0 1f 00 76 	mcall	8000303c <dip204_init+0x1fc>
    pwm_duty = (backlight_on) ? DIP204_PERIOD_MAX - 1 : 1;
80002e6a:	58 07       	cp.w	r7,0
80002e6c:	f9 b7 01 31 	movne	r7,49
80002e70:	f9 b7 00 01 	moveq	r7,1
80002e74:	4f 38       	lddpc	r8,80003040 <dip204_init+0x200>
80002e76:	b0 07       	st.h	r8[0x0],r7
    pwm_channel.CMR.calg = PWM_MODE_LEFT_ALIGNED;   // channel mode
80002e78:	4f 3b       	lddpc	r11,80003044 <dip204_init+0x204>
80002e7a:	76 08       	ld.w	r8,r11[0x0]
    pwm_channel.CMR.cpol = PWM_POLARITY_LOW;   // channel polarity
    pwm_channel.CMR.cpd = PWM_UPDATE_PERIOD;   // not used the first time
80002e7c:	e0 18 fc ff 	andl	r8,0xfcff
    pwm_channel.CMR.cpre = AVR32_PWM_CPRE_MCK_DIV_256;   // channel prescaler
80002e80:	ab a8       	sbr	r8,0xa
80002e82:	30 89       	mov	r9,8
80002e84:	f1 d9 d0 04 	bfins	r8,r9,0x0,0x4
80002e88:	97 08       	st.w	r11[0x0],r8
    pwm_channel.cdty = pwm_duty;  // channel duty cycle, should be < CPRD
80002e8a:	97 17       	st.w	r11[0x4],r7
    pwm_channel.cprd = DIP204_PERIOD_MAX;  // channel period
80002e8c:	33 28       	mov	r8,50
80002e8e:	97 28       	st.w	r11[0x8],r8
    pwm_channel.cupd = 0;  // channel update is not used here.
80002e90:	30 08       	mov	r8,0
80002e92:	97 48       	st.w	r11[0x10],r8

    pwm_channel_init(channel_id, &pwm_channel);
80002e94:	4e 87       	lddpc	r7,80003034 <dip204_init+0x1f4>
80002e96:	6e 0c       	ld.w	r12,r7[0x0]
80002e98:	f0 1f 00 6c 	mcall	80003048 <dip204_init+0x208>
    // start PWM
    pwm_start_channels(1 << channel_id);
80002e9c:	6e 08       	ld.w	r8,r7[0x0]
80002e9e:	30 1c       	mov	r12,1
80002ea0:	f8 08 09 4c 	lsl	r12,r12,r8
80002ea4:	f0 1f 00 6a 	mcall	8000304c <dip204_init+0x20c>
80002ea8:	c0 a8       	rjmp	80002ebc <dip204_init+0x7c>
  }
  else
  {
    if (backlight_on)
80002eaa:	58 0b       	cp.w	r11,0
80002eac:	c0 50       	breq	80002eb6 <dip204_init+0x76>
    {
      gpio_clr_gpio_pin(DIP204_BACKLIGHT_PIN);
80002eae:	33 2c       	mov	r12,50
80002eb0:	f0 1f 00 68 	mcall	80003050 <dip204_init+0x210>
80002eb4:	c0 48       	rjmp	80002ebc <dip204_init+0x7c>
    }
    else
    {
      gpio_set_gpio_pin(DIP204_BACKLIGHT_PIN);
80002eb6:	33 2c       	mov	r12,50
80002eb8:	f0 1f 00 67 	mcall	80003054 <dip204_init+0x214>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002ebc:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002ec0:	e2 79 a9 80 	mov	r9,240000
80002ec4:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002ec8:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002ecc:	14 38       	cp.w	r8,r10
80002ece:	e0 88 00 08 	brls	80002ede <dip204_init+0x9e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002ed2:	12 38       	cp.w	r8,r9
80002ed4:	fe 98 ff fa 	brls	80002ec8 <dip204_init+0x88>
80002ed8:	12 3a       	cp.w	r10,r9
80002eda:	c6 e3       	brcs	80002fb6 <dip204_init+0x176>
80002edc:	cf 6b       	rjmp	80002ec8 <dip204_init+0x88>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002ede:	12 38       	cp.w	r8,r9
80002ee0:	e0 8b 00 6b 	brhi	80002fb6 <dip204_init+0x176>
80002ee4:	12 3a       	cp.w	r10,r9
80002ee6:	c6 83       	brcs	80002fb6 <dip204_init+0x176>
80002ee8:	cf 0b       	rjmp	80002ec8 <dip204_init+0x88>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002eea:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002eee:	14 38       	cp.w	r8,r10
80002ef0:	e0 88 00 08 	brls	80002f00 <dip204_init+0xc0>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002ef4:	12 38       	cp.w	r8,r9
80002ef6:	fe 98 ff fa 	brls	80002eea <dip204_init+0xaa>
80002efa:	12 3a       	cp.w	r10,r9
80002efc:	c6 b3       	brcs	80002fd2 <dip204_init+0x192>
80002efe:	cf 6b       	rjmp	80002eea <dip204_init+0xaa>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002f00:	12 38       	cp.w	r8,r9
80002f02:	e0 8b 00 68 	brhi	80002fd2 <dip204_init+0x192>
80002f06:	12 3a       	cp.w	r10,r9
80002f08:	c6 53       	brcs	80002fd2 <dip204_init+0x192>
80002f0a:	cf 0b       	rjmp	80002eea <dip204_init+0xaa>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002f0c:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002f10:	14 38       	cp.w	r8,r10
80002f12:	e0 88 00 08 	brls	80002f22 <dip204_init+0xe2>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002f16:	12 38       	cp.w	r8,r9
80002f18:	fe 98 ff fa 	brls	80002f0c <dip204_init+0xcc>
80002f1c:	12 3a       	cp.w	r10,r9
80002f1e:	c6 23       	brcs	80002fe2 <dip204_init+0x1a2>
80002f20:	cf 6b       	rjmp	80002f0c <dip204_init+0xcc>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002f22:	12 38       	cp.w	r8,r9
80002f24:	e0 8b 00 5f 	brhi	80002fe2 <dip204_init+0x1a2>
80002f28:	12 3a       	cp.w	r10,r9
80002f2a:	c5 c3       	brcs	80002fe2 <dip204_init+0x1a2>
80002f2c:	cf 0b       	rjmp	80002f0c <dip204_init+0xcc>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002f2e:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002f32:	14 38       	cp.w	r8,r10
80002f34:	e0 88 00 08 	brls	80002f44 <dip204_init+0x104>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002f38:	12 38       	cp.w	r8,r9
80002f3a:	fe 98 ff fa 	brls	80002f2e <dip204_init+0xee>
80002f3e:	12 3a       	cp.w	r10,r9
80002f40:	c5 93       	brcs	80002ff2 <dip204_init+0x1b2>
80002f42:	cf 6b       	rjmp	80002f2e <dip204_init+0xee>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002f44:	12 38       	cp.w	r8,r9
80002f46:	e0 8b 00 56 	brhi	80002ff2 <dip204_init+0x1b2>
80002f4a:	12 3a       	cp.w	r10,r9
80002f4c:	c5 33       	brcs	80002ff2 <dip204_init+0x1b2>
80002f4e:	cf 0b       	rjmp	80002f2e <dip204_init+0xee>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002f50:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002f54:	14 38       	cp.w	r8,r10
80002f56:	e0 88 00 08 	brls	80002f66 <dip204_init+0x126>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002f5a:	12 38       	cp.w	r8,r9
80002f5c:	fe 98 ff fa 	brls	80002f50 <dip204_init+0x110>
80002f60:	12 3a       	cp.w	r10,r9
80002f62:	c5 03       	brcs	80003002 <dip204_init+0x1c2>
80002f64:	cf 6b       	rjmp	80002f50 <dip204_init+0x110>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002f66:	12 38       	cp.w	r8,r9
80002f68:	e0 8b 00 4d 	brhi	80003002 <dip204_init+0x1c2>
80002f6c:	12 3a       	cp.w	r10,r9
80002f6e:	c4 a3       	brcs	80003002 <dip204_init+0x1c2>
80002f70:	cf 0b       	rjmp	80002f50 <dip204_init+0x110>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002f72:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002f76:	14 38       	cp.w	r8,r10
80002f78:	e0 88 00 08 	brls	80002f88 <dip204_init+0x148>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002f7c:	12 38       	cp.w	r8,r9
80002f7e:	fe 98 ff fa 	brls	80002f72 <dip204_init+0x132>
80002f82:	12 3a       	cp.w	r10,r9
80002f84:	c4 93       	brcs	80003016 <dip204_init+0x1d6>
80002f86:	cf 6b       	rjmp	80002f72 <dip204_init+0x132>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002f88:	12 38       	cp.w	r8,r9
80002f8a:	e0 8b 00 46 	brhi	80003016 <dip204_init+0x1d6>
80002f8e:	12 3a       	cp.w	r10,r9
80002f90:	c4 33       	brcs	80003016 <dip204_init+0x1d6>
80002f92:	cf 0b       	rjmp	80002f72 <dip204_init+0x132>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002f94:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002f98:	14 38       	cp.w	r8,r10
80002f9a:	e0 88 00 08 	brls	80002faa <dip204_init+0x16a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002f9e:	12 38       	cp.w	r8,r9
80002fa0:	fe 98 ff fa 	brls	80002f94 <dip204_init+0x154>
80002fa4:	12 3a       	cp.w	r10,r9
80002fa6:	c4 03       	brcs	80003026 <dip204_init+0x1e6>
80002fa8:	cf 6b       	rjmp	80002f94 <dip204_init+0x154>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002faa:	12 38       	cp.w	r8,r9
80002fac:	e0 8b 00 3d 	brhi	80003026 <dip204_init+0x1e6>
80002fb0:	12 3a       	cp.w	r10,r9
80002fb2:	c3 a3       	brcs	80003026 <dip204_init+0x1e6>
80002fb4:	cf 0b       	rjmp	80002f94 <dip204_init+0x154>
    }
  }
  // delay for power on
  delay_ms(20);
  // select the LCD chip
  dip204_select();
80002fb6:	f0 1f 00 29 	mcall	80003058 <dip204_init+0x218>
  // Send Command Start Byte
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002fba:	e0 6c 00 f8 	mov	r12,248
80002fbe:	f0 1f 00 28 	mcall	8000305c <dip204_init+0x21c>
  // Send "extended Function Set" Command  (RE=1)
  dip204_write_byte(0x34);
80002fc2:	33 4c       	mov	r12,52
80002fc4:	f0 1f 00 26 	mcall	8000305c <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002fc8:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002fcc:	f0 ca d1 20 	sub	r10,r8,-12000
80002fd0:	c8 db       	rjmp	80002eea <dip204_init+0xaa>
  // Wait for command execution
  delay_ms(1);
  // Send "Enter 4-Line Mode" Command
  dip204_write_byte(0x09);
80002fd2:	30 9c       	mov	r12,9
80002fd4:	f0 1f 00 22 	mcall	8000305c <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002fd8:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002fdc:	f0 ca d1 20 	sub	r10,r8,-12000
80002fe0:	c9 6b       	rjmp	80002f0c <dip204_init+0xcc>
  // Wait for command execution
  delay_ms(1);
  // Send "Function Set" Command (RE=0)
  dip204_write_byte(0x30);
80002fe2:	33 0c       	mov	r12,48
80002fe4:	f0 1f 00 1e 	mcall	8000305c <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002fe8:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002fec:	f0 ca d1 20 	sub	r10,r8,-12000
80002ff0:	c9 fb       	rjmp	80002f2e <dip204_init+0xee>
  // Wait for command execution
  delay_ms(1);
  // Send "Display On Command: Display On, Cursor On, Blink On"
  dip204_write_byte(0x0F);
80002ff2:	30 fc       	mov	r12,15
80002ff4:	f0 1f 00 1a 	mcall	8000305c <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002ff8:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002ffc:	f0 ca d1 20 	sub	r10,r8,-12000
80003000:	ca 8b       	rjmp	80002f50 <dip204_init+0x110>
  // Wait for command execution
  delay_ms(1);
  // Send "Display Clear" Command
  dip204_write_byte(0x01);
80003002:	30 1c       	mov	r12,1
80003004:	f0 1f 00 16 	mcall	8000305c <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003008:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000300c:	e0 69 ea 60 	mov	r9,60000
80003010:	f0 09 00 0a 	add	r10,r8,r9
80003014:	ca fb       	rjmp	80002f72 <dip204_init+0x132>
  // Wait for command execution
  delay_ms(5);
  // Send "Entry Mode Set Command: Increment Mode, Entire Shift off"
  dip204_write_byte(0x06);
80003016:	30 6c       	mov	r12,6
80003018:	f0 1f 00 11 	mcall	8000305c <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000301c:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003020:	f0 ca d1 20 	sub	r10,r8,-12000
80003024:	cb 8b       	rjmp	80002f94 <dip204_init+0x154>
  // Wait for command execution
  delay_ms(1);
  dip204_wait_busy();
80003026:	f0 1f 00 0f 	mcall	80003060 <dip204_init+0x220>
  // unselect chip
  dip204_unselect();
8000302a:	f0 1f 00 0f 	mcall	80003064 <dip204_init+0x224>
}
8000302e:	2f cd       	sub	sp,-16
80003030:	e3 cd 80 80 	ldm	sp++,r7,pc
80003034:	00 00       	add	r0,r0
80003036:	00 0c       	add	r12,r0
80003038:	80 00       	ld.sh	r0,r0[0x0]
8000303a:	30 68       	mov	r8,6
8000303c:	80 00       	ld.sh	r0,r0[0x0]
8000303e:	32 b4       	mov	r4,43
80003040:	00 00       	add	r0,r0
80003042:	05 38       	ld.ub	r8,r2++
80003044:	00 00       	add	r0,r0
80003046:	05 18       	ld.sh	r8,r2++
80003048:	80 00       	ld.sh	r0,r0[0x0]
8000304a:	32 6c       	mov	r12,38
8000304c:	80 00       	ld.sh	r0,r0[0x0]
8000304e:	32 a2       	mov	r2,42
80003050:	80 00       	ld.sh	r0,r0[0x0]
80003052:	31 08       	mov	r8,16
80003054:	80 00       	ld.sh	r0,r0[0x0]
80003056:	30 ec       	mov	r12,14
80003058:	80 00       	ld.sh	r0,r0[0x0]
8000305a:	2b d0       	sub	r0,-67
8000305c:	80 00       	ld.sh	r0,r0[0x0]
8000305e:	2b e4       	sub	r4,-66
80003060:	80 00       	ld.sh	r0,r0[0x0]
80003062:	2c 78       	sub	r8,-57
80003064:	80 00       	ld.sh	r0,r0[0x0]
80003066:	2c ac       	sub	r12,-54

80003068 <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80003068:	f8 08 16 05 	lsr	r8,r12,0x5
8000306c:	a9 68       	lsl	r8,0x8
8000306e:	e0 28 f0 00 	sub	r8,61440

	/* Enable the correct function. */
	switch (function) {
80003072:	58 1b       	cp.w	r11,1
80003074:	c0 d0       	breq	8000308e <gpio_enable_module_pin+0x26>
80003076:	c0 63       	brcs	80003082 <gpio_enable_module_pin+0x1a>
80003078:	58 2b       	cp.w	r11,2
8000307a:	c1 00       	breq	8000309a <gpio_enable_module_pin+0x32>
8000307c:	58 3b       	cp.w	r11,3
8000307e:	c1 40       	breq	800030a6 <gpio_enable_module_pin+0x3e>
80003080:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80003082:	30 19       	mov	r9,1
80003084:	f2 0c 09 49 	lsl	r9,r9,r12
80003088:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
8000308a:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
8000308c:	c1 28       	rjmp	800030b0 <gpio_enable_module_pin+0x48>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000308e:	30 19       	mov	r9,1
80003090:	f2 0c 09 49 	lsl	r9,r9,r12
80003094:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80003096:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80003098:	c0 c8       	rjmp	800030b0 <gpio_enable_module_pin+0x48>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000309a:	30 19       	mov	r9,1
8000309c:	f2 0c 09 49 	lsl	r9,r9,r12
800030a0:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800030a2:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
800030a4:	c0 68       	rjmp	800030b0 <gpio_enable_module_pin+0x48>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800030a6:	30 19       	mov	r9,1
800030a8:	f2 0c 09 49 	lsl	r9,r9,r12
800030ac:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800030ae:	91 99       	st.w	r8[0x24],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
800030b0:	30 19       	mov	r9,1
800030b2:	f2 0c 09 4c 	lsl	r12,r9,r12
800030b6:	91 2c       	st.w	r8[0x8],r12
800030b8:	5e fd       	retal	0
800030ba:	d7 03       	nop

800030bc <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
800030bc:	d4 21       	pushm	r4-r7,lr
800030be:	18 97       	mov	r7,r12
800030c0:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800030c2:	58 0b       	cp.w	r11,0
800030c4:	c0 31       	brne	800030ca <gpio_enable_module+0xe>
800030c6:	30 05       	mov	r5,0
800030c8:	c0 d8       	rjmp	800030e2 <gpio_enable_module+0x26>
800030ca:	30 06       	mov	r6,0
800030cc:	0c 95       	mov	r5,r6
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
800030ce:	6e 1b       	ld.w	r11,r7[0x4]
800030d0:	6e 0c       	ld.w	r12,r7[0x0]
800030d2:	f0 1f 00 06 	mcall	800030e8 <gpio_enable_module+0x2c>
800030d6:	18 45       	or	r5,r12
		gpiomap++;
800030d8:	2f 87       	sub	r7,-8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800030da:	2f f6       	sub	r6,-1
800030dc:	0c 34       	cp.w	r4,r6
800030de:	fe 9b ff f8 	brhi	800030ce <gpio_enable_module+0x12>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
800030e2:	0a 9c       	mov	r12,r5
800030e4:	d8 22       	popm	r4-r7,pc
800030e6:	00 00       	add	r0,r0
800030e8:	80 00       	ld.sh	r0,r0[0x0]
800030ea:	30 68       	mov	r8,6

800030ec <gpio_set_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_set_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800030ec:	f8 08 16 05 	lsr	r8,r12,0x5
800030f0:	a9 68       	lsl	r8,0x8
800030f2:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
800030f6:	30 19       	mov	r9,1
800030f8:	f2 0c 09 4c 	lsl	r12,r9,r12
800030fc:	f1 4c 00 54 	st.w	r8[84],r12
	/* The GPIO output driver is enabled for that pin. */ 
	gpio_port->oders = 1 << (pin & 0x1F);
80003100:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80003104:	91 1c       	st.w	r8[0x4],r12
}
80003106:	5e fc       	retal	r12

80003108 <gpio_clr_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_clr_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80003108:	f8 08 16 05 	lsr	r8,r12,0x5
8000310c:	a9 68       	lsl	r8,0x8
8000310e:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
80003112:	30 19       	mov	r9,1
80003114:	f2 0c 09 4c 	lsl	r12,r9,r12
80003118:	f1 4c 00 58 	st.w	r8[88],r12
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
8000311c:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80003120:	91 1c       	st.w	r8[0x4],r12
}
80003122:	5e fc       	retal	r12

80003124 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80003124:	c0 08       	rjmp	80003124 <_unhandled_interrupt>
80003126:	d7 03       	nop

80003128 <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
80003128:	d4 21       	pushm	r4-r7,lr
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
8000312a:	49 18       	lddpc	r8,8000316c <INTC_init_interrupts+0x44>
8000312c:	e3 b8 00 01 	mtsr	0x4,r8
80003130:	49 0e       	lddpc	lr,80003170 <INTC_init_interrupts+0x48>
80003132:	30 07       	mov	r7,0
80003134:	0e 94       	mov	r4,r7
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80003136:	49 0c       	lddpc	r12,80003174 <INTC_init_interrupts+0x4c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80003138:	49 05       	lddpc	r5,80003178 <INTC_init_interrupts+0x50>
8000313a:	10 15       	sub	r5,r8
8000313c:	fe 76 08 00 	mov	r6,-63488
80003140:	c1 08       	rjmp	80003160 <INTC_init_interrupts+0x38>
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80003142:	08 98       	mov	r8,r4
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
80003144:	7c 1b       	ld.w	r11,lr[0x4]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80003146:	7c 0a       	ld.w	r10,lr[0x0]
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80003148:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
8000314c:	2f f8       	sub	r8,-1

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
8000314e:	10 3a       	cp.w	r10,r8
80003150:	fe 9b ff fc 	brhi	80003148 <INTC_init_interrupts+0x20>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80003154:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80003158:	2f f7       	sub	r7,-1
8000315a:	2f 8e       	sub	lr,-8
8000315c:	59 47       	cp.w	r7,20
8000315e:	c0 50       	breq	80003168 <INTC_init_interrupts+0x40>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80003160:	7c 08       	ld.w	r8,lr[0x0]
80003162:	58 08       	cp.w	r8,0
80003164:	ce f1       	brne	80003142 <INTC_init_interrupts+0x1a>
80003166:	cf 7b       	rjmp	80003154 <INTC_init_interrupts+0x2c>
80003168:	d8 22       	popm	r4-r7,pc
8000316a:	00 00       	add	r0,r0
8000316c:	80 00       	ld.sh	r0,r0[0x0]
8000316e:	90 00       	ld.sh	r0,r8[0x0]
80003170:	80 00       	ld.sh	r0,r0[0x0]
80003172:	93 1c       	st.w	r9[0x4],r12
80003174:	80 00       	ld.sh	r0,r0[0x0]
80003176:	31 24       	mov	r4,18
80003178:	80 00       	ld.sh	r0,r0[0x0]
8000317a:	91 04       	st.w	r8[0x0],r4

8000317c <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
8000317c:	fe 78 08 00 	mov	r8,-63488
80003180:	e0 69 00 83 	mov	r9,131
80003184:	f2 0c 01 0c 	sub	r12,r9,r12
80003188:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
8000318c:	f2 ca ff c0 	sub	r10,r9,-64
80003190:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80003194:	58 08       	cp.w	r8,0
80003196:	c0 21       	brne	8000319a <_get_interrupt_handler+0x1e>
80003198:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
8000319a:	f0 08 12 00 	clz	r8,r8
8000319e:	48 5a       	lddpc	r10,800031b0 <_get_interrupt_handler+0x34>
800031a0:	f4 09 00 39 	add	r9,r10,r9<<0x3
800031a4:	f0 08 11 1f 	rsub	r8,r8,31
800031a8:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800031aa:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
800031ae:	5e fc       	retal	r12
800031b0:	80 00       	ld.sh	r0,r0[0x0]
800031b2:	93 1c       	st.w	r9[0x4],r12

800031b4 <pm_set_osc0_mode>:
 * \param mode Oscillator 0 mode (i.e. AVR32_PM_OSCCTRL0_MODE_x).
 */
static void pm_set_osc0_mode(volatile avr32_pm_t *pm, unsigned int mode)
{
  // Read
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
800031b4:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.mode = mode;
800031b6:	f1 db d0 03 	bfins	r8,r11,0x0,0x3
  // Write
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
800031ba:	99 a8       	st.w	r12[0x28],r8
}
800031bc:	5e fc       	retal	r12
800031be:	d7 03       	nop

800031c0 <pm_enable_osc0_crystal>:
  pm_set_osc0_mode(pm, AVR32_PM_OSCCTRL0_MODE_EXT_CLOCK);
}


void pm_enable_osc0_crystal(volatile avr32_pm_t *pm, unsigned int fosc0)
{
800031c0:	d4 01       	pushm	lr
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
800031c2:	ec 5b bb 9f 	cp.w	r11,899999
800031c6:	e0 8b 00 04 	brhi	800031ce <pm_enable_osc0_crystal+0xe>
800031ca:	30 4b       	mov	r11,4
800031cc:	c1 38       	rjmp	800031f2 <pm_enable_osc0_crystal+0x32>
800031ce:	e0 68 c6 bf 	mov	r8,50879
800031d2:	ea 18 00 2d 	orh	r8,0x2d
800031d6:	10 3b       	cp.w	r11,r8
800031d8:	e0 8b 00 04 	brhi	800031e0 <pm_enable_osc0_crystal+0x20>
800031dc:	30 5b       	mov	r11,5
800031de:	c0 a8       	rjmp	800031f2 <pm_enable_osc0_crystal+0x32>
800031e0:	e0 68 12 00 	mov	r8,4608
800031e4:	ea 18 00 7a 	orh	r8,0x7a
800031e8:	10 3b       	cp.w	r11,r8
800031ea:	f9 bb 03 06 	movlo	r11,6
800031ee:	f9 bb 02 07 	movhs	r11,7
800031f2:	f0 1f 00 02 	mcall	800031f8 <pm_enable_osc0_crystal+0x38>
                       (fosc0 < 3000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G1 :
                       (fosc0 < 8000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G2 :
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}
800031f6:	d8 02       	popm	pc
800031f8:	80 00       	ld.sh	r0,r0[0x0]
800031fa:	31 b4       	mov	r4,27

800031fc <pm_enable_clk0_no_wait>:


void pm_enable_clk0_no_wait(volatile avr32_pm_t *pm, unsigned int startup)
{
  // Read register
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
800031fc:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.startup = startup;
800031fe:	f1 db d1 03 	bfins	r8,r11,0x8,0x3
  // Write back
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
80003202:	99 a8       	st.w	r12[0x28],r8

  pm->mcctrl |= AVR32_PM_MCCTRL_OSC0EN_MASK;
80003204:	78 08       	ld.w	r8,r12[0x0]
80003206:	a3 a8       	sbr	r8,0x2
80003208:	99 08       	st.w	r12[0x0],r8
}
8000320a:	5e fc       	retal	r12

8000320c <pm_wait_for_clk0_ready>:


void pm_wait_for_clk0_ready(volatile avr32_pm_t *pm)
{
  while (!(pm->poscsr & AVR32_PM_POSCSR_OSC0RDY_MASK));
8000320c:	79 58       	ld.w	r8,r12[0x54]
8000320e:	e2 18 00 80 	andl	r8,0x80,COH
80003212:	cf d0       	breq	8000320c <pm_wait_for_clk0_ready>
}
80003214:	5e fc       	retal	r12
80003216:	d7 03       	nop

80003218 <pm_enable_clk0>:
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}


void pm_enable_clk0(volatile avr32_pm_t *pm, unsigned int startup)
{
80003218:	eb cd 40 80 	pushm	r7,lr
8000321c:	18 97       	mov	r7,r12
  pm_enable_clk0_no_wait(pm, startup);
8000321e:	f0 1f 00 04 	mcall	8000322c <pm_enable_clk0+0x14>
  pm_wait_for_clk0_ready(pm);
80003222:	0e 9c       	mov	r12,r7
80003224:	f0 1f 00 03 	mcall	80003230 <pm_enable_clk0+0x18>
}
80003228:	e3 cd 80 80 	ldm	sp++,r7,pc
8000322c:	80 00       	ld.sh	r0,r0[0x0]
8000322e:	31 fc       	mov	r12,31
80003230:	80 00       	ld.sh	r0,r0[0x0]
80003232:	32 0c       	mov	r12,32

80003234 <pm_switch_to_clock>:


void pm_switch_to_clock(volatile avr32_pm_t *pm, unsigned long clock)
{
  // Read
  u_avr32_pm_mcctrl_t u_avr32_pm_mcctrl = {pm->mcctrl};
80003234:	78 08       	ld.w	r8,r12[0x0]
  // Modify
  u_avr32_pm_mcctrl.MCCTRL.mcsel = clock;
80003236:	f1 db d0 02 	bfins	r8,r11,0x0,0x2
  // Write back
  pm->mcctrl = u_avr32_pm_mcctrl.mcctrl;
8000323a:	99 08       	st.w	r12[0x0],r8
}
8000323c:	5e fc       	retal	r12
8000323e:	d7 03       	nop

80003240 <pm_switch_to_osc0>:


void pm_switch_to_osc0(volatile avr32_pm_t *pm, unsigned int fosc0, unsigned int startup)
{
80003240:	eb cd 40 c0 	pushm	r6-r7,lr
80003244:	18 97       	mov	r7,r12
80003246:	14 96       	mov	r6,r10
  pm_enable_osc0_crystal(pm, fosc0);            // Enable the Osc0 in crystal mode
80003248:	f0 1f 00 06 	mcall	80003260 <pm_switch_to_osc0+0x20>
  pm_enable_clk0(pm, startup);                  // Crystal startup time - This parameter is critical and depends on the characteristics of the crystal
8000324c:	0c 9b       	mov	r11,r6
8000324e:	0e 9c       	mov	r12,r7
80003250:	f0 1f 00 05 	mcall	80003264 <pm_switch_to_osc0+0x24>
  pm_switch_to_clock(pm, AVR32_PM_MCSEL_OSC0);  // Then switch main clock to Osc0
80003254:	30 1b       	mov	r11,1
80003256:	0e 9c       	mov	r12,r7
80003258:	f0 1f 00 04 	mcall	80003268 <pm_switch_to_osc0+0x28>
}
8000325c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003260:	80 00       	ld.sh	r0,r0[0x0]
80003262:	31 c0       	mov	r0,28
80003264:	80 00       	ld.sh	r0,r0[0x0]
80003266:	32 18       	mov	r8,33
80003268:	80 00       	ld.sh	r0,r0[0x0]
8000326a:	32 34       	mov	r4,35

8000326c <pwm_channel_init>:

int pwm_channel_init( unsigned int channel_id, const avr32_pwm_channel_t *pwm_channel)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;

  if (pwm_channel == 0) // Null pointer.
8000326c:	58 0b       	cp.w	r11,0
8000326e:	c1 90       	breq	800032a0 <pwm_channel_init+0x34>
    return PWM_INVALID_ARGUMENT;
  if (channel_id > AVR32_PWM_LINES_MSB) // Control input values.
80003270:	58 6c       	cp.w	r12,6
80003272:	e0 8b 00 17 	brhi	800032a0 <pwm_channel_init+0x34>
    return PWM_INVALID_INPUT;

  pwm->channel[channel_id].cmr= pwm_channel->cmr;   // Channel mode.
80003276:	76 0a       	ld.w	r10,r11[0x0]
80003278:	fe 78 30 00 	mov	r8,-53248
8000327c:	f8 c9 ff f0 	sub	r9,r12,-16
80003280:	a5 79       	lsl	r9,0x5
80003282:	f0 09 00 09 	add	r9,r8,r9
80003286:	93 0a       	st.w	r9[0x0],r10
  pwm->channel[channel_id].cdty= pwm_channel->cdty; // Duty cycle, should be < CPRD.
80003288:	76 19       	ld.w	r9,r11[0x4]
8000328a:	a5 7c       	lsl	r12,0x5
8000328c:	f0 0c 00 0c 	add	r12,r8,r12
80003290:	f8 c8 fd fc 	sub	r8,r12,-516
80003294:	91 09       	st.w	r8[0x0],r9
  pwm->channel[channel_id].cprd= pwm_channel->cprd; // Channel period.
80003296:	76 28       	ld.w	r8,r11[0x8]
80003298:	f8 cc fd f8 	sub	r12,r12,-520
8000329c:	99 08       	st.w	r12[0x0],r8
8000329e:	5e fd       	retal	0

  return PWM_SUCCESS;
800032a0:	5e ff       	retal	1

800032a2 <pwm_start_channels>:
}


int pwm_start_channels(unsigned long channels_bitmask)
{
  if (channels_bitmask & ~((1 << (AVR32_PWM_LINES_MSB + 1)) - 1))
800032a2:	18 98       	mov	r8,r12
800032a4:	e0 18 ff 80 	andl	r8,0xff80
800032a8:	c0 20       	breq	800032ac <pwm_start_channels+0xa>
800032aa:	5e ff       	retal	1
    return PWM_INVALID_INPUT;

  AVR32_PWM.ena = channels_bitmask; // Enable channels.
800032ac:	fe 78 30 00 	mov	r8,-53248
800032b0:	91 1c       	st.w	r8[0x4],r12
800032b2:	5e fd       	retal	0

800032b4 <pwm_init>:


int pwm_init(const pwm_opt_t *opt)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
800032b4:	e1 b8 00 00 	mfsr	r8,0x0

  if (opt == 0 ) // Null pointer.
800032b8:	58 0c       	cp.w	r12,0
800032ba:	c0 21       	brne	800032be <pwm_init+0xa>
800032bc:	5e ff       	retal	1
    return PWM_INVALID_INPUT;

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
800032be:	e6 18 00 01 	andh	r8,0x1,COH
800032c2:	c0 91       	brne	800032d4 <pwm_init+0x20>
800032c4:	d3 03       	ssrf	0x10
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
800032c6:	fe 78 30 00 	mov	r8,-53248
800032ca:	37 f9       	mov	r9,127
800032cc:	91 59       	st.w	r8[0x14],r9
  pwm->isr;
800032ce:	70 78       	ld.w	r8,r8[0x1c]
  if (global_interrupt_enabled) Enable_global_interrupt();
800032d0:	d5 03       	csrf	0x10
800032d2:	c0 68       	rjmp	800032de <pwm_init+0x2a>
  if (opt == 0 ) // Null pointer.
    return PWM_INVALID_INPUT;

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
800032d4:	fe 78 30 00 	mov	r8,-53248
800032d8:	37 f9       	mov	r9,127
800032da:	91 59       	st.w	r8[0x14],r9
  pwm->isr;
800032dc:	70 78       	ld.w	r8,r8[0x1c]
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
    ((opt->diva)<<AVR32_PWM_DIVA_OFFSET) |
800032de:	78 08       	ld.w	r8,r12[0x0]
800032e0:	78 39       	ld.w	r9,r12[0xc]
800032e2:	a9 69       	lsl	r9,0x8
800032e4:	f3 e8 11 09 	or	r9,r9,r8<<0x10
800032e8:	78 18       	ld.w	r8,r12[0x4]
800032ea:	10 49       	or	r9,r8
800032ec:	78 28       	ld.w	r8,r12[0x8]
800032ee:	f3 e8 11 89 	or	r9,r9,r8<<0x18
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
  pwm->isr;
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
800032f2:	fe 78 30 00 	mov	r8,-53248
800032f6:	91 09       	st.w	r8[0x0],r9
800032f8:	5e fd       	retal	0

800032fa <getBaudDiv>:
xSemaphoreHandle xSPIMutex;
#endif

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);
800032fa:	f8 c8 00 01 	sub	r8,r12,1
800032fe:	f0 0b 00 0b 	add	r11,r8,r11
80003302:	f6 0c 0d 0a 	divu	r10,r11,r12
80003306:	14 9c       	mov	r12,r10

	if (baudDiv <= 0 || baudDiv > 255) {
80003308:	f4 c8 00 01 	sub	r8,r10,1
8000330c:	e0 48 00 fe 	cp.w	r8,254
80003310:	e0 88 00 03 	brls	80003316 <getBaudDiv+0x1c>
80003314:	5e fe       	retal	-1
		return -1;
	}

	return baudDiv;
80003316:	5c 8c       	casts.h	r12
}
80003318:	5e fc       	retal	r12

8000331a <spi_initMaster>:
spi_status_t spi_initMaster(volatile avr32_spi_t *spi,
		const spi_options_t *options)
{
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (options->modfdis > 1) {
8000331a:	f7 39 00 0d 	ld.ub	r9,r11[13]
8000331e:	30 18       	mov	r8,1
80003320:	f0 09 18 00 	cp.b	r9,r8
80003324:	e0 88 00 04 	brls	8000332c <spi_initMaster+0x12>
80003328:	30 2c       	mov	r12,2
8000332a:	5e fc       	retal	r12
		return SPI_ERROR_ARGUMENT;
	}

	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
8000332c:	e0 68 00 80 	mov	r8,128
80003330:	99 08       	st.w	r12[0x0],r8

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
80003332:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.mstr = 1;
80003334:	30 19       	mov	r9,1
80003336:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
8000333a:	f7 39 00 0d 	ld.ub	r9,r11[13]
8000333e:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
	u_avr32_spi_mr.MR.llb = 0;
80003342:	30 09       	mov	r9,0
80003344:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
	u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
80003348:	30 fa       	mov	r10,15
8000334a:	f1 da d2 04 	bfins	r8,r10,0x10,0x4
	spi->mr = u_avr32_spi_mr.mr;
8000334e:	99 18       	st.w	r12[0x4],r8
80003350:	5e f9       	retal	r9

80003352 <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
		uint8_t variable_ps,
		uint8_t pcs_decode,
		uint8_t delay)
{
80003352:	d4 01       	pushm	lr
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (variable_ps > 1 ||
80003354:	30 18       	mov	r8,1
80003356:	f0 0b 18 00 	cp.b	r11,r8
8000335a:	5f be       	srhi	lr
8000335c:	f0 0a 18 00 	cp.b	r10,r8
80003360:	5f b8       	srhi	r8
80003362:	fd e8 10 08 	or	r8,lr,r8
80003366:	c0 30       	breq	8000336c <spi_selectionMode+0x1a>
80003368:	30 2c       	mov	r12,2
8000336a:	d8 02       	popm	pc
			pcs_decode > 1) {
		return SPI_ERROR_ARGUMENT;
	}

	u_avr32_spi_mr.mr = spi->mr;
8000336c:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.ps = variable_ps;
8000336e:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
	u_avr32_spi_mr.MR.pcsdec = pcs_decode;
80003372:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
	u_avr32_spi_mr.MR.dlybcs = delay;
80003376:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	spi->mr = u_avr32_spi_mr.mr;
8000337a:	99 18       	st.w	r12[0x4],r8
8000337c:	d8 0a       	popm	pc,r12=0

8000337e <spi_selectChip>:
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
8000337e:	78 18       	ld.w	r8,r12[0x4]
80003380:	ea 18 00 0f 	orh	r8,0xf
80003384:	99 18       	st.w	r12[0x4],r8

	if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
80003386:	78 18       	ld.w	r8,r12[0x4]
80003388:	e2 18 00 04 	andl	r8,0x4,COH
8000338c:	c0 f0       	breq	800033aa <spi_selectChip+0x2c>
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
8000338e:	30 e8       	mov	r8,14
80003390:	f0 0b 18 00 	cp.b	r11,r8
80003394:	e0 8b 00 19 	brhi	800033c6 <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
80003398:	78 18       	ld.w	r8,r12[0x4]
8000339a:	b1 6b       	lsl	r11,0x10
8000339c:	ea 1b ff f0 	orh	r11,0xfff0
800033a0:	e8 1b ff ff 	orl	r11,0xffff
800033a4:	10 6b       	and	r11,r8
800033a6:	99 1b       	st.w	r12[0x4],r11
800033a8:	5e fd       	retal	0
				(chip << AVR32_SPI_MR_PCS_OFFSET);
	} else {
		if (chip > 3) {
800033aa:	30 38       	mov	r8,3
800033ac:	f0 0b 18 00 	cp.b	r11,r8
800033b0:	e0 8b 00 0b 	brhi	800033c6 <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
800033b4:	78 18       	ld.w	r8,r12[0x4]
800033b6:	2f 0b       	sub	r11,-16
800033b8:	30 19       	mov	r9,1
800033ba:	f2 0b 09 4b 	lsl	r11,r9,r11
800033be:	5c db       	com	r11
800033c0:	10 6b       	and	r11,r8
800033c2:	99 1b       	st.w	r12[0x4],r11
800033c4:	5e fd       	retal	0
800033c6:	30 2c       	mov	r12,2
	}

	return SPI_OK;
}
800033c8:	5e fc       	retal	r12

800033ca <spi_unselectChip>:

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
800033ca:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
800033ce:	c0 58       	rjmp	800033d8 <spi_unselectChip+0xe>
		if (!timeout--) {
800033d0:	58 08       	cp.w	r8,0
800033d2:	c0 21       	brne	800033d6 <spi_unselectChip+0xc>
800033d4:	5e ff       	retal	1
800033d6:	20 18       	sub	r8,1

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
800033d8:	78 49       	ld.w	r9,r12[0x10]
800033da:	e2 19 02 00 	andl	r9,0x200,COH
800033de:	cf 90       	breq	800033d0 <spi_unselectChip+0x6>
			return SPI_ERROR_TIMEOUT;
		}
	}

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
800033e0:	78 18       	ld.w	r8,r12[0x4]
800033e2:	ea 18 00 0f 	orh	r8,0xf
800033e6:	99 18       	st.w	r12[0x4],r8

	/* Last transfer, so de-assert the current NPCS if CSAAT is set. */
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
800033e8:	fc 18 01 00 	movh	r8,0x100
800033ec:	99 08       	st.w	r12[0x0],r8
800033ee:	5e fd       	retal	0

800033f0 <spi_setupChipReg>:
}

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
800033f0:	eb cd 40 f8 	pushm	r3-r7,lr
800033f4:	18 95       	mov	r5,r12
800033f6:	16 97       	mov	r7,r11
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800033f8:	f7 36 00 0c 	ld.ub	r6,r11[12]
800033fc:	30 38       	mov	r8,3
800033fe:	f0 06 18 00 	cp.b	r6,r8
80003402:	e0 8b 00 4d 	brhi	8000349c <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
80003406:	f7 34 00 0b 	ld.ub	r4,r11[11]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
8000340a:	30 18       	mov	r8,1
8000340c:	f0 04 18 00 	cp.b	r4,r8
80003410:	e0 8b 00 46 	brhi	8000349c <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
80003414:	f7 33 00 08 	ld.ub	r3,r11[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80003418:	30 78       	mov	r8,7
8000341a:	f0 03 18 00 	cp.b	r3,r8
8000341e:	e0 88 00 3f 	brls	8000349c <spi_setupChipReg+0xac>
80003422:	31 08       	mov	r8,16
80003424:	f0 03 18 00 	cp.b	r3,r8
80003428:	e0 8b 00 3a 	brhi	8000349c <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
		return SPI_ERROR_ARGUMENT;
	}

	int baudDiv = getBaudDiv(options->baudrate, pb_hz);
8000342c:	14 9b       	mov	r11,r10
8000342e:	6e 1c       	ld.w	r12,r7[0x4]
80003430:	f0 1f 00 1d 	mcall	800034a4 <spi_setupChipReg+0xb4>

	if (baudDiv < 0) {
80003434:	c3 45       	brlt	8000349c <spi_setupChipReg+0xac>
		return SPI_ERROR_ARGUMENT;
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
80003436:	30 08       	mov	r8,0
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
80003438:	ec 09 16 01 	lsr	r9,r6,0x1
8000343c:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
80003440:	ec 16 00 01 	eorl	r6,0x1
80003444:	f1 d6 d0 21 	bfins	r8,r6,0x1,0x1
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
80003448:	f1 d4 d0 61 	bfins	r8,r4,0x3,0x1
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
8000344c:	20 83       	sub	r3,8
8000344e:	f1 d3 d0 84 	bfins	r8,r3,0x4,0x4
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
80003452:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
80003456:	ef 39 00 09 	ld.ub	r9,r7[9]
8000345a:	f1 d9 d2 08 	bfins	r8,r9,0x10,0x8
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
8000345e:	ef 39 00 0a 	ld.ub	r9,r7[10]
80003462:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8

	switch (options->reg) {
80003466:	0f 89       	ld.ub	r9,r7[0x0]
80003468:	30 1a       	mov	r10,1
8000346a:	f4 09 18 00 	cp.b	r9,r10
8000346e:	c0 e0       	breq	8000348a <spi_setupChipReg+0x9a>
80003470:	c0 a3       	brcs	80003484 <spi_setupChipReg+0x94>
80003472:	30 2a       	mov	r10,2
80003474:	f4 09 18 00 	cp.b	r9,r10
80003478:	c0 c0       	breq	80003490 <spi_setupChipReg+0xa0>
8000347a:	30 3a       	mov	r10,3
8000347c:	f4 09 18 00 	cp.b	r9,r10
80003480:	c0 e1       	brne	8000349c <spi_setupChipReg+0xac>
80003482:	c0 a8       	rjmp	80003496 <spi_setupChipReg+0xa6>
	case 0:
		spi->csr0 = u_avr32_spi_csr.csr;
80003484:	8b c8       	st.w	r5[0x30],r8
80003486:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 1:
		spi->csr1 = u_avr32_spi_csr.csr;
8000348a:	8b d8       	st.w	r5[0x34],r8
8000348c:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
80003490:	8b e8       	st.w	r5[0x38],r8
80003492:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
80003496:	8b f8       	st.w	r5[0x3c],r8
80003498:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;
8000349c:	30 2c       	mov	r12,2
		}
	}
#endif

	return SPI_OK;
}
8000349e:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
800034a2:	00 00       	add	r0,r0
800034a4:	80 00       	ld.sh	r0,r0[0x0]
800034a6:	32 fa       	mov	r10,47

800034a8 <spi_enable>:

void spi_enable(volatile avr32_spi_t *spi)
{
	spi->cr = AVR32_SPI_CR_SPIEN_MASK;
800034a8:	30 18       	mov	r8,1
800034aa:	99 08       	st.w	r12[0x0],r8
}
800034ac:	5e fc       	retal	r12

800034ae <spi_write>:
{
	return ((spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0);
}

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
800034ae:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
800034b2:	c0 58       	rjmp	800034bc <spi_write+0xe>
		if (!timeout--) {
800034b4:	58 08       	cp.w	r8,0
800034b6:	c0 21       	brne	800034ba <spi_write+0xc>
800034b8:	5e ff       	retal	1
800034ba:	20 18       	sub	r8,1

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
800034bc:	78 49       	ld.w	r9,r12[0x10]
800034be:	e2 19 00 02 	andl	r9,0x2,COH
800034c2:	cf 90       	breq	800034b4 <spi_write+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
800034c4:	5c 7b       	castu.h	r11
800034c6:	99 3b       	st.w	r12[0xc],r11
800034c8:	5e fd       	retal	0

800034ca <spi_readRegisterFullCheck>:
	return ((spi->sr & AVR32_SPI_SR_TXEMPTY_MASK) != 0);
}

uint8_t spi_readRegisterFullCheck(volatile avr32_spi_t *spi)
{
	return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
800034ca:	78 4c       	ld.w	r12,r12[0x10]
}
800034cc:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
800034d0:	5e fc       	retal	r12

800034d2 <spi_read>:

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
800034d2:	e0 68 3a 98 	mov	r8,15000
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
800034d6:	c0 58       	rjmp	800034e0 <spi_read+0xe>
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
		if (!timeout--) {
800034d8:	58 08       	cp.w	r8,0
800034da:	c0 21       	brne	800034de <spi_read+0xc>
800034dc:	5e ff       	retal	1
800034de:	20 18       	sub	r8,1

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
800034e0:	78 49       	ld.w	r9,r12[0x10]
800034e2:	e2 19 02 01 	andl	r9,0x201,COH
800034e6:	e0 49 02 01 	cp.w	r9,513
800034ea:	cf 71       	brne	800034d8 <spi_read+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	*data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
800034ec:	78 28       	ld.w	r8,r12[0x8]
800034ee:	b6 08       	st.h	r11[0x0],r8
800034f0:	5e fd       	retal	0
800034f2:	d7 03       	nop

800034f4 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
800034f4:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
800034f8:	fe c0 a4 f8 	sub	r0,pc,-23304

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
800034fc:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
80003500:	d5 53       	csrf	0x15
  cp      r0, r1
80003502:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
80003504:	e0 61 05 18 	mov	r1,1304
  lda.w   r2, _data_lma
idata_load_loop:
  ld.d    r4, r2++
80003508:	02 30       	cp.w	r0,r1
  st.d    r0++, r4
8000350a:	c0 72       	brcc	80003518 <idata_load_loop_end>
  cp      r0, r1
8000350c:	fe c2 9b c4 	sub	r2,pc,-25660

80003510 <idata_load_loop>:
  brlo    idata_load_loop
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
80003510:	a5 05       	ld.d	r4,r2++
  lda.w   r1, _end
80003512:	a1 24       	st.d	r0++,r4
  cp      r0, r1
80003514:	02 30       	cp.w	r0,r1
  brhs    udata_clear_loop_end
80003516:	cf d3       	brcs	80003510 <idata_load_loop>

80003518 <idata_load_loop_end>:
  mov     r2, 0
80003518:	e0 60 05 18 	mov	r0,1304
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
8000351c:	e0 61 06 78 	mov	r1,1656
  cp      r0, r1
  brlo    udata_clear_loop
80003520:	02 30       	cp.w	r0,r1
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
80003522:	c0 62       	brcc	8000352e <udata_clear_loop_end>
80003524:	30 02       	mov	r2,0
80003526:	30 03       	mov	r3,0

80003528 <udata_clear_loop>:
80003528:	a1 22       	st.d	r0++,r2
8000352a:	02 30       	cp.w	r0,r1
8000352c:	cf e3       	brcs	80003528 <udata_clear_loop>

8000352e <udata_clear_loop_end>:
8000352e:	fe cf 0b 62 	sub	pc,pc,2914
80003532:	d7 03       	nop

80003534 <memcpy>:
80003534:	58 8a       	cp.w	r10,8
80003536:	c2 f5       	brlt	80003594 <memcpy+0x60>
80003538:	f9 eb 10 09 	or	r9,r12,r11
8000353c:	e2 19 00 03 	andl	r9,0x3,COH
80003540:	e0 81 00 97 	brne	8000366e <memcpy+0x13a>
80003544:	e0 4a 00 20 	cp.w	r10,32
80003548:	c3 b4       	brge	800035be <memcpy+0x8a>
8000354a:	f4 08 14 02 	asr	r8,r10,0x2
8000354e:	f0 09 11 08 	rsub	r9,r8,8
80003552:	fe 09 00 2f 	add	pc,pc,r9<<0x2
80003556:	76 69       	ld.w	r9,r11[0x18]
80003558:	99 69       	st.w	r12[0x18],r9
8000355a:	76 59       	ld.w	r9,r11[0x14]
8000355c:	99 59       	st.w	r12[0x14],r9
8000355e:	76 49       	ld.w	r9,r11[0x10]
80003560:	99 49       	st.w	r12[0x10],r9
80003562:	76 39       	ld.w	r9,r11[0xc]
80003564:	99 39       	st.w	r12[0xc],r9
80003566:	76 29       	ld.w	r9,r11[0x8]
80003568:	99 29       	st.w	r12[0x8],r9
8000356a:	76 19       	ld.w	r9,r11[0x4]
8000356c:	99 19       	st.w	r12[0x4],r9
8000356e:	76 09       	ld.w	r9,r11[0x0]
80003570:	99 09       	st.w	r12[0x0],r9
80003572:	f6 08 00 2b 	add	r11,r11,r8<<0x2
80003576:	f8 08 00 28 	add	r8,r12,r8<<0x2
8000357a:	e0 1a 00 03 	andl	r10,0x3
8000357e:	f4 0a 11 04 	rsub	r10,r10,4
80003582:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80003586:	17 a9       	ld.ub	r9,r11[0x2]
80003588:	b0 a9       	st.b	r8[0x2],r9
8000358a:	17 99       	ld.ub	r9,r11[0x1]
8000358c:	b0 99       	st.b	r8[0x1],r9
8000358e:	17 89       	ld.ub	r9,r11[0x0]
80003590:	b0 89       	st.b	r8[0x0],r9
80003592:	5e fc       	retal	r12
80003594:	f4 0a 11 09 	rsub	r10,r10,9
80003598:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000359c:	17 f9       	ld.ub	r9,r11[0x7]
8000359e:	b8 f9       	st.b	r12[0x7],r9
800035a0:	17 e9       	ld.ub	r9,r11[0x6]
800035a2:	b8 e9       	st.b	r12[0x6],r9
800035a4:	17 d9       	ld.ub	r9,r11[0x5]
800035a6:	b8 d9       	st.b	r12[0x5],r9
800035a8:	17 c9       	ld.ub	r9,r11[0x4]
800035aa:	b8 c9       	st.b	r12[0x4],r9
800035ac:	17 b9       	ld.ub	r9,r11[0x3]
800035ae:	b8 b9       	st.b	r12[0x3],r9
800035b0:	17 a9       	ld.ub	r9,r11[0x2]
800035b2:	b8 a9       	st.b	r12[0x2],r9
800035b4:	17 99       	ld.ub	r9,r11[0x1]
800035b6:	b8 99       	st.b	r12[0x1],r9
800035b8:	17 89       	ld.ub	r9,r11[0x0]
800035ba:	b8 89       	st.b	r12[0x0],r9
800035bc:	5e fc       	retal	r12
800035be:	eb cd 40 c0 	pushm	r6-r7,lr
800035c2:	18 99       	mov	r9,r12
800035c4:	22 0a       	sub	r10,32
800035c6:	b7 07       	ld.d	r6,r11++
800035c8:	b3 26       	st.d	r9++,r6
800035ca:	b7 07       	ld.d	r6,r11++
800035cc:	b3 26       	st.d	r9++,r6
800035ce:	b7 07       	ld.d	r6,r11++
800035d0:	b3 26       	st.d	r9++,r6
800035d2:	b7 07       	ld.d	r6,r11++
800035d4:	b3 26       	st.d	r9++,r6
800035d6:	22 0a       	sub	r10,32
800035d8:	cf 74       	brge	800035c6 <memcpy+0x92>
800035da:	2f 0a       	sub	r10,-16
800035dc:	c0 65       	brlt	800035e8 <memcpy+0xb4>
800035de:	b7 07       	ld.d	r6,r11++
800035e0:	b3 26       	st.d	r9++,r6
800035e2:	b7 07       	ld.d	r6,r11++
800035e4:	b3 26       	st.d	r9++,r6
800035e6:	21 0a       	sub	r10,16
800035e8:	5c 3a       	neg	r10
800035ea:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
800035ee:	d7 03       	nop
800035f0:	d7 03       	nop
800035f2:	f7 36 00 0e 	ld.ub	r6,r11[14]
800035f6:	f3 66 00 0e 	st.b	r9[14],r6
800035fa:	f7 36 00 0d 	ld.ub	r6,r11[13]
800035fe:	f3 66 00 0d 	st.b	r9[13],r6
80003602:	f7 36 00 0c 	ld.ub	r6,r11[12]
80003606:	f3 66 00 0c 	st.b	r9[12],r6
8000360a:	f7 36 00 0b 	ld.ub	r6,r11[11]
8000360e:	f3 66 00 0b 	st.b	r9[11],r6
80003612:	f7 36 00 0a 	ld.ub	r6,r11[10]
80003616:	f3 66 00 0a 	st.b	r9[10],r6
8000361a:	f7 36 00 09 	ld.ub	r6,r11[9]
8000361e:	f3 66 00 09 	st.b	r9[9],r6
80003622:	f7 36 00 08 	ld.ub	r6,r11[8]
80003626:	f3 66 00 08 	st.b	r9[8],r6
8000362a:	f7 36 00 07 	ld.ub	r6,r11[7]
8000362e:	f3 66 00 07 	st.b	r9[7],r6
80003632:	f7 36 00 06 	ld.ub	r6,r11[6]
80003636:	f3 66 00 06 	st.b	r9[6],r6
8000363a:	f7 36 00 05 	ld.ub	r6,r11[5]
8000363e:	f3 66 00 05 	st.b	r9[5],r6
80003642:	f7 36 00 04 	ld.ub	r6,r11[4]
80003646:	f3 66 00 04 	st.b	r9[4],r6
8000364a:	f7 36 00 03 	ld.ub	r6,r11[3]
8000364e:	f3 66 00 03 	st.b	r9[3],r6
80003652:	f7 36 00 02 	ld.ub	r6,r11[2]
80003656:	f3 66 00 02 	st.b	r9[2],r6
8000365a:	f7 36 00 01 	ld.ub	r6,r11[1]
8000365e:	f3 66 00 01 	st.b	r9[1],r6
80003662:	f7 36 00 00 	ld.ub	r6,r11[0]
80003666:	f3 66 00 00 	st.b	r9[0],r6
8000366a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000366e:	20 1a       	sub	r10,1
80003670:	f6 0a 07 09 	ld.ub	r9,r11[r10]
80003674:	f8 0a 0b 09 	st.b	r12[r10],r9
80003678:	cf b1       	brne	8000366e <memcpy+0x13a>
8000367a:	5e fc       	retal	r12

8000367c <_vsprintf_r>:
8000367c:	d4 01       	pushm	lr
8000367e:	21 7d       	sub	sp,92
80003680:	e0 68 ff ff 	mov	r8,65535
80003684:	ea 18 7f ff 	orh	r8,0x7fff
80003688:	50 58       	stdsp	sp[0x14],r8
8000368a:	50 28       	stdsp	sp[0x8],r8
8000368c:	e0 68 02 08 	mov	r8,520
80003690:	ba 68       	st.h	sp[0xc],r8
80003692:	3f f8       	mov	r8,-1
80003694:	50 4b       	stdsp	sp[0x10],r11
80003696:	50 0b       	stdsp	sp[0x0],r11
80003698:	ba 78       	st.h	sp[0xe],r8
8000369a:	1a 9b       	mov	r11,sp
8000369c:	ca 8d       	rcall	800039ec <_vfprintf_r>
8000369e:	30 09       	mov	r9,0
800036a0:	40 08       	lddsp	r8,sp[0x0]
800036a2:	b0 89       	st.b	r8[0x0],r9
800036a4:	2e 9d       	sub	sp,-92
800036a6:	d8 02       	popm	pc

800036a8 <vsprintf>:
800036a8:	d4 01       	pushm	lr
800036aa:	e0 68 01 00 	mov	r8,256
800036ae:	14 99       	mov	r9,r10
800036b0:	16 9a       	mov	r10,r11
800036b2:	18 9b       	mov	r11,r12
800036b4:	70 0c       	ld.w	r12,r8[0x0]
800036b6:	ce 3f       	rcall	8000367c <_vsprintf_r>
800036b8:	d8 02       	popm	pc
800036ba:	d7 03       	nop

800036bc <get_arg>:
800036bc:	d4 31       	pushm	r0-r7,lr
800036be:	20 8d       	sub	sp,32
800036c0:	fa c4 ff bc 	sub	r4,sp,-68
800036c4:	50 4b       	stdsp	sp[0x10],r11
800036c6:	68 2e       	ld.w	lr,r4[0x8]
800036c8:	50 58       	stdsp	sp[0x14],r8
800036ca:	12 96       	mov	r6,r9
800036cc:	7c 0b       	ld.w	r11,lr[0x0]
800036ce:	70 05       	ld.w	r5,r8[0x0]
800036d0:	50 6e       	stdsp	sp[0x18],lr
800036d2:	58 0b       	cp.w	r11,0
800036d4:	f4 0b 17 00 	moveq	r11,r10
800036d8:	68 03       	ld.w	r3,r4[0x0]
800036da:	68 11       	ld.w	r1,r4[0x4]
800036dc:	40 49       	lddsp	r9,sp[0x10]
800036de:	30 08       	mov	r8,0
800036e0:	c2 89       	rjmp	80003930 <get_arg+0x274>
800036e2:	2f fb       	sub	r11,-1
800036e4:	32 5c       	mov	r12,37
800036e6:	17 8a       	ld.ub	r10,r11[0x0]
800036e8:	f8 0a 18 00 	cp.b	r10,r12
800036ec:	5f 1e       	srne	lr
800036ee:	f0 0a 18 00 	cp.b	r10,r8
800036f2:	5f 1c       	srne	r12
800036f4:	fd ec 00 0c 	and	r12,lr,r12
800036f8:	f0 0c 18 00 	cp.b	r12,r8
800036fc:	cf 31       	brne	800036e2 <get_arg+0x26>
800036fe:	58 0a       	cp.w	r10,0
80003700:	e0 80 01 25 	breq	8000394a <get_arg+0x28e>
80003704:	30 0c       	mov	r12,0
80003706:	3f fa       	mov	r10,-1
80003708:	18 90       	mov	r0,r12
8000370a:	50 3a       	stdsp	sp[0xc],r10
8000370c:	18 94       	mov	r4,r12
8000370e:	18 92       	mov	r2,r12
80003710:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
80003714:	16 97       	mov	r7,r11
80003716:	50 7c       	stdsp	sp[0x1c],r12
80003718:	fe cc a0 80 	sub	r12,pc,-24448
8000371c:	0f 3a       	ld.ub	r10,r7++
8000371e:	f8 0a 07 0e 	ld.ub	lr,r12[r10]
80003722:	40 7c       	lddsp	r12,sp[0x1c]
80003724:	1c 0c       	add	r12,lr
80003726:	fe ce a1 56 	sub	lr,pc,-24234
8000372a:	fc 0c 07 0e 	ld.ub	lr,lr[r12]
8000372e:	20 1e       	sub	lr,1
80003730:	50 0e       	stdsp	sp[0x0],lr
80003732:	fe ce a1 ce 	sub	lr,pc,-24114
80003736:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
8000373a:	50 7c       	stdsp	sp[0x1c],r12
8000373c:	40 0c       	lddsp	r12,sp[0x0]
8000373e:	58 7c       	cp.w	r12,7
80003740:	e0 8b 00 f1 	brhi	80003922 <get_arg+0x266>
80003744:	fe ce a3 80 	sub	lr,pc,-23680
80003748:	fc 0c 03 2f 	ld.w	pc,lr[r12<<0x2]
8000374c:	36 8b       	mov	r11,104
8000374e:	f6 0a 18 00 	cp.b	r10,r11
80003752:	e0 80 00 e8 	breq	80003922 <get_arg+0x266>
80003756:	37 1b       	mov	r11,113
80003758:	f6 0a 18 00 	cp.b	r10,r11
8000375c:	c0 70       	breq	8000376a <get_arg+0xae>
8000375e:	34 cb       	mov	r11,76
80003760:	f6 0a 18 00 	cp.b	r10,r11
80003764:	c0 51       	brne	8000376e <get_arg+0xb2>
80003766:	a3 b4       	sbr	r4,0x3
80003768:	cd d8       	rjmp	80003922 <get_arg+0x266>
8000376a:	a5 b4       	sbr	r4,0x5
8000376c:	cd b8       	rjmp	80003922 <get_arg+0x266>
8000376e:	08 9a       	mov	r10,r4
80003770:	0e 9b       	mov	r11,r7
80003772:	a5 aa       	sbr	r10,0x4
80003774:	17 3c       	ld.ub	r12,r11++
80003776:	a5 b4       	sbr	r4,0x5
80003778:	36 ce       	mov	lr,108
8000377a:	fc 0c 18 00 	cp.b	r12,lr
8000377e:	e0 80 00 d3 	breq	80003924 <get_arg+0x268>
80003782:	14 94       	mov	r4,r10
80003784:	cc f8       	rjmp	80003922 <get_arg+0x266>
80003786:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
8000378a:	36 7c       	mov	r12,103
8000378c:	f8 0a 18 00 	cp.b	r10,r12
80003790:	e0 8b 00 27 	brhi	800037de <get_arg+0x122>
80003794:	36 5b       	mov	r11,101
80003796:	f6 0a 18 00 	cp.b	r10,r11
8000379a:	c4 82       	brcc	8000382a <get_arg+0x16e>
8000379c:	34 fb       	mov	r11,79
8000379e:	f6 0a 18 00 	cp.b	r10,r11
800037a2:	c4 80       	breq	80003832 <get_arg+0x176>
800037a4:	e0 8b 00 0c 	brhi	800037bc <get_arg+0x100>
800037a8:	34 5b       	mov	r11,69
800037aa:	f6 0a 18 00 	cp.b	r10,r11
800037ae:	c3 e0       	breq	8000382a <get_arg+0x16e>
800037b0:	34 7b       	mov	r11,71
800037b2:	f6 0a 18 00 	cp.b	r10,r11
800037b6:	c3 a0       	breq	8000382a <get_arg+0x16e>
800037b8:	34 4b       	mov	r11,68
800037ba:	c0 88       	rjmp	800037ca <get_arg+0x10e>
800037bc:	35 8b       	mov	r11,88
800037be:	f6 0a 18 00 	cp.b	r10,r11
800037c2:	c2 c0       	breq	8000381a <get_arg+0x15e>
800037c4:	e0 8b 00 07 	brhi	800037d2 <get_arg+0x116>
800037c8:	35 5b       	mov	r11,85
800037ca:	f6 0a 18 00 	cp.b	r10,r11
800037ce:	c3 51       	brne	80003838 <get_arg+0x17c>
800037d0:	c3 18       	rjmp	80003832 <get_arg+0x176>
800037d2:	36 3b       	mov	r11,99
800037d4:	f6 0a 18 00 	cp.b	r10,r11
800037d8:	c2 f0       	breq	80003836 <get_arg+0x17a>
800037da:	36 4b       	mov	r11,100
800037dc:	c0 e8       	rjmp	800037f8 <get_arg+0x13c>
800037de:	37 0b       	mov	r11,112
800037e0:	f6 0a 18 00 	cp.b	r10,r11
800037e4:	c2 50       	breq	8000382e <get_arg+0x172>
800037e6:	e0 8b 00 0d 	brhi	80003800 <get_arg+0x144>
800037ea:	36 eb       	mov	r11,110
800037ec:	f6 0a 18 00 	cp.b	r10,r11
800037f0:	c1 f0       	breq	8000382e <get_arg+0x172>
800037f2:	e0 8b 00 14 	brhi	8000381a <get_arg+0x15e>
800037f6:	36 9b       	mov	r11,105
800037f8:	f6 0a 18 00 	cp.b	r10,r11
800037fc:	c1 e1       	brne	80003838 <get_arg+0x17c>
800037fe:	c0 e8       	rjmp	8000381a <get_arg+0x15e>
80003800:	37 5b       	mov	r11,117
80003802:	f6 0a 18 00 	cp.b	r10,r11
80003806:	c0 a0       	breq	8000381a <get_arg+0x15e>
80003808:	37 8b       	mov	r11,120
8000380a:	f6 0a 18 00 	cp.b	r10,r11
8000380e:	c0 60       	breq	8000381a <get_arg+0x15e>
80003810:	37 3b       	mov	r11,115
80003812:	f6 0a 18 00 	cp.b	r10,r11
80003816:	c1 11       	brne	80003838 <get_arg+0x17c>
80003818:	c0 b8       	rjmp	8000382e <get_arg+0x172>
8000381a:	ed b4 00 04 	bld	r4,0x4
8000381e:	c0 a0       	breq	80003832 <get_arg+0x176>
80003820:	ed b4 00 05 	bld	r4,0x5
80003824:	c0 91       	brne	80003836 <get_arg+0x17a>
80003826:	30 20       	mov	r0,2
80003828:	c0 88       	rjmp	80003838 <get_arg+0x17c>
8000382a:	30 40       	mov	r0,4
8000382c:	c0 68       	rjmp	80003838 <get_arg+0x17c>
8000382e:	30 30       	mov	r0,3
80003830:	c0 48       	rjmp	80003838 <get_arg+0x17c>
80003832:	30 10       	mov	r0,1
80003834:	c0 28       	rjmp	80003838 <get_arg+0x17c>
80003836:	30 00       	mov	r0,0
80003838:	40 3b       	lddsp	r11,sp[0xc]
8000383a:	5b fb       	cp.w	r11,-1
8000383c:	c0 40       	breq	80003844 <get_arg+0x188>
8000383e:	e2 0b 09 20 	st.w	r1[r11<<0x2],r0
80003842:	c7 08       	rjmp	80003922 <get_arg+0x266>
80003844:	58 60       	cp.w	r0,6
80003846:	e0 8b 00 6e 	brhi	80003922 <get_arg+0x266>
8000384a:	6c 0a       	ld.w	r10,r6[0x0]
8000384c:	ea cc ff ff 	sub	r12,r5,-1
80003850:	fe ce a4 6c 	sub	lr,pc,-23444
80003854:	fc 00 03 2f 	ld.w	pc,lr[r0<<0x2]
80003858:	f4 cb ff f8 	sub	r11,r10,-8
8000385c:	8d 0b       	st.w	r6[0x0],r11
8000385e:	f4 ea 00 00 	ld.d	r10,r10[0]
80003862:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
80003866:	c0 f8       	rjmp	80003884 <get_arg+0x1c8>
80003868:	f4 cb ff fc 	sub	r11,r10,-4
8000386c:	8d 0b       	st.w	r6[0x0],r11
8000386e:	74 0a       	ld.w	r10,r10[0x0]
80003870:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
80003874:	c0 88       	rjmp	80003884 <get_arg+0x1c8>
80003876:	f4 cb ff f8 	sub	r11,r10,-8
8000387a:	8d 0b       	st.w	r6[0x0],r11
8000387c:	f4 ea 00 00 	ld.d	r10,r10[0]
80003880:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
80003884:	0e 9b       	mov	r11,r7
80003886:	18 95       	mov	r5,r12
80003888:	c4 e8       	rjmp	80003924 <get_arg+0x268>
8000388a:	62 0a       	ld.w	r10,r1[0x0]
8000388c:	5b fa       	cp.w	r10,-1
8000388e:	c0 b1       	brne	800038a4 <get_arg+0x1e8>
80003890:	50 19       	stdsp	sp[0x4],r9
80003892:	50 28       	stdsp	sp[0x8],r8
80003894:	e0 6a 00 80 	mov	r10,128
80003898:	30 0b       	mov	r11,0
8000389a:	02 9c       	mov	r12,r1
8000389c:	e0 a0 1d 78 	rcall	8000738c <memset>
800038a0:	40 28       	lddsp	r8,sp[0x8]
800038a2:	40 19       	lddsp	r9,sp[0x4]
800038a4:	e4 cc 00 01 	sub	r12,r2,1
800038a8:	0e 9b       	mov	r11,r7
800038aa:	50 3c       	stdsp	sp[0xc],r12
800038ac:	f2 0c 0c 49 	max	r9,r9,r12
800038b0:	c3 a8       	rjmp	80003924 <get_arg+0x268>
800038b2:	62 0a       	ld.w	r10,r1[0x0]
800038b4:	5b fa       	cp.w	r10,-1
800038b6:	c0 b1       	brne	800038cc <get_arg+0x210>
800038b8:	50 19       	stdsp	sp[0x4],r9
800038ba:	50 28       	stdsp	sp[0x8],r8
800038bc:	e0 6a 00 80 	mov	r10,128
800038c0:	30 0b       	mov	r11,0
800038c2:	02 9c       	mov	r12,r1
800038c4:	e0 a0 1d 64 	rcall	8000738c <memset>
800038c8:	40 28       	lddsp	r8,sp[0x8]
800038ca:	40 19       	lddsp	r9,sp[0x4]
800038cc:	20 12       	sub	r2,1
800038ce:	30 0a       	mov	r10,0
800038d0:	0e 9b       	mov	r11,r7
800038d2:	e2 02 09 2a 	st.w	r1[r2<<0x2],r10
800038d6:	f2 02 0c 49 	max	r9,r9,r2
800038da:	c2 58       	rjmp	80003924 <get_arg+0x268>
800038dc:	16 97       	mov	r7,r11
800038de:	6c 0a       	ld.w	r10,r6[0x0]
800038e0:	f4 cb ff fc 	sub	r11,r10,-4
800038e4:	8d 0b       	st.w	r6[0x0],r11
800038e6:	74 0a       	ld.w	r10,r10[0x0]
800038e8:	0e 9b       	mov	r11,r7
800038ea:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
800038ee:	2f f5       	sub	r5,-1
800038f0:	c1 a8       	rjmp	80003924 <get_arg+0x268>
800038f2:	f4 c2 00 30 	sub	r2,r10,48
800038f6:	c0 68       	rjmp	80003902 <get_arg+0x246>
800038f8:	e4 02 00 22 	add	r2,r2,r2<<0x2
800038fc:	2f f7       	sub	r7,-1
800038fe:	f4 02 00 12 	add	r2,r10,r2<<0x1
80003902:	0f 8a       	ld.ub	r10,r7[0x0]
80003904:	58 0a       	cp.w	r10,0
80003906:	c0 e0       	breq	80003922 <get_arg+0x266>
80003908:	23 0a       	sub	r10,48
8000390a:	58 9a       	cp.w	r10,9
8000390c:	fe 98 ff f6 	brls	800038f8 <get_arg+0x23c>
80003910:	c0 98       	rjmp	80003922 <get_arg+0x266>
80003912:	2f f7       	sub	r7,-1
80003914:	0f 8a       	ld.ub	r10,r7[0x0]
80003916:	58 0a       	cp.w	r10,0
80003918:	c0 50       	breq	80003922 <get_arg+0x266>
8000391a:	23 0a       	sub	r10,48
8000391c:	58 9a       	cp.w	r10,9
8000391e:	fe 98 ff fa 	brls	80003912 <get_arg+0x256>
80003922:	0e 9b       	mov	r11,r7
80003924:	40 7c       	lddsp	r12,sp[0x1c]
80003926:	30 ba       	mov	r10,11
80003928:	f4 0c 18 00 	cp.b	r12,r10
8000392c:	fe 91 fe f2 	brne	80003710 <get_arg+0x54>
80003930:	40 42       	lddsp	r2,sp[0x10]
80003932:	17 8c       	ld.ub	r12,r11[0x0]
80003934:	0a 32       	cp.w	r2,r5
80003936:	5f 4a       	srge	r10
80003938:	f0 0c 18 00 	cp.b	r12,r8
8000393c:	5f 1c       	srne	r12
8000393e:	f9 ea 00 0a 	and	r10,r12,r10
80003942:	f0 0a 18 00 	cp.b	r10,r8
80003946:	fe 91 fe cf 	brne	800036e4 <get_arg+0x28>
8000394a:	30 08       	mov	r8,0
8000394c:	40 4e       	lddsp	lr,sp[0x10]
8000394e:	17 8a       	ld.ub	r10,r11[0x0]
80003950:	e2 05 00 21 	add	r1,r1,r5<<0x2
80003954:	f0 0a 18 00 	cp.b	r10,r8
80003958:	fc 09 17 10 	movne	r9,lr
8000395c:	e6 05 00 38 	add	r8,r3,r5<<0x3
80003960:	06 9e       	mov	lr,r3
80003962:	c2 a8       	rjmp	800039b6 <get_arg+0x2fa>
80003964:	62 0a       	ld.w	r10,r1[0x0]
80003966:	58 3a       	cp.w	r10,3
80003968:	c1 e0       	breq	800039a4 <get_arg+0x2e8>
8000396a:	e0 89 00 07 	brgt	80003978 <get_arg+0x2bc>
8000396e:	58 1a       	cp.w	r10,1
80003970:	c1 a0       	breq	800039a4 <get_arg+0x2e8>
80003972:	58 2a       	cp.w	r10,2
80003974:	c1 81       	brne	800039a4 <get_arg+0x2e8>
80003976:	c0 58       	rjmp	80003980 <get_arg+0x2c4>
80003978:	58 5a       	cp.w	r10,5
8000397a:	c0 c0       	breq	80003992 <get_arg+0x2d6>
8000397c:	c0 b5       	brlt	80003992 <get_arg+0x2d6>
8000397e:	c1 38       	rjmp	800039a4 <get_arg+0x2e8>
80003980:	6c 0a       	ld.w	r10,r6[0x0]
80003982:	f4 cc ff f8 	sub	r12,r10,-8
80003986:	8d 0c       	st.w	r6[0x0],r12
80003988:	f4 e2 00 00 	ld.d	r2,r10[0]
8000398c:	f0 e3 00 00 	st.d	r8[0],r2
80003990:	c1 08       	rjmp	800039b0 <get_arg+0x2f4>
80003992:	6c 0a       	ld.w	r10,r6[0x0]
80003994:	f4 cc ff f8 	sub	r12,r10,-8
80003998:	8d 0c       	st.w	r6[0x0],r12
8000399a:	f4 e2 00 00 	ld.d	r2,r10[0]
8000399e:	f0 e3 00 00 	st.d	r8[0],r2
800039a2:	c0 78       	rjmp	800039b0 <get_arg+0x2f4>
800039a4:	6c 0a       	ld.w	r10,r6[0x0]
800039a6:	f4 cc ff fc 	sub	r12,r10,-4
800039aa:	8d 0c       	st.w	r6[0x0],r12
800039ac:	74 0a       	ld.w	r10,r10[0x0]
800039ae:	91 0a       	st.w	r8[0x0],r10
800039b0:	2f f5       	sub	r5,-1
800039b2:	2f 88       	sub	r8,-8
800039b4:	2f c1       	sub	r1,-4
800039b6:	12 35       	cp.w	r5,r9
800039b8:	fe 9a ff d6 	brle	80003964 <get_arg+0x2a8>
800039bc:	1c 93       	mov	r3,lr
800039be:	40 52       	lddsp	r2,sp[0x14]
800039c0:	40 6e       	lddsp	lr,sp[0x18]
800039c2:	85 05       	st.w	r2[0x0],r5
800039c4:	9d 0b       	st.w	lr[0x0],r11
800039c6:	40 4b       	lddsp	r11,sp[0x10]
800039c8:	e6 0b 00 3c 	add	r12,r3,r11<<0x3
800039cc:	2f 8d       	sub	sp,-32
800039ce:	d8 32       	popm	r0-r7,pc

800039d0 <__sprint_r>:
800039d0:	d4 21       	pushm	r4-r7,lr
800039d2:	14 97       	mov	r7,r10
800039d4:	74 28       	ld.w	r8,r10[0x8]
800039d6:	58 08       	cp.w	r8,0
800039d8:	c0 41       	brne	800039e0 <__sprint_r+0x10>
800039da:	95 18       	st.w	r10[0x4],r8
800039dc:	10 9c       	mov	r12,r8
800039de:	d8 22       	popm	r4-r7,pc
800039e0:	e0 a0 18 b4 	rcall	80006b48 <__sfvwrite_r>
800039e4:	30 08       	mov	r8,0
800039e6:	8f 18       	st.w	r7[0x4],r8
800039e8:	8f 28       	st.w	r7[0x8],r8
800039ea:	d8 22       	popm	r4-r7,pc

800039ec <_vfprintf_r>:
800039ec:	d4 31       	pushm	r0-r7,lr
800039ee:	fa cd 06 bc 	sub	sp,sp,1724
800039f2:	51 09       	stdsp	sp[0x40],r9
800039f4:	16 91       	mov	r1,r11
800039f6:	14 97       	mov	r7,r10
800039f8:	18 95       	mov	r5,r12
800039fa:	e0 a0 1a 1d 	rcall	80006e34 <_localeconv_r>
800039fe:	78 0c       	ld.w	r12,r12[0x0]
80003a00:	50 cc       	stdsp	sp[0x30],r12
80003a02:	58 05       	cp.w	r5,0
80003a04:	c0 70       	breq	80003a12 <_vfprintf_r+0x26>
80003a06:	6a 68       	ld.w	r8,r5[0x18]
80003a08:	58 08       	cp.w	r8,0
80003a0a:	c0 41       	brne	80003a12 <_vfprintf_r+0x26>
80003a0c:	0a 9c       	mov	r12,r5
80003a0e:	e0 a0 17 3d 	rcall	80006888 <__sinit>
80003a12:	fe c8 a2 6a 	sub	r8,pc,-23958
80003a16:	10 31       	cp.w	r1,r8
80003a18:	c0 31       	brne	80003a1e <_vfprintf_r+0x32>
80003a1a:	6a 01       	ld.w	r1,r5[0x0]
80003a1c:	c0 c8       	rjmp	80003a34 <_vfprintf_r+0x48>
80003a1e:	fe c8 a2 56 	sub	r8,pc,-23978
80003a22:	10 31       	cp.w	r1,r8
80003a24:	c0 31       	brne	80003a2a <_vfprintf_r+0x3e>
80003a26:	6a 11       	ld.w	r1,r5[0x4]
80003a28:	c0 68       	rjmp	80003a34 <_vfprintf_r+0x48>
80003a2a:	fe c8 a2 42 	sub	r8,pc,-23998
80003a2e:	10 31       	cp.w	r1,r8
80003a30:	eb f1 00 02 	ld.weq	r1,r5[0x8]
80003a34:	82 68       	ld.sh	r8,r1[0xc]
80003a36:	ed b8 00 03 	bld	r8,0x3
80003a3a:	c0 41       	brne	80003a42 <_vfprintf_r+0x56>
80003a3c:	62 48       	ld.w	r8,r1[0x10]
80003a3e:	58 08       	cp.w	r8,0
80003a40:	c0 71       	brne	80003a4e <_vfprintf_r+0x62>
80003a42:	02 9b       	mov	r11,r1
80003a44:	0a 9c       	mov	r12,r5
80003a46:	e0 a0 0f 5d 	rcall	80005900 <__swsetup_r>
80003a4a:	e0 81 0f 54 	brne	800058f2 <_vfprintf_r+0x1f06>
80003a4e:	82 68       	ld.sh	r8,r1[0xc]
80003a50:	10 99       	mov	r9,r8
80003a52:	e2 19 00 1a 	andl	r9,0x1a,COH
80003a56:	58 a9       	cp.w	r9,10
80003a58:	c3 c1       	brne	80003ad0 <_vfprintf_r+0xe4>
80003a5a:	82 79       	ld.sh	r9,r1[0xe]
80003a5c:	30 0a       	mov	r10,0
80003a5e:	f4 09 19 00 	cp.h	r9,r10
80003a62:	c3 75       	brlt	80003ad0 <_vfprintf_r+0xe4>
80003a64:	a1 d8       	cbr	r8,0x1
80003a66:	fb 58 05 d0 	st.h	sp[1488],r8
80003a6a:	62 88       	ld.w	r8,r1[0x20]
80003a6c:	fb 48 05 e4 	st.w	sp[1508],r8
80003a70:	62 a8       	ld.w	r8,r1[0x28]
80003a72:	fb 48 05 ec 	st.w	sp[1516],r8
80003a76:	fa c8 ff bc 	sub	r8,sp,-68
80003a7a:	fb 48 05 d4 	st.w	sp[1492],r8
80003a7e:	fb 48 05 c4 	st.w	sp[1476],r8
80003a82:	e0 68 04 00 	mov	r8,1024
80003a86:	fb 48 05 d8 	st.w	sp[1496],r8
80003a8a:	fb 48 05 cc 	st.w	sp[1484],r8
80003a8e:	30 08       	mov	r8,0
80003a90:	fb 59 05 d2 	st.h	sp[1490],r9
80003a94:	0e 9a       	mov	r10,r7
80003a96:	41 09       	lddsp	r9,sp[0x40]
80003a98:	fa c7 fa 3c 	sub	r7,sp,-1476
80003a9c:	fb 48 05 dc 	st.w	sp[1500],r8
80003aa0:	0a 9c       	mov	r12,r5
80003aa2:	0e 9b       	mov	r11,r7
80003aa4:	ca 4f       	rcall	800039ec <_vfprintf_r>
80003aa6:	50 bc       	stdsp	sp[0x2c],r12
80003aa8:	c0 95       	brlt	80003aba <_vfprintf_r+0xce>
80003aaa:	0e 9b       	mov	r11,r7
80003aac:	0a 9c       	mov	r12,r5
80003aae:	e0 a0 16 15 	rcall	800066d8 <_fflush_r>
80003ab2:	40 be       	lddsp	lr,sp[0x2c]
80003ab4:	f9 be 01 ff 	movne	lr,-1
80003ab8:	50 be       	stdsp	sp[0x2c],lr
80003aba:	fb 08 05 d0 	ld.sh	r8,sp[1488]
80003abe:	ed b8 00 06 	bld	r8,0x6
80003ac2:	e0 81 0f 1a 	brne	800058f6 <_vfprintf_r+0x1f0a>
80003ac6:	82 68       	ld.sh	r8,r1[0xc]
80003ac8:	a7 a8       	sbr	r8,0x6
80003aca:	a2 68       	st.h	r1[0xc],r8
80003acc:	e0 8f 0f 15 	bral	800058f6 <_vfprintf_r+0x1f0a>
80003ad0:	30 08       	mov	r8,0
80003ad2:	fb 48 06 b4 	st.w	sp[1716],r8
80003ad6:	fb 48 06 90 	st.w	sp[1680],r8
80003ada:	fb 48 06 8c 	st.w	sp[1676],r8
80003ade:	fb 48 06 b0 	st.w	sp[1712],r8
80003ae2:	30 08       	mov	r8,0
80003ae4:	30 09       	mov	r9,0
80003ae6:	50 a7       	stdsp	sp[0x28],r7
80003ae8:	50 78       	stdsp	sp[0x1c],r8
80003aea:	fa c3 f9 e0 	sub	r3,sp,-1568
80003aee:	3f f8       	mov	r8,-1
80003af0:	50 59       	stdsp	sp[0x14],r9
80003af2:	fb 43 06 88 	st.w	sp[1672],r3
80003af6:	fb 48 05 44 	st.w	sp[1348],r8
80003afa:	12 9c       	mov	r12,r9
80003afc:	50 69       	stdsp	sp[0x18],r9
80003afe:	50 d9       	stdsp	sp[0x34],r9
80003b00:	50 e9       	stdsp	sp[0x38],r9
80003b02:	50 b9       	stdsp	sp[0x2c],r9
80003b04:	12 97       	mov	r7,r9
80003b06:	0a 94       	mov	r4,r5
80003b08:	40 a2       	lddsp	r2,sp[0x28]
80003b0a:	32 5a       	mov	r10,37
80003b0c:	30 08       	mov	r8,0
80003b0e:	c0 28       	rjmp	80003b12 <_vfprintf_r+0x126>
80003b10:	2f f2       	sub	r2,-1
80003b12:	05 89       	ld.ub	r9,r2[0x0]
80003b14:	f0 09 18 00 	cp.b	r9,r8
80003b18:	5f 1b       	srne	r11
80003b1a:	f4 09 18 00 	cp.b	r9,r10
80003b1e:	5f 19       	srne	r9
80003b20:	f3 eb 00 0b 	and	r11,r9,r11
80003b24:	f0 0b 18 00 	cp.b	r11,r8
80003b28:	cf 41       	brne	80003b10 <_vfprintf_r+0x124>
80003b2a:	40 ab       	lddsp	r11,sp[0x28]
80003b2c:	e4 0b 01 06 	sub	r6,r2,r11
80003b30:	c1 e0       	breq	80003b6c <_vfprintf_r+0x180>
80003b32:	fa f8 06 90 	ld.w	r8,sp[1680]
80003b36:	0c 08       	add	r8,r6
80003b38:	87 0b       	st.w	r3[0x0],r11
80003b3a:	fb 48 06 90 	st.w	sp[1680],r8
80003b3e:	87 16       	st.w	r3[0x4],r6
80003b40:	fa f8 06 8c 	ld.w	r8,sp[1676]
80003b44:	2f f8       	sub	r8,-1
80003b46:	fb 48 06 8c 	st.w	sp[1676],r8
80003b4a:	58 78       	cp.w	r8,7
80003b4c:	e0 89 00 04 	brgt	80003b54 <_vfprintf_r+0x168>
80003b50:	2f 83       	sub	r3,-8
80003b52:	c0 a8       	rjmp	80003b66 <_vfprintf_r+0x17a>
80003b54:	fa ca f9 78 	sub	r10,sp,-1672
80003b58:	02 9b       	mov	r11,r1
80003b5a:	08 9c       	mov	r12,r4
80003b5c:	c3 af       	rcall	800039d0 <__sprint_r>
80003b5e:	e0 81 0e c6 	brne	800058ea <_vfprintf_r+0x1efe>
80003b62:	fa c3 f9 e0 	sub	r3,sp,-1568
80003b66:	40 ba       	lddsp	r10,sp[0x2c]
80003b68:	0c 0a       	add	r10,r6
80003b6a:	50 ba       	stdsp	sp[0x2c],r10
80003b6c:	05 89       	ld.ub	r9,r2[0x0]
80003b6e:	30 08       	mov	r8,0
80003b70:	f0 09 18 00 	cp.b	r9,r8
80003b74:	e0 80 0e aa 	breq	800058c8 <_vfprintf_r+0x1edc>
80003b78:	30 09       	mov	r9,0
80003b7a:	fb 68 06 bb 	st.b	sp[1723],r8
80003b7e:	0e 96       	mov	r6,r7
80003b80:	e4 c8 ff ff 	sub	r8,r2,-1
80003b84:	3f fe       	mov	lr,-1
80003b86:	50 93       	stdsp	sp[0x24],r3
80003b88:	50 41       	stdsp	sp[0x10],r1
80003b8a:	0e 93       	mov	r3,r7
80003b8c:	04 91       	mov	r1,r2
80003b8e:	50 89       	stdsp	sp[0x20],r9
80003b90:	50 a8       	stdsp	sp[0x28],r8
80003b92:	50 2e       	stdsp	sp[0x8],lr
80003b94:	50 39       	stdsp	sp[0xc],r9
80003b96:	12 95       	mov	r5,r9
80003b98:	12 90       	mov	r0,r9
80003b9a:	10 97       	mov	r7,r8
80003b9c:	08 92       	mov	r2,r4
80003b9e:	c0 78       	rjmp	80003bac <_vfprintf_r+0x1c0>
80003ba0:	3f fc       	mov	r12,-1
80003ba2:	08 97       	mov	r7,r4
80003ba4:	50 2c       	stdsp	sp[0x8],r12
80003ba6:	c0 38       	rjmp	80003bac <_vfprintf_r+0x1c0>
80003ba8:	30 0b       	mov	r11,0
80003baa:	50 3b       	stdsp	sp[0xc],r11
80003bac:	0f 38       	ld.ub	r8,r7++
80003bae:	c0 28       	rjmp	80003bb2 <_vfprintf_r+0x1c6>
80003bb0:	12 90       	mov	r0,r9
80003bb2:	f0 c9 00 20 	sub	r9,r8,32
80003bb6:	e0 49 00 58 	cp.w	r9,88
80003bba:	e0 8b 0a 30 	brhi	8000501a <_vfprintf_r+0x162e>
80003bbe:	fe ca a7 be 	sub	r10,pc,-22594
80003bc2:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
80003bc6:	50 a7       	stdsp	sp[0x28],r7
80003bc8:	50 80       	stdsp	sp[0x20],r0
80003bca:	0c 97       	mov	r7,r6
80003bcc:	04 94       	mov	r4,r2
80003bce:	06 96       	mov	r6,r3
80003bd0:	02 92       	mov	r2,r1
80003bd2:	fe c9 a5 96 	sub	r9,pc,-23146
80003bd6:	40 93       	lddsp	r3,sp[0x24]
80003bd8:	10 90       	mov	r0,r8
80003bda:	40 41       	lddsp	r1,sp[0x10]
80003bdc:	50 d9       	stdsp	sp[0x34],r9
80003bde:	e0 8f 08 8e 	bral	80004cfa <_vfprintf_r+0x130e>
80003be2:	30 08       	mov	r8,0
80003be4:	fb 39 06 bb 	ld.ub	r9,sp[1723]
80003be8:	f0 09 18 00 	cp.b	r9,r8
80003bec:	ce 01       	brne	80003bac <_vfprintf_r+0x1c0>
80003bee:	32 08       	mov	r8,32
80003bf0:	c6 e8       	rjmp	80003ccc <_vfprintf_r+0x2e0>
80003bf2:	a1 a5       	sbr	r5,0x0
80003bf4:	cd cb       	rjmp	80003bac <_vfprintf_r+0x1c0>
80003bf6:	0f 89       	ld.ub	r9,r7[0x0]
80003bf8:	f2 c8 00 30 	sub	r8,r9,48
80003bfc:	58 98       	cp.w	r8,9
80003bfe:	e0 8b 00 1d 	brhi	80003c38 <_vfprintf_r+0x24c>
80003c02:	ee c8 ff ff 	sub	r8,r7,-1
80003c06:	30 0b       	mov	r11,0
80003c08:	23 09       	sub	r9,48
80003c0a:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80003c0e:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
80003c12:	11 39       	ld.ub	r9,r8++
80003c14:	f2 ca 00 30 	sub	r10,r9,48
80003c18:	58 9a       	cp.w	r10,9
80003c1a:	fe 98 ff f7 	brls	80003c08 <_vfprintf_r+0x21c>
80003c1e:	e0 49 00 24 	cp.w	r9,36
80003c22:	cc 31       	brne	80003ba8 <_vfprintf_r+0x1bc>
80003c24:	e0 4b 00 20 	cp.w	r11,32
80003c28:	e0 89 0e 60 	brgt	800058e8 <_vfprintf_r+0x1efc>
80003c2c:	20 1b       	sub	r11,1
80003c2e:	fa f9 06 b4 	ld.w	r9,sp[1716]
80003c32:	12 3b       	cp.w	r11,r9
80003c34:	c0 95       	brlt	80003c46 <_vfprintf_r+0x25a>
80003c36:	c1 08       	rjmp	80003c56 <_vfprintf_r+0x26a>
80003c38:	fa f9 06 b4 	ld.w	r9,sp[1716]
80003c3c:	ec ca ff ff 	sub	r10,r6,-1
80003c40:	12 36       	cp.w	r6,r9
80003c42:	c1 f5       	brlt	80003c80 <_vfprintf_r+0x294>
80003c44:	c2 68       	rjmp	80003c90 <_vfprintf_r+0x2a4>
80003c46:	fa ce f9 44 	sub	lr,sp,-1724
80003c4a:	10 97       	mov	r7,r8
80003c4c:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
80003c50:	f6 f0 fd 88 	ld.w	r0,r11[-632]
80003c54:	c3 58       	rjmp	80003cbe <_vfprintf_r+0x2d2>
80003c56:	10 97       	mov	r7,r8
80003c58:	fa c8 f9 50 	sub	r8,sp,-1712
80003c5c:	1a d8       	st.w	--sp,r8
80003c5e:	fa c8 fa b8 	sub	r8,sp,-1352
80003c62:	1a d8       	st.w	--sp,r8
80003c64:	fa c8 fb b4 	sub	r8,sp,-1100
80003c68:	02 9a       	mov	r10,r1
80003c6a:	1a d8       	st.w	--sp,r8
80003c6c:	04 9c       	mov	r12,r2
80003c6e:	fa c8 f9 40 	sub	r8,sp,-1728
80003c72:	fa c9 ff b4 	sub	r9,sp,-76
80003c76:	fe b0 fd 23 	rcall	800036bc <get_arg>
80003c7a:	2f dd       	sub	sp,-12
80003c7c:	78 00       	ld.w	r0,r12[0x0]
80003c7e:	c2 08       	rjmp	80003cbe <_vfprintf_r+0x2d2>
80003c80:	fa cc f9 44 	sub	r12,sp,-1724
80003c84:	14 96       	mov	r6,r10
80003c86:	f8 03 00 38 	add	r8,r12,r3<<0x3
80003c8a:	f0 f0 fd 88 	ld.w	r0,r8[-632]
80003c8e:	c1 88       	rjmp	80003cbe <_vfprintf_r+0x2d2>
80003c90:	41 08       	lddsp	r8,sp[0x40]
80003c92:	59 f9       	cp.w	r9,31
80003c94:	e0 89 00 11 	brgt	80003cb6 <_vfprintf_r+0x2ca>
80003c98:	f0 cb ff fc 	sub	r11,r8,-4
80003c9c:	51 0b       	stdsp	sp[0x40],r11
80003c9e:	70 00       	ld.w	r0,r8[0x0]
80003ca0:	fa cb f9 44 	sub	r11,sp,-1724
80003ca4:	f6 09 00 38 	add	r8,r11,r9<<0x3
80003ca8:	f1 40 fd 88 	st.w	r8[-632],r0
80003cac:	2f f9       	sub	r9,-1
80003cae:	14 96       	mov	r6,r10
80003cb0:	fb 49 06 b4 	st.w	sp[1716],r9
80003cb4:	c0 58       	rjmp	80003cbe <_vfprintf_r+0x2d2>
80003cb6:	70 00       	ld.w	r0,r8[0x0]
80003cb8:	14 96       	mov	r6,r10
80003cba:	2f c8       	sub	r8,-4
80003cbc:	51 08       	stdsp	sp[0x40],r8
80003cbe:	58 00       	cp.w	r0,0
80003cc0:	fe 94 ff 76 	brge	80003bac <_vfprintf_r+0x1c0>
80003cc4:	5c 30       	neg	r0
80003cc6:	a3 a5       	sbr	r5,0x2
80003cc8:	c7 2b       	rjmp	80003bac <_vfprintf_r+0x1c0>
80003cca:	32 b8       	mov	r8,43
80003ccc:	fb 68 06 bb 	st.b	sp[1723],r8
80003cd0:	c6 eb       	rjmp	80003bac <_vfprintf_r+0x1c0>
80003cd2:	0f 38       	ld.ub	r8,r7++
80003cd4:	e0 48 00 2a 	cp.w	r8,42
80003cd8:	c0 30       	breq	80003cde <_vfprintf_r+0x2f2>
80003cda:	30 09       	mov	r9,0
80003cdc:	c7 98       	rjmp	80003dce <_vfprintf_r+0x3e2>
80003cde:	0f 88       	ld.ub	r8,r7[0x0]
80003ce0:	f0 c9 00 30 	sub	r9,r8,48
80003ce4:	58 99       	cp.w	r9,9
80003ce6:	e0 8b 00 1f 	brhi	80003d24 <_vfprintf_r+0x338>
80003cea:	ee c4 ff ff 	sub	r4,r7,-1
80003cee:	30 0b       	mov	r11,0
80003cf0:	23 08       	sub	r8,48
80003cf2:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80003cf6:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
80003cfa:	09 38       	ld.ub	r8,r4++
80003cfc:	f0 c9 00 30 	sub	r9,r8,48
80003d00:	58 99       	cp.w	r9,9
80003d02:	fe 98 ff f7 	brls	80003cf0 <_vfprintf_r+0x304>
80003d06:	e0 48 00 24 	cp.w	r8,36
80003d0a:	fe 91 ff 4f 	brne	80003ba8 <_vfprintf_r+0x1bc>
80003d0e:	e0 4b 00 20 	cp.w	r11,32
80003d12:	e0 89 0d eb 	brgt	800058e8 <_vfprintf_r+0x1efc>
80003d16:	20 1b       	sub	r11,1
80003d18:	fa f8 06 b4 	ld.w	r8,sp[1716]
80003d1c:	10 3b       	cp.w	r11,r8
80003d1e:	c0 a5       	brlt	80003d32 <_vfprintf_r+0x346>
80003d20:	c1 18       	rjmp	80003d42 <_vfprintf_r+0x356>
80003d22:	d7 03       	nop
80003d24:	fa fa 06 b4 	ld.w	r10,sp[1716]
80003d28:	ec c9 ff ff 	sub	r9,r6,-1
80003d2c:	14 36       	cp.w	r6,r10
80003d2e:	c1 f5       	brlt	80003d6c <_vfprintf_r+0x380>
80003d30:	c2 88       	rjmp	80003d80 <_vfprintf_r+0x394>
80003d32:	fa ca f9 44 	sub	r10,sp,-1724
80003d36:	f4 0b 00 3b 	add	r11,r10,r11<<0x3
80003d3a:	f6 fb fd 88 	ld.w	r11,r11[-632]
80003d3e:	50 2b       	stdsp	sp[0x8],r11
80003d40:	c3 c8       	rjmp	80003db8 <_vfprintf_r+0x3cc>
80003d42:	fa c8 f9 50 	sub	r8,sp,-1712
80003d46:	1a d8       	st.w	--sp,r8
80003d48:	fa c8 fa b8 	sub	r8,sp,-1352
80003d4c:	1a d8       	st.w	--sp,r8
80003d4e:	fa c8 fb b4 	sub	r8,sp,-1100
80003d52:	02 9a       	mov	r10,r1
80003d54:	1a d8       	st.w	--sp,r8
80003d56:	04 9c       	mov	r12,r2
80003d58:	fa c8 f9 40 	sub	r8,sp,-1728
80003d5c:	fa c9 ff b4 	sub	r9,sp,-76
80003d60:	fe b0 fc ae 	rcall	800036bc <get_arg>
80003d64:	2f dd       	sub	sp,-12
80003d66:	78 0c       	ld.w	r12,r12[0x0]
80003d68:	50 2c       	stdsp	sp[0x8],r12
80003d6a:	c2 78       	rjmp	80003db8 <_vfprintf_r+0x3cc>
80003d6c:	12 96       	mov	r6,r9
80003d6e:	0e 94       	mov	r4,r7
80003d70:	fa c9 f9 44 	sub	r9,sp,-1724
80003d74:	f2 03 00 38 	add	r8,r9,r3<<0x3
80003d78:	f0 f8 fd 88 	ld.w	r8,r8[-632]
80003d7c:	50 28       	stdsp	sp[0x8],r8
80003d7e:	c1 d8       	rjmp	80003db8 <_vfprintf_r+0x3cc>
80003d80:	41 08       	lddsp	r8,sp[0x40]
80003d82:	59 fa       	cp.w	r10,31
80003d84:	e0 89 00 14 	brgt	80003dac <_vfprintf_r+0x3c0>
80003d88:	f0 cb ff fc 	sub	r11,r8,-4
80003d8c:	70 08       	ld.w	r8,r8[0x0]
80003d8e:	51 0b       	stdsp	sp[0x40],r11
80003d90:	50 28       	stdsp	sp[0x8],r8
80003d92:	fa c6 f9 44 	sub	r6,sp,-1724
80003d96:	40 2e       	lddsp	lr,sp[0x8]
80003d98:	ec 0a 00 38 	add	r8,r6,r10<<0x3
80003d9c:	f1 4e fd 88 	st.w	r8[-632],lr
80003da0:	2f fa       	sub	r10,-1
80003da2:	0e 94       	mov	r4,r7
80003da4:	fb 4a 06 b4 	st.w	sp[1716],r10
80003da8:	12 96       	mov	r6,r9
80003daa:	c0 78       	rjmp	80003db8 <_vfprintf_r+0x3cc>
80003dac:	70 0c       	ld.w	r12,r8[0x0]
80003dae:	0e 94       	mov	r4,r7
80003db0:	2f c8       	sub	r8,-4
80003db2:	50 2c       	stdsp	sp[0x8],r12
80003db4:	12 96       	mov	r6,r9
80003db6:	51 08       	stdsp	sp[0x40],r8
80003db8:	40 2b       	lddsp	r11,sp[0x8]
80003dba:	58 0b       	cp.w	r11,0
80003dbc:	fe 95 fe f2 	brlt	80003ba0 <_vfprintf_r+0x1b4>
80003dc0:	08 97       	mov	r7,r4
80003dc2:	cf 5a       	rjmp	80003bac <_vfprintf_r+0x1c0>
80003dc4:	f2 09 00 29 	add	r9,r9,r9<<0x2
80003dc8:	0f 38       	ld.ub	r8,r7++
80003dca:	f4 09 00 19 	add	r9,r10,r9<<0x1
80003dce:	f0 ca 00 30 	sub	r10,r8,48
80003dd2:	58 9a       	cp.w	r10,9
80003dd4:	fe 98 ff f8 	brls	80003dc4 <_vfprintf_r+0x3d8>
80003dd8:	3f fa       	mov	r10,-1
80003dda:	f2 0a 0c 49 	max	r9,r9,r10
80003dde:	50 29       	stdsp	sp[0x8],r9
80003de0:	ce 9a       	rjmp	80003bb2 <_vfprintf_r+0x1c6>
80003de2:	a7 b5       	sbr	r5,0x7
80003de4:	ce 4a       	rjmp	80003bac <_vfprintf_r+0x1c0>
80003de6:	30 09       	mov	r9,0
80003de8:	23 08       	sub	r8,48
80003dea:	f2 09 00 29 	add	r9,r9,r9<<0x2
80003dee:	f0 09 00 19 	add	r9,r8,r9<<0x1
80003df2:	0f 38       	ld.ub	r8,r7++
80003df4:	f0 ca 00 30 	sub	r10,r8,48
80003df8:	58 9a       	cp.w	r10,9
80003dfa:	fe 98 ff f7 	brls	80003de8 <_vfprintf_r+0x3fc>
80003dfe:	e0 48 00 24 	cp.w	r8,36
80003e02:	fe 91 fe d7 	brne	80003bb0 <_vfprintf_r+0x1c4>
80003e06:	e0 49 00 20 	cp.w	r9,32
80003e0a:	e0 89 0d 6f 	brgt	800058e8 <_vfprintf_r+0x1efc>
80003e0e:	f2 c3 00 01 	sub	r3,r9,1
80003e12:	30 19       	mov	r9,1
80003e14:	50 39       	stdsp	sp[0xc],r9
80003e16:	cc ba       	rjmp	80003bac <_vfprintf_r+0x1c0>
80003e18:	a3 b5       	sbr	r5,0x3
80003e1a:	cc 9a       	rjmp	80003bac <_vfprintf_r+0x1c0>
80003e1c:	a7 a5       	sbr	r5,0x6
80003e1e:	cc 7a       	rjmp	80003bac <_vfprintf_r+0x1c0>
80003e20:	0a 98       	mov	r8,r5
80003e22:	a5 b5       	sbr	r5,0x5
80003e24:	a5 a8       	sbr	r8,0x4
80003e26:	0f 89       	ld.ub	r9,r7[0x0]
80003e28:	36 ce       	mov	lr,108
80003e2a:	fc 09 18 00 	cp.b	r9,lr
80003e2e:	f7 b7 00 ff 	subeq	r7,-1
80003e32:	f0 05 17 10 	movne	r5,r8
80003e36:	cb ba       	rjmp	80003bac <_vfprintf_r+0x1c0>
80003e38:	a5 b5       	sbr	r5,0x5
80003e3a:	cb 9a       	rjmp	80003bac <_vfprintf_r+0x1c0>
80003e3c:	50 a7       	stdsp	sp[0x28],r7
80003e3e:	50 80       	stdsp	sp[0x20],r0
80003e40:	0c 97       	mov	r7,r6
80003e42:	10 90       	mov	r0,r8
80003e44:	06 96       	mov	r6,r3
80003e46:	04 94       	mov	r4,r2
80003e48:	40 93       	lddsp	r3,sp[0x24]
80003e4a:	02 92       	mov	r2,r1
80003e4c:	0e 99       	mov	r9,r7
80003e4e:	40 41       	lddsp	r1,sp[0x10]
80003e50:	fa f8 06 b4 	ld.w	r8,sp[1716]
80003e54:	40 3c       	lddsp	r12,sp[0xc]
80003e56:	58 0c       	cp.w	r12,0
80003e58:	c1 d0       	breq	80003e92 <_vfprintf_r+0x4a6>
80003e5a:	10 36       	cp.w	r6,r8
80003e5c:	c0 64       	brge	80003e68 <_vfprintf_r+0x47c>
80003e5e:	fa cb f9 44 	sub	r11,sp,-1724
80003e62:	f6 06 00 36 	add	r6,r11,r6<<0x3
80003e66:	c1 d8       	rjmp	80003ea0 <_vfprintf_r+0x4b4>
80003e68:	fa c8 f9 50 	sub	r8,sp,-1712
80003e6c:	1a d8       	st.w	--sp,r8
80003e6e:	fa c8 fa b8 	sub	r8,sp,-1352
80003e72:	1a d8       	st.w	--sp,r8
80003e74:	fa c8 fb b4 	sub	r8,sp,-1100
80003e78:	1a d8       	st.w	--sp,r8
80003e7a:	fa c8 f9 40 	sub	r8,sp,-1728
80003e7e:	fa c9 ff b4 	sub	r9,sp,-76
80003e82:	04 9a       	mov	r10,r2
80003e84:	0c 9b       	mov	r11,r6
80003e86:	08 9c       	mov	r12,r4
80003e88:	fe b0 fc 1a 	rcall	800036bc <get_arg>
80003e8c:	2f dd       	sub	sp,-12
80003e8e:	19 b8       	ld.ub	r8,r12[0x3]
80003e90:	c2 28       	rjmp	80003ed4 <_vfprintf_r+0x4e8>
80003e92:	2f f7       	sub	r7,-1
80003e94:	10 39       	cp.w	r9,r8
80003e96:	c0 84       	brge	80003ea6 <_vfprintf_r+0x4ba>
80003e98:	fa ca f9 44 	sub	r10,sp,-1724
80003e9c:	f4 06 00 36 	add	r6,r10,r6<<0x3
80003ea0:	ed 38 fd 8b 	ld.ub	r8,r6[-629]
80003ea4:	c1 88       	rjmp	80003ed4 <_vfprintf_r+0x4e8>
80003ea6:	41 09       	lddsp	r9,sp[0x40]
80003ea8:	59 f8       	cp.w	r8,31
80003eaa:	e0 89 00 12 	brgt	80003ece <_vfprintf_r+0x4e2>
80003eae:	f2 ca ff fc 	sub	r10,r9,-4
80003eb2:	51 0a       	stdsp	sp[0x40],r10
80003eb4:	72 09       	ld.w	r9,r9[0x0]
80003eb6:	fa c6 f9 44 	sub	r6,sp,-1724
80003eba:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80003ebe:	2f f8       	sub	r8,-1
80003ec0:	f5 49 fd 88 	st.w	r10[-632],r9
80003ec4:	fb 48 06 b4 	st.w	sp[1716],r8
80003ec8:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
80003ecc:	c0 48       	rjmp	80003ed4 <_vfprintf_r+0x4e8>
80003ece:	13 b8       	ld.ub	r8,r9[0x3]
80003ed0:	2f c9       	sub	r9,-4
80003ed2:	51 09       	stdsp	sp[0x40],r9
80003ed4:	fb 68 06 60 	st.b	sp[1632],r8
80003ed8:	30 0e       	mov	lr,0
80003eda:	30 08       	mov	r8,0
80003edc:	30 12       	mov	r2,1
80003ede:	fb 68 06 bb 	st.b	sp[1723],r8
80003ee2:	50 2e       	stdsp	sp[0x8],lr
80003ee4:	e0 8f 08 ad 	bral	8000503e <_vfprintf_r+0x1652>
80003ee8:	50 a7       	stdsp	sp[0x28],r7
80003eea:	50 80       	stdsp	sp[0x20],r0
80003eec:	0c 97       	mov	r7,r6
80003eee:	04 94       	mov	r4,r2
80003ef0:	06 96       	mov	r6,r3
80003ef2:	02 92       	mov	r2,r1
80003ef4:	40 93       	lddsp	r3,sp[0x24]
80003ef6:	10 90       	mov	r0,r8
80003ef8:	40 41       	lddsp	r1,sp[0x10]
80003efa:	a5 a5       	sbr	r5,0x4
80003efc:	c0 a8       	rjmp	80003f10 <_vfprintf_r+0x524>
80003efe:	50 a7       	stdsp	sp[0x28],r7
80003f00:	50 80       	stdsp	sp[0x20],r0
80003f02:	0c 97       	mov	r7,r6
80003f04:	04 94       	mov	r4,r2
80003f06:	06 96       	mov	r6,r3
80003f08:	02 92       	mov	r2,r1
80003f0a:	40 93       	lddsp	r3,sp[0x24]
80003f0c:	10 90       	mov	r0,r8
80003f0e:	40 41       	lddsp	r1,sp[0x10]
80003f10:	ed b5 00 05 	bld	r5,0x5
80003f14:	c5 11       	brne	80003fb6 <_vfprintf_r+0x5ca>
80003f16:	fa f8 06 b4 	ld.w	r8,sp[1716]
80003f1a:	40 3c       	lddsp	r12,sp[0xc]
80003f1c:	58 0c       	cp.w	r12,0
80003f1e:	c1 e0       	breq	80003f5a <_vfprintf_r+0x56e>
80003f20:	10 36       	cp.w	r6,r8
80003f22:	c0 64       	brge	80003f2e <_vfprintf_r+0x542>
80003f24:	fa cb f9 44 	sub	r11,sp,-1724
80003f28:	f6 06 00 36 	add	r6,r11,r6<<0x3
80003f2c:	c2 08       	rjmp	80003f6c <_vfprintf_r+0x580>
80003f2e:	fa c8 f9 50 	sub	r8,sp,-1712
80003f32:	1a d8       	st.w	--sp,r8
80003f34:	fa c8 fa b8 	sub	r8,sp,-1352
80003f38:	0c 9b       	mov	r11,r6
80003f3a:	1a d8       	st.w	--sp,r8
80003f3c:	fa c8 fb b4 	sub	r8,sp,-1100
80003f40:	1a d8       	st.w	--sp,r8
80003f42:	fa c9 ff b4 	sub	r9,sp,-76
80003f46:	fa c8 f9 40 	sub	r8,sp,-1728
80003f4a:	04 9a       	mov	r10,r2
80003f4c:	08 9c       	mov	r12,r4
80003f4e:	fe b0 fb b7 	rcall	800036bc <get_arg>
80003f52:	2f dd       	sub	sp,-12
80003f54:	78 1b       	ld.w	r11,r12[0x4]
80003f56:	78 09       	ld.w	r9,r12[0x0]
80003f58:	c2 b8       	rjmp	80003fae <_vfprintf_r+0x5c2>
80003f5a:	ee ca ff ff 	sub	r10,r7,-1
80003f5e:	10 37       	cp.w	r7,r8
80003f60:	c0 b4       	brge	80003f76 <_vfprintf_r+0x58a>
80003f62:	fa c9 f9 44 	sub	r9,sp,-1724
80003f66:	14 97       	mov	r7,r10
80003f68:	f2 06 00 36 	add	r6,r9,r6<<0x3
80003f6c:	ec fb fd 8c 	ld.w	r11,r6[-628]
80003f70:	ec f9 fd 88 	ld.w	r9,r6[-632]
80003f74:	c1 d8       	rjmp	80003fae <_vfprintf_r+0x5c2>
80003f76:	41 09       	lddsp	r9,sp[0x40]
80003f78:	59 f8       	cp.w	r8,31
80003f7a:	e0 89 00 14 	brgt	80003fa2 <_vfprintf_r+0x5b6>
80003f7e:	f2 cb ff f8 	sub	r11,r9,-8
80003f82:	51 0b       	stdsp	sp[0x40],r11
80003f84:	fa c6 f9 44 	sub	r6,sp,-1724
80003f88:	72 1b       	ld.w	r11,r9[0x4]
80003f8a:	ec 08 00 3c 	add	r12,r6,r8<<0x3
80003f8e:	72 09       	ld.w	r9,r9[0x0]
80003f90:	f9 4b fd 8c 	st.w	r12[-628],r11
80003f94:	f9 49 fd 88 	st.w	r12[-632],r9
80003f98:	2f f8       	sub	r8,-1
80003f9a:	14 97       	mov	r7,r10
80003f9c:	fb 48 06 b4 	st.w	sp[1716],r8
80003fa0:	c0 78       	rjmp	80003fae <_vfprintf_r+0x5c2>
80003fa2:	f2 c8 ff f8 	sub	r8,r9,-8
80003fa6:	72 1b       	ld.w	r11,r9[0x4]
80003fa8:	14 97       	mov	r7,r10
80003faa:	51 08       	stdsp	sp[0x40],r8
80003fac:	72 09       	ld.w	r9,r9[0x0]
80003fae:	16 98       	mov	r8,r11
80003fb0:	fa e9 00 00 	st.d	sp[0],r8
80003fb4:	ca e8       	rjmp	80004110 <_vfprintf_r+0x724>
80003fb6:	ed b5 00 04 	bld	r5,0x4
80003fba:	c1 71       	brne	80003fe8 <_vfprintf_r+0x5fc>
80003fbc:	fa f8 06 b4 	ld.w	r8,sp[1716]
80003fc0:	40 3e       	lddsp	lr,sp[0xc]
80003fc2:	58 0e       	cp.w	lr,0
80003fc4:	c0 80       	breq	80003fd4 <_vfprintf_r+0x5e8>
80003fc6:	10 36       	cp.w	r6,r8
80003fc8:	c6 94       	brge	8000409a <_vfprintf_r+0x6ae>
80003fca:	fa cc f9 44 	sub	r12,sp,-1724
80003fce:	f8 06 00 36 	add	r6,r12,r6<<0x3
80003fd2:	c8 28       	rjmp	800040d6 <_vfprintf_r+0x6ea>
80003fd4:	ee ca ff ff 	sub	r10,r7,-1
80003fd8:	10 37       	cp.w	r7,r8
80003fda:	e0 84 00 81 	brge	800040dc <_vfprintf_r+0x6f0>
80003fde:	fa cb f9 44 	sub	r11,sp,-1724
80003fe2:	f6 06 00 36 	add	r6,r11,r6<<0x3
80003fe6:	c7 78       	rjmp	800040d4 <_vfprintf_r+0x6e8>
80003fe8:	ed b5 00 06 	bld	r5,0x6
80003fec:	c4 b1       	brne	80004082 <_vfprintf_r+0x696>
80003fee:	fa f8 06 b4 	ld.w	r8,sp[1716]
80003ff2:	40 3c       	lddsp	r12,sp[0xc]
80003ff4:	58 0c       	cp.w	r12,0
80003ff6:	c1 d0       	breq	80004030 <_vfprintf_r+0x644>
80003ff8:	10 36       	cp.w	r6,r8
80003ffa:	c0 64       	brge	80004006 <_vfprintf_r+0x61a>
80003ffc:	fa cb f9 44 	sub	r11,sp,-1724
80004000:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004004:	c1 f8       	rjmp	80004042 <_vfprintf_r+0x656>
80004006:	fa c8 f9 50 	sub	r8,sp,-1712
8000400a:	1a d8       	st.w	--sp,r8
8000400c:	fa c8 fa b8 	sub	r8,sp,-1352
80004010:	1a d8       	st.w	--sp,r8
80004012:	fa c8 fb b4 	sub	r8,sp,-1100
80004016:	1a d8       	st.w	--sp,r8
80004018:	fa c8 f9 40 	sub	r8,sp,-1728
8000401c:	fa c9 ff b4 	sub	r9,sp,-76
80004020:	04 9a       	mov	r10,r2
80004022:	0c 9b       	mov	r11,r6
80004024:	08 9c       	mov	r12,r4
80004026:	fe b0 fb 4b 	rcall	800036bc <get_arg>
8000402a:	2f dd       	sub	sp,-12
8000402c:	98 18       	ld.sh	r8,r12[0x2]
8000402e:	c2 68       	rjmp	8000407a <_vfprintf_r+0x68e>
80004030:	ee ca ff ff 	sub	r10,r7,-1
80004034:	10 37       	cp.w	r7,r8
80004036:	c0 94       	brge	80004048 <_vfprintf_r+0x65c>
80004038:	fa c9 f9 44 	sub	r9,sp,-1724
8000403c:	14 97       	mov	r7,r10
8000403e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004042:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80004046:	c1 a8       	rjmp	8000407a <_vfprintf_r+0x68e>
80004048:	41 09       	lddsp	r9,sp[0x40]
8000404a:	59 f8       	cp.w	r8,31
8000404c:	e0 89 00 13 	brgt	80004072 <_vfprintf_r+0x686>
80004050:	f2 cb ff fc 	sub	r11,r9,-4
80004054:	51 0b       	stdsp	sp[0x40],r11
80004056:	72 09       	ld.w	r9,r9[0x0]
80004058:	fa c6 f9 44 	sub	r6,sp,-1724
8000405c:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80004060:	2f f8       	sub	r8,-1
80004062:	f7 49 fd 88 	st.w	r11[-632],r9
80004066:	fb 48 06 b4 	st.w	sp[1716],r8
8000406a:	14 97       	mov	r7,r10
8000406c:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80004070:	c0 58       	rjmp	8000407a <_vfprintf_r+0x68e>
80004072:	92 18       	ld.sh	r8,r9[0x2]
80004074:	14 97       	mov	r7,r10
80004076:	2f c9       	sub	r9,-4
80004078:	51 09       	stdsp	sp[0x40],r9
8000407a:	50 18       	stdsp	sp[0x4],r8
8000407c:	bf 58       	asr	r8,0x1f
8000407e:	50 08       	stdsp	sp[0x0],r8
80004080:	c4 88       	rjmp	80004110 <_vfprintf_r+0x724>
80004082:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004086:	40 3c       	lddsp	r12,sp[0xc]
80004088:	58 0c       	cp.w	r12,0
8000408a:	c1 d0       	breq	800040c4 <_vfprintf_r+0x6d8>
8000408c:	10 36       	cp.w	r6,r8
8000408e:	c0 64       	brge	8000409a <_vfprintf_r+0x6ae>
80004090:	fa cb f9 44 	sub	r11,sp,-1724
80004094:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004098:	c1 f8       	rjmp	800040d6 <_vfprintf_r+0x6ea>
8000409a:	fa c8 f9 50 	sub	r8,sp,-1712
8000409e:	1a d8       	st.w	--sp,r8
800040a0:	fa c8 fa b8 	sub	r8,sp,-1352
800040a4:	0c 9b       	mov	r11,r6
800040a6:	1a d8       	st.w	--sp,r8
800040a8:	fa c8 fb b4 	sub	r8,sp,-1100
800040ac:	04 9a       	mov	r10,r2
800040ae:	1a d8       	st.w	--sp,r8
800040b0:	08 9c       	mov	r12,r4
800040b2:	fa c8 f9 40 	sub	r8,sp,-1728
800040b6:	fa c9 ff b4 	sub	r9,sp,-76
800040ba:	fe b0 fb 01 	rcall	800036bc <get_arg>
800040be:	2f dd       	sub	sp,-12
800040c0:	78 0b       	ld.w	r11,r12[0x0]
800040c2:	c2 48       	rjmp	8000410a <_vfprintf_r+0x71e>
800040c4:	ee ca ff ff 	sub	r10,r7,-1
800040c8:	10 37       	cp.w	r7,r8
800040ca:	c0 94       	brge	800040dc <_vfprintf_r+0x6f0>
800040cc:	fa c9 f9 44 	sub	r9,sp,-1724
800040d0:	f2 06 00 36 	add	r6,r9,r6<<0x3
800040d4:	14 97       	mov	r7,r10
800040d6:	ec fb fd 88 	ld.w	r11,r6[-632]
800040da:	c1 88       	rjmp	8000410a <_vfprintf_r+0x71e>
800040dc:	41 09       	lddsp	r9,sp[0x40]
800040de:	59 f8       	cp.w	r8,31
800040e0:	e0 89 00 11 	brgt	80004102 <_vfprintf_r+0x716>
800040e4:	f2 cb ff fc 	sub	r11,r9,-4
800040e8:	51 0b       	stdsp	sp[0x40],r11
800040ea:	fa c6 f9 44 	sub	r6,sp,-1724
800040ee:	72 0b       	ld.w	r11,r9[0x0]
800040f0:	ec 08 00 39 	add	r9,r6,r8<<0x3
800040f4:	f3 4b fd 88 	st.w	r9[-632],r11
800040f8:	2f f8       	sub	r8,-1
800040fa:	14 97       	mov	r7,r10
800040fc:	fb 48 06 b4 	st.w	sp[1716],r8
80004100:	c0 58       	rjmp	8000410a <_vfprintf_r+0x71e>
80004102:	72 0b       	ld.w	r11,r9[0x0]
80004104:	14 97       	mov	r7,r10
80004106:	2f c9       	sub	r9,-4
80004108:	51 09       	stdsp	sp[0x40],r9
8000410a:	50 1b       	stdsp	sp[0x4],r11
8000410c:	bf 5b       	asr	r11,0x1f
8000410e:	50 0b       	stdsp	sp[0x0],r11
80004110:	fa ea 00 00 	ld.d	r10,sp[0]
80004114:	58 0a       	cp.w	r10,0
80004116:	5c 2b       	cpc	r11
80004118:	c0 e4       	brge	80004134 <_vfprintf_r+0x748>
8000411a:	30 08       	mov	r8,0
8000411c:	fa ea 00 00 	ld.d	r10,sp[0]
80004120:	30 09       	mov	r9,0
80004122:	f0 0a 01 0a 	sub	r10,r8,r10
80004126:	f2 0b 01 4b 	sbc	r11,r9,r11
8000412a:	32 d8       	mov	r8,45
8000412c:	fa eb 00 00 	st.d	sp[0],r10
80004130:	fb 68 06 bb 	st.b	sp[1723],r8
80004134:	30 18       	mov	r8,1
80004136:	e0 8f 06 fa 	bral	80004f2a <_vfprintf_r+0x153e>
8000413a:	50 a7       	stdsp	sp[0x28],r7
8000413c:	50 80       	stdsp	sp[0x20],r0
8000413e:	0c 97       	mov	r7,r6
80004140:	04 94       	mov	r4,r2
80004142:	06 96       	mov	r6,r3
80004144:	02 92       	mov	r2,r1
80004146:	40 93       	lddsp	r3,sp[0x24]
80004148:	10 90       	mov	r0,r8
8000414a:	40 41       	lddsp	r1,sp[0x10]
8000414c:	0e 99       	mov	r9,r7
8000414e:	ed b5 00 03 	bld	r5,0x3
80004152:	c4 11       	brne	800041d4 <_vfprintf_r+0x7e8>
80004154:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004158:	40 3a       	lddsp	r10,sp[0xc]
8000415a:	58 0a       	cp.w	r10,0
8000415c:	c1 90       	breq	8000418e <_vfprintf_r+0x7a2>
8000415e:	10 36       	cp.w	r6,r8
80004160:	c6 45       	brlt	80004228 <_vfprintf_r+0x83c>
80004162:	fa c8 f9 50 	sub	r8,sp,-1712
80004166:	1a d8       	st.w	--sp,r8
80004168:	fa c8 fa b8 	sub	r8,sp,-1352
8000416c:	1a d8       	st.w	--sp,r8
8000416e:	fa c8 fb b4 	sub	r8,sp,-1100
80004172:	0c 9b       	mov	r11,r6
80004174:	1a d8       	st.w	--sp,r8
80004176:	04 9a       	mov	r10,r2
80004178:	fa c8 f9 40 	sub	r8,sp,-1728
8000417c:	fa c9 ff b4 	sub	r9,sp,-76
80004180:	08 9c       	mov	r12,r4
80004182:	fe b0 fa 9d 	rcall	800036bc <get_arg>
80004186:	2f dd       	sub	sp,-12
80004188:	78 16       	ld.w	r6,r12[0x4]
8000418a:	50 76       	stdsp	sp[0x1c],r6
8000418c:	c4 88       	rjmp	8000421c <_vfprintf_r+0x830>
8000418e:	2f f7       	sub	r7,-1
80004190:	10 39       	cp.w	r9,r8
80004192:	c0 c4       	brge	800041aa <_vfprintf_r+0x7be>
80004194:	fa ce f9 44 	sub	lr,sp,-1724
80004198:	fc 06 00 36 	add	r6,lr,r6<<0x3
8000419c:	ec fc fd 8c 	ld.w	r12,r6[-628]
800041a0:	50 7c       	stdsp	sp[0x1c],r12
800041a2:	ec f6 fd 88 	ld.w	r6,r6[-632]
800041a6:	50 56       	stdsp	sp[0x14],r6
800041a8:	c6 68       	rjmp	80004274 <_vfprintf_r+0x888>
800041aa:	41 09       	lddsp	r9,sp[0x40]
800041ac:	59 f8       	cp.w	r8,31
800041ae:	e0 89 00 10 	brgt	800041ce <_vfprintf_r+0x7e2>
800041b2:	f2 ca ff f8 	sub	r10,r9,-8
800041b6:	72 1b       	ld.w	r11,r9[0x4]
800041b8:	51 0a       	stdsp	sp[0x40],r10
800041ba:	72 09       	ld.w	r9,r9[0x0]
800041bc:	fa ca f9 44 	sub	r10,sp,-1724
800041c0:	50 7b       	stdsp	sp[0x1c],r11
800041c2:	50 59       	stdsp	sp[0x14],r9
800041c4:	f4 08 00 39 	add	r9,r10,r8<<0x3
800041c8:	40 5b       	lddsp	r11,sp[0x14]
800041ca:	40 7a       	lddsp	r10,sp[0x1c]
800041cc:	c4 78       	rjmp	8000425a <_vfprintf_r+0x86e>
800041ce:	72 18       	ld.w	r8,r9[0x4]
800041d0:	50 78       	stdsp	sp[0x1c],r8
800041d2:	c4 c8       	rjmp	8000426a <_vfprintf_r+0x87e>
800041d4:	fa f8 06 b4 	ld.w	r8,sp[1716]
800041d8:	40 3e       	lddsp	lr,sp[0xc]
800041da:	58 0e       	cp.w	lr,0
800041dc:	c2 30       	breq	80004222 <_vfprintf_r+0x836>
800041de:	10 36       	cp.w	r6,r8
800041e0:	c0 94       	brge	800041f2 <_vfprintf_r+0x806>
800041e2:	fa cc f9 44 	sub	r12,sp,-1724
800041e6:	f8 06 00 36 	add	r6,r12,r6<<0x3
800041ea:	ec fb fd 8c 	ld.w	r11,r6[-628]
800041ee:	50 7b       	stdsp	sp[0x1c],r11
800041f0:	cd 9b       	rjmp	800041a2 <_vfprintf_r+0x7b6>
800041f2:	fa c8 f9 50 	sub	r8,sp,-1712
800041f6:	1a d8       	st.w	--sp,r8
800041f8:	fa c8 fa b8 	sub	r8,sp,-1352
800041fc:	04 9a       	mov	r10,r2
800041fe:	1a d8       	st.w	--sp,r8
80004200:	fa c8 fb b4 	sub	r8,sp,-1100
80004204:	0c 9b       	mov	r11,r6
80004206:	1a d8       	st.w	--sp,r8
80004208:	08 9c       	mov	r12,r4
8000420a:	fa c8 f9 40 	sub	r8,sp,-1728
8000420e:	fa c9 ff b4 	sub	r9,sp,-76
80004212:	fe b0 fa 55 	rcall	800036bc <get_arg>
80004216:	2f dd       	sub	sp,-12
80004218:	78 1a       	ld.w	r10,r12[0x4]
8000421a:	50 7a       	stdsp	sp[0x1c],r10
8000421c:	78 0c       	ld.w	r12,r12[0x0]
8000421e:	50 5c       	stdsp	sp[0x14],r12
80004220:	c2 a8       	rjmp	80004274 <_vfprintf_r+0x888>
80004222:	2f f7       	sub	r7,-1
80004224:	10 39       	cp.w	r9,r8
80004226:	c0 94       	brge	80004238 <_vfprintf_r+0x84c>
80004228:	fa c9 f9 44 	sub	r9,sp,-1724
8000422c:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004230:	ec f8 fd 8c 	ld.w	r8,r6[-628]
80004234:	50 78       	stdsp	sp[0x1c],r8
80004236:	cb 6b       	rjmp	800041a2 <_vfprintf_r+0x7b6>
80004238:	41 09       	lddsp	r9,sp[0x40]
8000423a:	59 f8       	cp.w	r8,31
8000423c:	e0 89 00 15 	brgt	80004266 <_vfprintf_r+0x87a>
80004240:	f2 ca ff f8 	sub	r10,r9,-8
80004244:	72 16       	ld.w	r6,r9[0x4]
80004246:	72 09       	ld.w	r9,r9[0x0]
80004248:	51 0a       	stdsp	sp[0x40],r10
8000424a:	50 59       	stdsp	sp[0x14],r9
8000424c:	fa ce f9 44 	sub	lr,sp,-1724
80004250:	50 76       	stdsp	sp[0x1c],r6
80004252:	fc 08 00 39 	add	r9,lr,r8<<0x3
80004256:	40 5b       	lddsp	r11,sp[0x14]
80004258:	0c 9a       	mov	r10,r6
8000425a:	f2 eb fd 88 	st.d	r9[-632],r10
8000425e:	2f f8       	sub	r8,-1
80004260:	fb 48 06 b4 	st.w	sp[1716],r8
80004264:	c0 88       	rjmp	80004274 <_vfprintf_r+0x888>
80004266:	72 1c       	ld.w	r12,r9[0x4]
80004268:	50 7c       	stdsp	sp[0x1c],r12
8000426a:	f2 c8 ff f8 	sub	r8,r9,-8
8000426e:	51 08       	stdsp	sp[0x40],r8
80004270:	72 09       	ld.w	r9,r9[0x0]
80004272:	50 59       	stdsp	sp[0x14],r9
80004274:	40 5b       	lddsp	r11,sp[0x14]
80004276:	40 7a       	lddsp	r10,sp[0x1c]
80004278:	e0 a0 1c de 	rcall	80007c34 <__isinfd>
8000427c:	18 96       	mov	r6,r12
8000427e:	c1 70       	breq	800042ac <_vfprintf_r+0x8c0>
80004280:	30 08       	mov	r8,0
80004282:	30 09       	mov	r9,0
80004284:	40 5b       	lddsp	r11,sp[0x14]
80004286:	40 7a       	lddsp	r10,sp[0x1c]
80004288:	e0 a0 21 cc 	rcall	80008620 <__avr32_f64_cmp_lt>
8000428c:	c0 40       	breq	80004294 <_vfprintf_r+0x8a8>
8000428e:	32 d8       	mov	r8,45
80004290:	fb 68 06 bb 	st.b	sp[1723],r8
80004294:	fe c8 ac 44 	sub	r8,pc,-21436
80004298:	fe c6 ac 44 	sub	r6,pc,-21436
8000429c:	a7 d5       	cbr	r5,0x7
8000429e:	e0 40 00 47 	cp.w	r0,71
800042a2:	f0 06 17 a0 	movle	r6,r8
800042a6:	30 32       	mov	r2,3
800042a8:	e0 8f 06 ce 	bral	80005044 <_vfprintf_r+0x1658>
800042ac:	40 5b       	lddsp	r11,sp[0x14]
800042ae:	40 7a       	lddsp	r10,sp[0x1c]
800042b0:	e0 a0 1c d7 	rcall	80007c5e <__isnand>
800042b4:	c0 e0       	breq	800042d0 <_vfprintf_r+0x8e4>
800042b6:	50 26       	stdsp	sp[0x8],r6
800042b8:	fe c8 ac 60 	sub	r8,pc,-21408
800042bc:	fe c6 ac 60 	sub	r6,pc,-21408
800042c0:	a7 d5       	cbr	r5,0x7
800042c2:	e0 40 00 47 	cp.w	r0,71
800042c6:	f0 06 17 a0 	movle	r6,r8
800042ca:	30 32       	mov	r2,3
800042cc:	e0 8f 06 c2 	bral	80005050 <_vfprintf_r+0x1664>
800042d0:	40 2a       	lddsp	r10,sp[0x8]
800042d2:	5b fa       	cp.w	r10,-1
800042d4:	c0 41       	brne	800042dc <_vfprintf_r+0x8f0>
800042d6:	30 69       	mov	r9,6
800042d8:	50 29       	stdsp	sp[0x8],r9
800042da:	c1 18       	rjmp	800042fc <_vfprintf_r+0x910>
800042dc:	e0 40 00 47 	cp.w	r0,71
800042e0:	5f 09       	sreq	r9
800042e2:	e0 40 00 67 	cp.w	r0,103
800042e6:	5f 08       	sreq	r8
800042e8:	f3 e8 10 08 	or	r8,r9,r8
800042ec:	f8 08 18 00 	cp.b	r8,r12
800042f0:	c0 60       	breq	800042fc <_vfprintf_r+0x910>
800042f2:	40 28       	lddsp	r8,sp[0x8]
800042f4:	58 08       	cp.w	r8,0
800042f6:	f9 b8 00 01 	moveq	r8,1
800042fa:	50 28       	stdsp	sp[0x8],r8
800042fc:	40 78       	lddsp	r8,sp[0x1c]
800042fe:	40 59       	lddsp	r9,sp[0x14]
80004300:	fa e9 06 94 	st.d	sp[1684],r8
80004304:	a9 a5       	sbr	r5,0x8
80004306:	fa f8 06 94 	ld.w	r8,sp[1684]
8000430a:	58 08       	cp.w	r8,0
8000430c:	c0 65       	brlt	80004318 <_vfprintf_r+0x92c>
8000430e:	40 5e       	lddsp	lr,sp[0x14]
80004310:	30 0c       	mov	r12,0
80004312:	50 6e       	stdsp	sp[0x18],lr
80004314:	50 9c       	stdsp	sp[0x24],r12
80004316:	c0 78       	rjmp	80004324 <_vfprintf_r+0x938>
80004318:	40 5b       	lddsp	r11,sp[0x14]
8000431a:	32 da       	mov	r10,45
8000431c:	ee 1b 80 00 	eorh	r11,0x8000
80004320:	50 9a       	stdsp	sp[0x24],r10
80004322:	50 6b       	stdsp	sp[0x18],r11
80004324:	e0 40 00 46 	cp.w	r0,70
80004328:	5f 09       	sreq	r9
8000432a:	e0 40 00 66 	cp.w	r0,102
8000432e:	5f 08       	sreq	r8
80004330:	f3 e8 10 08 	or	r8,r9,r8
80004334:	50 48       	stdsp	sp[0x10],r8
80004336:	c0 40       	breq	8000433e <_vfprintf_r+0x952>
80004338:	40 22       	lddsp	r2,sp[0x8]
8000433a:	30 39       	mov	r9,3
8000433c:	c1 08       	rjmp	8000435c <_vfprintf_r+0x970>
8000433e:	e0 40 00 45 	cp.w	r0,69
80004342:	5f 09       	sreq	r9
80004344:	e0 40 00 65 	cp.w	r0,101
80004348:	5f 08       	sreq	r8
8000434a:	40 22       	lddsp	r2,sp[0x8]
8000434c:	10 49       	or	r9,r8
8000434e:	2f f2       	sub	r2,-1
80004350:	40 46       	lddsp	r6,sp[0x10]
80004352:	ec 09 18 00 	cp.b	r9,r6
80004356:	fb f2 00 02 	ld.weq	r2,sp[0x8]
8000435a:	30 29       	mov	r9,2
8000435c:	fa c8 f9 5c 	sub	r8,sp,-1700
80004360:	1a d8       	st.w	--sp,r8
80004362:	fa c8 f9 54 	sub	r8,sp,-1708
80004366:	1a d8       	st.w	--sp,r8
80004368:	fa c8 f9 4c 	sub	r8,sp,-1716
8000436c:	08 9c       	mov	r12,r4
8000436e:	1a d8       	st.w	--sp,r8
80004370:	04 98       	mov	r8,r2
80004372:	40 9b       	lddsp	r11,sp[0x24]
80004374:	40 aa       	lddsp	r10,sp[0x28]
80004376:	e0 a0 0b c3 	rcall	80005afc <_dtoa_r>
8000437a:	e0 40 00 47 	cp.w	r0,71
8000437e:	5f 19       	srne	r9
80004380:	e0 40 00 67 	cp.w	r0,103
80004384:	5f 18       	srne	r8
80004386:	18 96       	mov	r6,r12
80004388:	2f dd       	sub	sp,-12
8000438a:	f3 e8 00 08 	and	r8,r9,r8
8000438e:	c0 41       	brne	80004396 <_vfprintf_r+0x9aa>
80004390:	ed b5 00 00 	bld	r5,0x0
80004394:	c3 01       	brne	800043f4 <_vfprintf_r+0xa08>
80004396:	ec 02 00 0e 	add	lr,r6,r2
8000439a:	50 3e       	stdsp	sp[0xc],lr
8000439c:	40 4c       	lddsp	r12,sp[0x10]
8000439e:	58 0c       	cp.w	r12,0
800043a0:	c1 50       	breq	800043ca <_vfprintf_r+0x9de>
800043a2:	0d 89       	ld.ub	r9,r6[0x0]
800043a4:	33 08       	mov	r8,48
800043a6:	f0 09 18 00 	cp.b	r9,r8
800043aa:	c0 b1       	brne	800043c0 <_vfprintf_r+0x9d4>
800043ac:	30 08       	mov	r8,0
800043ae:	30 09       	mov	r9,0
800043b0:	40 6b       	lddsp	r11,sp[0x18]
800043b2:	40 7a       	lddsp	r10,sp[0x1c]
800043b4:	e0 a0 20 ef 	rcall	80008592 <__avr32_f64_cmp_eq>
800043b8:	fb b2 00 01 	rsubeq	r2,1
800043bc:	fb f2 0b ab 	st.weq	sp[0x6ac],r2
800043c0:	40 3b       	lddsp	r11,sp[0xc]
800043c2:	fa f8 06 ac 	ld.w	r8,sp[1708]
800043c6:	10 0b       	add	r11,r8
800043c8:	50 3b       	stdsp	sp[0xc],r11
800043ca:	40 6b       	lddsp	r11,sp[0x18]
800043cc:	30 08       	mov	r8,0
800043ce:	30 09       	mov	r9,0
800043d0:	40 7a       	lddsp	r10,sp[0x1c]
800043d2:	e0 a0 20 e0 	rcall	80008592 <__avr32_f64_cmp_eq>
800043d6:	c0 90       	breq	800043e8 <_vfprintf_r+0x9fc>
800043d8:	40 3a       	lddsp	r10,sp[0xc]
800043da:	fb 4a 06 a4 	st.w	sp[1700],r10
800043de:	c0 58       	rjmp	800043e8 <_vfprintf_r+0x9fc>
800043e0:	10 c9       	st.b	r8++,r9
800043e2:	fb 48 06 a4 	st.w	sp[1700],r8
800043e6:	c0 28       	rjmp	800043ea <_vfprintf_r+0x9fe>
800043e8:	33 09       	mov	r9,48
800043ea:	fa f8 06 a4 	ld.w	r8,sp[1700]
800043ee:	40 3e       	lddsp	lr,sp[0xc]
800043f0:	1c 38       	cp.w	r8,lr
800043f2:	cf 73       	brcs	800043e0 <_vfprintf_r+0x9f4>
800043f4:	e0 40 00 47 	cp.w	r0,71
800043f8:	5f 09       	sreq	r9
800043fa:	e0 40 00 67 	cp.w	r0,103
800043fe:	5f 08       	sreq	r8
80004400:	f3 e8 10 08 	or	r8,r9,r8
80004404:	fa f9 06 a4 	ld.w	r9,sp[1700]
80004408:	0c 19       	sub	r9,r6
8000440a:	50 69       	stdsp	sp[0x18],r9
8000440c:	58 08       	cp.w	r8,0
8000440e:	c0 b0       	breq	80004424 <_vfprintf_r+0xa38>
80004410:	fa f8 06 ac 	ld.w	r8,sp[1708]
80004414:	5b d8       	cp.w	r8,-3
80004416:	c0 55       	brlt	80004420 <_vfprintf_r+0xa34>
80004418:	40 2c       	lddsp	r12,sp[0x8]
8000441a:	18 38       	cp.w	r8,r12
8000441c:	e0 8a 00 6a 	brle	800044f0 <_vfprintf_r+0xb04>
80004420:	20 20       	sub	r0,2
80004422:	c0 58       	rjmp	8000442c <_vfprintf_r+0xa40>
80004424:	e0 40 00 65 	cp.w	r0,101
80004428:	e0 89 00 46 	brgt	800044b4 <_vfprintf_r+0xac8>
8000442c:	fa fb 06 ac 	ld.w	r11,sp[1708]
80004430:	fb 60 06 9c 	st.b	sp[1692],r0
80004434:	20 1b       	sub	r11,1
80004436:	fb 4b 06 ac 	st.w	sp[1708],r11
8000443a:	c0 47       	brpl	80004442 <_vfprintf_r+0xa56>
8000443c:	5c 3b       	neg	r11
8000443e:	32 d8       	mov	r8,45
80004440:	c0 28       	rjmp	80004444 <_vfprintf_r+0xa58>
80004442:	32 b8       	mov	r8,43
80004444:	fb 68 06 9d 	st.b	sp[1693],r8
80004448:	58 9b       	cp.w	r11,9
8000444a:	e0 8a 00 1d 	brle	80004484 <_vfprintf_r+0xa98>
8000444e:	fa c9 fa 35 	sub	r9,sp,-1483
80004452:	30 aa       	mov	r10,10
80004454:	12 98       	mov	r8,r9
80004456:	0e 9c       	mov	r12,r7
80004458:	0c 92       	mov	r2,r6
8000445a:	f6 0a 0c 06 	divs	r6,r11,r10
8000445e:	0e 9b       	mov	r11,r7
80004460:	2d 0b       	sub	r11,-48
80004462:	10 fb       	st.b	--r8,r11
80004464:	0c 9b       	mov	r11,r6
80004466:	58 96       	cp.w	r6,9
80004468:	fe 99 ff f9 	brgt	8000445a <_vfprintf_r+0xa6e>
8000446c:	2d 0b       	sub	r11,-48
8000446e:	18 97       	mov	r7,r12
80004470:	04 96       	mov	r6,r2
80004472:	10 fb       	st.b	--r8,r11
80004474:	fa ca f9 62 	sub	r10,sp,-1694
80004478:	c0 38       	rjmp	8000447e <_vfprintf_r+0xa92>
8000447a:	11 3b       	ld.ub	r11,r8++
8000447c:	14 cb       	st.b	r10++,r11
8000447e:	12 38       	cp.w	r8,r9
80004480:	cf d3       	brcs	8000447a <_vfprintf_r+0xa8e>
80004482:	c0 98       	rjmp	80004494 <_vfprintf_r+0xaa8>
80004484:	2d 0b       	sub	r11,-48
80004486:	33 08       	mov	r8,48
80004488:	fb 6b 06 9f 	st.b	sp[1695],r11
8000448c:	fb 68 06 9e 	st.b	sp[1694],r8
80004490:	fa ca f9 60 	sub	r10,sp,-1696
80004494:	fa c8 f9 64 	sub	r8,sp,-1692
80004498:	f4 08 01 08 	sub	r8,r10,r8
8000449c:	50 e8       	stdsp	sp[0x38],r8
8000449e:	10 92       	mov	r2,r8
800044a0:	40 6b       	lddsp	r11,sp[0x18]
800044a2:	16 02       	add	r2,r11
800044a4:	58 1b       	cp.w	r11,1
800044a6:	e0 89 00 05 	brgt	800044b0 <_vfprintf_r+0xac4>
800044aa:	ed b5 00 00 	bld	r5,0x0
800044ae:	c3 51       	brne	80004518 <_vfprintf_r+0xb2c>
800044b0:	2f f2       	sub	r2,-1
800044b2:	c3 38       	rjmp	80004518 <_vfprintf_r+0xb2c>
800044b4:	e0 40 00 66 	cp.w	r0,102
800044b8:	c1 c1       	brne	800044f0 <_vfprintf_r+0xb04>
800044ba:	fa f2 06 ac 	ld.w	r2,sp[1708]
800044be:	58 02       	cp.w	r2,0
800044c0:	e0 8a 00 0c 	brle	800044d8 <_vfprintf_r+0xaec>
800044c4:	40 2a       	lddsp	r10,sp[0x8]
800044c6:	58 0a       	cp.w	r10,0
800044c8:	c0 41       	brne	800044d0 <_vfprintf_r+0xae4>
800044ca:	ed b5 00 00 	bld	r5,0x0
800044ce:	c2 51       	brne	80004518 <_vfprintf_r+0xb2c>
800044d0:	2f f2       	sub	r2,-1
800044d2:	40 29       	lddsp	r9,sp[0x8]
800044d4:	12 02       	add	r2,r9
800044d6:	c0 b8       	rjmp	800044ec <_vfprintf_r+0xb00>
800044d8:	40 28       	lddsp	r8,sp[0x8]
800044da:	58 08       	cp.w	r8,0
800044dc:	c0 61       	brne	800044e8 <_vfprintf_r+0xafc>
800044de:	ed b5 00 00 	bld	r5,0x0
800044e2:	c0 30       	breq	800044e8 <_vfprintf_r+0xafc>
800044e4:	30 12       	mov	r2,1
800044e6:	c1 98       	rjmp	80004518 <_vfprintf_r+0xb2c>
800044e8:	40 22       	lddsp	r2,sp[0x8]
800044ea:	2f e2       	sub	r2,-2
800044ec:	36 60       	mov	r0,102
800044ee:	c1 58       	rjmp	80004518 <_vfprintf_r+0xb2c>
800044f0:	fa f2 06 ac 	ld.w	r2,sp[1708]
800044f4:	40 6e       	lddsp	lr,sp[0x18]
800044f6:	1c 32       	cp.w	r2,lr
800044f8:	c0 65       	brlt	80004504 <_vfprintf_r+0xb18>
800044fa:	ed b5 00 00 	bld	r5,0x0
800044fe:	f7 b2 00 ff 	subeq	r2,-1
80004502:	c0 a8       	rjmp	80004516 <_vfprintf_r+0xb2a>
80004504:	e4 08 11 02 	rsub	r8,r2,2
80004508:	40 6c       	lddsp	r12,sp[0x18]
8000450a:	58 02       	cp.w	r2,0
8000450c:	f0 02 17 a0 	movle	r2,r8
80004510:	f9 b2 09 01 	movgt	r2,1
80004514:	18 02       	add	r2,r12
80004516:	36 70       	mov	r0,103
80004518:	40 9b       	lddsp	r11,sp[0x24]
8000451a:	58 0b       	cp.w	r11,0
8000451c:	e0 80 05 94 	breq	80005044 <_vfprintf_r+0x1658>
80004520:	32 d8       	mov	r8,45
80004522:	fb 68 06 bb 	st.b	sp[1723],r8
80004526:	e0 8f 05 93 	bral	8000504c <_vfprintf_r+0x1660>
8000452a:	50 a7       	stdsp	sp[0x28],r7
8000452c:	04 94       	mov	r4,r2
8000452e:	0c 97       	mov	r7,r6
80004530:	02 92       	mov	r2,r1
80004532:	06 96       	mov	r6,r3
80004534:	40 41       	lddsp	r1,sp[0x10]
80004536:	40 93       	lddsp	r3,sp[0x24]
80004538:	0e 99       	mov	r9,r7
8000453a:	ed b5 00 05 	bld	r5,0x5
8000453e:	c4 81       	brne	800045ce <_vfprintf_r+0xbe2>
80004540:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004544:	40 3e       	lddsp	lr,sp[0xc]
80004546:	58 0e       	cp.w	lr,0
80004548:	c1 d0       	breq	80004582 <_vfprintf_r+0xb96>
8000454a:	10 36       	cp.w	r6,r8
8000454c:	c0 64       	brge	80004558 <_vfprintf_r+0xb6c>
8000454e:	fa cc f9 44 	sub	r12,sp,-1724
80004552:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004556:	c1 d8       	rjmp	80004590 <_vfprintf_r+0xba4>
80004558:	fa c8 f9 50 	sub	r8,sp,-1712
8000455c:	1a d8       	st.w	--sp,r8
8000455e:	fa c8 fa b8 	sub	r8,sp,-1352
80004562:	04 9a       	mov	r10,r2
80004564:	1a d8       	st.w	--sp,r8
80004566:	fa c8 fb b4 	sub	r8,sp,-1100
8000456a:	0c 9b       	mov	r11,r6
8000456c:	1a d8       	st.w	--sp,r8
8000456e:	08 9c       	mov	r12,r4
80004570:	fa c8 f9 40 	sub	r8,sp,-1728
80004574:	fa c9 ff b4 	sub	r9,sp,-76
80004578:	fe b0 f8 a2 	rcall	800036bc <get_arg>
8000457c:	2f dd       	sub	sp,-12
8000457e:	78 0a       	ld.w	r10,r12[0x0]
80004580:	c2 08       	rjmp	800045c0 <_vfprintf_r+0xbd4>
80004582:	2f f7       	sub	r7,-1
80004584:	10 39       	cp.w	r9,r8
80004586:	c0 84       	brge	80004596 <_vfprintf_r+0xbaa>
80004588:	fa cb f9 44 	sub	r11,sp,-1724
8000458c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004590:	ec fa fd 88 	ld.w	r10,r6[-632]
80004594:	c1 68       	rjmp	800045c0 <_vfprintf_r+0xbd4>
80004596:	41 09       	lddsp	r9,sp[0x40]
80004598:	59 f8       	cp.w	r8,31
8000459a:	e0 89 00 10 	brgt	800045ba <_vfprintf_r+0xbce>
8000459e:	f2 ca ff fc 	sub	r10,r9,-4
800045a2:	51 0a       	stdsp	sp[0x40],r10
800045a4:	fa c6 f9 44 	sub	r6,sp,-1724
800045a8:	72 0a       	ld.w	r10,r9[0x0]
800045aa:	ec 08 00 39 	add	r9,r6,r8<<0x3
800045ae:	f3 4a fd 88 	st.w	r9[-632],r10
800045b2:	2f f8       	sub	r8,-1
800045b4:	fb 48 06 b4 	st.w	sp[1716],r8
800045b8:	c0 48       	rjmp	800045c0 <_vfprintf_r+0xbd4>
800045ba:	72 0a       	ld.w	r10,r9[0x0]
800045bc:	2f c9       	sub	r9,-4
800045be:	51 09       	stdsp	sp[0x40],r9
800045c0:	40 be       	lddsp	lr,sp[0x2c]
800045c2:	1c 98       	mov	r8,lr
800045c4:	95 1e       	st.w	r10[0x4],lr
800045c6:	bf 58       	asr	r8,0x1f
800045c8:	95 08       	st.w	r10[0x0],r8
800045ca:	fe 9f fa 9f 	bral	80003b08 <_vfprintf_r+0x11c>
800045ce:	ed b5 00 04 	bld	r5,0x4
800045d2:	c4 80       	breq	80004662 <_vfprintf_r+0xc76>
800045d4:	e2 15 00 40 	andl	r5,0x40,COH
800045d8:	c4 50       	breq	80004662 <_vfprintf_r+0xc76>
800045da:	fa f8 06 b4 	ld.w	r8,sp[1716]
800045de:	40 3c       	lddsp	r12,sp[0xc]
800045e0:	58 0c       	cp.w	r12,0
800045e2:	c1 d0       	breq	8000461c <_vfprintf_r+0xc30>
800045e4:	10 36       	cp.w	r6,r8
800045e6:	c0 64       	brge	800045f2 <_vfprintf_r+0xc06>
800045e8:	fa cb f9 44 	sub	r11,sp,-1724
800045ec:	f6 06 00 36 	add	r6,r11,r6<<0x3
800045f0:	c1 d8       	rjmp	8000462a <_vfprintf_r+0xc3e>
800045f2:	fa c8 f9 50 	sub	r8,sp,-1712
800045f6:	1a d8       	st.w	--sp,r8
800045f8:	fa c8 fa b8 	sub	r8,sp,-1352
800045fc:	04 9a       	mov	r10,r2
800045fe:	1a d8       	st.w	--sp,r8
80004600:	fa c8 fb b4 	sub	r8,sp,-1100
80004604:	0c 9b       	mov	r11,r6
80004606:	1a d8       	st.w	--sp,r8
80004608:	08 9c       	mov	r12,r4
8000460a:	fa c8 f9 40 	sub	r8,sp,-1728
8000460e:	fa c9 ff b4 	sub	r9,sp,-76
80004612:	fe b0 f8 55 	rcall	800036bc <get_arg>
80004616:	2f dd       	sub	sp,-12
80004618:	78 0a       	ld.w	r10,r12[0x0]
8000461a:	c2 08       	rjmp	8000465a <_vfprintf_r+0xc6e>
8000461c:	2f f7       	sub	r7,-1
8000461e:	10 39       	cp.w	r9,r8
80004620:	c0 84       	brge	80004630 <_vfprintf_r+0xc44>
80004622:	fa ca f9 44 	sub	r10,sp,-1724
80004626:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000462a:	ec fa fd 88 	ld.w	r10,r6[-632]
8000462e:	c1 68       	rjmp	8000465a <_vfprintf_r+0xc6e>
80004630:	41 09       	lddsp	r9,sp[0x40]
80004632:	59 f8       	cp.w	r8,31
80004634:	e0 89 00 10 	brgt	80004654 <_vfprintf_r+0xc68>
80004638:	f2 ca ff fc 	sub	r10,r9,-4
8000463c:	51 0a       	stdsp	sp[0x40],r10
8000463e:	fa c6 f9 44 	sub	r6,sp,-1724
80004642:	72 0a       	ld.w	r10,r9[0x0]
80004644:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004648:	f3 4a fd 88 	st.w	r9[-632],r10
8000464c:	2f f8       	sub	r8,-1
8000464e:	fb 48 06 b4 	st.w	sp[1716],r8
80004652:	c0 48       	rjmp	8000465a <_vfprintf_r+0xc6e>
80004654:	72 0a       	ld.w	r10,r9[0x0]
80004656:	2f c9       	sub	r9,-4
80004658:	51 09       	stdsp	sp[0x40],r9
8000465a:	40 be       	lddsp	lr,sp[0x2c]
8000465c:	b4 0e       	st.h	r10[0x0],lr
8000465e:	fe 9f fa 55 	bral	80003b08 <_vfprintf_r+0x11c>
80004662:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004666:	40 3c       	lddsp	r12,sp[0xc]
80004668:	58 0c       	cp.w	r12,0
8000466a:	c1 d0       	breq	800046a4 <_vfprintf_r+0xcb8>
8000466c:	10 36       	cp.w	r6,r8
8000466e:	c0 64       	brge	8000467a <_vfprintf_r+0xc8e>
80004670:	fa cb f9 44 	sub	r11,sp,-1724
80004674:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004678:	c1 d8       	rjmp	800046b2 <_vfprintf_r+0xcc6>
8000467a:	fa c8 f9 50 	sub	r8,sp,-1712
8000467e:	1a d8       	st.w	--sp,r8
80004680:	fa c8 fa b8 	sub	r8,sp,-1352
80004684:	04 9a       	mov	r10,r2
80004686:	1a d8       	st.w	--sp,r8
80004688:	fa c8 fb b4 	sub	r8,sp,-1100
8000468c:	0c 9b       	mov	r11,r6
8000468e:	1a d8       	st.w	--sp,r8
80004690:	08 9c       	mov	r12,r4
80004692:	fa c8 f9 40 	sub	r8,sp,-1728
80004696:	fa c9 ff b4 	sub	r9,sp,-76
8000469a:	fe b0 f8 11 	rcall	800036bc <get_arg>
8000469e:	2f dd       	sub	sp,-12
800046a0:	78 0a       	ld.w	r10,r12[0x0]
800046a2:	c2 08       	rjmp	800046e2 <_vfprintf_r+0xcf6>
800046a4:	2f f7       	sub	r7,-1
800046a6:	10 39       	cp.w	r9,r8
800046a8:	c0 84       	brge	800046b8 <_vfprintf_r+0xccc>
800046aa:	fa ca f9 44 	sub	r10,sp,-1724
800046ae:	f4 06 00 36 	add	r6,r10,r6<<0x3
800046b2:	ec fa fd 88 	ld.w	r10,r6[-632]
800046b6:	c1 68       	rjmp	800046e2 <_vfprintf_r+0xcf6>
800046b8:	41 09       	lddsp	r9,sp[0x40]
800046ba:	59 f8       	cp.w	r8,31
800046bc:	e0 89 00 10 	brgt	800046dc <_vfprintf_r+0xcf0>
800046c0:	f2 ca ff fc 	sub	r10,r9,-4
800046c4:	51 0a       	stdsp	sp[0x40],r10
800046c6:	fa c6 f9 44 	sub	r6,sp,-1724
800046ca:	72 0a       	ld.w	r10,r9[0x0]
800046cc:	ec 08 00 39 	add	r9,r6,r8<<0x3
800046d0:	f3 4a fd 88 	st.w	r9[-632],r10
800046d4:	2f f8       	sub	r8,-1
800046d6:	fb 48 06 b4 	st.w	sp[1716],r8
800046da:	c0 48       	rjmp	800046e2 <_vfprintf_r+0xcf6>
800046dc:	72 0a       	ld.w	r10,r9[0x0]
800046de:	2f c9       	sub	r9,-4
800046e0:	51 09       	stdsp	sp[0x40],r9
800046e2:	40 be       	lddsp	lr,sp[0x2c]
800046e4:	95 0e       	st.w	r10[0x0],lr
800046e6:	fe 9f fa 11 	bral	80003b08 <_vfprintf_r+0x11c>
800046ea:	50 a7       	stdsp	sp[0x28],r7
800046ec:	50 80       	stdsp	sp[0x20],r0
800046ee:	0c 97       	mov	r7,r6
800046f0:	04 94       	mov	r4,r2
800046f2:	06 96       	mov	r6,r3
800046f4:	02 92       	mov	r2,r1
800046f6:	40 93       	lddsp	r3,sp[0x24]
800046f8:	10 90       	mov	r0,r8
800046fa:	40 41       	lddsp	r1,sp[0x10]
800046fc:	a5 a5       	sbr	r5,0x4
800046fe:	c0 a8       	rjmp	80004712 <_vfprintf_r+0xd26>
80004700:	50 a7       	stdsp	sp[0x28],r7
80004702:	50 80       	stdsp	sp[0x20],r0
80004704:	0c 97       	mov	r7,r6
80004706:	04 94       	mov	r4,r2
80004708:	06 96       	mov	r6,r3
8000470a:	02 92       	mov	r2,r1
8000470c:	40 93       	lddsp	r3,sp[0x24]
8000470e:	10 90       	mov	r0,r8
80004710:	40 41       	lddsp	r1,sp[0x10]
80004712:	ed b5 00 05 	bld	r5,0x5
80004716:	c5 d1       	brne	800047d0 <_vfprintf_r+0xde4>
80004718:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000471c:	40 3c       	lddsp	r12,sp[0xc]
8000471e:	58 0c       	cp.w	r12,0
80004720:	c2 60       	breq	8000476c <_vfprintf_r+0xd80>
80004722:	10 36       	cp.w	r6,r8
80004724:	c0 a4       	brge	80004738 <_vfprintf_r+0xd4c>
80004726:	fa cb f9 44 	sub	r11,sp,-1724
8000472a:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000472e:	ec e8 fd 88 	ld.d	r8,r6[-632]
80004732:	fa e9 00 00 	st.d	sp[0],r8
80004736:	c1 88       	rjmp	80004766 <_vfprintf_r+0xd7a>
80004738:	fa c8 f9 50 	sub	r8,sp,-1712
8000473c:	1a d8       	st.w	--sp,r8
8000473e:	fa c8 fa b8 	sub	r8,sp,-1352
80004742:	04 9a       	mov	r10,r2
80004744:	1a d8       	st.w	--sp,r8
80004746:	0c 9b       	mov	r11,r6
80004748:	fa c8 fb b4 	sub	r8,sp,-1100
8000474c:	08 9c       	mov	r12,r4
8000474e:	1a d8       	st.w	--sp,r8
80004750:	fa c8 f9 40 	sub	r8,sp,-1728
80004754:	fa c9 ff b4 	sub	r9,sp,-76
80004758:	fe b0 f7 b2 	rcall	800036bc <get_arg>
8000475c:	2f dd       	sub	sp,-12
8000475e:	f8 ea 00 00 	ld.d	r10,r12[0]
80004762:	fa eb 00 00 	st.d	sp[0],r10
80004766:	30 08       	mov	r8,0
80004768:	e0 8f 03 de 	bral	80004f24 <_vfprintf_r+0x1538>
8000476c:	ee ca ff ff 	sub	r10,r7,-1
80004770:	10 37       	cp.w	r7,r8
80004772:	c0 b4       	brge	80004788 <_vfprintf_r+0xd9c>
80004774:	fa c9 f9 44 	sub	r9,sp,-1724
80004778:	14 97       	mov	r7,r10
8000477a:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000477e:	ec ea fd 88 	ld.d	r10,r6[-632]
80004782:	fa eb 00 00 	st.d	sp[0],r10
80004786:	c1 88       	rjmp	800047b6 <_vfprintf_r+0xdca>
80004788:	41 09       	lddsp	r9,sp[0x40]
8000478a:	59 f8       	cp.w	r8,31
8000478c:	e0 89 00 18 	brgt	800047bc <_vfprintf_r+0xdd0>
80004790:	f2 e6 00 00 	ld.d	r6,r9[0]
80004794:	f2 cb ff f8 	sub	r11,r9,-8
80004798:	fa e7 00 00 	st.d	sp[0],r6
8000479c:	51 0b       	stdsp	sp[0x40],r11
8000479e:	fa c6 f9 44 	sub	r6,sp,-1724
800047a2:	ec 08 00 39 	add	r9,r6,r8<<0x3
800047a6:	fa e6 00 00 	ld.d	r6,sp[0]
800047aa:	f2 e7 fd 88 	st.d	r9[-632],r6
800047ae:	2f f8       	sub	r8,-1
800047b0:	14 97       	mov	r7,r10
800047b2:	fb 48 06 b4 	st.w	sp[1716],r8
800047b6:	40 38       	lddsp	r8,sp[0xc]
800047b8:	e0 8f 03 b6 	bral	80004f24 <_vfprintf_r+0x1538>
800047bc:	f2 e6 00 00 	ld.d	r6,r9[0]
800047c0:	40 38       	lddsp	r8,sp[0xc]
800047c2:	fa e7 00 00 	st.d	sp[0],r6
800047c6:	2f 89       	sub	r9,-8
800047c8:	14 97       	mov	r7,r10
800047ca:	51 09       	stdsp	sp[0x40],r9
800047cc:	e0 8f 03 ac 	bral	80004f24 <_vfprintf_r+0x1538>
800047d0:	ed b5 00 04 	bld	r5,0x4
800047d4:	c1 61       	brne	80004800 <_vfprintf_r+0xe14>
800047d6:	fa f8 06 b4 	ld.w	r8,sp[1716]
800047da:	40 3e       	lddsp	lr,sp[0xc]
800047dc:	58 0e       	cp.w	lr,0
800047de:	c0 80       	breq	800047ee <_vfprintf_r+0xe02>
800047e0:	10 36       	cp.w	r6,r8
800047e2:	c6 74       	brge	800048b0 <_vfprintf_r+0xec4>
800047e4:	fa cc f9 44 	sub	r12,sp,-1724
800047e8:	f8 06 00 36 	add	r6,r12,r6<<0x3
800047ec:	c8 08       	rjmp	800048ec <_vfprintf_r+0xf00>
800047ee:	ee ca ff ff 	sub	r10,r7,-1
800047f2:	10 37       	cp.w	r7,r8
800047f4:	c7 f4       	brge	800048f2 <_vfprintf_r+0xf06>
800047f6:	fa cb f9 44 	sub	r11,sp,-1724
800047fa:	f6 06 00 36 	add	r6,r11,r6<<0x3
800047fe:	c7 68       	rjmp	800048ea <_vfprintf_r+0xefe>
80004800:	ed b5 00 06 	bld	r5,0x6
80004804:	c4 a1       	brne	80004898 <_vfprintf_r+0xeac>
80004806:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000480a:	40 3c       	lddsp	r12,sp[0xc]
8000480c:	58 0c       	cp.w	r12,0
8000480e:	c1 d0       	breq	80004848 <_vfprintf_r+0xe5c>
80004810:	10 36       	cp.w	r6,r8
80004812:	c0 64       	brge	8000481e <_vfprintf_r+0xe32>
80004814:	fa cb f9 44 	sub	r11,sp,-1724
80004818:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000481c:	c1 f8       	rjmp	8000485a <_vfprintf_r+0xe6e>
8000481e:	fa c8 f9 50 	sub	r8,sp,-1712
80004822:	1a d8       	st.w	--sp,r8
80004824:	fa c8 fa b8 	sub	r8,sp,-1352
80004828:	1a d8       	st.w	--sp,r8
8000482a:	fa c8 fb b4 	sub	r8,sp,-1100
8000482e:	1a d8       	st.w	--sp,r8
80004830:	fa c8 f9 40 	sub	r8,sp,-1728
80004834:	fa c9 ff b4 	sub	r9,sp,-76
80004838:	04 9a       	mov	r10,r2
8000483a:	0c 9b       	mov	r11,r6
8000483c:	08 9c       	mov	r12,r4
8000483e:	fe b0 f7 3f 	rcall	800036bc <get_arg>
80004842:	2f dd       	sub	sp,-12
80004844:	98 18       	ld.sh	r8,r12[0x2]
80004846:	c2 68       	rjmp	80004892 <_vfprintf_r+0xea6>
80004848:	ee ca ff ff 	sub	r10,r7,-1
8000484c:	10 37       	cp.w	r7,r8
8000484e:	c0 94       	brge	80004860 <_vfprintf_r+0xe74>
80004850:	fa c9 f9 44 	sub	r9,sp,-1724
80004854:	14 97       	mov	r7,r10
80004856:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000485a:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000485e:	c1 a8       	rjmp	80004892 <_vfprintf_r+0xea6>
80004860:	41 09       	lddsp	r9,sp[0x40]
80004862:	59 f8       	cp.w	r8,31
80004864:	e0 89 00 13 	brgt	8000488a <_vfprintf_r+0xe9e>
80004868:	f2 cb ff fc 	sub	r11,r9,-4
8000486c:	51 0b       	stdsp	sp[0x40],r11
8000486e:	72 09       	ld.w	r9,r9[0x0]
80004870:	fa c6 f9 44 	sub	r6,sp,-1724
80004874:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80004878:	2f f8       	sub	r8,-1
8000487a:	f7 49 fd 88 	st.w	r11[-632],r9
8000487e:	fb 48 06 b4 	st.w	sp[1716],r8
80004882:	14 97       	mov	r7,r10
80004884:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80004888:	c0 58       	rjmp	80004892 <_vfprintf_r+0xea6>
8000488a:	92 18       	ld.sh	r8,r9[0x2]
8000488c:	14 97       	mov	r7,r10
8000488e:	2f c9       	sub	r9,-4
80004890:	51 09       	stdsp	sp[0x40],r9
80004892:	5c 78       	castu.h	r8
80004894:	50 18       	stdsp	sp[0x4],r8
80004896:	c4 68       	rjmp	80004922 <_vfprintf_r+0xf36>
80004898:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000489c:	40 3c       	lddsp	r12,sp[0xc]
8000489e:	58 0c       	cp.w	r12,0
800048a0:	c1 d0       	breq	800048da <_vfprintf_r+0xeee>
800048a2:	10 36       	cp.w	r6,r8
800048a4:	c0 64       	brge	800048b0 <_vfprintf_r+0xec4>
800048a6:	fa cb f9 44 	sub	r11,sp,-1724
800048aa:	f6 06 00 36 	add	r6,r11,r6<<0x3
800048ae:	c1 f8       	rjmp	800048ec <_vfprintf_r+0xf00>
800048b0:	fa c8 f9 50 	sub	r8,sp,-1712
800048b4:	1a d8       	st.w	--sp,r8
800048b6:	fa c8 fa b8 	sub	r8,sp,-1352
800048ba:	0c 9b       	mov	r11,r6
800048bc:	1a d8       	st.w	--sp,r8
800048be:	fa c8 fb b4 	sub	r8,sp,-1100
800048c2:	04 9a       	mov	r10,r2
800048c4:	1a d8       	st.w	--sp,r8
800048c6:	08 9c       	mov	r12,r4
800048c8:	fa c8 f9 40 	sub	r8,sp,-1728
800048cc:	fa c9 ff b4 	sub	r9,sp,-76
800048d0:	fe b0 f6 f6 	rcall	800036bc <get_arg>
800048d4:	2f dd       	sub	sp,-12
800048d6:	78 0b       	ld.w	r11,r12[0x0]
800048d8:	c2 48       	rjmp	80004920 <_vfprintf_r+0xf34>
800048da:	ee ca ff ff 	sub	r10,r7,-1
800048de:	10 37       	cp.w	r7,r8
800048e0:	c0 94       	brge	800048f2 <_vfprintf_r+0xf06>
800048e2:	fa c9 f9 44 	sub	r9,sp,-1724
800048e6:	f2 06 00 36 	add	r6,r9,r6<<0x3
800048ea:	14 97       	mov	r7,r10
800048ec:	ec fb fd 88 	ld.w	r11,r6[-632]
800048f0:	c1 88       	rjmp	80004920 <_vfprintf_r+0xf34>
800048f2:	41 09       	lddsp	r9,sp[0x40]
800048f4:	59 f8       	cp.w	r8,31
800048f6:	e0 89 00 11 	brgt	80004918 <_vfprintf_r+0xf2c>
800048fa:	f2 cb ff fc 	sub	r11,r9,-4
800048fe:	51 0b       	stdsp	sp[0x40],r11
80004900:	fa c6 f9 44 	sub	r6,sp,-1724
80004904:	72 0b       	ld.w	r11,r9[0x0]
80004906:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000490a:	f3 4b fd 88 	st.w	r9[-632],r11
8000490e:	2f f8       	sub	r8,-1
80004910:	14 97       	mov	r7,r10
80004912:	fb 48 06 b4 	st.w	sp[1716],r8
80004916:	c0 58       	rjmp	80004920 <_vfprintf_r+0xf34>
80004918:	72 0b       	ld.w	r11,r9[0x0]
8000491a:	14 97       	mov	r7,r10
8000491c:	2f c9       	sub	r9,-4
8000491e:	51 09       	stdsp	sp[0x40],r9
80004920:	50 1b       	stdsp	sp[0x4],r11
80004922:	30 0e       	mov	lr,0
80004924:	50 0e       	stdsp	sp[0x0],lr
80004926:	1c 98       	mov	r8,lr
80004928:	e0 8f 02 fe 	bral	80004f24 <_vfprintf_r+0x1538>
8000492c:	50 a7       	stdsp	sp[0x28],r7
8000492e:	50 80       	stdsp	sp[0x20],r0
80004930:	0c 97       	mov	r7,r6
80004932:	04 94       	mov	r4,r2
80004934:	06 96       	mov	r6,r3
80004936:	02 92       	mov	r2,r1
80004938:	40 93       	lddsp	r3,sp[0x24]
8000493a:	40 41       	lddsp	r1,sp[0x10]
8000493c:	0e 99       	mov	r9,r7
8000493e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004942:	40 3c       	lddsp	r12,sp[0xc]
80004944:	58 0c       	cp.w	r12,0
80004946:	c1 d0       	breq	80004980 <_vfprintf_r+0xf94>
80004948:	10 36       	cp.w	r6,r8
8000494a:	c0 64       	brge	80004956 <_vfprintf_r+0xf6a>
8000494c:	fa cb f9 44 	sub	r11,sp,-1724
80004950:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004954:	c1 d8       	rjmp	8000498e <_vfprintf_r+0xfa2>
80004956:	fa c8 f9 50 	sub	r8,sp,-1712
8000495a:	1a d8       	st.w	--sp,r8
8000495c:	fa c8 fa b8 	sub	r8,sp,-1352
80004960:	1a d8       	st.w	--sp,r8
80004962:	fa c8 fb b4 	sub	r8,sp,-1100
80004966:	1a d8       	st.w	--sp,r8
80004968:	fa c9 ff b4 	sub	r9,sp,-76
8000496c:	fa c8 f9 40 	sub	r8,sp,-1728
80004970:	04 9a       	mov	r10,r2
80004972:	0c 9b       	mov	r11,r6
80004974:	08 9c       	mov	r12,r4
80004976:	fe b0 f6 a3 	rcall	800036bc <get_arg>
8000497a:	2f dd       	sub	sp,-12
8000497c:	78 09       	ld.w	r9,r12[0x0]
8000497e:	c2 18       	rjmp	800049c0 <_vfprintf_r+0xfd4>
80004980:	2f f7       	sub	r7,-1
80004982:	10 39       	cp.w	r9,r8
80004984:	c0 84       	brge	80004994 <_vfprintf_r+0xfa8>
80004986:	fa ca f9 44 	sub	r10,sp,-1724
8000498a:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000498e:	ec f9 fd 88 	ld.w	r9,r6[-632]
80004992:	c1 78       	rjmp	800049c0 <_vfprintf_r+0xfd4>
80004994:	41 09       	lddsp	r9,sp[0x40]
80004996:	59 f8       	cp.w	r8,31
80004998:	e0 89 00 10 	brgt	800049b8 <_vfprintf_r+0xfcc>
8000499c:	f2 ca ff fc 	sub	r10,r9,-4
800049a0:	51 0a       	stdsp	sp[0x40],r10
800049a2:	fa c6 f9 44 	sub	r6,sp,-1724
800049a6:	72 09       	ld.w	r9,r9[0x0]
800049a8:	ec 08 00 3a 	add	r10,r6,r8<<0x3
800049ac:	f5 49 fd 88 	st.w	r10[-632],r9
800049b0:	2f f8       	sub	r8,-1
800049b2:	fb 48 06 b4 	st.w	sp[1716],r8
800049b6:	c0 58       	rjmp	800049c0 <_vfprintf_r+0xfd4>
800049b8:	f2 c8 ff fc 	sub	r8,r9,-4
800049bc:	51 08       	stdsp	sp[0x40],r8
800049be:	72 09       	ld.w	r9,r9[0x0]
800049c0:	33 08       	mov	r8,48
800049c2:	fb 68 06 b8 	st.b	sp[1720],r8
800049c6:	37 88       	mov	r8,120
800049c8:	30 0e       	mov	lr,0
800049ca:	fb 68 06 b9 	st.b	sp[1721],r8
800049ce:	fe cc b3 6e 	sub	r12,pc,-19602
800049d2:	50 19       	stdsp	sp[0x4],r9
800049d4:	a1 b5       	sbr	r5,0x1
800049d6:	50 0e       	stdsp	sp[0x0],lr
800049d8:	50 dc       	stdsp	sp[0x34],r12
800049da:	30 28       	mov	r8,2
800049dc:	37 80       	mov	r0,120
800049de:	e0 8f 02 a3 	bral	80004f24 <_vfprintf_r+0x1538>
800049e2:	50 a7       	stdsp	sp[0x28],r7
800049e4:	50 80       	stdsp	sp[0x20],r0
800049e6:	10 90       	mov	r0,r8
800049e8:	30 08       	mov	r8,0
800049ea:	fb 68 06 bb 	st.b	sp[1723],r8
800049ee:	0c 97       	mov	r7,r6
800049f0:	04 94       	mov	r4,r2
800049f2:	06 96       	mov	r6,r3
800049f4:	02 92       	mov	r2,r1
800049f6:	40 93       	lddsp	r3,sp[0x24]
800049f8:	40 41       	lddsp	r1,sp[0x10]
800049fa:	0e 99       	mov	r9,r7
800049fc:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004a00:	40 3b       	lddsp	r11,sp[0xc]
80004a02:	58 0b       	cp.w	r11,0
80004a04:	c1 d0       	breq	80004a3e <_vfprintf_r+0x1052>
80004a06:	10 36       	cp.w	r6,r8
80004a08:	c0 64       	brge	80004a14 <_vfprintf_r+0x1028>
80004a0a:	fa ca f9 44 	sub	r10,sp,-1724
80004a0e:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004a12:	c1 d8       	rjmp	80004a4c <_vfprintf_r+0x1060>
80004a14:	fa c8 f9 50 	sub	r8,sp,-1712
80004a18:	1a d8       	st.w	--sp,r8
80004a1a:	fa c8 fa b8 	sub	r8,sp,-1352
80004a1e:	1a d8       	st.w	--sp,r8
80004a20:	fa c8 fb b4 	sub	r8,sp,-1100
80004a24:	0c 9b       	mov	r11,r6
80004a26:	1a d8       	st.w	--sp,r8
80004a28:	04 9a       	mov	r10,r2
80004a2a:	fa c8 f9 40 	sub	r8,sp,-1728
80004a2e:	fa c9 ff b4 	sub	r9,sp,-76
80004a32:	08 9c       	mov	r12,r4
80004a34:	fe b0 f6 44 	rcall	800036bc <get_arg>
80004a38:	2f dd       	sub	sp,-12
80004a3a:	78 06       	ld.w	r6,r12[0x0]
80004a3c:	c2 08       	rjmp	80004a7c <_vfprintf_r+0x1090>
80004a3e:	2f f7       	sub	r7,-1
80004a40:	10 39       	cp.w	r9,r8
80004a42:	c0 84       	brge	80004a52 <_vfprintf_r+0x1066>
80004a44:	fa c9 f9 44 	sub	r9,sp,-1724
80004a48:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004a4c:	ec f6 fd 88 	ld.w	r6,r6[-632]
80004a50:	c1 68       	rjmp	80004a7c <_vfprintf_r+0x1090>
80004a52:	41 09       	lddsp	r9,sp[0x40]
80004a54:	59 f8       	cp.w	r8,31
80004a56:	e0 89 00 10 	brgt	80004a76 <_vfprintf_r+0x108a>
80004a5a:	f2 ca ff fc 	sub	r10,r9,-4
80004a5e:	51 0a       	stdsp	sp[0x40],r10
80004a60:	72 06       	ld.w	r6,r9[0x0]
80004a62:	fa ce f9 44 	sub	lr,sp,-1724
80004a66:	fc 08 00 39 	add	r9,lr,r8<<0x3
80004a6a:	f3 46 fd 88 	st.w	r9[-632],r6
80004a6e:	2f f8       	sub	r8,-1
80004a70:	fb 48 06 b4 	st.w	sp[1716],r8
80004a74:	c0 48       	rjmp	80004a7c <_vfprintf_r+0x1090>
80004a76:	72 06       	ld.w	r6,r9[0x0]
80004a78:	2f c9       	sub	r9,-4
80004a7a:	51 09       	stdsp	sp[0x40],r9
80004a7c:	40 2c       	lddsp	r12,sp[0x8]
80004a7e:	58 0c       	cp.w	r12,0
80004a80:	c1 05       	brlt	80004aa0 <_vfprintf_r+0x10b4>
80004a82:	18 9a       	mov	r10,r12
80004a84:	30 0b       	mov	r11,0
80004a86:	0c 9c       	mov	r12,r6
80004a88:	e0 a0 14 58 	rcall	80007338 <memchr>
80004a8c:	e0 80 02 df 	breq	8000504a <_vfprintf_r+0x165e>
80004a90:	f8 06 01 02 	sub	r2,r12,r6
80004a94:	40 2b       	lddsp	r11,sp[0x8]
80004a96:	16 32       	cp.w	r2,r11
80004a98:	e0 89 02 d9 	brgt	8000504a <_vfprintf_r+0x165e>
80004a9c:	e0 8f 02 d4 	bral	80005044 <_vfprintf_r+0x1658>
80004aa0:	30 0a       	mov	r10,0
80004aa2:	0c 9c       	mov	r12,r6
80004aa4:	50 2a       	stdsp	sp[0x8],r10
80004aa6:	e0 a0 19 33 	rcall	80007d0c <strlen>
80004aaa:	18 92       	mov	r2,r12
80004aac:	e0 8f 02 d2 	bral	80005050 <_vfprintf_r+0x1664>
80004ab0:	50 a7       	stdsp	sp[0x28],r7
80004ab2:	50 80       	stdsp	sp[0x20],r0
80004ab4:	0c 97       	mov	r7,r6
80004ab6:	04 94       	mov	r4,r2
80004ab8:	06 96       	mov	r6,r3
80004aba:	02 92       	mov	r2,r1
80004abc:	40 93       	lddsp	r3,sp[0x24]
80004abe:	10 90       	mov	r0,r8
80004ac0:	40 41       	lddsp	r1,sp[0x10]
80004ac2:	a5 a5       	sbr	r5,0x4
80004ac4:	c0 a8       	rjmp	80004ad8 <_vfprintf_r+0x10ec>
80004ac6:	50 a7       	stdsp	sp[0x28],r7
80004ac8:	50 80       	stdsp	sp[0x20],r0
80004aca:	0c 97       	mov	r7,r6
80004acc:	04 94       	mov	r4,r2
80004ace:	06 96       	mov	r6,r3
80004ad0:	02 92       	mov	r2,r1
80004ad2:	40 93       	lddsp	r3,sp[0x24]
80004ad4:	10 90       	mov	r0,r8
80004ad6:	40 41       	lddsp	r1,sp[0x10]
80004ad8:	ed b5 00 05 	bld	r5,0x5
80004adc:	c5 61       	brne	80004b88 <_vfprintf_r+0x119c>
80004ade:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004ae2:	40 39       	lddsp	r9,sp[0xc]
80004ae4:	58 09       	cp.w	r9,0
80004ae6:	c2 10       	breq	80004b28 <_vfprintf_r+0x113c>
80004ae8:	10 36       	cp.w	r6,r8
80004aea:	c0 74       	brge	80004af8 <_vfprintf_r+0x110c>
80004aec:	fa c8 f9 44 	sub	r8,sp,-1724
80004af0:	f0 06 00 36 	add	r6,r8,r6<<0x3
80004af4:	c2 38       	rjmp	80004b3a <_vfprintf_r+0x114e>
80004af6:	d7 03       	nop
80004af8:	fa c8 f9 50 	sub	r8,sp,-1712
80004afc:	1a d8       	st.w	--sp,r8
80004afe:	fa c8 fa b8 	sub	r8,sp,-1352
80004b02:	1a d8       	st.w	--sp,r8
80004b04:	fa c8 fb b4 	sub	r8,sp,-1100
80004b08:	1a d8       	st.w	--sp,r8
80004b0a:	fa c8 f9 40 	sub	r8,sp,-1728
80004b0e:	fa c9 ff b4 	sub	r9,sp,-76
80004b12:	04 9a       	mov	r10,r2
80004b14:	0c 9b       	mov	r11,r6
80004b16:	08 9c       	mov	r12,r4
80004b18:	fe b0 f5 d2 	rcall	800036bc <get_arg>
80004b1c:	2f dd       	sub	sp,-12
80004b1e:	f8 e8 00 00 	ld.d	r8,r12[0]
80004b22:	fa e9 00 00 	st.d	sp[0],r8
80004b26:	c2 e8       	rjmp	80004b82 <_vfprintf_r+0x1196>
80004b28:	ee ca ff ff 	sub	r10,r7,-1
80004b2c:	10 37       	cp.w	r7,r8
80004b2e:	c0 b4       	brge	80004b44 <_vfprintf_r+0x1158>
80004b30:	fa c8 f9 44 	sub	r8,sp,-1724
80004b34:	14 97       	mov	r7,r10
80004b36:	f0 06 00 36 	add	r6,r8,r6<<0x3
80004b3a:	ec ea fd 88 	ld.d	r10,r6[-632]
80004b3e:	fa eb 00 00 	st.d	sp[0],r10
80004b42:	c2 08       	rjmp	80004b82 <_vfprintf_r+0x1196>
80004b44:	41 09       	lddsp	r9,sp[0x40]
80004b46:	59 f8       	cp.w	r8,31
80004b48:	e0 89 00 16 	brgt	80004b74 <_vfprintf_r+0x1188>
80004b4c:	f2 e6 00 00 	ld.d	r6,r9[0]
80004b50:	f2 cb ff f8 	sub	r11,r9,-8
80004b54:	fa e7 00 00 	st.d	sp[0],r6
80004b58:	51 0b       	stdsp	sp[0x40],r11
80004b5a:	fa c6 f9 44 	sub	r6,sp,-1724
80004b5e:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004b62:	fa e6 00 00 	ld.d	r6,sp[0]
80004b66:	f2 e7 fd 88 	st.d	r9[-632],r6
80004b6a:	2f f8       	sub	r8,-1
80004b6c:	14 97       	mov	r7,r10
80004b6e:	fb 48 06 b4 	st.w	sp[1716],r8
80004b72:	c0 88       	rjmp	80004b82 <_vfprintf_r+0x1196>
80004b74:	f2 e6 00 00 	ld.d	r6,r9[0]
80004b78:	2f 89       	sub	r9,-8
80004b7a:	fa e7 00 00 	st.d	sp[0],r6
80004b7e:	51 09       	stdsp	sp[0x40],r9
80004b80:	14 97       	mov	r7,r10
80004b82:	30 18       	mov	r8,1
80004b84:	e0 8f 01 d0 	bral	80004f24 <_vfprintf_r+0x1538>
80004b88:	ed b5 00 04 	bld	r5,0x4
80004b8c:	c1 61       	brne	80004bb8 <_vfprintf_r+0x11cc>
80004b8e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004b92:	40 3e       	lddsp	lr,sp[0xc]
80004b94:	58 0e       	cp.w	lr,0
80004b96:	c0 80       	breq	80004ba6 <_vfprintf_r+0x11ba>
80004b98:	10 36       	cp.w	r6,r8
80004b9a:	c6 74       	brge	80004c68 <_vfprintf_r+0x127c>
80004b9c:	fa cc f9 44 	sub	r12,sp,-1724
80004ba0:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004ba4:	c8 08       	rjmp	80004ca4 <_vfprintf_r+0x12b8>
80004ba6:	ee ca ff ff 	sub	r10,r7,-1
80004baa:	10 37       	cp.w	r7,r8
80004bac:	c7 f4       	brge	80004caa <_vfprintf_r+0x12be>
80004bae:	fa cb f9 44 	sub	r11,sp,-1724
80004bb2:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004bb6:	c7 68       	rjmp	80004ca2 <_vfprintf_r+0x12b6>
80004bb8:	ed b5 00 06 	bld	r5,0x6
80004bbc:	c4 a1       	brne	80004c50 <_vfprintf_r+0x1264>
80004bbe:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004bc2:	40 3c       	lddsp	r12,sp[0xc]
80004bc4:	58 0c       	cp.w	r12,0
80004bc6:	c1 d0       	breq	80004c00 <_vfprintf_r+0x1214>
80004bc8:	10 36       	cp.w	r6,r8
80004bca:	c0 64       	brge	80004bd6 <_vfprintf_r+0x11ea>
80004bcc:	fa cb f9 44 	sub	r11,sp,-1724
80004bd0:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004bd4:	c1 f8       	rjmp	80004c12 <_vfprintf_r+0x1226>
80004bd6:	fa c8 f9 50 	sub	r8,sp,-1712
80004bda:	1a d8       	st.w	--sp,r8
80004bdc:	fa c8 fa b8 	sub	r8,sp,-1352
80004be0:	1a d8       	st.w	--sp,r8
80004be2:	fa c8 fb b4 	sub	r8,sp,-1100
80004be6:	1a d8       	st.w	--sp,r8
80004be8:	fa c8 f9 40 	sub	r8,sp,-1728
80004bec:	fa c9 ff b4 	sub	r9,sp,-76
80004bf0:	04 9a       	mov	r10,r2
80004bf2:	0c 9b       	mov	r11,r6
80004bf4:	08 9c       	mov	r12,r4
80004bf6:	fe b0 f5 63 	rcall	800036bc <get_arg>
80004bfa:	2f dd       	sub	sp,-12
80004bfc:	98 18       	ld.sh	r8,r12[0x2]
80004bfe:	c2 68       	rjmp	80004c4a <_vfprintf_r+0x125e>
80004c00:	ee ca ff ff 	sub	r10,r7,-1
80004c04:	10 37       	cp.w	r7,r8
80004c06:	c0 94       	brge	80004c18 <_vfprintf_r+0x122c>
80004c08:	fa c9 f9 44 	sub	r9,sp,-1724
80004c0c:	14 97       	mov	r7,r10
80004c0e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004c12:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80004c16:	c1 a8       	rjmp	80004c4a <_vfprintf_r+0x125e>
80004c18:	41 09       	lddsp	r9,sp[0x40]
80004c1a:	59 f8       	cp.w	r8,31
80004c1c:	e0 89 00 13 	brgt	80004c42 <_vfprintf_r+0x1256>
80004c20:	f2 cb ff fc 	sub	r11,r9,-4
80004c24:	51 0b       	stdsp	sp[0x40],r11
80004c26:	72 09       	ld.w	r9,r9[0x0]
80004c28:	fa c6 f9 44 	sub	r6,sp,-1724
80004c2c:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80004c30:	2f f8       	sub	r8,-1
80004c32:	f7 49 fd 88 	st.w	r11[-632],r9
80004c36:	fb 48 06 b4 	st.w	sp[1716],r8
80004c3a:	14 97       	mov	r7,r10
80004c3c:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80004c40:	c0 58       	rjmp	80004c4a <_vfprintf_r+0x125e>
80004c42:	92 18       	ld.sh	r8,r9[0x2]
80004c44:	14 97       	mov	r7,r10
80004c46:	2f c9       	sub	r9,-4
80004c48:	51 09       	stdsp	sp[0x40],r9
80004c4a:	5c 78       	castu.h	r8
80004c4c:	50 18       	stdsp	sp[0x4],r8
80004c4e:	c4 68       	rjmp	80004cda <_vfprintf_r+0x12ee>
80004c50:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004c54:	40 3c       	lddsp	r12,sp[0xc]
80004c56:	58 0c       	cp.w	r12,0
80004c58:	c1 d0       	breq	80004c92 <_vfprintf_r+0x12a6>
80004c5a:	10 36       	cp.w	r6,r8
80004c5c:	c0 64       	brge	80004c68 <_vfprintf_r+0x127c>
80004c5e:	fa cb f9 44 	sub	r11,sp,-1724
80004c62:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004c66:	c1 f8       	rjmp	80004ca4 <_vfprintf_r+0x12b8>
80004c68:	fa c8 f9 50 	sub	r8,sp,-1712
80004c6c:	1a d8       	st.w	--sp,r8
80004c6e:	fa c8 fa b8 	sub	r8,sp,-1352
80004c72:	0c 9b       	mov	r11,r6
80004c74:	1a d8       	st.w	--sp,r8
80004c76:	fa c8 fb b4 	sub	r8,sp,-1100
80004c7a:	04 9a       	mov	r10,r2
80004c7c:	1a d8       	st.w	--sp,r8
80004c7e:	08 9c       	mov	r12,r4
80004c80:	fa c8 f9 40 	sub	r8,sp,-1728
80004c84:	fa c9 ff b4 	sub	r9,sp,-76
80004c88:	fe b0 f5 1a 	rcall	800036bc <get_arg>
80004c8c:	2f dd       	sub	sp,-12
80004c8e:	78 0b       	ld.w	r11,r12[0x0]
80004c90:	c2 48       	rjmp	80004cd8 <_vfprintf_r+0x12ec>
80004c92:	ee ca ff ff 	sub	r10,r7,-1
80004c96:	10 37       	cp.w	r7,r8
80004c98:	c0 94       	brge	80004caa <_vfprintf_r+0x12be>
80004c9a:	fa c9 f9 44 	sub	r9,sp,-1724
80004c9e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004ca2:	14 97       	mov	r7,r10
80004ca4:	ec fb fd 88 	ld.w	r11,r6[-632]
80004ca8:	c1 88       	rjmp	80004cd8 <_vfprintf_r+0x12ec>
80004caa:	41 09       	lddsp	r9,sp[0x40]
80004cac:	59 f8       	cp.w	r8,31
80004cae:	e0 89 00 11 	brgt	80004cd0 <_vfprintf_r+0x12e4>
80004cb2:	f2 cb ff fc 	sub	r11,r9,-4
80004cb6:	51 0b       	stdsp	sp[0x40],r11
80004cb8:	fa c6 f9 44 	sub	r6,sp,-1724
80004cbc:	72 0b       	ld.w	r11,r9[0x0]
80004cbe:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004cc2:	f3 4b fd 88 	st.w	r9[-632],r11
80004cc6:	2f f8       	sub	r8,-1
80004cc8:	14 97       	mov	r7,r10
80004cca:	fb 48 06 b4 	st.w	sp[1716],r8
80004cce:	c0 58       	rjmp	80004cd8 <_vfprintf_r+0x12ec>
80004cd0:	72 0b       	ld.w	r11,r9[0x0]
80004cd2:	14 97       	mov	r7,r10
80004cd4:	2f c9       	sub	r9,-4
80004cd6:	51 09       	stdsp	sp[0x40],r9
80004cd8:	50 1b       	stdsp	sp[0x4],r11
80004cda:	30 0e       	mov	lr,0
80004cdc:	30 18       	mov	r8,1
80004cde:	50 0e       	stdsp	sp[0x0],lr
80004ce0:	c2 29       	rjmp	80004f24 <_vfprintf_r+0x1538>
80004ce2:	50 a7       	stdsp	sp[0x28],r7
80004ce4:	50 80       	stdsp	sp[0x20],r0
80004ce6:	0c 97       	mov	r7,r6
80004ce8:	04 94       	mov	r4,r2
80004cea:	06 96       	mov	r6,r3
80004cec:	02 92       	mov	r2,r1
80004cee:	fe cc b6 8e 	sub	r12,pc,-18802
80004cf2:	40 93       	lddsp	r3,sp[0x24]
80004cf4:	10 90       	mov	r0,r8
80004cf6:	40 41       	lddsp	r1,sp[0x10]
80004cf8:	50 dc       	stdsp	sp[0x34],r12
80004cfa:	ed b5 00 05 	bld	r5,0x5
80004cfe:	c5 51       	brne	80004da8 <_vfprintf_r+0x13bc>
80004d00:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004d04:	40 3b       	lddsp	r11,sp[0xc]
80004d06:	58 0b       	cp.w	r11,0
80004d08:	c2 20       	breq	80004d4c <_vfprintf_r+0x1360>
80004d0a:	10 36       	cp.w	r6,r8
80004d0c:	c0 a4       	brge	80004d20 <_vfprintf_r+0x1334>
80004d0e:	fa ca f9 44 	sub	r10,sp,-1724
80004d12:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004d16:	ec e8 fd 88 	ld.d	r8,r6[-632]
80004d1a:	fa e9 00 00 	st.d	sp[0],r8
80004d1e:	cf 28       	rjmp	80004f02 <_vfprintf_r+0x1516>
80004d20:	fa c8 f9 50 	sub	r8,sp,-1712
80004d24:	1a d8       	st.w	--sp,r8
80004d26:	fa c8 fa b8 	sub	r8,sp,-1352
80004d2a:	04 9a       	mov	r10,r2
80004d2c:	1a d8       	st.w	--sp,r8
80004d2e:	0c 9b       	mov	r11,r6
80004d30:	fa c8 fb b4 	sub	r8,sp,-1100
80004d34:	08 9c       	mov	r12,r4
80004d36:	1a d8       	st.w	--sp,r8
80004d38:	fa c8 f9 40 	sub	r8,sp,-1728
80004d3c:	fa c9 ff b4 	sub	r9,sp,-76
80004d40:	fe b0 f4 be 	rcall	800036bc <get_arg>
80004d44:	2f dd       	sub	sp,-12
80004d46:	f8 ea 00 00 	ld.d	r10,r12[0]
80004d4a:	c0 c8       	rjmp	80004d62 <_vfprintf_r+0x1376>
80004d4c:	ee ca ff ff 	sub	r10,r7,-1
80004d50:	10 37       	cp.w	r7,r8
80004d52:	c0 b4       	brge	80004d68 <_vfprintf_r+0x137c>
80004d54:	fa c9 f9 44 	sub	r9,sp,-1724
80004d58:	14 97       	mov	r7,r10
80004d5a:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004d5e:	ec ea fd 88 	ld.d	r10,r6[-632]
80004d62:	fa eb 00 00 	st.d	sp[0],r10
80004d66:	cc e8       	rjmp	80004f02 <_vfprintf_r+0x1516>
80004d68:	41 09       	lddsp	r9,sp[0x40]
80004d6a:	59 f8       	cp.w	r8,31
80004d6c:	e0 89 00 16 	brgt	80004d98 <_vfprintf_r+0x13ac>
80004d70:	f2 e6 00 00 	ld.d	r6,r9[0]
80004d74:	f2 cb ff f8 	sub	r11,r9,-8
80004d78:	fa e7 00 00 	st.d	sp[0],r6
80004d7c:	51 0b       	stdsp	sp[0x40],r11
80004d7e:	fa c6 f9 44 	sub	r6,sp,-1724
80004d82:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004d86:	fa e6 00 00 	ld.d	r6,sp[0]
80004d8a:	f2 e7 fd 88 	st.d	r9[-632],r6
80004d8e:	2f f8       	sub	r8,-1
80004d90:	14 97       	mov	r7,r10
80004d92:	fb 48 06 b4 	st.w	sp[1716],r8
80004d96:	cb 68       	rjmp	80004f02 <_vfprintf_r+0x1516>
80004d98:	f2 e6 00 00 	ld.d	r6,r9[0]
80004d9c:	2f 89       	sub	r9,-8
80004d9e:	fa e7 00 00 	st.d	sp[0],r6
80004da2:	51 09       	stdsp	sp[0x40],r9
80004da4:	14 97       	mov	r7,r10
80004da6:	ca e8       	rjmp	80004f02 <_vfprintf_r+0x1516>
80004da8:	ed b5 00 04 	bld	r5,0x4
80004dac:	c1 71       	brne	80004dda <_vfprintf_r+0x13ee>
80004dae:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004db2:	40 3e       	lddsp	lr,sp[0xc]
80004db4:	58 0e       	cp.w	lr,0
80004db6:	c0 80       	breq	80004dc6 <_vfprintf_r+0x13da>
80004db8:	10 36       	cp.w	r6,r8
80004dba:	c6 94       	brge	80004e8c <_vfprintf_r+0x14a0>
80004dbc:	fa cc f9 44 	sub	r12,sp,-1724
80004dc0:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004dc4:	c8 28       	rjmp	80004ec8 <_vfprintf_r+0x14dc>
80004dc6:	ee ca ff ff 	sub	r10,r7,-1
80004dca:	10 37       	cp.w	r7,r8
80004dcc:	e0 84 00 81 	brge	80004ece <_vfprintf_r+0x14e2>
80004dd0:	fa cb f9 44 	sub	r11,sp,-1724
80004dd4:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004dd8:	c7 78       	rjmp	80004ec6 <_vfprintf_r+0x14da>
80004dda:	ed b5 00 06 	bld	r5,0x6
80004dde:	c4 b1       	brne	80004e74 <_vfprintf_r+0x1488>
80004de0:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004de4:	40 3c       	lddsp	r12,sp[0xc]
80004de6:	58 0c       	cp.w	r12,0
80004de8:	c1 d0       	breq	80004e22 <_vfprintf_r+0x1436>
80004dea:	10 36       	cp.w	r6,r8
80004dec:	c0 64       	brge	80004df8 <_vfprintf_r+0x140c>
80004dee:	fa cb f9 44 	sub	r11,sp,-1724
80004df2:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004df6:	c1 f8       	rjmp	80004e34 <_vfprintf_r+0x1448>
80004df8:	fa c8 f9 50 	sub	r8,sp,-1712
80004dfc:	1a d8       	st.w	--sp,r8
80004dfe:	fa c8 fa b8 	sub	r8,sp,-1352
80004e02:	1a d8       	st.w	--sp,r8
80004e04:	fa c8 fb b4 	sub	r8,sp,-1100
80004e08:	1a d8       	st.w	--sp,r8
80004e0a:	fa c8 f9 40 	sub	r8,sp,-1728
80004e0e:	fa c9 ff b4 	sub	r9,sp,-76
80004e12:	04 9a       	mov	r10,r2
80004e14:	0c 9b       	mov	r11,r6
80004e16:	08 9c       	mov	r12,r4
80004e18:	fe b0 f4 52 	rcall	800036bc <get_arg>
80004e1c:	2f dd       	sub	sp,-12
80004e1e:	98 18       	ld.sh	r8,r12[0x2]
80004e20:	c2 78       	rjmp	80004e6e <_vfprintf_r+0x1482>
80004e22:	ee ca ff ff 	sub	r10,r7,-1
80004e26:	10 37       	cp.w	r7,r8
80004e28:	c0 a4       	brge	80004e3c <_vfprintf_r+0x1450>
80004e2a:	fa c9 f9 44 	sub	r9,sp,-1724
80004e2e:	14 97       	mov	r7,r10
80004e30:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004e34:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80004e38:	c1 b8       	rjmp	80004e6e <_vfprintf_r+0x1482>
80004e3a:	d7 03       	nop
80004e3c:	41 09       	lddsp	r9,sp[0x40]
80004e3e:	59 f8       	cp.w	r8,31
80004e40:	e0 89 00 13 	brgt	80004e66 <_vfprintf_r+0x147a>
80004e44:	f2 cb ff fc 	sub	r11,r9,-4
80004e48:	51 0b       	stdsp	sp[0x40],r11
80004e4a:	72 09       	ld.w	r9,r9[0x0]
80004e4c:	fa c6 f9 44 	sub	r6,sp,-1724
80004e50:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80004e54:	2f f8       	sub	r8,-1
80004e56:	f7 49 fd 88 	st.w	r11[-632],r9
80004e5a:	fb 48 06 b4 	st.w	sp[1716],r8
80004e5e:	14 97       	mov	r7,r10
80004e60:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80004e64:	c0 58       	rjmp	80004e6e <_vfprintf_r+0x1482>
80004e66:	92 18       	ld.sh	r8,r9[0x2]
80004e68:	14 97       	mov	r7,r10
80004e6a:	2f c9       	sub	r9,-4
80004e6c:	51 09       	stdsp	sp[0x40],r9
80004e6e:	5c 78       	castu.h	r8
80004e70:	50 18       	stdsp	sp[0x4],r8
80004e72:	c4 68       	rjmp	80004efe <_vfprintf_r+0x1512>
80004e74:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004e78:	40 3c       	lddsp	r12,sp[0xc]
80004e7a:	58 0c       	cp.w	r12,0
80004e7c:	c1 d0       	breq	80004eb6 <_vfprintf_r+0x14ca>
80004e7e:	10 36       	cp.w	r6,r8
80004e80:	c0 64       	brge	80004e8c <_vfprintf_r+0x14a0>
80004e82:	fa cb f9 44 	sub	r11,sp,-1724
80004e86:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004e8a:	c1 f8       	rjmp	80004ec8 <_vfprintf_r+0x14dc>
80004e8c:	fa c8 f9 50 	sub	r8,sp,-1712
80004e90:	1a d8       	st.w	--sp,r8
80004e92:	fa c8 fa b8 	sub	r8,sp,-1352
80004e96:	0c 9b       	mov	r11,r6
80004e98:	1a d8       	st.w	--sp,r8
80004e9a:	fa c8 fb b4 	sub	r8,sp,-1100
80004e9e:	04 9a       	mov	r10,r2
80004ea0:	1a d8       	st.w	--sp,r8
80004ea2:	08 9c       	mov	r12,r4
80004ea4:	fa c8 f9 40 	sub	r8,sp,-1728
80004ea8:	fa c9 ff b4 	sub	r9,sp,-76
80004eac:	fe b0 f4 08 	rcall	800036bc <get_arg>
80004eb0:	2f dd       	sub	sp,-12
80004eb2:	78 0b       	ld.w	r11,r12[0x0]
80004eb4:	c2 48       	rjmp	80004efc <_vfprintf_r+0x1510>
80004eb6:	ee ca ff ff 	sub	r10,r7,-1
80004eba:	10 37       	cp.w	r7,r8
80004ebc:	c0 94       	brge	80004ece <_vfprintf_r+0x14e2>
80004ebe:	fa c9 f9 44 	sub	r9,sp,-1724
80004ec2:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004ec6:	14 97       	mov	r7,r10
80004ec8:	ec fb fd 88 	ld.w	r11,r6[-632]
80004ecc:	c1 88       	rjmp	80004efc <_vfprintf_r+0x1510>
80004ece:	41 09       	lddsp	r9,sp[0x40]
80004ed0:	59 f8       	cp.w	r8,31
80004ed2:	e0 89 00 11 	brgt	80004ef4 <_vfprintf_r+0x1508>
80004ed6:	f2 cb ff fc 	sub	r11,r9,-4
80004eda:	51 0b       	stdsp	sp[0x40],r11
80004edc:	fa c6 f9 44 	sub	r6,sp,-1724
80004ee0:	72 0b       	ld.w	r11,r9[0x0]
80004ee2:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004ee6:	f3 4b fd 88 	st.w	r9[-632],r11
80004eea:	2f f8       	sub	r8,-1
80004eec:	14 97       	mov	r7,r10
80004eee:	fb 48 06 b4 	st.w	sp[1716],r8
80004ef2:	c0 58       	rjmp	80004efc <_vfprintf_r+0x1510>
80004ef4:	72 0b       	ld.w	r11,r9[0x0]
80004ef6:	14 97       	mov	r7,r10
80004ef8:	2f c9       	sub	r9,-4
80004efa:	51 09       	stdsp	sp[0x40],r9
80004efc:	50 1b       	stdsp	sp[0x4],r11
80004efe:	30 0e       	mov	lr,0
80004f00:	50 0e       	stdsp	sp[0x0],lr
80004f02:	40 08       	lddsp	r8,sp[0x0]
80004f04:	40 1c       	lddsp	r12,sp[0x4]
80004f06:	18 48       	or	r8,r12
80004f08:	5f 19       	srne	r9
80004f0a:	0a 98       	mov	r8,r5
80004f0c:	eb e9 00 09 	and	r9,r5,r9
80004f10:	a1 b8       	sbr	r8,0x1
80004f12:	58 09       	cp.w	r9,0
80004f14:	c0 70       	breq	80004f22 <_vfprintf_r+0x1536>
80004f16:	10 95       	mov	r5,r8
80004f18:	fb 60 06 b9 	st.b	sp[1721],r0
80004f1c:	33 08       	mov	r8,48
80004f1e:	fb 68 06 b8 	st.b	sp[1720],r8
80004f22:	30 28       	mov	r8,2
80004f24:	30 09       	mov	r9,0
80004f26:	fb 69 06 bb 	st.b	sp[1723],r9
80004f2a:	0a 99       	mov	r9,r5
80004f2c:	a7 d9       	cbr	r9,0x7
80004f2e:	40 2b       	lddsp	r11,sp[0x8]
80004f30:	40 16       	lddsp	r6,sp[0x4]
80004f32:	58 0b       	cp.w	r11,0
80004f34:	5f 1a       	srne	r10
80004f36:	f2 05 17 40 	movge	r5,r9
80004f3a:	fa c2 f9 78 	sub	r2,sp,-1672
80004f3e:	40 09       	lddsp	r9,sp[0x0]
80004f40:	0c 49       	or	r9,r6
80004f42:	5f 19       	srne	r9
80004f44:	f5 e9 10 09 	or	r9,r10,r9
80004f48:	c5 c0       	breq	80005000 <_vfprintf_r+0x1614>
80004f4a:	30 19       	mov	r9,1
80004f4c:	f2 08 18 00 	cp.b	r8,r9
80004f50:	c0 60       	breq	80004f5c <_vfprintf_r+0x1570>
80004f52:	30 29       	mov	r9,2
80004f54:	f2 08 18 00 	cp.b	r8,r9
80004f58:	c0 41       	brne	80004f60 <_vfprintf_r+0x1574>
80004f5a:	c3 c8       	rjmp	80004fd2 <_vfprintf_r+0x15e6>
80004f5c:	04 96       	mov	r6,r2
80004f5e:	c3 08       	rjmp	80004fbe <_vfprintf_r+0x15d2>
80004f60:	04 96       	mov	r6,r2
80004f62:	fa e8 00 00 	ld.d	r8,sp[0]
80004f66:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
80004f6a:	2d 0a       	sub	r10,-48
80004f6c:	0c fa       	st.b	--r6,r10
80004f6e:	f0 0b 16 03 	lsr	r11,r8,0x3
80004f72:	f2 0c 16 03 	lsr	r12,r9,0x3
80004f76:	f7 e9 11 db 	or	r11,r11,r9<<0x1d
80004f7a:	18 99       	mov	r9,r12
80004f7c:	16 98       	mov	r8,r11
80004f7e:	58 08       	cp.w	r8,0
80004f80:	5c 29       	cpc	r9
80004f82:	cf 21       	brne	80004f66 <_vfprintf_r+0x157a>
80004f84:	fa e9 00 00 	st.d	sp[0],r8
80004f88:	ed b5 00 00 	bld	r5,0x0
80004f8c:	c4 51       	brne	80005016 <_vfprintf_r+0x162a>
80004f8e:	33 09       	mov	r9,48
80004f90:	f2 0a 18 00 	cp.b	r10,r9
80004f94:	c4 10       	breq	80005016 <_vfprintf_r+0x162a>
80004f96:	0c f9       	st.b	--r6,r9
80004f98:	c3 f8       	rjmp	80005016 <_vfprintf_r+0x162a>
80004f9a:	fa ea 00 00 	ld.d	r10,sp[0]
80004f9e:	30 a8       	mov	r8,10
80004fa0:	30 09       	mov	r9,0
80004fa2:	e0 a0 1e 31 	rcall	80008c04 <__avr32_umod64>
80004fa6:	30 a8       	mov	r8,10
80004fa8:	2d 0a       	sub	r10,-48
80004faa:	30 09       	mov	r9,0
80004fac:	ac 8a       	st.b	r6[0x0],r10
80004fae:	fa ea 00 00 	ld.d	r10,sp[0]
80004fb2:	e0 a0 1c f7 	rcall	800089a0 <__avr32_udiv64>
80004fb6:	16 99       	mov	r9,r11
80004fb8:	14 98       	mov	r8,r10
80004fba:	fa e9 00 00 	st.d	sp[0],r8
80004fbe:	20 16       	sub	r6,1
80004fc0:	fa ea 00 00 	ld.d	r10,sp[0]
80004fc4:	58 9a       	cp.w	r10,9
80004fc6:	5c 2b       	cpc	r11
80004fc8:	fe 9b ff e9 	brhi	80004f9a <_vfprintf_r+0x15ae>
80004fcc:	1b f8       	ld.ub	r8,sp[0x7]
80004fce:	2d 08       	sub	r8,-48
80004fd0:	c2 08       	rjmp	80005010 <_vfprintf_r+0x1624>
80004fd2:	04 96       	mov	r6,r2
80004fd4:	fa e8 00 00 	ld.d	r8,sp[0]
80004fd8:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
80004fdc:	40 de       	lddsp	lr,sp[0x34]
80004fde:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
80004fe2:	0c fa       	st.b	--r6,r10
80004fe4:	f2 0b 16 04 	lsr	r11,r9,0x4
80004fe8:	f0 0a 16 04 	lsr	r10,r8,0x4
80004fec:	f5 e9 11 ca 	or	r10,r10,r9<<0x1c
80004ff0:	16 99       	mov	r9,r11
80004ff2:	14 98       	mov	r8,r10
80004ff4:	58 08       	cp.w	r8,0
80004ff6:	5c 29       	cpc	r9
80004ff8:	cf 01       	brne	80004fd8 <_vfprintf_r+0x15ec>
80004ffa:	fa e9 00 00 	st.d	sp[0],r8
80004ffe:	c0 c8       	rjmp	80005016 <_vfprintf_r+0x162a>
80005000:	58 08       	cp.w	r8,0
80005002:	c0 91       	brne	80005014 <_vfprintf_r+0x1628>
80005004:	ed b5 00 00 	bld	r5,0x0
80005008:	c0 61       	brne	80005014 <_vfprintf_r+0x1628>
8000500a:	fa c6 f9 79 	sub	r6,sp,-1671
8000500e:	33 08       	mov	r8,48
80005010:	ac 88       	st.b	r6[0x0],r8
80005012:	c0 28       	rjmp	80005016 <_vfprintf_r+0x162a>
80005014:	04 96       	mov	r6,r2
80005016:	0c 12       	sub	r2,r6
80005018:	c1 c8       	rjmp	80005050 <_vfprintf_r+0x1664>
8000501a:	50 a7       	stdsp	sp[0x28],r7
8000501c:	50 80       	stdsp	sp[0x20],r0
8000501e:	40 93       	lddsp	r3,sp[0x24]
80005020:	0c 97       	mov	r7,r6
80005022:	10 90       	mov	r0,r8
80005024:	04 94       	mov	r4,r2
80005026:	40 41       	lddsp	r1,sp[0x10]
80005028:	58 08       	cp.w	r8,0
8000502a:	e0 80 04 4f 	breq	800058c8 <_vfprintf_r+0x1edc>
8000502e:	fb 68 06 60 	st.b	sp[1632],r8
80005032:	30 0c       	mov	r12,0
80005034:	30 08       	mov	r8,0
80005036:	30 12       	mov	r2,1
80005038:	fb 68 06 bb 	st.b	sp[1723],r8
8000503c:	50 2c       	stdsp	sp[0x8],r12
8000503e:	fa c6 f9 a0 	sub	r6,sp,-1632
80005042:	c0 78       	rjmp	80005050 <_vfprintf_r+0x1664>
80005044:	30 0b       	mov	r11,0
80005046:	50 2b       	stdsp	sp[0x8],r11
80005048:	c0 48       	rjmp	80005050 <_vfprintf_r+0x1664>
8000504a:	40 22       	lddsp	r2,sp[0x8]
8000504c:	30 0a       	mov	r10,0
8000504e:	50 2a       	stdsp	sp[0x8],r10
80005050:	40 29       	lddsp	r9,sp[0x8]
80005052:	e4 09 0c 49 	max	r9,r2,r9
80005056:	fb 38 06 bb 	ld.ub	r8,sp[1723]
8000505a:	50 39       	stdsp	sp[0xc],r9
8000505c:	0a 9e       	mov	lr,r5
8000505e:	30 09       	mov	r9,0
80005060:	e2 1e 00 02 	andl	lr,0x2,COH
80005064:	f2 08 18 00 	cp.b	r8,r9
80005068:	fb f8 10 03 	ld.wne	r8,sp[0xc]
8000506c:	f7 b8 01 ff 	subne	r8,-1
80005070:	fb f8 1a 03 	st.wne	sp[0xc],r8
80005074:	0a 9b       	mov	r11,r5
80005076:	58 0e       	cp.w	lr,0
80005078:	fb fc 10 03 	ld.wne	r12,sp[0xc]
8000507c:	f7 bc 01 fe 	subne	r12,-2
80005080:	fb fc 1a 03 	st.wne	sp[0xc],r12
80005084:	e2 1b 00 84 	andl	r11,0x84,COH
80005088:	50 fe       	stdsp	sp[0x3c],lr
8000508a:	50 9b       	stdsp	sp[0x24],r11
8000508c:	c4 71       	brne	8000511a <_vfprintf_r+0x172e>
8000508e:	40 8a       	lddsp	r10,sp[0x20]
80005090:	40 39       	lddsp	r9,sp[0xc]
80005092:	12 1a       	sub	r10,r9
80005094:	50 4a       	stdsp	sp[0x10],r10
80005096:	58 0a       	cp.w	r10,0
80005098:	e0 89 00 20 	brgt	800050d8 <_vfprintf_r+0x16ec>
8000509c:	c3 f8       	rjmp	8000511a <_vfprintf_r+0x172e>
8000509e:	2f 09       	sub	r9,-16
800050a0:	2f f8       	sub	r8,-1
800050a2:	fe ce ba 2a 	sub	lr,pc,-17878
800050a6:	31 0c       	mov	r12,16
800050a8:	fb 49 06 90 	st.w	sp[1680],r9
800050ac:	87 0e       	st.w	r3[0x0],lr
800050ae:	87 1c       	st.w	r3[0x4],r12
800050b0:	fb 48 06 8c 	st.w	sp[1676],r8
800050b4:	58 78       	cp.w	r8,7
800050b6:	e0 89 00 04 	brgt	800050be <_vfprintf_r+0x16d2>
800050ba:	2f 83       	sub	r3,-8
800050bc:	c0 b8       	rjmp	800050d2 <_vfprintf_r+0x16e6>
800050be:	fa ca f9 78 	sub	r10,sp,-1672
800050c2:	02 9b       	mov	r11,r1
800050c4:	08 9c       	mov	r12,r4
800050c6:	fe b0 f4 85 	rcall	800039d0 <__sprint_r>
800050ca:	e0 81 04 10 	brne	800058ea <_vfprintf_r+0x1efe>
800050ce:	fa c3 f9 e0 	sub	r3,sp,-1568
800050d2:	40 4b       	lddsp	r11,sp[0x10]
800050d4:	21 0b       	sub	r11,16
800050d6:	50 4b       	stdsp	sp[0x10],r11
800050d8:	fa f9 06 90 	ld.w	r9,sp[1680]
800050dc:	fa f8 06 8c 	ld.w	r8,sp[1676]
800050e0:	fe ca ba 68 	sub	r10,pc,-17816
800050e4:	40 4e       	lddsp	lr,sp[0x10]
800050e6:	59 0e       	cp.w	lr,16
800050e8:	fe 99 ff db 	brgt	8000509e <_vfprintf_r+0x16b2>
800050ec:	1c 09       	add	r9,lr
800050ee:	2f f8       	sub	r8,-1
800050f0:	87 0a       	st.w	r3[0x0],r10
800050f2:	fb 49 06 90 	st.w	sp[1680],r9
800050f6:	87 1e       	st.w	r3[0x4],lr
800050f8:	fb 48 06 8c 	st.w	sp[1676],r8
800050fc:	58 78       	cp.w	r8,7
800050fe:	e0 89 00 04 	brgt	80005106 <_vfprintf_r+0x171a>
80005102:	2f 83       	sub	r3,-8
80005104:	c0 b8       	rjmp	8000511a <_vfprintf_r+0x172e>
80005106:	fa ca f9 78 	sub	r10,sp,-1672
8000510a:	02 9b       	mov	r11,r1
8000510c:	08 9c       	mov	r12,r4
8000510e:	fe b0 f4 61 	rcall	800039d0 <__sprint_r>
80005112:	e0 81 03 ec 	brne	800058ea <_vfprintf_r+0x1efe>
80005116:	fa c3 f9 e0 	sub	r3,sp,-1568
8000511a:	30 09       	mov	r9,0
8000511c:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80005120:	f2 08 18 00 	cp.b	r8,r9
80005124:	c1 f0       	breq	80005162 <_vfprintf_r+0x1776>
80005126:	fa f8 06 90 	ld.w	r8,sp[1680]
8000512a:	fa c9 f9 45 	sub	r9,sp,-1723
8000512e:	2f f8       	sub	r8,-1
80005130:	87 09       	st.w	r3[0x0],r9
80005132:	fb 48 06 90 	st.w	sp[1680],r8
80005136:	30 19       	mov	r9,1
80005138:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000513c:	87 19       	st.w	r3[0x4],r9
8000513e:	2f f8       	sub	r8,-1
80005140:	fb 48 06 8c 	st.w	sp[1676],r8
80005144:	58 78       	cp.w	r8,7
80005146:	e0 89 00 04 	brgt	8000514e <_vfprintf_r+0x1762>
8000514a:	2f 83       	sub	r3,-8
8000514c:	c0 b8       	rjmp	80005162 <_vfprintf_r+0x1776>
8000514e:	fa ca f9 78 	sub	r10,sp,-1672
80005152:	02 9b       	mov	r11,r1
80005154:	08 9c       	mov	r12,r4
80005156:	fe b0 f4 3d 	rcall	800039d0 <__sprint_r>
8000515a:	e0 81 03 c8 	brne	800058ea <_vfprintf_r+0x1efe>
8000515e:	fa c3 f9 e0 	sub	r3,sp,-1568
80005162:	40 fc       	lddsp	r12,sp[0x3c]
80005164:	58 0c       	cp.w	r12,0
80005166:	c1 f0       	breq	800051a4 <_vfprintf_r+0x17b8>
80005168:	fa f8 06 90 	ld.w	r8,sp[1680]
8000516c:	fa c9 f9 48 	sub	r9,sp,-1720
80005170:	2f e8       	sub	r8,-2
80005172:	87 09       	st.w	r3[0x0],r9
80005174:	fb 48 06 90 	st.w	sp[1680],r8
80005178:	30 29       	mov	r9,2
8000517a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000517e:	87 19       	st.w	r3[0x4],r9
80005180:	2f f8       	sub	r8,-1
80005182:	fb 48 06 8c 	st.w	sp[1676],r8
80005186:	58 78       	cp.w	r8,7
80005188:	e0 89 00 04 	brgt	80005190 <_vfprintf_r+0x17a4>
8000518c:	2f 83       	sub	r3,-8
8000518e:	c0 b8       	rjmp	800051a4 <_vfprintf_r+0x17b8>
80005190:	fa ca f9 78 	sub	r10,sp,-1672
80005194:	02 9b       	mov	r11,r1
80005196:	08 9c       	mov	r12,r4
80005198:	fe b0 f4 1c 	rcall	800039d0 <__sprint_r>
8000519c:	e0 81 03 a7 	brne	800058ea <_vfprintf_r+0x1efe>
800051a0:	fa c3 f9 e0 	sub	r3,sp,-1568
800051a4:	40 9b       	lddsp	r11,sp[0x24]
800051a6:	e0 4b 00 80 	cp.w	r11,128
800051aa:	c4 71       	brne	80005238 <_vfprintf_r+0x184c>
800051ac:	40 8a       	lddsp	r10,sp[0x20]
800051ae:	40 39       	lddsp	r9,sp[0xc]
800051b0:	12 1a       	sub	r10,r9
800051b2:	50 4a       	stdsp	sp[0x10],r10
800051b4:	58 0a       	cp.w	r10,0
800051b6:	e0 89 00 20 	brgt	800051f6 <_vfprintf_r+0x180a>
800051ba:	c3 f8       	rjmp	80005238 <_vfprintf_r+0x184c>
800051bc:	2f 09       	sub	r9,-16
800051be:	2f f8       	sub	r8,-1
800051c0:	fe ce bb 38 	sub	lr,pc,-17608
800051c4:	31 0c       	mov	r12,16
800051c6:	fb 49 06 90 	st.w	sp[1680],r9
800051ca:	87 0e       	st.w	r3[0x0],lr
800051cc:	87 1c       	st.w	r3[0x4],r12
800051ce:	fb 48 06 8c 	st.w	sp[1676],r8
800051d2:	58 78       	cp.w	r8,7
800051d4:	e0 89 00 04 	brgt	800051dc <_vfprintf_r+0x17f0>
800051d8:	2f 83       	sub	r3,-8
800051da:	c0 b8       	rjmp	800051f0 <_vfprintf_r+0x1804>
800051dc:	fa ca f9 78 	sub	r10,sp,-1672
800051e0:	02 9b       	mov	r11,r1
800051e2:	08 9c       	mov	r12,r4
800051e4:	fe b0 f3 f6 	rcall	800039d0 <__sprint_r>
800051e8:	e0 81 03 81 	brne	800058ea <_vfprintf_r+0x1efe>
800051ec:	fa c3 f9 e0 	sub	r3,sp,-1568
800051f0:	40 4b       	lddsp	r11,sp[0x10]
800051f2:	21 0b       	sub	r11,16
800051f4:	50 4b       	stdsp	sp[0x10],r11
800051f6:	fa f9 06 90 	ld.w	r9,sp[1680]
800051fa:	fa f8 06 8c 	ld.w	r8,sp[1676]
800051fe:	fe ca bb 76 	sub	r10,pc,-17546
80005202:	40 4e       	lddsp	lr,sp[0x10]
80005204:	59 0e       	cp.w	lr,16
80005206:	fe 99 ff db 	brgt	800051bc <_vfprintf_r+0x17d0>
8000520a:	1c 09       	add	r9,lr
8000520c:	2f f8       	sub	r8,-1
8000520e:	87 0a       	st.w	r3[0x0],r10
80005210:	fb 49 06 90 	st.w	sp[1680],r9
80005214:	87 1e       	st.w	r3[0x4],lr
80005216:	fb 48 06 8c 	st.w	sp[1676],r8
8000521a:	58 78       	cp.w	r8,7
8000521c:	e0 89 00 04 	brgt	80005224 <_vfprintf_r+0x1838>
80005220:	2f 83       	sub	r3,-8
80005222:	c0 b8       	rjmp	80005238 <_vfprintf_r+0x184c>
80005224:	fa ca f9 78 	sub	r10,sp,-1672
80005228:	02 9b       	mov	r11,r1
8000522a:	08 9c       	mov	r12,r4
8000522c:	fe b0 f3 d2 	rcall	800039d0 <__sprint_r>
80005230:	e0 81 03 5d 	brne	800058ea <_vfprintf_r+0x1efe>
80005234:	fa c3 f9 e0 	sub	r3,sp,-1568
80005238:	40 2c       	lddsp	r12,sp[0x8]
8000523a:	04 1c       	sub	r12,r2
8000523c:	50 2c       	stdsp	sp[0x8],r12
8000523e:	58 0c       	cp.w	r12,0
80005240:	e0 89 00 20 	brgt	80005280 <_vfprintf_r+0x1894>
80005244:	c3 f8       	rjmp	800052c2 <_vfprintf_r+0x18d6>
80005246:	2f 09       	sub	r9,-16
80005248:	2f f8       	sub	r8,-1
8000524a:	fe cb bb c2 	sub	r11,pc,-17470
8000524e:	31 0a       	mov	r10,16
80005250:	fb 49 06 90 	st.w	sp[1680],r9
80005254:	87 0b       	st.w	r3[0x0],r11
80005256:	87 1a       	st.w	r3[0x4],r10
80005258:	fb 48 06 8c 	st.w	sp[1676],r8
8000525c:	58 78       	cp.w	r8,7
8000525e:	e0 89 00 04 	brgt	80005266 <_vfprintf_r+0x187a>
80005262:	2f 83       	sub	r3,-8
80005264:	c0 b8       	rjmp	8000527a <_vfprintf_r+0x188e>
80005266:	fa ca f9 78 	sub	r10,sp,-1672
8000526a:	02 9b       	mov	r11,r1
8000526c:	08 9c       	mov	r12,r4
8000526e:	fe b0 f3 b1 	rcall	800039d0 <__sprint_r>
80005272:	e0 81 03 3c 	brne	800058ea <_vfprintf_r+0x1efe>
80005276:	fa c3 f9 e0 	sub	r3,sp,-1568
8000527a:	40 29       	lddsp	r9,sp[0x8]
8000527c:	21 09       	sub	r9,16
8000527e:	50 29       	stdsp	sp[0x8],r9
80005280:	fa f9 06 90 	ld.w	r9,sp[1680]
80005284:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005288:	fe ca bc 00 	sub	r10,pc,-17408
8000528c:	40 2e       	lddsp	lr,sp[0x8]
8000528e:	59 0e       	cp.w	lr,16
80005290:	fe 99 ff db 	brgt	80005246 <_vfprintf_r+0x185a>
80005294:	1c 09       	add	r9,lr
80005296:	2f f8       	sub	r8,-1
80005298:	87 0a       	st.w	r3[0x0],r10
8000529a:	fb 49 06 90 	st.w	sp[1680],r9
8000529e:	87 1e       	st.w	r3[0x4],lr
800052a0:	fb 48 06 8c 	st.w	sp[1676],r8
800052a4:	58 78       	cp.w	r8,7
800052a6:	e0 89 00 04 	brgt	800052ae <_vfprintf_r+0x18c2>
800052aa:	2f 83       	sub	r3,-8
800052ac:	c0 b8       	rjmp	800052c2 <_vfprintf_r+0x18d6>
800052ae:	fa ca f9 78 	sub	r10,sp,-1672
800052b2:	02 9b       	mov	r11,r1
800052b4:	08 9c       	mov	r12,r4
800052b6:	fe b0 f3 8d 	rcall	800039d0 <__sprint_r>
800052ba:	e0 81 03 18 	brne	800058ea <_vfprintf_r+0x1efe>
800052be:	fa c3 f9 e0 	sub	r3,sp,-1568
800052c2:	ed b5 00 08 	bld	r5,0x8
800052c6:	c0 b0       	breq	800052dc <_vfprintf_r+0x18f0>
800052c8:	fa f8 06 90 	ld.w	r8,sp[1680]
800052cc:	87 12       	st.w	r3[0x4],r2
800052ce:	87 06       	st.w	r3[0x0],r6
800052d0:	f0 02 00 02 	add	r2,r8,r2
800052d4:	fb 42 06 90 	st.w	sp[1680],r2
800052d8:	e0 8f 01 d4 	bral	80005680 <_vfprintf_r+0x1c94>
800052dc:	e0 40 00 65 	cp.w	r0,101
800052e0:	e0 8a 01 d6 	brle	8000568c <_vfprintf_r+0x1ca0>
800052e4:	30 08       	mov	r8,0
800052e6:	30 09       	mov	r9,0
800052e8:	40 5b       	lddsp	r11,sp[0x14]
800052ea:	40 7a       	lddsp	r10,sp[0x1c]
800052ec:	e0 a0 19 53 	rcall	80008592 <__avr32_f64_cmp_eq>
800052f0:	c7 90       	breq	800053e2 <_vfprintf_r+0x19f6>
800052f2:	fa f8 06 90 	ld.w	r8,sp[1680]
800052f6:	fe c9 bc 82 	sub	r9,pc,-17278
800052fa:	2f f8       	sub	r8,-1
800052fc:	87 09       	st.w	r3[0x0],r9
800052fe:	fb 48 06 90 	st.w	sp[1680],r8
80005302:	30 19       	mov	r9,1
80005304:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005308:	87 19       	st.w	r3[0x4],r9
8000530a:	2f f8       	sub	r8,-1
8000530c:	fb 48 06 8c 	st.w	sp[1676],r8
80005310:	58 78       	cp.w	r8,7
80005312:	e0 89 00 05 	brgt	8000531c <_vfprintf_r+0x1930>
80005316:	2f 83       	sub	r3,-8
80005318:	c0 c8       	rjmp	80005330 <_vfprintf_r+0x1944>
8000531a:	d7 03       	nop
8000531c:	fa ca f9 78 	sub	r10,sp,-1672
80005320:	02 9b       	mov	r11,r1
80005322:	08 9c       	mov	r12,r4
80005324:	fe b0 f3 56 	rcall	800039d0 <__sprint_r>
80005328:	e0 81 02 e1 	brne	800058ea <_vfprintf_r+0x1efe>
8000532c:	fa c3 f9 e0 	sub	r3,sp,-1568
80005330:	fa f8 06 ac 	ld.w	r8,sp[1708]
80005334:	40 6c       	lddsp	r12,sp[0x18]
80005336:	18 38       	cp.w	r8,r12
80005338:	c0 55       	brlt	80005342 <_vfprintf_r+0x1956>
8000533a:	ed b5 00 00 	bld	r5,0x0
8000533e:	e0 81 02 6b 	brne	80005814 <_vfprintf_r+0x1e28>
80005342:	fa f8 06 90 	ld.w	r8,sp[1680]
80005346:	2f f8       	sub	r8,-1
80005348:	40 cb       	lddsp	r11,sp[0x30]
8000534a:	fb 48 06 90 	st.w	sp[1680],r8
8000534e:	30 19       	mov	r9,1
80005350:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005354:	87 0b       	st.w	r3[0x0],r11
80005356:	2f f8       	sub	r8,-1
80005358:	87 19       	st.w	r3[0x4],r9
8000535a:	fb 48 06 8c 	st.w	sp[1676],r8
8000535e:	58 78       	cp.w	r8,7
80005360:	e0 89 00 04 	brgt	80005368 <_vfprintf_r+0x197c>
80005364:	2f 83       	sub	r3,-8
80005366:	c0 b8       	rjmp	8000537c <_vfprintf_r+0x1990>
80005368:	fa ca f9 78 	sub	r10,sp,-1672
8000536c:	02 9b       	mov	r11,r1
8000536e:	08 9c       	mov	r12,r4
80005370:	fe b0 f3 30 	rcall	800039d0 <__sprint_r>
80005374:	e0 81 02 bb 	brne	800058ea <_vfprintf_r+0x1efe>
80005378:	fa c3 f9 e0 	sub	r3,sp,-1568
8000537c:	40 66       	lddsp	r6,sp[0x18]
8000537e:	20 16       	sub	r6,1
80005380:	58 06       	cp.w	r6,0
80005382:	e0 89 00 1d 	brgt	800053bc <_vfprintf_r+0x19d0>
80005386:	e0 8f 02 47 	bral	80005814 <_vfprintf_r+0x1e28>
8000538a:	2f 09       	sub	r9,-16
8000538c:	2f f8       	sub	r8,-1
8000538e:	fb 49 06 90 	st.w	sp[1680],r9
80005392:	87 02       	st.w	r3[0x0],r2
80005394:	87 10       	st.w	r3[0x4],r0
80005396:	fb 48 06 8c 	st.w	sp[1676],r8
8000539a:	58 78       	cp.w	r8,7
8000539c:	e0 89 00 04 	brgt	800053a4 <_vfprintf_r+0x19b8>
800053a0:	2f 83       	sub	r3,-8
800053a2:	c0 b8       	rjmp	800053b8 <_vfprintf_r+0x19cc>
800053a4:	fa ca f9 78 	sub	r10,sp,-1672
800053a8:	02 9b       	mov	r11,r1
800053aa:	08 9c       	mov	r12,r4
800053ac:	fe b0 f3 12 	rcall	800039d0 <__sprint_r>
800053b0:	e0 81 02 9d 	brne	800058ea <_vfprintf_r+0x1efe>
800053b4:	fa c3 f9 e0 	sub	r3,sp,-1568
800053b8:	21 06       	sub	r6,16
800053ba:	c0 48       	rjmp	800053c2 <_vfprintf_r+0x19d6>
800053bc:	fe c2 bd 34 	sub	r2,pc,-17100
800053c0:	31 00       	mov	r0,16
800053c2:	fa f9 06 90 	ld.w	r9,sp[1680]
800053c6:	fa f8 06 8c 	ld.w	r8,sp[1676]
800053ca:	fe ca bd 42 	sub	r10,pc,-17086
800053ce:	59 06       	cp.w	r6,16
800053d0:	fe 99 ff dd 	brgt	8000538a <_vfprintf_r+0x199e>
800053d4:	0c 09       	add	r9,r6
800053d6:	87 0a       	st.w	r3[0x0],r10
800053d8:	fb 49 06 90 	st.w	sp[1680],r9
800053dc:	2f f8       	sub	r8,-1
800053de:	87 16       	st.w	r3[0x4],r6
800053e0:	c5 39       	rjmp	80005686 <_vfprintf_r+0x1c9a>
800053e2:	fa fa 06 ac 	ld.w	r10,sp[1708]
800053e6:	58 0a       	cp.w	r10,0
800053e8:	e0 89 00 92 	brgt	8000550c <_vfprintf_r+0x1b20>
800053ec:	fa f8 06 90 	ld.w	r8,sp[1680]
800053f0:	fe c9 bd 7c 	sub	r9,pc,-17028
800053f4:	2f f8       	sub	r8,-1
800053f6:	87 09       	st.w	r3[0x0],r9
800053f8:	fb 48 06 90 	st.w	sp[1680],r8
800053fc:	30 19       	mov	r9,1
800053fe:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005402:	87 19       	st.w	r3[0x4],r9
80005404:	2f f8       	sub	r8,-1
80005406:	fb 48 06 8c 	st.w	sp[1676],r8
8000540a:	58 78       	cp.w	r8,7
8000540c:	e0 89 00 04 	brgt	80005414 <_vfprintf_r+0x1a28>
80005410:	2f 83       	sub	r3,-8
80005412:	c0 b8       	rjmp	80005428 <_vfprintf_r+0x1a3c>
80005414:	fa ca f9 78 	sub	r10,sp,-1672
80005418:	02 9b       	mov	r11,r1
8000541a:	08 9c       	mov	r12,r4
8000541c:	fe b0 f2 da 	rcall	800039d0 <__sprint_r>
80005420:	e0 81 02 65 	brne	800058ea <_vfprintf_r+0x1efe>
80005424:	fa c3 f9 e0 	sub	r3,sp,-1568
80005428:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000542c:	58 08       	cp.w	r8,0
8000542e:	c0 81       	brne	8000543e <_vfprintf_r+0x1a52>
80005430:	40 6a       	lddsp	r10,sp[0x18]
80005432:	58 0a       	cp.w	r10,0
80005434:	c0 51       	brne	8000543e <_vfprintf_r+0x1a52>
80005436:	ed b5 00 00 	bld	r5,0x0
8000543a:	e0 81 01 ed 	brne	80005814 <_vfprintf_r+0x1e28>
8000543e:	40 c9       	lddsp	r9,sp[0x30]
80005440:	fa f8 06 90 	ld.w	r8,sp[1680]
80005444:	2f f8       	sub	r8,-1
80005446:	87 09       	st.w	r3[0x0],r9
80005448:	fb 48 06 90 	st.w	sp[1680],r8
8000544c:	30 19       	mov	r9,1
8000544e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005452:	87 19       	st.w	r3[0x4],r9
80005454:	2f f8       	sub	r8,-1
80005456:	fb 48 06 8c 	st.w	sp[1676],r8
8000545a:	58 78       	cp.w	r8,7
8000545c:	e0 89 00 04 	brgt	80005464 <_vfprintf_r+0x1a78>
80005460:	2f 83       	sub	r3,-8
80005462:	c0 b8       	rjmp	80005478 <_vfprintf_r+0x1a8c>
80005464:	fa ca f9 78 	sub	r10,sp,-1672
80005468:	02 9b       	mov	r11,r1
8000546a:	08 9c       	mov	r12,r4
8000546c:	fe b0 f2 b2 	rcall	800039d0 <__sprint_r>
80005470:	e0 81 02 3d 	brne	800058ea <_vfprintf_r+0x1efe>
80005474:	fa c3 f9 e0 	sub	r3,sp,-1568
80005478:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000547c:	5c 32       	neg	r2
8000547e:	58 02       	cp.w	r2,0
80005480:	e0 89 00 1d 	brgt	800054ba <_vfprintf_r+0x1ace>
80005484:	c3 d8       	rjmp	800054fe <_vfprintf_r+0x1b12>
80005486:	2f 09       	sub	r9,-16
80005488:	2f f8       	sub	r8,-1
8000548a:	31 0e       	mov	lr,16
8000548c:	fb 49 06 90 	st.w	sp[1680],r9
80005490:	87 00       	st.w	r3[0x0],r0
80005492:	87 1e       	st.w	r3[0x4],lr
80005494:	fb 48 06 8c 	st.w	sp[1676],r8
80005498:	58 78       	cp.w	r8,7
8000549a:	e0 89 00 04 	brgt	800054a2 <_vfprintf_r+0x1ab6>
8000549e:	2f 83       	sub	r3,-8
800054a0:	c0 b8       	rjmp	800054b6 <_vfprintf_r+0x1aca>
800054a2:	fa ca f9 78 	sub	r10,sp,-1672
800054a6:	02 9b       	mov	r11,r1
800054a8:	08 9c       	mov	r12,r4
800054aa:	fe b0 f2 93 	rcall	800039d0 <__sprint_r>
800054ae:	e0 81 02 1e 	brne	800058ea <_vfprintf_r+0x1efe>
800054b2:	fa c3 f9 e0 	sub	r3,sp,-1568
800054b6:	21 02       	sub	r2,16
800054b8:	c0 38       	rjmp	800054be <_vfprintf_r+0x1ad2>
800054ba:	fe c0 be 32 	sub	r0,pc,-16846
800054be:	fa f9 06 90 	ld.w	r9,sp[1680]
800054c2:	fa f8 06 8c 	ld.w	r8,sp[1676]
800054c6:	fe ca be 3e 	sub	r10,pc,-16834
800054ca:	59 02       	cp.w	r2,16
800054cc:	fe 99 ff dd 	brgt	80005486 <_vfprintf_r+0x1a9a>
800054d0:	04 09       	add	r9,r2
800054d2:	2f f8       	sub	r8,-1
800054d4:	87 0a       	st.w	r3[0x0],r10
800054d6:	fb 49 06 90 	st.w	sp[1680],r9
800054da:	87 12       	st.w	r3[0x4],r2
800054dc:	fb 48 06 8c 	st.w	sp[1676],r8
800054e0:	58 78       	cp.w	r8,7
800054e2:	e0 89 00 04 	brgt	800054ea <_vfprintf_r+0x1afe>
800054e6:	2f 83       	sub	r3,-8
800054e8:	c0 b8       	rjmp	800054fe <_vfprintf_r+0x1b12>
800054ea:	fa ca f9 78 	sub	r10,sp,-1672
800054ee:	02 9b       	mov	r11,r1
800054f0:	08 9c       	mov	r12,r4
800054f2:	fe b0 f2 6f 	rcall	800039d0 <__sprint_r>
800054f6:	e0 81 01 fa 	brne	800058ea <_vfprintf_r+0x1efe>
800054fa:	fa c3 f9 e0 	sub	r3,sp,-1568
800054fe:	40 6c       	lddsp	r12,sp[0x18]
80005500:	fa f8 06 90 	ld.w	r8,sp[1680]
80005504:	87 06       	st.w	r3[0x0],r6
80005506:	87 1c       	st.w	r3[0x4],r12
80005508:	18 08       	add	r8,r12
8000550a:	cb 98       	rjmp	8000567c <_vfprintf_r+0x1c90>
8000550c:	fa f9 06 90 	ld.w	r9,sp[1680]
80005510:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005514:	40 6b       	lddsp	r11,sp[0x18]
80005516:	16 3a       	cp.w	r10,r11
80005518:	c6 f5       	brlt	800055f6 <_vfprintf_r+0x1c0a>
8000551a:	16 09       	add	r9,r11
8000551c:	2f f8       	sub	r8,-1
8000551e:	87 06       	st.w	r3[0x0],r6
80005520:	fb 49 06 90 	st.w	sp[1680],r9
80005524:	87 1b       	st.w	r3[0x4],r11
80005526:	fb 48 06 8c 	st.w	sp[1676],r8
8000552a:	58 78       	cp.w	r8,7
8000552c:	e0 89 00 04 	brgt	80005534 <_vfprintf_r+0x1b48>
80005530:	2f 83       	sub	r3,-8
80005532:	c0 b8       	rjmp	80005548 <_vfprintf_r+0x1b5c>
80005534:	fa ca f9 78 	sub	r10,sp,-1672
80005538:	02 9b       	mov	r11,r1
8000553a:	08 9c       	mov	r12,r4
8000553c:	fe b0 f2 4a 	rcall	800039d0 <__sprint_r>
80005540:	e0 81 01 d5 	brne	800058ea <_vfprintf_r+0x1efe>
80005544:	fa c3 f9 e0 	sub	r3,sp,-1568
80005548:	fa f6 06 ac 	ld.w	r6,sp[1708]
8000554c:	40 6a       	lddsp	r10,sp[0x18]
8000554e:	14 16       	sub	r6,r10
80005550:	58 06       	cp.w	r6,0
80005552:	e0 89 00 1c 	brgt	8000558a <_vfprintf_r+0x1b9e>
80005556:	c3 d8       	rjmp	800055d0 <_vfprintf_r+0x1be4>
80005558:	2f 09       	sub	r9,-16
8000555a:	2f f8       	sub	r8,-1
8000555c:	fb 49 06 90 	st.w	sp[1680],r9
80005560:	87 02       	st.w	r3[0x0],r2
80005562:	87 10       	st.w	r3[0x4],r0
80005564:	fb 48 06 8c 	st.w	sp[1676],r8
80005568:	58 78       	cp.w	r8,7
8000556a:	e0 89 00 04 	brgt	80005572 <_vfprintf_r+0x1b86>
8000556e:	2f 83       	sub	r3,-8
80005570:	c0 b8       	rjmp	80005586 <_vfprintf_r+0x1b9a>
80005572:	fa ca f9 78 	sub	r10,sp,-1672
80005576:	02 9b       	mov	r11,r1
80005578:	08 9c       	mov	r12,r4
8000557a:	fe b0 f2 2b 	rcall	800039d0 <__sprint_r>
8000557e:	e0 81 01 b6 	brne	800058ea <_vfprintf_r+0x1efe>
80005582:	fa c3 f9 e0 	sub	r3,sp,-1568
80005586:	21 06       	sub	r6,16
80005588:	c0 48       	rjmp	80005590 <_vfprintf_r+0x1ba4>
8000558a:	fe c2 bf 02 	sub	r2,pc,-16638
8000558e:	31 00       	mov	r0,16
80005590:	fa f9 06 90 	ld.w	r9,sp[1680]
80005594:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005598:	fe ca bf 10 	sub	r10,pc,-16624
8000559c:	59 06       	cp.w	r6,16
8000559e:	fe 99 ff dd 	brgt	80005558 <_vfprintf_r+0x1b6c>
800055a2:	0c 09       	add	r9,r6
800055a4:	2f f8       	sub	r8,-1
800055a6:	87 0a       	st.w	r3[0x0],r10
800055a8:	fb 49 06 90 	st.w	sp[1680],r9
800055ac:	87 16       	st.w	r3[0x4],r6
800055ae:	fb 48 06 8c 	st.w	sp[1676],r8
800055b2:	58 78       	cp.w	r8,7
800055b4:	e0 89 00 04 	brgt	800055bc <_vfprintf_r+0x1bd0>
800055b8:	2f 83       	sub	r3,-8
800055ba:	c0 b8       	rjmp	800055d0 <_vfprintf_r+0x1be4>
800055bc:	fa ca f9 78 	sub	r10,sp,-1672
800055c0:	02 9b       	mov	r11,r1
800055c2:	08 9c       	mov	r12,r4
800055c4:	fe b0 f2 06 	rcall	800039d0 <__sprint_r>
800055c8:	e0 81 01 91 	brne	800058ea <_vfprintf_r+0x1efe>
800055cc:	fa c3 f9 e0 	sub	r3,sp,-1568
800055d0:	ed b5 00 00 	bld	r5,0x0
800055d4:	e0 81 01 20 	brne	80005814 <_vfprintf_r+0x1e28>
800055d8:	40 c9       	lddsp	r9,sp[0x30]
800055da:	fa f8 06 90 	ld.w	r8,sp[1680]
800055de:	2f f8       	sub	r8,-1
800055e0:	87 09       	st.w	r3[0x0],r9
800055e2:	fb 48 06 90 	st.w	sp[1680],r8
800055e6:	30 19       	mov	r9,1
800055e8:	fa f8 06 8c 	ld.w	r8,sp[1676]
800055ec:	87 19       	st.w	r3[0x4],r9
800055ee:	2f f8       	sub	r8,-1
800055f0:	fb 48 06 8c 	st.w	sp[1676],r8
800055f4:	c0 29       	rjmp	800057f8 <_vfprintf_r+0x1e0c>
800055f6:	14 09       	add	r9,r10
800055f8:	2f f8       	sub	r8,-1
800055fa:	fb 49 06 90 	st.w	sp[1680],r9
800055fe:	87 06       	st.w	r3[0x0],r6
80005600:	87 1a       	st.w	r3[0x4],r10
80005602:	fb 48 06 8c 	st.w	sp[1676],r8
80005606:	58 78       	cp.w	r8,7
80005608:	e0 89 00 04 	brgt	80005610 <_vfprintf_r+0x1c24>
8000560c:	2f 83       	sub	r3,-8
8000560e:	c0 b8       	rjmp	80005624 <_vfprintf_r+0x1c38>
80005610:	fa ca f9 78 	sub	r10,sp,-1672
80005614:	02 9b       	mov	r11,r1
80005616:	08 9c       	mov	r12,r4
80005618:	fe b0 f1 dc 	rcall	800039d0 <__sprint_r>
8000561c:	e0 81 01 67 	brne	800058ea <_vfprintf_r+0x1efe>
80005620:	fa c3 f9 e0 	sub	r3,sp,-1568
80005624:	40 c8       	lddsp	r8,sp[0x30]
80005626:	87 08       	st.w	r3[0x0],r8
80005628:	fa f8 06 90 	ld.w	r8,sp[1680]
8000562c:	2f f8       	sub	r8,-1
8000562e:	30 19       	mov	r9,1
80005630:	fb 48 06 90 	st.w	sp[1680],r8
80005634:	87 19       	st.w	r3[0x4],r9
80005636:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000563a:	2f f8       	sub	r8,-1
8000563c:	fb 48 06 8c 	st.w	sp[1676],r8
80005640:	fa f2 06 ac 	ld.w	r2,sp[1708]
80005644:	58 78       	cp.w	r8,7
80005646:	e0 89 00 04 	brgt	8000564e <_vfprintf_r+0x1c62>
8000564a:	2f 83       	sub	r3,-8
8000564c:	c0 b8       	rjmp	80005662 <_vfprintf_r+0x1c76>
8000564e:	fa ca f9 78 	sub	r10,sp,-1672
80005652:	02 9b       	mov	r11,r1
80005654:	08 9c       	mov	r12,r4
80005656:	fe b0 f1 bd 	rcall	800039d0 <__sprint_r>
8000565a:	e0 81 01 48 	brne	800058ea <_vfprintf_r+0x1efe>
8000565e:	fa c3 f9 e0 	sub	r3,sp,-1568
80005662:	04 06       	add	r6,r2
80005664:	fa f8 06 ac 	ld.w	r8,sp[1708]
80005668:	87 06       	st.w	r3[0x0],r6
8000566a:	fa f9 06 90 	ld.w	r9,sp[1680]
8000566e:	40 66       	lddsp	r6,sp[0x18]
80005670:	40 6e       	lddsp	lr,sp[0x18]
80005672:	10 16       	sub	r6,r8
80005674:	f2 08 01 08 	sub	r8,r9,r8
80005678:	87 16       	st.w	r3[0x4],r6
8000567a:	1c 08       	add	r8,lr
8000567c:	fb 48 06 90 	st.w	sp[1680],r8
80005680:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005684:	2f f8       	sub	r8,-1
80005686:	fb 48 06 8c 	st.w	sp[1676],r8
8000568a:	cb 78       	rjmp	800057f8 <_vfprintf_r+0x1e0c>
8000568c:	40 6c       	lddsp	r12,sp[0x18]
8000568e:	58 1c       	cp.w	r12,1
80005690:	e0 89 00 06 	brgt	8000569c <_vfprintf_r+0x1cb0>
80005694:	ed b5 00 00 	bld	r5,0x0
80005698:	e0 81 00 85 	brne	800057a2 <_vfprintf_r+0x1db6>
8000569c:	fa f8 06 90 	ld.w	r8,sp[1680]
800056a0:	2f f8       	sub	r8,-1
800056a2:	30 19       	mov	r9,1
800056a4:	fb 48 06 90 	st.w	sp[1680],r8
800056a8:	87 06       	st.w	r3[0x0],r6
800056aa:	fa f8 06 8c 	ld.w	r8,sp[1676]
800056ae:	87 19       	st.w	r3[0x4],r9
800056b0:	2f f8       	sub	r8,-1
800056b2:	fb 48 06 8c 	st.w	sp[1676],r8
800056b6:	58 78       	cp.w	r8,7
800056b8:	e0 89 00 04 	brgt	800056c0 <_vfprintf_r+0x1cd4>
800056bc:	2f 83       	sub	r3,-8
800056be:	c0 b8       	rjmp	800056d4 <_vfprintf_r+0x1ce8>
800056c0:	fa ca f9 78 	sub	r10,sp,-1672
800056c4:	02 9b       	mov	r11,r1
800056c6:	08 9c       	mov	r12,r4
800056c8:	fe b0 f1 84 	rcall	800039d0 <__sprint_r>
800056cc:	e0 81 01 0f 	brne	800058ea <_vfprintf_r+0x1efe>
800056d0:	fa c3 f9 e0 	sub	r3,sp,-1568
800056d4:	fa f8 06 90 	ld.w	r8,sp[1680]
800056d8:	2f f8       	sub	r8,-1
800056da:	40 cb       	lddsp	r11,sp[0x30]
800056dc:	fb 48 06 90 	st.w	sp[1680],r8
800056e0:	30 19       	mov	r9,1
800056e2:	fa f8 06 8c 	ld.w	r8,sp[1676]
800056e6:	87 0b       	st.w	r3[0x0],r11
800056e8:	2f f8       	sub	r8,-1
800056ea:	87 19       	st.w	r3[0x4],r9
800056ec:	fb 48 06 8c 	st.w	sp[1676],r8
800056f0:	58 78       	cp.w	r8,7
800056f2:	e0 89 00 05 	brgt	800056fc <_vfprintf_r+0x1d10>
800056f6:	2f 83       	sub	r3,-8
800056f8:	c0 c8       	rjmp	80005710 <_vfprintf_r+0x1d24>
800056fa:	d7 03       	nop
800056fc:	fa ca f9 78 	sub	r10,sp,-1672
80005700:	02 9b       	mov	r11,r1
80005702:	08 9c       	mov	r12,r4
80005704:	fe b0 f1 66 	rcall	800039d0 <__sprint_r>
80005708:	e0 81 00 f1 	brne	800058ea <_vfprintf_r+0x1efe>
8000570c:	fa c3 f9 e0 	sub	r3,sp,-1568
80005710:	30 08       	mov	r8,0
80005712:	30 09       	mov	r9,0
80005714:	40 5b       	lddsp	r11,sp[0x14]
80005716:	40 7a       	lddsp	r10,sp[0x1c]
80005718:	e0 a0 17 3d 	rcall	80008592 <__avr32_f64_cmp_eq>
8000571c:	40 68       	lddsp	r8,sp[0x18]
8000571e:	20 18       	sub	r8,1
80005720:	58 0c       	cp.w	r12,0
80005722:	c0 d1       	brne	8000573c <_vfprintf_r+0x1d50>
80005724:	2f f6       	sub	r6,-1
80005726:	87 18       	st.w	r3[0x4],r8
80005728:	87 06       	st.w	r3[0x0],r6
8000572a:	fa f6 06 90 	ld.w	r6,sp[1680]
8000572e:	10 06       	add	r6,r8
80005730:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005734:	fb 46 06 90 	st.w	sp[1680],r6
80005738:	2f f8       	sub	r8,-1
8000573a:	c3 18       	rjmp	8000579c <_vfprintf_r+0x1db0>
8000573c:	10 96       	mov	r6,r8
8000573e:	58 08       	cp.w	r8,0
80005740:	e0 89 00 1c 	brgt	80005778 <_vfprintf_r+0x1d8c>
80005744:	c4 b8       	rjmp	800057da <_vfprintf_r+0x1dee>
80005746:	2f 09       	sub	r9,-16
80005748:	2f f8       	sub	r8,-1
8000574a:	fb 49 06 90 	st.w	sp[1680],r9
8000574e:	87 02       	st.w	r3[0x0],r2
80005750:	87 10       	st.w	r3[0x4],r0
80005752:	fb 48 06 8c 	st.w	sp[1676],r8
80005756:	58 78       	cp.w	r8,7
80005758:	e0 89 00 04 	brgt	80005760 <_vfprintf_r+0x1d74>
8000575c:	2f 83       	sub	r3,-8
8000575e:	c0 b8       	rjmp	80005774 <_vfprintf_r+0x1d88>
80005760:	fa ca f9 78 	sub	r10,sp,-1672
80005764:	02 9b       	mov	r11,r1
80005766:	08 9c       	mov	r12,r4
80005768:	fe b0 f1 34 	rcall	800039d0 <__sprint_r>
8000576c:	e0 81 00 bf 	brne	800058ea <_vfprintf_r+0x1efe>
80005770:	fa c3 f9 e0 	sub	r3,sp,-1568
80005774:	21 06       	sub	r6,16
80005776:	c0 48       	rjmp	8000577e <_vfprintf_r+0x1d92>
80005778:	fe c2 c0 f0 	sub	r2,pc,-16144
8000577c:	31 00       	mov	r0,16
8000577e:	fa f9 06 90 	ld.w	r9,sp[1680]
80005782:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005786:	fe ca c0 fe 	sub	r10,pc,-16130
8000578a:	59 06       	cp.w	r6,16
8000578c:	fe 99 ff dd 	brgt	80005746 <_vfprintf_r+0x1d5a>
80005790:	0c 09       	add	r9,r6
80005792:	87 0a       	st.w	r3[0x0],r10
80005794:	fb 49 06 90 	st.w	sp[1680],r9
80005798:	2f f8       	sub	r8,-1
8000579a:	87 16       	st.w	r3[0x4],r6
8000579c:	fb 48 06 8c 	st.w	sp[1676],r8
800057a0:	c0 e8       	rjmp	800057bc <_vfprintf_r+0x1dd0>
800057a2:	fa f8 06 90 	ld.w	r8,sp[1680]
800057a6:	2f f8       	sub	r8,-1
800057a8:	30 19       	mov	r9,1
800057aa:	fb 48 06 90 	st.w	sp[1680],r8
800057ae:	87 06       	st.w	r3[0x0],r6
800057b0:	fa f8 06 8c 	ld.w	r8,sp[1676]
800057b4:	87 19       	st.w	r3[0x4],r9
800057b6:	2f f8       	sub	r8,-1
800057b8:	fb 48 06 8c 	st.w	sp[1676],r8
800057bc:	58 78       	cp.w	r8,7
800057be:	e0 89 00 04 	brgt	800057c6 <_vfprintf_r+0x1dda>
800057c2:	2f 83       	sub	r3,-8
800057c4:	c0 b8       	rjmp	800057da <_vfprintf_r+0x1dee>
800057c6:	fa ca f9 78 	sub	r10,sp,-1672
800057ca:	02 9b       	mov	r11,r1
800057cc:	08 9c       	mov	r12,r4
800057ce:	fe b0 f1 01 	rcall	800039d0 <__sprint_r>
800057d2:	e0 81 00 8c 	brne	800058ea <_vfprintf_r+0x1efe>
800057d6:	fa c3 f9 e0 	sub	r3,sp,-1568
800057da:	40 ea       	lddsp	r10,sp[0x38]
800057dc:	fa f8 06 90 	ld.w	r8,sp[1680]
800057e0:	14 08       	add	r8,r10
800057e2:	fa c9 f9 64 	sub	r9,sp,-1692
800057e6:	fb 48 06 90 	st.w	sp[1680],r8
800057ea:	87 1a       	st.w	r3[0x4],r10
800057ec:	fa f8 06 8c 	ld.w	r8,sp[1676]
800057f0:	87 09       	st.w	r3[0x0],r9
800057f2:	2f f8       	sub	r8,-1
800057f4:	fb 48 06 8c 	st.w	sp[1676],r8
800057f8:	58 78       	cp.w	r8,7
800057fa:	e0 89 00 04 	brgt	80005802 <_vfprintf_r+0x1e16>
800057fe:	2f 83       	sub	r3,-8
80005800:	c0 a8       	rjmp	80005814 <_vfprintf_r+0x1e28>
80005802:	fa ca f9 78 	sub	r10,sp,-1672
80005806:	02 9b       	mov	r11,r1
80005808:	08 9c       	mov	r12,r4
8000580a:	fe b0 f0 e3 	rcall	800039d0 <__sprint_r>
8000580e:	c6 e1       	brne	800058ea <_vfprintf_r+0x1efe>
80005810:	fa c3 f9 e0 	sub	r3,sp,-1568
80005814:	e2 15 00 04 	andl	r5,0x4,COH
80005818:	c3 f0       	breq	80005896 <_vfprintf_r+0x1eaa>
8000581a:	40 86       	lddsp	r6,sp[0x20]
8000581c:	40 39       	lddsp	r9,sp[0xc]
8000581e:	12 16       	sub	r6,r9
80005820:	58 06       	cp.w	r6,0
80005822:	e0 89 00 1a 	brgt	80005856 <_vfprintf_r+0x1e6a>
80005826:	c3 88       	rjmp	80005896 <_vfprintf_r+0x1eaa>
80005828:	2f 09       	sub	r9,-16
8000582a:	2f f8       	sub	r8,-1
8000582c:	fb 49 06 90 	st.w	sp[1680],r9
80005830:	87 05       	st.w	r3[0x0],r5
80005832:	87 12       	st.w	r3[0x4],r2
80005834:	fb 48 06 8c 	st.w	sp[1676],r8
80005838:	58 78       	cp.w	r8,7
8000583a:	e0 89 00 04 	brgt	80005842 <_vfprintf_r+0x1e56>
8000583e:	2f 83       	sub	r3,-8
80005840:	c0 98       	rjmp	80005852 <_vfprintf_r+0x1e66>
80005842:	00 9a       	mov	r10,r0
80005844:	02 9b       	mov	r11,r1
80005846:	08 9c       	mov	r12,r4
80005848:	fe b0 f0 c4 	rcall	800039d0 <__sprint_r>
8000584c:	c4 f1       	brne	800058ea <_vfprintf_r+0x1efe>
8000584e:	fa c3 f9 e0 	sub	r3,sp,-1568
80005852:	21 06       	sub	r6,16
80005854:	c0 68       	rjmp	80005860 <_vfprintf_r+0x1e74>
80005856:	fe c5 c1 de 	sub	r5,pc,-15906
8000585a:	31 02       	mov	r2,16
8000585c:	fa c0 f9 78 	sub	r0,sp,-1672
80005860:	fa f9 06 90 	ld.w	r9,sp[1680]
80005864:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005868:	fe ca c1 f0 	sub	r10,pc,-15888
8000586c:	59 06       	cp.w	r6,16
8000586e:	fe 99 ff dd 	brgt	80005828 <_vfprintf_r+0x1e3c>
80005872:	0c 09       	add	r9,r6
80005874:	2f f8       	sub	r8,-1
80005876:	87 0a       	st.w	r3[0x0],r10
80005878:	87 16       	st.w	r3[0x4],r6
8000587a:	fb 49 06 90 	st.w	sp[1680],r9
8000587e:	fb 48 06 8c 	st.w	sp[1676],r8
80005882:	58 78       	cp.w	r8,7
80005884:	e0 8a 00 09 	brle	80005896 <_vfprintf_r+0x1eaa>
80005888:	fa ca f9 78 	sub	r10,sp,-1672
8000588c:	02 9b       	mov	r11,r1
8000588e:	08 9c       	mov	r12,r4
80005890:	fe b0 f0 a0 	rcall	800039d0 <__sprint_r>
80005894:	c2 b1       	brne	800058ea <_vfprintf_r+0x1efe>
80005896:	40 bc       	lddsp	r12,sp[0x2c]
80005898:	40 36       	lddsp	r6,sp[0xc]
8000589a:	40 8e       	lddsp	lr,sp[0x20]
8000589c:	ec 0e 0c 48 	max	r8,r6,lr
800058a0:	10 0c       	add	r12,r8
800058a2:	50 bc       	stdsp	sp[0x2c],r12
800058a4:	fa f8 06 90 	ld.w	r8,sp[1680]
800058a8:	58 08       	cp.w	r8,0
800058aa:	c0 80       	breq	800058ba <_vfprintf_r+0x1ece>
800058ac:	fa ca f9 78 	sub	r10,sp,-1672
800058b0:	02 9b       	mov	r11,r1
800058b2:	08 9c       	mov	r12,r4
800058b4:	fe b0 f0 8e 	rcall	800039d0 <__sprint_r>
800058b8:	c1 91       	brne	800058ea <_vfprintf_r+0x1efe>
800058ba:	30 0b       	mov	r11,0
800058bc:	fa c3 f9 e0 	sub	r3,sp,-1568
800058c0:	fb 4b 06 8c 	st.w	sp[1676],r11
800058c4:	fe 9f f1 22 	bral	80003b08 <_vfprintf_r+0x11c>
800058c8:	08 95       	mov	r5,r4
800058ca:	fa f8 06 90 	ld.w	r8,sp[1680]
800058ce:	58 08       	cp.w	r8,0
800058d0:	c0 80       	breq	800058e0 <_vfprintf_r+0x1ef4>
800058d2:	08 9c       	mov	r12,r4
800058d4:	fa ca f9 78 	sub	r10,sp,-1672
800058d8:	02 9b       	mov	r11,r1
800058da:	fe b0 f0 7b 	rcall	800039d0 <__sprint_r>
800058de:	c0 61       	brne	800058ea <_vfprintf_r+0x1efe>
800058e0:	30 08       	mov	r8,0
800058e2:	fb 48 06 8c 	st.w	sp[1676],r8
800058e6:	c0 28       	rjmp	800058ea <_vfprintf_r+0x1efe>
800058e8:	40 41       	lddsp	r1,sp[0x10]
800058ea:	82 68       	ld.sh	r8,r1[0xc]
800058ec:	ed b8 00 06 	bld	r8,0x6
800058f0:	c0 31       	brne	800058f6 <_vfprintf_r+0x1f0a>
800058f2:	3f fa       	mov	r10,-1
800058f4:	50 ba       	stdsp	sp[0x2c],r10
800058f6:	40 bc       	lddsp	r12,sp[0x2c]
800058f8:	fe 3d f9 44 	sub	sp,-1724
800058fc:	d8 32       	popm	r0-r7,pc
800058fe:	d7 03       	nop

80005900 <__swsetup_r>:
80005900:	d4 21       	pushm	r4-r7,lr
80005902:	e0 68 01 00 	mov	r8,256
80005906:	18 96       	mov	r6,r12
80005908:	16 97       	mov	r7,r11
8000590a:	70 0c       	ld.w	r12,r8[0x0]
8000590c:	58 0c       	cp.w	r12,0
8000590e:	c0 60       	breq	8000591a <__swsetup_r+0x1a>
80005910:	78 68       	ld.w	r8,r12[0x18]
80005912:	58 08       	cp.w	r8,0
80005914:	c0 31       	brne	8000591a <__swsetup_r+0x1a>
80005916:	e0 a0 07 b9 	rcall	80006888 <__sinit>
8000591a:	fe c8 c1 72 	sub	r8,pc,-16014
8000591e:	10 37       	cp.w	r7,r8
80005920:	c0 61       	brne	8000592c <__swsetup_r+0x2c>
80005922:	e0 68 01 00 	mov	r8,256
80005926:	70 08       	ld.w	r8,r8[0x0]
80005928:	70 07       	ld.w	r7,r8[0x0]
8000592a:	c1 28       	rjmp	8000594e <__swsetup_r+0x4e>
8000592c:	fe c8 c1 64 	sub	r8,pc,-16028
80005930:	10 37       	cp.w	r7,r8
80005932:	c0 61       	brne	8000593e <__swsetup_r+0x3e>
80005934:	e0 68 01 00 	mov	r8,256
80005938:	70 08       	ld.w	r8,r8[0x0]
8000593a:	70 17       	ld.w	r7,r8[0x4]
8000593c:	c0 98       	rjmp	8000594e <__swsetup_r+0x4e>
8000593e:	fe c8 c1 56 	sub	r8,pc,-16042
80005942:	10 37       	cp.w	r7,r8
80005944:	c0 51       	brne	8000594e <__swsetup_r+0x4e>
80005946:	e0 68 01 00 	mov	r8,256
8000594a:	70 08       	ld.w	r8,r8[0x0]
8000594c:	70 27       	ld.w	r7,r8[0x8]
8000594e:	8e 68       	ld.sh	r8,r7[0xc]
80005950:	ed b8 00 03 	bld	r8,0x3
80005954:	c1 e0       	breq	80005990 <__swsetup_r+0x90>
80005956:	ed b8 00 04 	bld	r8,0x4
8000595a:	c3 e1       	brne	800059d6 <__swsetup_r+0xd6>
8000595c:	ed b8 00 02 	bld	r8,0x2
80005960:	c1 51       	brne	8000598a <__swsetup_r+0x8a>
80005962:	6e db       	ld.w	r11,r7[0x34]
80005964:	58 0b       	cp.w	r11,0
80005966:	c0 a0       	breq	8000597a <__swsetup_r+0x7a>
80005968:	ee c8 ff bc 	sub	r8,r7,-68
8000596c:	10 3b       	cp.w	r11,r8
8000596e:	c0 40       	breq	80005976 <__swsetup_r+0x76>
80005970:	0c 9c       	mov	r12,r6
80005972:	e0 a0 08 25 	rcall	800069bc <_free_r>
80005976:	30 08       	mov	r8,0
80005978:	8f d8       	st.w	r7[0x34],r8
8000597a:	8e 68       	ld.sh	r8,r7[0xc]
8000597c:	e0 18 ff db 	andl	r8,0xffdb
80005980:	ae 68       	st.h	r7[0xc],r8
80005982:	30 08       	mov	r8,0
80005984:	8f 18       	st.w	r7[0x4],r8
80005986:	6e 48       	ld.w	r8,r7[0x10]
80005988:	8f 08       	st.w	r7[0x0],r8
8000598a:	8e 68       	ld.sh	r8,r7[0xc]
8000598c:	a3 b8       	sbr	r8,0x3
8000598e:	ae 68       	st.h	r7[0xc],r8
80005990:	6e 48       	ld.w	r8,r7[0x10]
80005992:	58 08       	cp.w	r8,0
80005994:	c0 b1       	brne	800059aa <__swsetup_r+0xaa>
80005996:	8e 68       	ld.sh	r8,r7[0xc]
80005998:	e2 18 02 80 	andl	r8,0x280,COH
8000599c:	e0 48 02 00 	cp.w	r8,512
800059a0:	c0 50       	breq	800059aa <__swsetup_r+0xaa>
800059a2:	0c 9c       	mov	r12,r6
800059a4:	0e 9b       	mov	r11,r7
800059a6:	e0 a0 0a 4b 	rcall	80006e3c <__smakebuf_r>
800059aa:	8e 69       	ld.sh	r9,r7[0xc]
800059ac:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
800059b0:	c0 70       	breq	800059be <__swsetup_r+0xbe>
800059b2:	30 08       	mov	r8,0
800059b4:	8f 28       	st.w	r7[0x8],r8
800059b6:	6e 58       	ld.w	r8,r7[0x14]
800059b8:	5c 38       	neg	r8
800059ba:	8f 68       	st.w	r7[0x18],r8
800059bc:	c0 68       	rjmp	800059c8 <__swsetup_r+0xc8>
800059be:	ed b9 00 01 	bld	r9,0x1
800059c2:	ef f8 10 05 	ld.wne	r8,r7[0x14]
800059c6:	8f 28       	st.w	r7[0x8],r8
800059c8:	6e 48       	ld.w	r8,r7[0x10]
800059ca:	58 08       	cp.w	r8,0
800059cc:	c0 61       	brne	800059d8 <__swsetup_r+0xd8>
800059ce:	8e 68       	ld.sh	r8,r7[0xc]
800059d0:	ed b8 00 07 	bld	r8,0x7
800059d4:	c0 21       	brne	800059d8 <__swsetup_r+0xd8>
800059d6:	dc 2a       	popm	r4-r7,pc,r12=-1
800059d8:	d8 2a       	popm	r4-r7,pc,r12=0
800059da:	d7 03       	nop

800059dc <quorem>:
800059dc:	d4 31       	pushm	r0-r7,lr
800059de:	20 2d       	sub	sp,8
800059e0:	18 97       	mov	r7,r12
800059e2:	78 48       	ld.w	r8,r12[0x10]
800059e4:	76 46       	ld.w	r6,r11[0x10]
800059e6:	0c 38       	cp.w	r8,r6
800059e8:	c0 34       	brge	800059ee <quorem+0x12>
800059ea:	30 0c       	mov	r12,0
800059ec:	c8 58       	rjmp	80005af6 <quorem+0x11a>
800059ee:	ec c2 ff fc 	sub	r2,r6,-4
800059f2:	f6 c3 ff ec 	sub	r3,r11,-20
800059f6:	f6 02 03 29 	ld.w	r9,r11[r2<<0x2]
800059fa:	f8 02 03 2c 	ld.w	r12,r12[r2<<0x2]
800059fe:	2f f9       	sub	r9,-1
80005a00:	20 16       	sub	r6,1
80005a02:	f8 09 0d 08 	divu	r8,r12,r9
80005a06:	f6 02 00 22 	add	r2,r11,r2<<0x2
80005a0a:	ee c4 ff ec 	sub	r4,r7,-20
80005a0e:	10 95       	mov	r5,r8
80005a10:	58 08       	cp.w	r8,0
80005a12:	c4 10       	breq	80005a94 <quorem+0xb8>
80005a14:	30 09       	mov	r9,0
80005a16:	06 9a       	mov	r10,r3
80005a18:	08 98       	mov	r8,r4
80005a1a:	12 91       	mov	r1,r9
80005a1c:	50 0b       	stdsp	sp[0x0],r11
80005a1e:	70 0e       	ld.w	lr,r8[0x0]
80005a20:	b1 8e       	lsr	lr,0x10
80005a22:	50 1e       	stdsp	sp[0x4],lr
80005a24:	15 0e       	ld.w	lr,r10++
80005a26:	fc 00 16 10 	lsr	r0,lr,0x10
80005a2a:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80005a2e:	ea 0e 03 41 	mac	r1,r5,lr
80005a32:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
80005a36:	b1 81       	lsr	r1,0x10
80005a38:	40 1b       	lddsp	r11,sp[0x4]
80005a3a:	ea 00 02 40 	mul	r0,r5,r0
80005a3e:	e2 00 00 00 	add	r0,r1,r0
80005a42:	e3 d0 c0 10 	bfextu	r1,r0,0x0,0x10
80005a46:	02 1b       	sub	r11,r1
80005a48:	50 1b       	stdsp	sp[0x4],r11
80005a4a:	70 0b       	ld.w	r11,r8[0x0]
80005a4c:	e3 db c0 10 	bfextu	r1,r11,0x0,0x10
80005a50:	02 09       	add	r9,r1
80005a52:	f2 0e 01 0e 	sub	lr,r9,lr
80005a56:	b0 1e       	st.h	r8[0x2],lr
80005a58:	fc 09 14 10 	asr	r9,lr,0x10
80005a5c:	40 1e       	lddsp	lr,sp[0x4]
80005a5e:	fc 09 00 09 	add	r9,lr,r9
80005a62:	b0 09       	st.h	r8[0x0],r9
80005a64:	e0 01 16 10 	lsr	r1,r0,0x10
80005a68:	2f c8       	sub	r8,-4
80005a6a:	b1 49       	asr	r9,0x10
80005a6c:	04 3a       	cp.w	r10,r2
80005a6e:	fe 98 ff d8 	brls	80005a1e <quorem+0x42>
80005a72:	40 0b       	lddsp	r11,sp[0x0]
80005a74:	58 0c       	cp.w	r12,0
80005a76:	c0 f1       	brne	80005a94 <quorem+0xb8>
80005a78:	ec c8 ff fb 	sub	r8,r6,-5
80005a7c:	ee 08 00 28 	add	r8,r7,r8<<0x2
80005a80:	c0 28       	rjmp	80005a84 <quorem+0xa8>
80005a82:	20 16       	sub	r6,1
80005a84:	20 48       	sub	r8,4
80005a86:	08 38       	cp.w	r8,r4
80005a88:	e0 88 00 05 	brls	80005a92 <quorem+0xb6>
80005a8c:	70 09       	ld.w	r9,r8[0x0]
80005a8e:	58 09       	cp.w	r9,0
80005a90:	cf 90       	breq	80005a82 <quorem+0xa6>
80005a92:	8f 46       	st.w	r7[0x10],r6
80005a94:	0e 9c       	mov	r12,r7
80005a96:	e0 a0 0c fb 	rcall	8000748c <__mcmp>
80005a9a:	c2 d5       	brlt	80005af4 <quorem+0x118>
80005a9c:	2f f5       	sub	r5,-1
80005a9e:	08 98       	mov	r8,r4
80005aa0:	30 09       	mov	r9,0
80005aa2:	07 0b       	ld.w	r11,r3++
80005aa4:	f6 0a 16 10 	lsr	r10,r11,0x10
80005aa8:	70 0c       	ld.w	r12,r8[0x0]
80005aaa:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80005aae:	f8 0e 16 10 	lsr	lr,r12,0x10
80005ab2:	14 1e       	sub	lr,r10
80005ab4:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80005ab8:	16 1a       	sub	r10,r11
80005aba:	12 0a       	add	r10,r9
80005abc:	b0 1a       	st.h	r8[0x2],r10
80005abe:	b1 4a       	asr	r10,0x10
80005ac0:	fc 0a 00 09 	add	r9,lr,r10
80005ac4:	b0 09       	st.h	r8[0x0],r9
80005ac6:	2f c8       	sub	r8,-4
80005ac8:	b1 49       	asr	r9,0x10
80005aca:	04 33       	cp.w	r3,r2
80005acc:	fe 98 ff eb 	brls	80005aa2 <quorem+0xc6>
80005ad0:	ec c8 ff fb 	sub	r8,r6,-5
80005ad4:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
80005ad8:	58 09       	cp.w	r9,0
80005ada:	c0 d1       	brne	80005af4 <quorem+0x118>
80005adc:	ee 08 00 28 	add	r8,r7,r8<<0x2
80005ae0:	c0 28       	rjmp	80005ae4 <quorem+0x108>
80005ae2:	20 16       	sub	r6,1
80005ae4:	20 48       	sub	r8,4
80005ae6:	08 38       	cp.w	r8,r4
80005ae8:	e0 88 00 05 	brls	80005af2 <quorem+0x116>
80005aec:	70 09       	ld.w	r9,r8[0x0]
80005aee:	58 09       	cp.w	r9,0
80005af0:	cf 90       	breq	80005ae2 <quorem+0x106>
80005af2:	8f 46       	st.w	r7[0x10],r6
80005af4:	0a 9c       	mov	r12,r5
80005af6:	2f ed       	sub	sp,-8
80005af8:	d8 32       	popm	r0-r7,pc
80005afa:	d7 03       	nop

80005afc <_dtoa_r>:
80005afc:	d4 31       	pushm	r0-r7,lr
80005afe:	21 ad       	sub	sp,104
80005b00:	fa c4 ff 74 	sub	r4,sp,-140
80005b04:	18 97       	mov	r7,r12
80005b06:	16 95       	mov	r5,r11
80005b08:	68 2c       	ld.w	r12,r4[0x8]
80005b0a:	50 c9       	stdsp	sp[0x30],r9
80005b0c:	68 16       	ld.w	r6,r4[0x4]
80005b0e:	68 09       	ld.w	r9,r4[0x0]
80005b10:	50 e8       	stdsp	sp[0x38],r8
80005b12:	14 94       	mov	r4,r10
80005b14:	51 2c       	stdsp	sp[0x48],r12
80005b16:	fa e5 00 08 	st.d	sp[8],r4
80005b1a:	51 59       	stdsp	sp[0x54],r9
80005b1c:	6e 95       	ld.w	r5,r7[0x24]
80005b1e:	58 05       	cp.w	r5,0
80005b20:	c0 91       	brne	80005b32 <_dtoa_r+0x36>
80005b22:	31 0c       	mov	r12,16
80005b24:	e0 a0 09 ea 	rcall	80006ef8 <malloc>
80005b28:	99 35       	st.w	r12[0xc],r5
80005b2a:	8f 9c       	st.w	r7[0x24],r12
80005b2c:	99 15       	st.w	r12[0x4],r5
80005b2e:	99 25       	st.w	r12[0x8],r5
80005b30:	99 05       	st.w	r12[0x0],r5
80005b32:	6e 99       	ld.w	r9,r7[0x24]
80005b34:	72 08       	ld.w	r8,r9[0x0]
80005b36:	58 08       	cp.w	r8,0
80005b38:	c0 f0       	breq	80005b56 <_dtoa_r+0x5a>
80005b3a:	72 1a       	ld.w	r10,r9[0x4]
80005b3c:	91 1a       	st.w	r8[0x4],r10
80005b3e:	30 1a       	mov	r10,1
80005b40:	72 19       	ld.w	r9,r9[0x4]
80005b42:	f4 09 09 49 	lsl	r9,r10,r9
80005b46:	10 9b       	mov	r11,r8
80005b48:	91 29       	st.w	r8[0x8],r9
80005b4a:	0e 9c       	mov	r12,r7
80005b4c:	e0 a0 0c ba 	rcall	800074c0 <_Bfree>
80005b50:	6e 98       	ld.w	r8,r7[0x24]
80005b52:	30 09       	mov	r9,0
80005b54:	91 09       	st.w	r8[0x0],r9
80005b56:	40 28       	lddsp	r8,sp[0x8]
80005b58:	10 94       	mov	r4,r8
80005b5a:	58 08       	cp.w	r8,0
80005b5c:	c0 64       	brge	80005b68 <_dtoa_r+0x6c>
80005b5e:	f1 d8 c0 1f 	bfextu	r8,r8,0x0,0x1f
80005b62:	50 28       	stdsp	sp[0x8],r8
80005b64:	30 18       	mov	r8,1
80005b66:	c0 28       	rjmp	80005b6a <_dtoa_r+0x6e>
80005b68:	30 08       	mov	r8,0
80005b6a:	8d 08       	st.w	r6[0x0],r8
80005b6c:	fc 1c 7f f0 	movh	r12,0x7ff0
80005b70:	40 26       	lddsp	r6,sp[0x8]
80005b72:	0c 98       	mov	r8,r6
80005b74:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80005b78:	18 38       	cp.w	r8,r12
80005b7a:	c2 01       	brne	80005bba <_dtoa_r+0xbe>
80005b7c:	e0 68 27 0f 	mov	r8,9999
80005b80:	41 5b       	lddsp	r11,sp[0x54]
80005b82:	97 08       	st.w	r11[0x0],r8
80005b84:	40 3a       	lddsp	r10,sp[0xc]
80005b86:	58 0a       	cp.w	r10,0
80005b88:	c0 71       	brne	80005b96 <_dtoa_r+0x9a>
80005b8a:	ed d6 c0 14 	bfextu	r6,r6,0x0,0x14
80005b8e:	c0 41       	brne	80005b96 <_dtoa_r+0x9a>
80005b90:	fe cc c3 f8 	sub	r12,pc,-15368
80005b94:	c0 38       	rjmp	80005b9a <_dtoa_r+0x9e>
80005b96:	fe cc c3 f2 	sub	r12,pc,-15374
80005b9a:	41 29       	lddsp	r9,sp[0x48]
80005b9c:	58 09       	cp.w	r9,0
80005b9e:	e0 80 05 9a 	breq	800066d2 <_dtoa_r+0xbd6>
80005ba2:	f8 c8 ff fd 	sub	r8,r12,-3
80005ba6:	f8 c9 ff f8 	sub	r9,r12,-8
80005baa:	11 8b       	ld.ub	r11,r8[0x0]
80005bac:	30 0a       	mov	r10,0
80005bae:	41 25       	lddsp	r5,sp[0x48]
80005bb0:	f4 0b 18 00 	cp.b	r11,r10
80005bb4:	f2 08 17 10 	movne	r8,r9
80005bb8:	c1 68       	rjmp	80005be4 <_dtoa_r+0xe8>
80005bba:	fa ea 00 08 	ld.d	r10,sp[8]
80005bbe:	30 08       	mov	r8,0
80005bc0:	fa eb 00 3c 	st.d	sp[60],r10
80005bc4:	30 09       	mov	r9,0
80005bc6:	e0 a0 14 e6 	rcall	80008592 <__avr32_f64_cmp_eq>
80005bca:	c1 00       	breq	80005bea <_dtoa_r+0xee>
80005bcc:	30 18       	mov	r8,1
80005bce:	41 5a       	lddsp	r10,sp[0x54]
80005bd0:	95 08       	st.w	r10[0x0],r8
80005bd2:	fe cc c5 5e 	sub	r12,pc,-15010
80005bd6:	41 29       	lddsp	r9,sp[0x48]
80005bd8:	f8 08 00 08 	add	r8,r12,r8
80005bdc:	58 09       	cp.w	r9,0
80005bde:	e0 80 05 7a 	breq	800066d2 <_dtoa_r+0xbd6>
80005be2:	12 95       	mov	r5,r9
80005be4:	8b 08       	st.w	r5[0x0],r8
80005be6:	e0 8f 05 76 	bral	800066d2 <_dtoa_r+0xbd6>
80005bea:	fa c8 ff 9c 	sub	r8,sp,-100
80005bee:	fa c9 ff a0 	sub	r9,sp,-96
80005bf2:	fa ea 00 3c 	ld.d	r10,sp[60]
80005bf6:	0e 9c       	mov	r12,r7
80005bf8:	eb d6 c2 8b 	bfextu	r5,r6,0x14,0xb
80005bfc:	e0 a0 0c b4 	rcall	80007564 <__d2b>
80005c00:	18 93       	mov	r3,r12
80005c02:	58 05       	cp.w	r5,0
80005c04:	c0 d0       	breq	80005c1e <_dtoa_r+0x122>
80005c06:	fa ea 00 3c 	ld.d	r10,sp[60]
80005c0a:	30 04       	mov	r4,0
80005c0c:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
80005c10:	ea c5 03 ff 	sub	r5,r5,1023
80005c14:	10 9b       	mov	r11,r8
80005c16:	51 74       	stdsp	sp[0x5c],r4
80005c18:	ea 1b 3f f0 	orh	r11,0x3ff0
80005c1c:	c2 58       	rjmp	80005c66 <_dtoa_r+0x16a>
80005c1e:	41 88       	lddsp	r8,sp[0x60]
80005c20:	41 9c       	lddsp	r12,sp[0x64]
80005c22:	10 0c       	add	r12,r8
80005c24:	f8 c5 fb ce 	sub	r5,r12,-1074
80005c28:	e0 45 00 20 	cp.w	r5,32
80005c2c:	e0 8a 00 0e 	brle	80005c48 <_dtoa_r+0x14c>
80005c30:	f8 cc fb ee 	sub	r12,r12,-1042
80005c34:	40 3b       	lddsp	r11,sp[0xc]
80005c36:	ea 08 11 40 	rsub	r8,r5,64
80005c3a:	f6 0c 0a 4c 	lsr	r12,r11,r12
80005c3e:	ec 08 09 46 	lsl	r6,r6,r8
80005c42:	0c 4c       	or	r12,r6
80005c44:	c0 78       	rjmp	80005c52 <_dtoa_r+0x156>
80005c46:	d7 03       	nop
80005c48:	ea 0c 11 20 	rsub	r12,r5,32
80005c4c:	40 3a       	lddsp	r10,sp[0xc]
80005c4e:	f4 0c 09 4c 	lsl	r12,r10,r12
80005c52:	e0 a0 14 2c 	rcall	800084aa <__avr32_u32_to_f64>
80005c56:	fc 18 fe 10 	movh	r8,0xfe10
80005c5a:	30 19       	mov	r9,1
80005c5c:	ea c5 04 33 	sub	r5,r5,1075
80005c60:	f0 0b 00 0b 	add	r11,r8,r11
80005c64:	51 79       	stdsp	sp[0x5c],r9
80005c66:	30 08       	mov	r8,0
80005c68:	fc 19 3f f8 	movh	r9,0x3ff8
80005c6c:	e0 a0 12 b4 	rcall	800081d4 <__avr32_f64_sub>
80005c70:	e0 68 43 61 	mov	r8,17249
80005c74:	ea 18 63 6f 	orh	r8,0x636f
80005c78:	e0 69 87 a7 	mov	r9,34727
80005c7c:	ea 19 3f d2 	orh	r9,0x3fd2
80005c80:	e0 a0 11 be 	rcall	80007ffc <__avr32_f64_mul>
80005c84:	e0 68 c8 b3 	mov	r8,51379
80005c88:	ea 18 8b 60 	orh	r8,0x8b60
80005c8c:	e0 69 8a 28 	mov	r9,35368
80005c90:	ea 19 3f c6 	orh	r9,0x3fc6
80005c94:	e0 a0 13 6e 	rcall	80008370 <__avr32_f64_add>
80005c98:	0a 9c       	mov	r12,r5
80005c9a:	14 90       	mov	r0,r10
80005c9c:	16 91       	mov	r1,r11
80005c9e:	e0 a0 14 0a 	rcall	800084b2 <__avr32_s32_to_f64>
80005ca2:	e0 68 79 fb 	mov	r8,31227
80005ca6:	ea 18 50 9f 	orh	r8,0x509f
80005caa:	e0 69 44 13 	mov	r9,17427
80005cae:	ea 19 3f d3 	orh	r9,0x3fd3
80005cb2:	e0 a0 11 a5 	rcall	80007ffc <__avr32_f64_mul>
80005cb6:	14 98       	mov	r8,r10
80005cb8:	16 99       	mov	r9,r11
80005cba:	00 9a       	mov	r10,r0
80005cbc:	02 9b       	mov	r11,r1
80005cbe:	e0 a0 13 59 	rcall	80008370 <__avr32_f64_add>
80005cc2:	14 90       	mov	r0,r10
80005cc4:	16 91       	mov	r1,r11
80005cc6:	e0 a0 13 df 	rcall	80008484 <__avr32_f64_to_s32>
80005cca:	30 08       	mov	r8,0
80005ccc:	18 96       	mov	r6,r12
80005cce:	30 09       	mov	r9,0
80005cd0:	00 9a       	mov	r10,r0
80005cd2:	02 9b       	mov	r11,r1
80005cd4:	e0 a0 14 a6 	rcall	80008620 <__avr32_f64_cmp_lt>
80005cd8:	c0 c0       	breq	80005cf0 <_dtoa_r+0x1f4>
80005cda:	0c 9c       	mov	r12,r6
80005cdc:	e0 a0 13 eb 	rcall	800084b2 <__avr32_s32_to_f64>
80005ce0:	14 98       	mov	r8,r10
80005ce2:	16 99       	mov	r9,r11
80005ce4:	00 9a       	mov	r10,r0
80005ce6:	02 9b       	mov	r11,r1
80005ce8:	e0 a0 14 55 	rcall	80008592 <__avr32_f64_cmp_eq>
80005cec:	f7 b6 00 01 	subeq	r6,1
80005cf0:	59 66       	cp.w	r6,22
80005cf2:	e0 88 00 05 	brls	80005cfc <_dtoa_r+0x200>
80005cf6:	30 18       	mov	r8,1
80005cf8:	51 48       	stdsp	sp[0x50],r8
80005cfa:	c1 38       	rjmp	80005d20 <_dtoa_r+0x224>
80005cfc:	fe c8 c4 a8 	sub	r8,pc,-15192
80005d00:	fa ea 00 3c 	ld.d	r10,sp[60]
80005d04:	f0 06 02 38 	ld.d	r8,r8[r6<<0x3]
80005d08:	e0 a0 14 8c 	rcall	80008620 <__avr32_f64_cmp_lt>
80005d0c:	f9 b4 00 00 	moveq	r4,0
80005d10:	fb f4 0a 14 	st.weq	sp[0x50],r4
80005d14:	f7 b6 01 01 	subne	r6,1
80005d18:	f9 bc 01 00 	movne	r12,0
80005d1c:	fb fc 1a 14 	st.wne	sp[0x50],r12
80005d20:	41 90       	lddsp	r0,sp[0x64]
80005d22:	20 10       	sub	r0,1
80005d24:	0a 10       	sub	r0,r5
80005d26:	c0 46       	brmi	80005d2e <_dtoa_r+0x232>
80005d28:	50 40       	stdsp	sp[0x10],r0
80005d2a:	30 00       	mov	r0,0
80005d2c:	c0 48       	rjmp	80005d34 <_dtoa_r+0x238>
80005d2e:	30 0b       	mov	r11,0
80005d30:	5c 30       	neg	r0
80005d32:	50 4b       	stdsp	sp[0x10],r11
80005d34:	ec 02 11 00 	rsub	r2,r6,0
80005d38:	58 06       	cp.w	r6,0
80005d3a:	fb fa 40 04 	ld.wge	r10,sp[0x10]
80005d3e:	f5 d6 e4 0a 	addge	r10,r10,r6
80005d42:	fb fa 4a 04 	st.wge	sp[0x10],r10
80005d46:	fb f6 4a 11 	st.wge	sp[0x44],r6
80005d4a:	f9 b2 04 00 	movge	r2,0
80005d4e:	e1 d6 e5 10 	sublt	r0,r0,r6
80005d52:	f9 b9 05 00 	movlt	r9,0
80005d56:	fb f9 5a 11 	st.wlt	sp[0x44],r9
80005d5a:	40 c8       	lddsp	r8,sp[0x30]
80005d5c:	58 98       	cp.w	r8,9
80005d5e:	e0 8b 00 20 	brhi	80005d9e <_dtoa_r+0x2a2>
80005d62:	58 58       	cp.w	r8,5
80005d64:	f9 b4 0a 01 	movle	r4,1
80005d68:	fb f5 90 0c 	ld.wgt	r5,sp[0x30]
80005d6c:	f7 b5 09 04 	subgt	r5,4
80005d70:	fb f5 9a 0c 	st.wgt	sp[0x30],r5
80005d74:	f9 b4 09 00 	movgt	r4,0
80005d78:	40 cc       	lddsp	r12,sp[0x30]
80005d7a:	58 3c       	cp.w	r12,3
80005d7c:	c2 d0       	breq	80005dd6 <_dtoa_r+0x2da>
80005d7e:	e0 89 00 05 	brgt	80005d88 <_dtoa_r+0x28c>
80005d82:	58 2c       	cp.w	r12,2
80005d84:	c1 01       	brne	80005da4 <_dtoa_r+0x2a8>
80005d86:	c1 88       	rjmp	80005db6 <_dtoa_r+0x2ba>
80005d88:	40 cb       	lddsp	r11,sp[0x30]
80005d8a:	58 4b       	cp.w	r11,4
80005d8c:	c0 60       	breq	80005d98 <_dtoa_r+0x29c>
80005d8e:	58 5b       	cp.w	r11,5
80005d90:	c0 a1       	brne	80005da4 <_dtoa_r+0x2a8>
80005d92:	30 1a       	mov	r10,1
80005d94:	50 da       	stdsp	sp[0x34],r10
80005d96:	c2 28       	rjmp	80005dda <_dtoa_r+0x2de>
80005d98:	30 19       	mov	r9,1
80005d9a:	50 d9       	stdsp	sp[0x34],r9
80005d9c:	c0 f8       	rjmp	80005dba <_dtoa_r+0x2be>
80005d9e:	30 08       	mov	r8,0
80005da0:	30 14       	mov	r4,1
80005da2:	50 c8       	stdsp	sp[0x30],r8
80005da4:	3f f5       	mov	r5,-1
80005da6:	30 1c       	mov	r12,1
80005da8:	30 0b       	mov	r11,0
80005daa:	50 95       	stdsp	sp[0x24],r5
80005dac:	50 dc       	stdsp	sp[0x34],r12
80005dae:	0a 91       	mov	r1,r5
80005db0:	31 28       	mov	r8,18
80005db2:	50 eb       	stdsp	sp[0x38],r11
80005db4:	c2 08       	rjmp	80005df4 <_dtoa_r+0x2f8>
80005db6:	30 0a       	mov	r10,0
80005db8:	50 da       	stdsp	sp[0x34],r10
80005dba:	40 e9       	lddsp	r9,sp[0x38]
80005dbc:	58 09       	cp.w	r9,0
80005dbe:	e0 89 00 07 	brgt	80005dcc <_dtoa_r+0x2d0>
80005dc2:	30 18       	mov	r8,1
80005dc4:	50 98       	stdsp	sp[0x24],r8
80005dc6:	10 91       	mov	r1,r8
80005dc8:	50 e8       	stdsp	sp[0x38],r8
80005dca:	c1 58       	rjmp	80005df4 <_dtoa_r+0x2f8>
80005dcc:	40 e5       	lddsp	r5,sp[0x38]
80005dce:	50 95       	stdsp	sp[0x24],r5
80005dd0:	0a 91       	mov	r1,r5
80005dd2:	0a 98       	mov	r8,r5
80005dd4:	c1 08       	rjmp	80005df4 <_dtoa_r+0x2f8>
80005dd6:	30 0c       	mov	r12,0
80005dd8:	50 dc       	stdsp	sp[0x34],r12
80005dda:	40 eb       	lddsp	r11,sp[0x38]
80005ddc:	ec 0b 00 0b 	add	r11,r6,r11
80005de0:	50 9b       	stdsp	sp[0x24],r11
80005de2:	16 98       	mov	r8,r11
80005de4:	2f f8       	sub	r8,-1
80005de6:	58 08       	cp.w	r8,0
80005de8:	e0 89 00 05 	brgt	80005df2 <_dtoa_r+0x2f6>
80005dec:	10 91       	mov	r1,r8
80005dee:	30 18       	mov	r8,1
80005df0:	c0 28       	rjmp	80005df4 <_dtoa_r+0x2f8>
80005df2:	10 91       	mov	r1,r8
80005df4:	30 09       	mov	r9,0
80005df6:	6e 9a       	ld.w	r10,r7[0x24]
80005df8:	95 19       	st.w	r10[0x4],r9
80005dfa:	30 49       	mov	r9,4
80005dfc:	c0 68       	rjmp	80005e08 <_dtoa_r+0x30c>
80005dfe:	d7 03       	nop
80005e00:	6a 1a       	ld.w	r10,r5[0x4]
80005e02:	a1 79       	lsl	r9,0x1
80005e04:	2f fa       	sub	r10,-1
80005e06:	8b 1a       	st.w	r5[0x4],r10
80005e08:	6e 95       	ld.w	r5,r7[0x24]
80005e0a:	f2 ca ff ec 	sub	r10,r9,-20
80005e0e:	10 3a       	cp.w	r10,r8
80005e10:	fe 98 ff f8 	brls	80005e00 <_dtoa_r+0x304>
80005e14:	6a 1b       	ld.w	r11,r5[0x4]
80005e16:	0e 9c       	mov	r12,r7
80005e18:	e0 a0 0b 6e 	rcall	800074f4 <_Balloc>
80005e1c:	58 e1       	cp.w	r1,14
80005e1e:	5f 88       	srls	r8
80005e20:	8b 0c       	st.w	r5[0x0],r12
80005e22:	f1 e4 00 04 	and	r4,r8,r4
80005e26:	6e 98       	ld.w	r8,r7[0x24]
80005e28:	70 08       	ld.w	r8,r8[0x0]
80005e2a:	50 88       	stdsp	sp[0x20],r8
80005e2c:	e0 80 01 82 	breq	80006130 <_dtoa_r+0x634>
80005e30:	58 06       	cp.w	r6,0
80005e32:	e0 8a 00 43 	brle	80005eb8 <_dtoa_r+0x3bc>
80005e36:	f3 d6 c0 04 	bfextu	r9,r6,0x0,0x4
80005e3a:	fe c8 c5 e6 	sub	r8,pc,-14874
80005e3e:	f0 09 02 34 	ld.d	r4,r8[r9<<0x3]
80005e42:	fa e5 00 18 	st.d	sp[24],r4
80005e46:	ec 04 14 04 	asr	r4,r6,0x4
80005e4a:	ed b4 00 04 	bld	r4,0x4
80005e4e:	c0 30       	breq	80005e54 <_dtoa_r+0x358>
80005e50:	30 25       	mov	r5,2
80005e52:	c1 08       	rjmp	80005e72 <_dtoa_r+0x376>
80005e54:	fe c8 c5 38 	sub	r8,pc,-15048
80005e58:	f0 e8 00 20 	ld.d	r8,r8[32]
80005e5c:	fa ea 00 3c 	ld.d	r10,sp[60]
80005e60:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
80005e64:	e0 a0 14 12 	rcall	80008688 <__avr32_f64_div>
80005e68:	30 35       	mov	r5,3
80005e6a:	14 98       	mov	r8,r10
80005e6c:	16 99       	mov	r9,r11
80005e6e:	fa e9 00 08 	st.d	sp[8],r8
80005e72:	fe cc c5 56 	sub	r12,pc,-15018
80005e76:	50 a3       	stdsp	sp[0x28],r3
80005e78:	0c 93       	mov	r3,r6
80005e7a:	18 96       	mov	r6,r12
80005e7c:	c0 f8       	rjmp	80005e9a <_dtoa_r+0x39e>
80005e7e:	fa ea 00 18 	ld.d	r10,sp[24]
80005e82:	ed b4 00 00 	bld	r4,0x0
80005e86:	c0 81       	brne	80005e96 <_dtoa_r+0x39a>
80005e88:	ec e8 00 00 	ld.d	r8,r6[0]
80005e8c:	2f f5       	sub	r5,-1
80005e8e:	e0 a0 10 b7 	rcall	80007ffc <__avr32_f64_mul>
80005e92:	fa eb 00 18 	st.d	sp[24],r10
80005e96:	a1 54       	asr	r4,0x1
80005e98:	2f 86       	sub	r6,-8
80005e9a:	58 04       	cp.w	r4,0
80005e9c:	cf 11       	brne	80005e7e <_dtoa_r+0x382>
80005e9e:	fa e8 00 18 	ld.d	r8,sp[24]
80005ea2:	fa ea 00 08 	ld.d	r10,sp[8]
80005ea6:	06 96       	mov	r6,r3
80005ea8:	e0 a0 13 f0 	rcall	80008688 <__avr32_f64_div>
80005eac:	40 a3       	lddsp	r3,sp[0x28]
80005eae:	14 98       	mov	r8,r10
80005eb0:	16 99       	mov	r9,r11
80005eb2:	fa e9 00 08 	st.d	sp[8],r8
80005eb6:	c2 f8       	rjmp	80005f14 <_dtoa_r+0x418>
80005eb8:	ec 08 11 00 	rsub	r8,r6,0
80005ebc:	c0 31       	brne	80005ec2 <_dtoa_r+0x3c6>
80005ebe:	30 25       	mov	r5,2
80005ec0:	c2 a8       	rjmp	80005f14 <_dtoa_r+0x418>
80005ec2:	fe cc c5 a6 	sub	r12,pc,-14938
80005ec6:	f0 04 14 04 	asr	r4,r8,0x4
80005eca:	50 1c       	stdsp	sp[0x4],r12
80005ecc:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80005ed0:	fe c9 c6 7c 	sub	r9,pc,-14724
80005ed4:	fa ea 00 3c 	ld.d	r10,sp[60]
80005ed8:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80005edc:	e0 a0 10 90 	rcall	80007ffc <__avr32_f64_mul>
80005ee0:	40 1c       	lddsp	r12,sp[0x4]
80005ee2:	50 63       	stdsp	sp[0x18],r3
80005ee4:	30 25       	mov	r5,2
80005ee6:	0c 93       	mov	r3,r6
80005ee8:	fa eb 00 08 	st.d	sp[8],r10
80005eec:	18 96       	mov	r6,r12
80005eee:	c0 f8       	rjmp	80005f0c <_dtoa_r+0x410>
80005ef0:	fa ea 00 08 	ld.d	r10,sp[8]
80005ef4:	ed b4 00 00 	bld	r4,0x0
80005ef8:	c0 81       	brne	80005f08 <_dtoa_r+0x40c>
80005efa:	ec e8 00 00 	ld.d	r8,r6[0]
80005efe:	2f f5       	sub	r5,-1
80005f00:	e0 a0 10 7e 	rcall	80007ffc <__avr32_f64_mul>
80005f04:	fa eb 00 08 	st.d	sp[8],r10
80005f08:	a1 54       	asr	r4,0x1
80005f0a:	2f 86       	sub	r6,-8
80005f0c:	58 04       	cp.w	r4,0
80005f0e:	cf 11       	brne	80005ef0 <_dtoa_r+0x3f4>
80005f10:	06 96       	mov	r6,r3
80005f12:	40 63       	lddsp	r3,sp[0x18]
80005f14:	41 4a       	lddsp	r10,sp[0x50]
80005f16:	58 0a       	cp.w	r10,0
80005f18:	c2 a0       	breq	80005f6c <_dtoa_r+0x470>
80005f1a:	fa e8 00 08 	ld.d	r8,sp[8]
80005f1e:	58 01       	cp.w	r1,0
80005f20:	5f 94       	srgt	r4
80005f22:	fa e9 00 18 	st.d	sp[24],r8
80005f26:	30 08       	mov	r8,0
80005f28:	fc 19 3f f0 	movh	r9,0x3ff0
80005f2c:	fa ea 00 18 	ld.d	r10,sp[24]
80005f30:	e0 a0 13 78 	rcall	80008620 <__avr32_f64_cmp_lt>
80005f34:	f9 bc 00 00 	moveq	r12,0
80005f38:	f9 bc 01 01 	movne	r12,1
80005f3c:	e9 ec 00 0c 	and	r12,r4,r12
80005f40:	c1 60       	breq	80005f6c <_dtoa_r+0x470>
80005f42:	40 98       	lddsp	r8,sp[0x24]
80005f44:	58 08       	cp.w	r8,0
80005f46:	e0 8a 00 f1 	brle	80006128 <_dtoa_r+0x62c>
80005f4a:	30 08       	mov	r8,0
80005f4c:	fc 19 40 24 	movh	r9,0x4024
80005f50:	ec c4 00 01 	sub	r4,r6,1
80005f54:	fa ea 00 18 	ld.d	r10,sp[24]
80005f58:	2f f5       	sub	r5,-1
80005f5a:	50 64       	stdsp	sp[0x18],r4
80005f5c:	e0 a0 10 50 	rcall	80007ffc <__avr32_f64_mul>
80005f60:	40 94       	lddsp	r4,sp[0x24]
80005f62:	14 98       	mov	r8,r10
80005f64:	16 99       	mov	r9,r11
80005f66:	fa e9 00 08 	st.d	sp[8],r8
80005f6a:	c0 38       	rjmp	80005f70 <_dtoa_r+0x474>
80005f6c:	50 66       	stdsp	sp[0x18],r6
80005f6e:	02 94       	mov	r4,r1
80005f70:	0a 9c       	mov	r12,r5
80005f72:	e0 a0 12 a0 	rcall	800084b2 <__avr32_s32_to_f64>
80005f76:	fa e8 00 08 	ld.d	r8,sp[8]
80005f7a:	e0 a0 10 41 	rcall	80007ffc <__avr32_f64_mul>
80005f7e:	30 08       	mov	r8,0
80005f80:	fc 19 40 1c 	movh	r9,0x401c
80005f84:	e0 a0 11 f6 	rcall	80008370 <__avr32_f64_add>
80005f88:	14 98       	mov	r8,r10
80005f8a:	16 99       	mov	r9,r11
80005f8c:	fa e9 00 28 	st.d	sp[40],r8
80005f90:	fc 18 fc c0 	movh	r8,0xfcc0
80005f94:	40 a5       	lddsp	r5,sp[0x28]
80005f96:	10 05       	add	r5,r8
80005f98:	50 a5       	stdsp	sp[0x28],r5
80005f9a:	58 04       	cp.w	r4,0
80005f9c:	c2 11       	brne	80005fde <_dtoa_r+0x4e2>
80005f9e:	fa ea 00 08 	ld.d	r10,sp[8]
80005fa2:	30 08       	mov	r8,0
80005fa4:	fc 19 40 14 	movh	r9,0x4014
80005fa8:	e0 a0 11 16 	rcall	800081d4 <__avr32_f64_sub>
80005fac:	40 bc       	lddsp	r12,sp[0x2c]
80005fae:	fa eb 00 08 	st.d	sp[8],r10
80005fb2:	14 98       	mov	r8,r10
80005fb4:	16 99       	mov	r9,r11
80005fb6:	18 9a       	mov	r10,r12
80005fb8:	0a 9b       	mov	r11,r5
80005fba:	e0 a0 13 33 	rcall	80008620 <__avr32_f64_cmp_lt>
80005fbe:	e0 81 02 54 	brne	80006466 <_dtoa_r+0x96a>
80005fc2:	0a 98       	mov	r8,r5
80005fc4:	40 b9       	lddsp	r9,sp[0x2c]
80005fc6:	ee 18 80 00 	eorh	r8,0x8000
80005fca:	fa ea 00 08 	ld.d	r10,sp[8]
80005fce:	10 95       	mov	r5,r8
80005fd0:	12 98       	mov	r8,r9
80005fd2:	0a 99       	mov	r9,r5
80005fd4:	e0 a0 13 26 	rcall	80008620 <__avr32_f64_cmp_lt>
80005fd8:	e0 81 02 3e 	brne	80006454 <_dtoa_r+0x958>
80005fdc:	ca 68       	rjmp	80006128 <_dtoa_r+0x62c>
80005fde:	fe c9 c7 8a 	sub	r9,pc,-14454
80005fe2:	e8 c8 00 01 	sub	r8,r4,1
80005fe6:	40 d5       	lddsp	r5,sp[0x34]
80005fe8:	58 05       	cp.w	r5,0
80005fea:	c4 f0       	breq	80006088 <_dtoa_r+0x58c>
80005fec:	30 0c       	mov	r12,0
80005fee:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80005ff2:	51 3c       	stdsp	sp[0x4c],r12
80005ff4:	30 0a       	mov	r10,0
80005ff6:	fc 1b 3f e0 	movh	r11,0x3fe0
80005ffa:	e0 a0 13 47 	rcall	80008688 <__avr32_f64_div>
80005ffe:	fa e8 00 28 	ld.d	r8,sp[40]
80006002:	40 85       	lddsp	r5,sp[0x20]
80006004:	e0 a0 10 e8 	rcall	800081d4 <__avr32_f64_sub>
80006008:	fa eb 00 28 	st.d	sp[40],r10
8000600c:	fa ea 00 08 	ld.d	r10,sp[8]
80006010:	e0 a0 12 3a 	rcall	80008484 <__avr32_f64_to_s32>
80006014:	51 6c       	stdsp	sp[0x58],r12
80006016:	e0 a0 12 4e 	rcall	800084b2 <__avr32_s32_to_f64>
8000601a:	14 98       	mov	r8,r10
8000601c:	16 99       	mov	r9,r11
8000601e:	fa ea 00 08 	ld.d	r10,sp[8]
80006022:	e0 a0 10 d9 	rcall	800081d4 <__avr32_f64_sub>
80006026:	fa eb 00 08 	st.d	sp[8],r10
8000602a:	41 68       	lddsp	r8,sp[0x58]
8000602c:	2d 08       	sub	r8,-48
8000602e:	0a c8       	st.b	r5++,r8
80006030:	41 39       	lddsp	r9,sp[0x4c]
80006032:	2f f9       	sub	r9,-1
80006034:	51 39       	stdsp	sp[0x4c],r9
80006036:	fa e8 00 28 	ld.d	r8,sp[40]
8000603a:	e0 a0 12 f3 	rcall	80008620 <__avr32_f64_cmp_lt>
8000603e:	e0 81 03 39 	brne	800066b0 <_dtoa_r+0xbb4>
80006042:	fa e8 00 08 	ld.d	r8,sp[8]
80006046:	30 0a       	mov	r10,0
80006048:	fc 1b 3f f0 	movh	r11,0x3ff0
8000604c:	e0 a0 10 c4 	rcall	800081d4 <__avr32_f64_sub>
80006050:	fa e8 00 28 	ld.d	r8,sp[40]
80006054:	e0 a0 12 e6 	rcall	80008620 <__avr32_f64_cmp_lt>
80006058:	fa ea 00 28 	ld.d	r10,sp[40]
8000605c:	30 08       	mov	r8,0
8000605e:	fc 19 40 24 	movh	r9,0x4024
80006062:	e0 81 00 da 	brne	80006216 <_dtoa_r+0x71a>
80006066:	41 3c       	lddsp	r12,sp[0x4c]
80006068:	08 3c       	cp.w	r12,r4
8000606a:	c5 f4       	brge	80006128 <_dtoa_r+0x62c>
8000606c:	e0 a0 0f c8 	rcall	80007ffc <__avr32_f64_mul>
80006070:	30 08       	mov	r8,0
80006072:	fa eb 00 28 	st.d	sp[40],r10
80006076:	fc 19 40 24 	movh	r9,0x4024
8000607a:	fa ea 00 08 	ld.d	r10,sp[8]
8000607e:	e0 a0 0f bf 	rcall	80007ffc <__avr32_f64_mul>
80006082:	fa eb 00 08 	st.d	sp[8],r10
80006086:	cc 3b       	rjmp	8000600c <_dtoa_r+0x510>
80006088:	40 85       	lddsp	r5,sp[0x20]
8000608a:	08 05       	add	r5,r4
8000608c:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
80006090:	51 35       	stdsp	sp[0x4c],r5
80006092:	fa e8 00 28 	ld.d	r8,sp[40]
80006096:	40 85       	lddsp	r5,sp[0x20]
80006098:	e0 a0 0f b2 	rcall	80007ffc <__avr32_f64_mul>
8000609c:	fa eb 00 28 	st.d	sp[40],r10
800060a0:	fa ea 00 08 	ld.d	r10,sp[8]
800060a4:	e0 a0 11 f0 	rcall	80008484 <__avr32_f64_to_s32>
800060a8:	51 6c       	stdsp	sp[0x58],r12
800060aa:	e0 a0 12 04 	rcall	800084b2 <__avr32_s32_to_f64>
800060ae:	14 98       	mov	r8,r10
800060b0:	16 99       	mov	r9,r11
800060b2:	fa ea 00 08 	ld.d	r10,sp[8]
800060b6:	e0 a0 10 8f 	rcall	800081d4 <__avr32_f64_sub>
800060ba:	fa eb 00 08 	st.d	sp[8],r10
800060be:	41 68       	lddsp	r8,sp[0x58]
800060c0:	2d 08       	sub	r8,-48
800060c2:	0a c8       	st.b	r5++,r8
800060c4:	41 3c       	lddsp	r12,sp[0x4c]
800060c6:	18 35       	cp.w	r5,r12
800060c8:	c2 81       	brne	80006118 <_dtoa_r+0x61c>
800060ca:	30 08       	mov	r8,0
800060cc:	fc 19 3f e0 	movh	r9,0x3fe0
800060d0:	fa ea 00 28 	ld.d	r10,sp[40]
800060d4:	e0 a0 11 4e 	rcall	80008370 <__avr32_f64_add>
800060d8:	40 85       	lddsp	r5,sp[0x20]
800060da:	fa e8 00 08 	ld.d	r8,sp[8]
800060de:	08 05       	add	r5,r4
800060e0:	e0 a0 12 a0 	rcall	80008620 <__avr32_f64_cmp_lt>
800060e4:	e0 81 00 99 	brne	80006216 <_dtoa_r+0x71a>
800060e8:	fa e8 00 28 	ld.d	r8,sp[40]
800060ec:	30 0a       	mov	r10,0
800060ee:	fc 1b 3f e0 	movh	r11,0x3fe0
800060f2:	e0 a0 10 71 	rcall	800081d4 <__avr32_f64_sub>
800060f6:	14 98       	mov	r8,r10
800060f8:	16 99       	mov	r9,r11
800060fa:	fa ea 00 08 	ld.d	r10,sp[8]
800060fe:	e0 a0 12 91 	rcall	80008620 <__avr32_f64_cmp_lt>
80006102:	c1 30       	breq	80006128 <_dtoa_r+0x62c>
80006104:	33 09       	mov	r9,48
80006106:	0a 98       	mov	r8,r5
80006108:	11 7a       	ld.ub	r10,--r8
8000610a:	f2 0a 18 00 	cp.b	r10,r9
8000610e:	e0 81 02 d1 	brne	800066b0 <_dtoa_r+0xbb4>
80006112:	10 95       	mov	r5,r8
80006114:	cf 9b       	rjmp	80006106 <_dtoa_r+0x60a>
80006116:	d7 03       	nop
80006118:	30 08       	mov	r8,0
8000611a:	fc 19 40 24 	movh	r9,0x4024
8000611e:	e0 a0 0f 6f 	rcall	80007ffc <__avr32_f64_mul>
80006122:	fa eb 00 08 	st.d	sp[8],r10
80006126:	cb db       	rjmp	800060a0 <_dtoa_r+0x5a4>
80006128:	fa ea 00 3c 	ld.d	r10,sp[60]
8000612c:	fa eb 00 08 	st.d	sp[8],r10
80006130:	58 e6       	cp.w	r6,14
80006132:	5f ab       	srle	r11
80006134:	41 8a       	lddsp	r10,sp[0x60]
80006136:	30 08       	mov	r8,0
80006138:	f4 09 11 ff 	rsub	r9,r10,-1
8000613c:	f7 e9 03 f9 	and	r9,r11,r9>>0x1f
80006140:	f0 09 18 00 	cp.b	r9,r8
80006144:	e0 80 00 82 	breq	80006248 <_dtoa_r+0x74c>
80006148:	40 ea       	lddsp	r10,sp[0x38]
8000614a:	58 01       	cp.w	r1,0
8000614c:	5f a9       	srle	r9
8000614e:	f3 ea 03 f9 	and	r9,r9,r10>>0x1f
80006152:	fe ca c8 fe 	sub	r10,pc,-14082
80006156:	f4 06 02 34 	ld.d	r4,r10[r6<<0x3]
8000615a:	fa e5 00 10 	st.d	sp[16],r4
8000615e:	f0 09 18 00 	cp.b	r9,r8
80006162:	c1 40       	breq	8000618a <_dtoa_r+0x68e>
80006164:	58 01       	cp.w	r1,0
80006166:	e0 81 01 77 	brne	80006454 <_dtoa_r+0x958>
8000616a:	30 08       	mov	r8,0
8000616c:	fc 19 40 14 	movh	r9,0x4014
80006170:	08 9a       	mov	r10,r4
80006172:	0a 9b       	mov	r11,r5
80006174:	e0 a0 0f 44 	rcall	80007ffc <__avr32_f64_mul>
80006178:	fa e8 00 08 	ld.d	r8,sp[8]
8000617c:	e0 a0 12 1e 	rcall	800085b8 <__avr32_f64_cmp_ge>
80006180:	e0 81 01 6a 	brne	80006454 <_dtoa_r+0x958>
80006184:	02 92       	mov	r2,r1
80006186:	e0 8f 01 72 	bral	8000646a <_dtoa_r+0x96e>
8000618a:	40 85       	lddsp	r5,sp[0x20]
8000618c:	30 14       	mov	r4,1
8000618e:	fa e8 00 10 	ld.d	r8,sp[16]
80006192:	fa ea 00 08 	ld.d	r10,sp[8]
80006196:	e0 a0 12 79 	rcall	80008688 <__avr32_f64_div>
8000619a:	e0 a0 11 75 	rcall	80008484 <__avr32_f64_to_s32>
8000619e:	18 92       	mov	r2,r12
800061a0:	e0 a0 11 89 	rcall	800084b2 <__avr32_s32_to_f64>
800061a4:	fa e8 00 10 	ld.d	r8,sp[16]
800061a8:	e0 a0 0f 2a 	rcall	80007ffc <__avr32_f64_mul>
800061ac:	14 98       	mov	r8,r10
800061ae:	16 99       	mov	r9,r11
800061b0:	fa ea 00 08 	ld.d	r10,sp[8]
800061b4:	e0 a0 10 10 	rcall	800081d4 <__avr32_f64_sub>
800061b8:	fa eb 00 08 	st.d	sp[8],r10
800061bc:	e4 c8 ff d0 	sub	r8,r2,-48
800061c0:	0a c8       	st.b	r5++,r8
800061c2:	fc 19 40 24 	movh	r9,0x4024
800061c6:	30 08       	mov	r8,0
800061c8:	02 34       	cp.w	r4,r1
800061ca:	c3 31       	brne	80006230 <_dtoa_r+0x734>
800061cc:	fa e8 00 08 	ld.d	r8,sp[8]
800061d0:	e0 a0 10 d0 	rcall	80008370 <__avr32_f64_add>
800061d4:	16 91       	mov	r1,r11
800061d6:	14 90       	mov	r0,r10
800061d8:	14 98       	mov	r8,r10
800061da:	02 99       	mov	r9,r1
800061dc:	fa ea 00 10 	ld.d	r10,sp[16]
800061e0:	e0 a0 12 20 	rcall	80008620 <__avr32_f64_cmp_lt>
800061e4:	c1 a1       	brne	80006218 <_dtoa_r+0x71c>
800061e6:	fa e8 00 10 	ld.d	r8,sp[16]
800061ea:	00 9a       	mov	r10,r0
800061ec:	02 9b       	mov	r11,r1
800061ee:	e0 a0 11 d2 	rcall	80008592 <__avr32_f64_cmp_eq>
800061f2:	e0 80 02 5e 	breq	800066ae <_dtoa_r+0xbb2>
800061f6:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
800061fa:	c0 f1       	brne	80006218 <_dtoa_r+0x71c>
800061fc:	e0 8f 02 59 	bral	800066ae <_dtoa_r+0xbb2>
80006200:	40 8a       	lddsp	r10,sp[0x20]
80006202:	14 38       	cp.w	r8,r10
80006204:	c0 30       	breq	8000620a <_dtoa_r+0x70e>
80006206:	10 95       	mov	r5,r8
80006208:	c0 98       	rjmp	8000621a <_dtoa_r+0x71e>
8000620a:	33 08       	mov	r8,48
8000620c:	40 89       	lddsp	r9,sp[0x20]
8000620e:	2f f6       	sub	r6,-1
80006210:	b2 88       	st.b	r9[0x0],r8
80006212:	40 88       	lddsp	r8,sp[0x20]
80006214:	c0 88       	rjmp	80006224 <_dtoa_r+0x728>
80006216:	40 66       	lddsp	r6,sp[0x18]
80006218:	33 99       	mov	r9,57
8000621a:	0a 98       	mov	r8,r5
8000621c:	11 7a       	ld.ub	r10,--r8
8000621e:	f2 0a 18 00 	cp.b	r10,r9
80006222:	ce f0       	breq	80006200 <_dtoa_r+0x704>
80006224:	50 66       	stdsp	sp[0x18],r6
80006226:	11 89       	ld.ub	r9,r8[0x0]
80006228:	2f f9       	sub	r9,-1
8000622a:	b0 89       	st.b	r8[0x0],r9
8000622c:	e0 8f 02 42 	bral	800066b0 <_dtoa_r+0xbb4>
80006230:	e0 a0 0e e6 	rcall	80007ffc <__avr32_f64_mul>
80006234:	2f f4       	sub	r4,-1
80006236:	fa eb 00 08 	st.d	sp[8],r10
8000623a:	30 08       	mov	r8,0
8000623c:	30 09       	mov	r9,0
8000623e:	e0 a0 11 aa 	rcall	80008592 <__avr32_f64_cmp_eq>
80006242:	ca 60       	breq	8000618e <_dtoa_r+0x692>
80006244:	e0 8f 02 35 	bral	800066ae <_dtoa_r+0xbb2>
80006248:	40 d8       	lddsp	r8,sp[0x34]
8000624a:	58 08       	cp.w	r8,0
8000624c:	c0 51       	brne	80006256 <_dtoa_r+0x75a>
8000624e:	04 98       	mov	r8,r2
80006250:	00 95       	mov	r5,r0
80006252:	40 d4       	lddsp	r4,sp[0x34]
80006254:	c3 78       	rjmp	800062c2 <_dtoa_r+0x7c6>
80006256:	40 c5       	lddsp	r5,sp[0x30]
80006258:	58 15       	cp.w	r5,1
8000625a:	e0 89 00 0f 	brgt	80006278 <_dtoa_r+0x77c>
8000625e:	41 74       	lddsp	r4,sp[0x5c]
80006260:	58 04       	cp.w	r4,0
80006262:	c0 40       	breq	8000626a <_dtoa_r+0x76e>
80006264:	f4 c9 fb cd 	sub	r9,r10,-1075
80006268:	c0 48       	rjmp	80006270 <_dtoa_r+0x774>
8000626a:	41 99       	lddsp	r9,sp[0x64]
8000626c:	f2 09 11 36 	rsub	r9,r9,54
80006270:	04 98       	mov	r8,r2
80006272:	00 95       	mov	r5,r0
80006274:	c1 c8       	rjmp	800062ac <_dtoa_r+0x7b0>
80006276:	d7 03       	nop
80006278:	e2 c8 00 01 	sub	r8,r1,1
8000627c:	58 01       	cp.w	r1,0
8000627e:	e0 05 17 40 	movge	r5,r0
80006282:	e2 09 17 40 	movge	r9,r1
80006286:	e1 d1 e5 15 	sublt	r5,r0,r1
8000628a:	f9 b9 05 00 	movlt	r9,0
8000628e:	10 32       	cp.w	r2,r8
80006290:	e5 d8 e4 18 	subge	r8,r2,r8
80006294:	f1 d2 e5 18 	sublt	r8,r8,r2
80006298:	e5 d8 e5 02 	addlt	r2,r2,r8
8000629c:	fb fc 50 11 	ld.wlt	r12,sp[0x44]
800062a0:	f9 d8 e5 0c 	addlt	r12,r12,r8
800062a4:	fb fc 5a 11 	st.wlt	sp[0x44],r12
800062a8:	f9 b8 05 00 	movlt	r8,0
800062ac:	40 4b       	lddsp	r11,sp[0x10]
800062ae:	12 0b       	add	r11,r9
800062b0:	50 08       	stdsp	sp[0x0],r8
800062b2:	50 4b       	stdsp	sp[0x10],r11
800062b4:	12 00       	add	r0,r9
800062b6:	30 1b       	mov	r11,1
800062b8:	0e 9c       	mov	r12,r7
800062ba:	e0 a0 0a d1 	rcall	8000785c <__i2b>
800062be:	40 08       	lddsp	r8,sp[0x0]
800062c0:	18 94       	mov	r4,r12
800062c2:	40 4a       	lddsp	r10,sp[0x10]
800062c4:	58 05       	cp.w	r5,0
800062c6:	5f 99       	srgt	r9
800062c8:	58 0a       	cp.w	r10,0
800062ca:	5f 9a       	srgt	r10
800062cc:	f5 e9 00 09 	and	r9,r10,r9
800062d0:	c0 80       	breq	800062e0 <_dtoa_r+0x7e4>
800062d2:	40 4c       	lddsp	r12,sp[0x10]
800062d4:	f8 05 0d 49 	min	r9,r12,r5
800062d8:	12 1c       	sub	r12,r9
800062da:	12 10       	sub	r0,r9
800062dc:	50 4c       	stdsp	sp[0x10],r12
800062de:	12 15       	sub	r5,r9
800062e0:	58 02       	cp.w	r2,0
800062e2:	e0 8a 00 27 	brle	80006330 <_dtoa_r+0x834>
800062e6:	40 db       	lddsp	r11,sp[0x34]
800062e8:	58 0b       	cp.w	r11,0
800062ea:	c1 d0       	breq	80006324 <_dtoa_r+0x828>
800062ec:	58 08       	cp.w	r8,0
800062ee:	e0 8a 00 17 	brle	8000631c <_dtoa_r+0x820>
800062f2:	10 9a       	mov	r10,r8
800062f4:	50 08       	stdsp	sp[0x0],r8
800062f6:	08 9b       	mov	r11,r4
800062f8:	0e 9c       	mov	r12,r7
800062fa:	e0 a0 0a f7 	rcall	800078e8 <__pow5mult>
800062fe:	06 9a       	mov	r10,r3
80006300:	18 9b       	mov	r11,r12
80006302:	18 94       	mov	r4,r12
80006304:	0e 9c       	mov	r12,r7
80006306:	e0 a0 0a 2b 	rcall	8000775c <__multiply>
8000630a:	18 99       	mov	r9,r12
8000630c:	06 9b       	mov	r11,r3
8000630e:	50 19       	stdsp	sp[0x4],r9
80006310:	0e 9c       	mov	r12,r7
80006312:	e0 a0 08 d7 	rcall	800074c0 <_Bfree>
80006316:	40 19       	lddsp	r9,sp[0x4]
80006318:	40 08       	lddsp	r8,sp[0x0]
8000631a:	12 93       	mov	r3,r9
8000631c:	e4 08 01 0a 	sub	r10,r2,r8
80006320:	c0 80       	breq	80006330 <_dtoa_r+0x834>
80006322:	c0 28       	rjmp	80006326 <_dtoa_r+0x82a>
80006324:	04 9a       	mov	r10,r2
80006326:	06 9b       	mov	r11,r3
80006328:	0e 9c       	mov	r12,r7
8000632a:	e0 a0 0a df 	rcall	800078e8 <__pow5mult>
8000632e:	18 93       	mov	r3,r12
80006330:	30 1b       	mov	r11,1
80006332:	0e 9c       	mov	r12,r7
80006334:	e0 a0 0a 94 	rcall	8000785c <__i2b>
80006338:	41 1a       	lddsp	r10,sp[0x44]
8000633a:	18 92       	mov	r2,r12
8000633c:	58 0a       	cp.w	r10,0
8000633e:	e0 8a 00 07 	brle	8000634c <_dtoa_r+0x850>
80006342:	18 9b       	mov	r11,r12
80006344:	0e 9c       	mov	r12,r7
80006346:	e0 a0 0a d1 	rcall	800078e8 <__pow5mult>
8000634a:	18 92       	mov	r2,r12
8000634c:	40 c9       	lddsp	r9,sp[0x30]
8000634e:	58 19       	cp.w	r9,1
80006350:	e0 89 00 14 	brgt	80006378 <_dtoa_r+0x87c>
80006354:	40 38       	lddsp	r8,sp[0xc]
80006356:	58 08       	cp.w	r8,0
80006358:	c1 01       	brne	80006378 <_dtoa_r+0x87c>
8000635a:	40 29       	lddsp	r9,sp[0x8]
8000635c:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
80006360:	c0 c1       	brne	80006378 <_dtoa_r+0x87c>
80006362:	12 98       	mov	r8,r9
80006364:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80006368:	c0 80       	breq	80006378 <_dtoa_r+0x87c>
8000636a:	40 4c       	lddsp	r12,sp[0x10]
8000636c:	30 1b       	mov	r11,1
8000636e:	2f fc       	sub	r12,-1
80006370:	2f f0       	sub	r0,-1
80006372:	50 4c       	stdsp	sp[0x10],r12
80006374:	50 6b       	stdsp	sp[0x18],r11
80006376:	c0 38       	rjmp	8000637c <_dtoa_r+0x880>
80006378:	30 0a       	mov	r10,0
8000637a:	50 6a       	stdsp	sp[0x18],r10
8000637c:	41 19       	lddsp	r9,sp[0x44]
8000637e:	58 09       	cp.w	r9,0
80006380:	c0 31       	brne	80006386 <_dtoa_r+0x88a>
80006382:	30 1c       	mov	r12,1
80006384:	c0 98       	rjmp	80006396 <_dtoa_r+0x89a>
80006386:	64 48       	ld.w	r8,r2[0x10]
80006388:	2f c8       	sub	r8,-4
8000638a:	e4 08 03 2c 	ld.w	r12,r2[r8<<0x2]
8000638e:	e0 a0 08 08 	rcall	8000739e <__hi0bits>
80006392:	f8 0c 11 20 	rsub	r12,r12,32
80006396:	40 4b       	lddsp	r11,sp[0x10]
80006398:	f8 0b 00 08 	add	r8,r12,r11
8000639c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800063a0:	c0 c0       	breq	800063b8 <_dtoa_r+0x8bc>
800063a2:	f0 08 11 20 	rsub	r8,r8,32
800063a6:	58 48       	cp.w	r8,4
800063a8:	e0 8a 00 06 	brle	800063b4 <_dtoa_r+0x8b8>
800063ac:	20 48       	sub	r8,4
800063ae:	10 0b       	add	r11,r8
800063b0:	50 4b       	stdsp	sp[0x10],r11
800063b2:	c0 78       	rjmp	800063c0 <_dtoa_r+0x8c4>
800063b4:	58 48       	cp.w	r8,4
800063b6:	c0 70       	breq	800063c4 <_dtoa_r+0x8c8>
800063b8:	40 4a       	lddsp	r10,sp[0x10]
800063ba:	2e 48       	sub	r8,-28
800063bc:	10 0a       	add	r10,r8
800063be:	50 4a       	stdsp	sp[0x10],r10
800063c0:	10 00       	add	r0,r8
800063c2:	10 05       	add	r5,r8
800063c4:	58 00       	cp.w	r0,0
800063c6:	e0 8a 00 08 	brle	800063d6 <_dtoa_r+0x8da>
800063ca:	06 9b       	mov	r11,r3
800063cc:	00 9a       	mov	r10,r0
800063ce:	0e 9c       	mov	r12,r7
800063d0:	e0 a0 09 82 	rcall	800076d4 <__lshift>
800063d4:	18 93       	mov	r3,r12
800063d6:	40 49       	lddsp	r9,sp[0x10]
800063d8:	58 09       	cp.w	r9,0
800063da:	e0 8a 00 08 	brle	800063ea <_dtoa_r+0x8ee>
800063de:	04 9b       	mov	r11,r2
800063e0:	12 9a       	mov	r10,r9
800063e2:	0e 9c       	mov	r12,r7
800063e4:	e0 a0 09 78 	rcall	800076d4 <__lshift>
800063e8:	18 92       	mov	r2,r12
800063ea:	41 48       	lddsp	r8,sp[0x50]
800063ec:	58 08       	cp.w	r8,0
800063ee:	c1 b0       	breq	80006424 <_dtoa_r+0x928>
800063f0:	04 9b       	mov	r11,r2
800063f2:	06 9c       	mov	r12,r3
800063f4:	e0 a0 08 4c 	rcall	8000748c <__mcmp>
800063f8:	c1 64       	brge	80006424 <_dtoa_r+0x928>
800063fa:	06 9b       	mov	r11,r3
800063fc:	30 09       	mov	r9,0
800063fe:	30 aa       	mov	r10,10
80006400:	0e 9c       	mov	r12,r7
80006402:	e0 a0 0a 35 	rcall	8000786c <__multadd>
80006406:	20 16       	sub	r6,1
80006408:	18 93       	mov	r3,r12
8000640a:	40 dc       	lddsp	r12,sp[0x34]
8000640c:	58 0c       	cp.w	r12,0
8000640e:	c0 31       	brne	80006414 <_dtoa_r+0x918>
80006410:	40 91       	lddsp	r1,sp[0x24]
80006412:	c0 98       	rjmp	80006424 <_dtoa_r+0x928>
80006414:	08 9b       	mov	r11,r4
80006416:	40 91       	lddsp	r1,sp[0x24]
80006418:	30 09       	mov	r9,0
8000641a:	30 aa       	mov	r10,10
8000641c:	0e 9c       	mov	r12,r7
8000641e:	e0 a0 0a 27 	rcall	8000786c <__multadd>
80006422:	18 94       	mov	r4,r12
80006424:	58 01       	cp.w	r1,0
80006426:	5f a9       	srle	r9
80006428:	40 cb       	lddsp	r11,sp[0x30]
8000642a:	58 2b       	cp.w	r11,2
8000642c:	5f 98       	srgt	r8
8000642e:	f3 e8 00 08 	and	r8,r9,r8
80006432:	c2 50       	breq	8000647c <_dtoa_r+0x980>
80006434:	58 01       	cp.w	r1,0
80006436:	c1 11       	brne	80006458 <_dtoa_r+0x95c>
80006438:	04 9b       	mov	r11,r2
8000643a:	02 99       	mov	r9,r1
8000643c:	30 5a       	mov	r10,5
8000643e:	0e 9c       	mov	r12,r7
80006440:	e0 a0 0a 16 	rcall	8000786c <__multadd>
80006444:	18 92       	mov	r2,r12
80006446:	18 9b       	mov	r11,r12
80006448:	06 9c       	mov	r12,r3
8000644a:	e0 a0 08 21 	rcall	8000748c <__mcmp>
8000644e:	e0 89 00 0f 	brgt	8000646c <_dtoa_r+0x970>
80006452:	c0 38       	rjmp	80006458 <_dtoa_r+0x95c>
80006454:	30 02       	mov	r2,0
80006456:	04 94       	mov	r4,r2
80006458:	40 ea       	lddsp	r10,sp[0x38]
8000645a:	30 09       	mov	r9,0
8000645c:	5c da       	com	r10
8000645e:	40 85       	lddsp	r5,sp[0x20]
80006460:	50 6a       	stdsp	sp[0x18],r10
80006462:	50 49       	stdsp	sp[0x10],r9
80006464:	c0 f9       	rjmp	80006682 <_dtoa_r+0xb86>
80006466:	08 92       	mov	r2,r4
80006468:	40 66       	lddsp	r6,sp[0x18]
8000646a:	04 94       	mov	r4,r2
8000646c:	2f f6       	sub	r6,-1
8000646e:	50 66       	stdsp	sp[0x18],r6
80006470:	33 18       	mov	r8,49
80006472:	40 85       	lddsp	r5,sp[0x20]
80006474:	0a c8       	st.b	r5++,r8
80006476:	30 08       	mov	r8,0
80006478:	50 48       	stdsp	sp[0x10],r8
8000647a:	c0 49       	rjmp	80006682 <_dtoa_r+0xb86>
8000647c:	40 dc       	lddsp	r12,sp[0x34]
8000647e:	58 0c       	cp.w	r12,0
80006480:	e0 80 00 b5 	breq	800065ea <_dtoa_r+0xaee>
80006484:	58 05       	cp.w	r5,0
80006486:	e0 8a 00 08 	brle	80006496 <_dtoa_r+0x99a>
8000648a:	08 9b       	mov	r11,r4
8000648c:	0a 9a       	mov	r10,r5
8000648e:	0e 9c       	mov	r12,r7
80006490:	e0 a0 09 22 	rcall	800076d4 <__lshift>
80006494:	18 94       	mov	r4,r12
80006496:	40 6b       	lddsp	r11,sp[0x18]
80006498:	58 0b       	cp.w	r11,0
8000649a:	c0 31       	brne	800064a0 <_dtoa_r+0x9a4>
8000649c:	08 9c       	mov	r12,r4
8000649e:	c1 38       	rjmp	800064c4 <_dtoa_r+0x9c8>
800064a0:	68 1b       	ld.w	r11,r4[0x4]
800064a2:	0e 9c       	mov	r12,r7
800064a4:	e0 a0 08 28 	rcall	800074f4 <_Balloc>
800064a8:	68 4a       	ld.w	r10,r4[0x10]
800064aa:	18 95       	mov	r5,r12
800064ac:	e8 cb ff f4 	sub	r11,r4,-12
800064b0:	2f ea       	sub	r10,-2
800064b2:	2f 4c       	sub	r12,-12
800064b4:	a3 6a       	lsl	r10,0x2
800064b6:	fe b0 e8 3f 	rcall	80003534 <memcpy>
800064ba:	0a 9b       	mov	r11,r5
800064bc:	30 1a       	mov	r10,1
800064be:	0e 9c       	mov	r12,r7
800064c0:	e0 a0 09 0a 	rcall	800076d4 <__lshift>
800064c4:	50 44       	stdsp	sp[0x10],r4
800064c6:	40 3a       	lddsp	r10,sp[0xc]
800064c8:	30 19       	mov	r9,1
800064ca:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
800064ce:	18 94       	mov	r4,r12
800064d0:	50 da       	stdsp	sp[0x34],r10
800064d2:	40 85       	lddsp	r5,sp[0x20]
800064d4:	50 99       	stdsp	sp[0x24],r9
800064d6:	50 26       	stdsp	sp[0x8],r6
800064d8:	50 e1       	stdsp	sp[0x38],r1
800064da:	04 9b       	mov	r11,r2
800064dc:	06 9c       	mov	r12,r3
800064de:	fe b0 fa 7f 	rcall	800059dc <quorem>
800064e2:	40 4b       	lddsp	r11,sp[0x10]
800064e4:	f8 c0 ff d0 	sub	r0,r12,-48
800064e8:	06 9c       	mov	r12,r3
800064ea:	e0 a0 07 d1 	rcall	8000748c <__mcmp>
800064ee:	08 9a       	mov	r10,r4
800064f0:	50 6c       	stdsp	sp[0x18],r12
800064f2:	04 9b       	mov	r11,r2
800064f4:	0e 9c       	mov	r12,r7
800064f6:	e0 a0 08 87 	rcall	80007604 <__mdiff>
800064fa:	18 91       	mov	r1,r12
800064fc:	78 38       	ld.w	r8,r12[0xc]
800064fe:	58 08       	cp.w	r8,0
80006500:	c0 30       	breq	80006506 <_dtoa_r+0xa0a>
80006502:	30 16       	mov	r6,1
80006504:	c0 68       	rjmp	80006510 <_dtoa_r+0xa14>
80006506:	18 9b       	mov	r11,r12
80006508:	06 9c       	mov	r12,r3
8000650a:	e0 a0 07 c1 	rcall	8000748c <__mcmp>
8000650e:	18 96       	mov	r6,r12
80006510:	0e 9c       	mov	r12,r7
80006512:	02 9b       	mov	r11,r1
80006514:	e0 a0 07 d6 	rcall	800074c0 <_Bfree>
80006518:	40 cc       	lddsp	r12,sp[0x30]
8000651a:	ed ec 10 08 	or	r8,r6,r12
8000651e:	c0 d1       	brne	80006538 <_dtoa_r+0xa3c>
80006520:	40 db       	lddsp	r11,sp[0x34]
80006522:	58 0b       	cp.w	r11,0
80006524:	c0 a1       	brne	80006538 <_dtoa_r+0xa3c>
80006526:	40 26       	lddsp	r6,sp[0x8]
80006528:	e0 40 00 39 	cp.w	r0,57
8000652c:	c3 00       	breq	8000658c <_dtoa_r+0xa90>
8000652e:	40 6a       	lddsp	r10,sp[0x18]
80006530:	58 0a       	cp.w	r10,0
80006532:	e0 89 00 24 	brgt	8000657a <_dtoa_r+0xa7e>
80006536:	c2 f8       	rjmp	80006594 <_dtoa_r+0xa98>
80006538:	40 69       	lddsp	r9,sp[0x18]
8000653a:	58 09       	cp.w	r9,0
8000653c:	c0 85       	brlt	8000654c <_dtoa_r+0xa50>
8000653e:	12 98       	mov	r8,r9
80006540:	40 cc       	lddsp	r12,sp[0x30]
80006542:	18 48       	or	r8,r12
80006544:	c1 d1       	brne	8000657e <_dtoa_r+0xa82>
80006546:	40 db       	lddsp	r11,sp[0x34]
80006548:	58 0b       	cp.w	r11,0
8000654a:	c1 a1       	brne	8000657e <_dtoa_r+0xa82>
8000654c:	0c 99       	mov	r9,r6
8000654e:	40 26       	lddsp	r6,sp[0x8]
80006550:	58 09       	cp.w	r9,0
80006552:	e0 8a 00 21 	brle	80006594 <_dtoa_r+0xa98>
80006556:	06 9b       	mov	r11,r3
80006558:	30 1a       	mov	r10,1
8000655a:	0e 9c       	mov	r12,r7
8000655c:	e0 a0 08 bc 	rcall	800076d4 <__lshift>
80006560:	04 9b       	mov	r11,r2
80006562:	18 93       	mov	r3,r12
80006564:	e0 a0 07 94 	rcall	8000748c <__mcmp>
80006568:	e0 89 00 06 	brgt	80006574 <_dtoa_r+0xa78>
8000656c:	c1 41       	brne	80006594 <_dtoa_r+0xa98>
8000656e:	ed b0 00 00 	bld	r0,0x0
80006572:	c1 11       	brne	80006594 <_dtoa_r+0xa98>
80006574:	e0 40 00 39 	cp.w	r0,57
80006578:	c0 a0       	breq	8000658c <_dtoa_r+0xa90>
8000657a:	2f f0       	sub	r0,-1
8000657c:	c0 c8       	rjmp	80006594 <_dtoa_r+0xa98>
8000657e:	58 06       	cp.w	r6,0
80006580:	e0 8a 00 0c 	brle	80006598 <_dtoa_r+0xa9c>
80006584:	40 26       	lddsp	r6,sp[0x8]
80006586:	e0 40 00 39 	cp.w	r0,57
8000658a:	c0 41       	brne	80006592 <_dtoa_r+0xa96>
8000658c:	33 98       	mov	r8,57
8000658e:	0a c8       	st.b	r5++,r8
80006590:	c6 78       	rjmp	8000665e <_dtoa_r+0xb62>
80006592:	2f f0       	sub	r0,-1
80006594:	0a c0       	st.b	r5++,r0
80006596:	c7 58       	rjmp	80006680 <_dtoa_r+0xb84>
80006598:	0a c0       	st.b	r5++,r0
8000659a:	40 9a       	lddsp	r10,sp[0x24]
8000659c:	40 e9       	lddsp	r9,sp[0x38]
8000659e:	12 3a       	cp.w	r10,r9
800065a0:	c4 30       	breq	80006626 <_dtoa_r+0xb2a>
800065a2:	06 9b       	mov	r11,r3
800065a4:	30 09       	mov	r9,0
800065a6:	30 aa       	mov	r10,10
800065a8:	0e 9c       	mov	r12,r7
800065aa:	e0 a0 09 61 	rcall	8000786c <__multadd>
800065ae:	40 48       	lddsp	r8,sp[0x10]
800065b0:	18 93       	mov	r3,r12
800065b2:	08 38       	cp.w	r8,r4
800065b4:	c0 91       	brne	800065c6 <_dtoa_r+0xaca>
800065b6:	10 9b       	mov	r11,r8
800065b8:	30 09       	mov	r9,0
800065ba:	30 aa       	mov	r10,10
800065bc:	0e 9c       	mov	r12,r7
800065be:	e0 a0 09 57 	rcall	8000786c <__multadd>
800065c2:	50 4c       	stdsp	sp[0x10],r12
800065c4:	c0 e8       	rjmp	800065e0 <_dtoa_r+0xae4>
800065c6:	40 4b       	lddsp	r11,sp[0x10]
800065c8:	30 09       	mov	r9,0
800065ca:	30 aa       	mov	r10,10
800065cc:	0e 9c       	mov	r12,r7
800065ce:	e0 a0 09 4f 	rcall	8000786c <__multadd>
800065d2:	08 9b       	mov	r11,r4
800065d4:	50 4c       	stdsp	sp[0x10],r12
800065d6:	30 09       	mov	r9,0
800065d8:	30 aa       	mov	r10,10
800065da:	0e 9c       	mov	r12,r7
800065dc:	e0 a0 09 48 	rcall	8000786c <__multadd>
800065e0:	18 94       	mov	r4,r12
800065e2:	40 9c       	lddsp	r12,sp[0x24]
800065e4:	2f fc       	sub	r12,-1
800065e6:	50 9c       	stdsp	sp[0x24],r12
800065e8:	c7 9b       	rjmp	800064da <_dtoa_r+0x9de>
800065ea:	30 18       	mov	r8,1
800065ec:	06 90       	mov	r0,r3
800065ee:	40 85       	lddsp	r5,sp[0x20]
800065f0:	08 93       	mov	r3,r4
800065f2:	0c 94       	mov	r4,r6
800065f4:	10 96       	mov	r6,r8
800065f6:	04 9b       	mov	r11,r2
800065f8:	00 9c       	mov	r12,r0
800065fa:	fe b0 f9 f1 	rcall	800059dc <quorem>
800065fe:	2d 0c       	sub	r12,-48
80006600:	0a cc       	st.b	r5++,r12
80006602:	02 36       	cp.w	r6,r1
80006604:	c0 a4       	brge	80006618 <_dtoa_r+0xb1c>
80006606:	00 9b       	mov	r11,r0
80006608:	30 09       	mov	r9,0
8000660a:	30 aa       	mov	r10,10
8000660c:	0e 9c       	mov	r12,r7
8000660e:	2f f6       	sub	r6,-1
80006610:	e0 a0 09 2e 	rcall	8000786c <__multadd>
80006614:	18 90       	mov	r0,r12
80006616:	cf 0b       	rjmp	800065f6 <_dtoa_r+0xafa>
80006618:	08 96       	mov	r6,r4
8000661a:	30 0b       	mov	r11,0
8000661c:	06 94       	mov	r4,r3
8000661e:	50 4b       	stdsp	sp[0x10],r11
80006620:	00 93       	mov	r3,r0
80006622:	18 90       	mov	r0,r12
80006624:	c0 28       	rjmp	80006628 <_dtoa_r+0xb2c>
80006626:	40 26       	lddsp	r6,sp[0x8]
80006628:	06 9b       	mov	r11,r3
8000662a:	30 1a       	mov	r10,1
8000662c:	0e 9c       	mov	r12,r7
8000662e:	e0 a0 08 53 	rcall	800076d4 <__lshift>
80006632:	04 9b       	mov	r11,r2
80006634:	18 93       	mov	r3,r12
80006636:	e0 a0 07 2b 	rcall	8000748c <__mcmp>
8000663a:	e0 89 00 12 	brgt	8000665e <_dtoa_r+0xb62>
8000663e:	c1 b1       	brne	80006674 <_dtoa_r+0xb78>
80006640:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
80006644:	c0 d1       	brne	8000665e <_dtoa_r+0xb62>
80006646:	c1 78       	rjmp	80006674 <_dtoa_r+0xb78>
80006648:	40 89       	lddsp	r9,sp[0x20]
8000664a:	12 38       	cp.w	r8,r9
8000664c:	c0 30       	breq	80006652 <_dtoa_r+0xb56>
8000664e:	10 95       	mov	r5,r8
80006650:	c0 88       	rjmp	80006660 <_dtoa_r+0xb64>
80006652:	2f f6       	sub	r6,-1
80006654:	50 66       	stdsp	sp[0x18],r6
80006656:	33 18       	mov	r8,49
80006658:	40 8c       	lddsp	r12,sp[0x20]
8000665a:	b8 88       	st.b	r12[0x0],r8
8000665c:	c1 38       	rjmp	80006682 <_dtoa_r+0xb86>
8000665e:	33 9a       	mov	r10,57
80006660:	0a 98       	mov	r8,r5
80006662:	11 79       	ld.ub	r9,--r8
80006664:	f4 09 18 00 	cp.b	r9,r10
80006668:	cf 00       	breq	80006648 <_dtoa_r+0xb4c>
8000666a:	2f f9       	sub	r9,-1
8000666c:	b0 89       	st.b	r8[0x0],r9
8000666e:	c0 98       	rjmp	80006680 <_dtoa_r+0xb84>
80006670:	10 95       	mov	r5,r8
80006672:	c0 28       	rjmp	80006676 <_dtoa_r+0xb7a>
80006674:	33 09       	mov	r9,48
80006676:	0a 98       	mov	r8,r5
80006678:	11 7a       	ld.ub	r10,--r8
8000667a:	f2 0a 18 00 	cp.b	r10,r9
8000667e:	cf 90       	breq	80006670 <_dtoa_r+0xb74>
80006680:	50 66       	stdsp	sp[0x18],r6
80006682:	04 9b       	mov	r11,r2
80006684:	0e 9c       	mov	r12,r7
80006686:	e0 a0 07 1d 	rcall	800074c0 <_Bfree>
8000668a:	58 04       	cp.w	r4,0
8000668c:	c1 20       	breq	800066b0 <_dtoa_r+0xbb4>
8000668e:	40 4b       	lddsp	r11,sp[0x10]
80006690:	08 3b       	cp.w	r11,r4
80006692:	5f 19       	srne	r9
80006694:	58 0b       	cp.w	r11,0
80006696:	5f 18       	srne	r8
80006698:	f3 e8 00 08 	and	r8,r9,r8
8000669c:	c0 40       	breq	800066a4 <_dtoa_r+0xba8>
8000669e:	0e 9c       	mov	r12,r7
800066a0:	e0 a0 07 10 	rcall	800074c0 <_Bfree>
800066a4:	08 9b       	mov	r11,r4
800066a6:	0e 9c       	mov	r12,r7
800066a8:	e0 a0 07 0c 	rcall	800074c0 <_Bfree>
800066ac:	c0 28       	rjmp	800066b0 <_dtoa_r+0xbb4>
800066ae:	50 66       	stdsp	sp[0x18],r6
800066b0:	0e 9c       	mov	r12,r7
800066b2:	06 9b       	mov	r11,r3
800066b4:	e0 a0 07 06 	rcall	800074c0 <_Bfree>
800066b8:	30 08       	mov	r8,0
800066ba:	aa 88       	st.b	r5[0x0],r8
800066bc:	40 68       	lddsp	r8,sp[0x18]
800066be:	41 5a       	lddsp	r10,sp[0x54]
800066c0:	2f f8       	sub	r8,-1
800066c2:	41 29       	lddsp	r9,sp[0x48]
800066c4:	95 08       	st.w	r10[0x0],r8
800066c6:	40 8c       	lddsp	r12,sp[0x20]
800066c8:	58 09       	cp.w	r9,0
800066ca:	fb f8 10 12 	ld.wne	r8,sp[0x48]
800066ce:	f1 f5 1a 00 	st.wne	r8[0x0],r5
800066d2:	2e 6d       	sub	sp,-104
800066d4:	d8 32       	popm	r0-r7,pc
800066d6:	d7 03       	nop

800066d8 <_fflush_r>:
800066d8:	d4 21       	pushm	r4-r7,lr
800066da:	16 97       	mov	r7,r11
800066dc:	18 96       	mov	r6,r12
800066de:	76 48       	ld.w	r8,r11[0x10]
800066e0:	58 08       	cp.w	r8,0
800066e2:	c7 f0       	breq	800067e0 <_fflush_r+0x108>
800066e4:	58 0c       	cp.w	r12,0
800066e6:	c0 50       	breq	800066f0 <_fflush_r+0x18>
800066e8:	78 68       	ld.w	r8,r12[0x18]
800066ea:	58 08       	cp.w	r8,0
800066ec:	c0 21       	brne	800066f0 <_fflush_r+0x18>
800066ee:	cc dc       	rcall	80006888 <__sinit>
800066f0:	fe c8 cf 48 	sub	r8,pc,-12472
800066f4:	10 37       	cp.w	r7,r8
800066f6:	c0 31       	brne	800066fc <_fflush_r+0x24>
800066f8:	6c 07       	ld.w	r7,r6[0x0]
800066fa:	c0 c8       	rjmp	80006712 <_fflush_r+0x3a>
800066fc:	fe c8 cf 34 	sub	r8,pc,-12492
80006700:	10 37       	cp.w	r7,r8
80006702:	c0 31       	brne	80006708 <_fflush_r+0x30>
80006704:	6c 17       	ld.w	r7,r6[0x4]
80006706:	c0 68       	rjmp	80006712 <_fflush_r+0x3a>
80006708:	fe c8 cf 20 	sub	r8,pc,-12512
8000670c:	10 37       	cp.w	r7,r8
8000670e:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80006712:	8e 6a       	ld.sh	r10,r7[0xc]
80006714:	14 98       	mov	r8,r10
80006716:	ed ba 00 03 	bld	r10,0x3
8000671a:	c4 20       	breq	8000679e <_fflush_r+0xc6>
8000671c:	ab ba       	sbr	r10,0xb
8000671e:	ae 6a       	st.h	r7[0xc],r10
80006720:	6e 18       	ld.w	r8,r7[0x4]
80006722:	58 08       	cp.w	r8,0
80006724:	e0 89 00 06 	brgt	80006730 <_fflush_r+0x58>
80006728:	6f 08       	ld.w	r8,r7[0x40]
8000672a:	58 08       	cp.w	r8,0
8000672c:	e0 8a 00 5a 	brle	800067e0 <_fflush_r+0x108>
80006730:	6e b8       	ld.w	r8,r7[0x2c]
80006732:	58 08       	cp.w	r8,0
80006734:	c5 60       	breq	800067e0 <_fflush_r+0x108>
80006736:	e2 1a 10 00 	andl	r10,0x1000,COH
8000673a:	c0 30       	breq	80006740 <_fflush_r+0x68>
8000673c:	6f 55       	ld.w	r5,r7[0x54]
8000673e:	c0 f8       	rjmp	8000675c <_fflush_r+0x84>
80006740:	30 19       	mov	r9,1
80006742:	6e 8b       	ld.w	r11,r7[0x20]
80006744:	0c 9c       	mov	r12,r6
80006746:	5d 18       	icall	r8
80006748:	18 95       	mov	r5,r12
8000674a:	5b fc       	cp.w	r12,-1
8000674c:	c0 81       	brne	8000675c <_fflush_r+0x84>
8000674e:	6c 38       	ld.w	r8,r6[0xc]
80006750:	59 d8       	cp.w	r8,29
80006752:	c4 70       	breq	800067e0 <_fflush_r+0x108>
80006754:	8e 68       	ld.sh	r8,r7[0xc]
80006756:	a7 a8       	sbr	r8,0x6
80006758:	ae 68       	st.h	r7[0xc],r8
8000675a:	d8 22       	popm	r4-r7,pc
8000675c:	8e 68       	ld.sh	r8,r7[0xc]
8000675e:	ed b8 00 02 	bld	r8,0x2
80006762:	c0 91       	brne	80006774 <_fflush_r+0x9c>
80006764:	6e 18       	ld.w	r8,r7[0x4]
80006766:	10 15       	sub	r5,r8
80006768:	6e d8       	ld.w	r8,r7[0x34]
8000676a:	58 08       	cp.w	r8,0
8000676c:	ef f8 10 10 	ld.wne	r8,r7[0x40]
80006770:	eb d8 e1 15 	subne	r5,r5,r8
80006774:	6e b8       	ld.w	r8,r7[0x2c]
80006776:	0c 9c       	mov	r12,r6
80006778:	30 09       	mov	r9,0
8000677a:	0a 9a       	mov	r10,r5
8000677c:	6e 8b       	ld.w	r11,r7[0x20]
8000677e:	5d 18       	icall	r8
80006780:	8e 68       	ld.sh	r8,r7[0xc]
80006782:	0a 3c       	cp.w	r12,r5
80006784:	c2 61       	brne	800067d0 <_fflush_r+0xf8>
80006786:	ab d8       	cbr	r8,0xb
80006788:	30 0c       	mov	r12,0
8000678a:	6e 49       	ld.w	r9,r7[0x10]
8000678c:	ae 68       	st.h	r7[0xc],r8
8000678e:	8f 1c       	st.w	r7[0x4],r12
80006790:	8f 09       	st.w	r7[0x0],r9
80006792:	ed b8 00 0c 	bld	r8,0xc
80006796:	c2 51       	brne	800067e0 <_fflush_r+0x108>
80006798:	ef 45 00 54 	st.w	r7[84],r5
8000679c:	d8 22       	popm	r4-r7,pc
8000679e:	6e 45       	ld.w	r5,r7[0x10]
800067a0:	58 05       	cp.w	r5,0
800067a2:	c1 f0       	breq	800067e0 <_fflush_r+0x108>
800067a4:	6e 04       	ld.w	r4,r7[0x0]
800067a6:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
800067aa:	8f 05       	st.w	r7[0x0],r5
800067ac:	f9 b8 01 00 	movne	r8,0
800067b0:	ef f8 00 05 	ld.weq	r8,r7[0x14]
800067b4:	0a 14       	sub	r4,r5
800067b6:	8f 28       	st.w	r7[0x8],r8
800067b8:	c1 18       	rjmp	800067da <_fflush_r+0x102>
800067ba:	08 99       	mov	r9,r4
800067bc:	0a 9a       	mov	r10,r5
800067be:	6e a8       	ld.w	r8,r7[0x28]
800067c0:	6e 8b       	ld.w	r11,r7[0x20]
800067c2:	0c 9c       	mov	r12,r6
800067c4:	5d 18       	icall	r8
800067c6:	18 14       	sub	r4,r12
800067c8:	58 0c       	cp.w	r12,0
800067ca:	e0 89 00 07 	brgt	800067d8 <_fflush_r+0x100>
800067ce:	8e 68       	ld.sh	r8,r7[0xc]
800067d0:	a7 a8       	sbr	r8,0x6
800067d2:	3f fc       	mov	r12,-1
800067d4:	ae 68       	st.h	r7[0xc],r8
800067d6:	d8 22       	popm	r4-r7,pc
800067d8:	18 05       	add	r5,r12
800067da:	58 04       	cp.w	r4,0
800067dc:	fe 99 ff ef 	brgt	800067ba <_fflush_r+0xe2>
800067e0:	d8 2a       	popm	r4-r7,pc,r12=0
800067e2:	d7 03       	nop

800067e4 <__sfp_lock_acquire>:
800067e4:	5e fc       	retal	r12

800067e6 <__sfp_lock_release>:
800067e6:	5e fc       	retal	r12

800067e8 <_cleanup_r>:
800067e8:	d4 01       	pushm	lr
800067ea:	fe cb e8 6a 	sub	r11,pc,-6038
800067ee:	e0 a0 02 fd 	rcall	80006de8 <_fwalk>
800067f2:	d8 02       	popm	pc

800067f4 <__sfmoreglue>:
800067f4:	d4 21       	pushm	r4-r7,lr
800067f6:	16 95       	mov	r5,r11
800067f8:	f6 06 10 5c 	mul	r6,r11,92
800067fc:	ec cb ff f4 	sub	r11,r6,-12
80006800:	e0 a0 03 84 	rcall	80006f08 <_malloc_r>
80006804:	18 97       	mov	r7,r12
80006806:	c0 90       	breq	80006818 <__sfmoreglue+0x24>
80006808:	99 15       	st.w	r12[0x4],r5
8000680a:	30 0b       	mov	r11,0
8000680c:	2f 4c       	sub	r12,-12
8000680e:	0c 9a       	mov	r10,r6
80006810:	8f 2c       	st.w	r7[0x8],r12
80006812:	8f 0b       	st.w	r7[0x0],r11
80006814:	e0 a0 05 bc 	rcall	8000738c <memset>
80006818:	0e 9c       	mov	r12,r7
8000681a:	d8 22       	popm	r4-r7,pc

8000681c <__sfp>:
8000681c:	d4 21       	pushm	r4-r7,lr
8000681e:	fe c8 d4 5e 	sub	r8,pc,-11170
80006822:	18 96       	mov	r6,r12
80006824:	70 07       	ld.w	r7,r8[0x0]
80006826:	6e 68       	ld.w	r8,r7[0x18]
80006828:	58 08       	cp.w	r8,0
8000682a:	c0 31       	brne	80006830 <__sfp+0x14>
8000682c:	0e 9c       	mov	r12,r7
8000682e:	c2 dc       	rcall	80006888 <__sinit>
80006830:	ee c7 ff 28 	sub	r7,r7,-216
80006834:	30 05       	mov	r5,0
80006836:	6e 2c       	ld.w	r12,r7[0x8]
80006838:	6e 18       	ld.w	r8,r7[0x4]
8000683a:	c0 68       	rjmp	80006846 <__sfp+0x2a>
8000683c:	98 69       	ld.sh	r9,r12[0xc]
8000683e:	ea 09 19 00 	cp.h	r9,r5
80006842:	c1 10       	breq	80006864 <__sfp+0x48>
80006844:	2a 4c       	sub	r12,-92
80006846:	20 18       	sub	r8,1
80006848:	cf a7       	brpl	8000683c <__sfp+0x20>
8000684a:	6e 08       	ld.w	r8,r7[0x0]
8000684c:	58 08       	cp.w	r8,0
8000684e:	c0 61       	brne	8000685a <__sfp+0x3e>
80006850:	30 4b       	mov	r11,4
80006852:	0c 9c       	mov	r12,r6
80006854:	cd 0f       	rcall	800067f4 <__sfmoreglue>
80006856:	8f 0c       	st.w	r7[0x0],r12
80006858:	c0 30       	breq	8000685e <__sfp+0x42>
8000685a:	6e 07       	ld.w	r7,r7[0x0]
8000685c:	ce db       	rjmp	80006836 <__sfp+0x1a>
8000685e:	30 c8       	mov	r8,12
80006860:	8d 38       	st.w	r6[0xc],r8
80006862:	d8 22       	popm	r4-r7,pc
80006864:	30 08       	mov	r8,0
80006866:	f9 48 00 4c 	st.w	r12[76],r8
8000686a:	99 08       	st.w	r12[0x0],r8
8000686c:	99 28       	st.w	r12[0x8],r8
8000686e:	99 18       	st.w	r12[0x4],r8
80006870:	99 48       	st.w	r12[0x10],r8
80006872:	99 58       	st.w	r12[0x14],r8
80006874:	99 68       	st.w	r12[0x18],r8
80006876:	99 d8       	st.w	r12[0x34],r8
80006878:	99 e8       	st.w	r12[0x38],r8
8000687a:	f9 48 00 48 	st.w	r12[72],r8
8000687e:	3f f8       	mov	r8,-1
80006880:	b8 78       	st.h	r12[0xe],r8
80006882:	30 18       	mov	r8,1
80006884:	b8 68       	st.h	r12[0xc],r8
80006886:	d8 22       	popm	r4-r7,pc

80006888 <__sinit>:
80006888:	d4 21       	pushm	r4-r7,lr
8000688a:	18 96       	mov	r6,r12
8000688c:	78 67       	ld.w	r7,r12[0x18]
8000688e:	58 07       	cp.w	r7,0
80006890:	c4 91       	brne	80006922 <__sinit+0x9a>
80006892:	fe c8 00 aa 	sub	r8,pc,170
80006896:	30 15       	mov	r5,1
80006898:	99 a8       	st.w	r12[0x28],r8
8000689a:	f9 47 00 d8 	st.w	r12[216],r7
8000689e:	f9 47 00 dc 	st.w	r12[220],r7
800068a2:	f9 47 00 e0 	st.w	r12[224],r7
800068a6:	99 65       	st.w	r12[0x18],r5
800068a8:	cb af       	rcall	8000681c <__sfp>
800068aa:	8d 0c       	st.w	r6[0x0],r12
800068ac:	0c 9c       	mov	r12,r6
800068ae:	cb 7f       	rcall	8000681c <__sfp>
800068b0:	8d 1c       	st.w	r6[0x4],r12
800068b2:	0c 9c       	mov	r12,r6
800068b4:	cb 4f       	rcall	8000681c <__sfp>
800068b6:	6c 09       	ld.w	r9,r6[0x0]
800068b8:	30 48       	mov	r8,4
800068ba:	93 07       	st.w	r9[0x0],r7
800068bc:	b2 68       	st.h	r9[0xc],r8
800068be:	93 17       	st.w	r9[0x4],r7
800068c0:	93 27       	st.w	r9[0x8],r7
800068c2:	6c 18       	ld.w	r8,r6[0x4]
800068c4:	b2 77       	st.h	r9[0xe],r7
800068c6:	93 47       	st.w	r9[0x10],r7
800068c8:	93 57       	st.w	r9[0x14],r7
800068ca:	93 67       	st.w	r9[0x18],r7
800068cc:	93 89       	st.w	r9[0x20],r9
800068ce:	91 07       	st.w	r8[0x0],r7
800068d0:	91 17       	st.w	r8[0x4],r7
800068d2:	91 27       	st.w	r8[0x8],r7
800068d4:	fe ce eb e4 	sub	lr,pc,-5148
800068d8:	fe cb ec 14 	sub	r11,pc,-5100
800068dc:	93 9e       	st.w	r9[0x24],lr
800068de:	93 ab       	st.w	r9[0x28],r11
800068e0:	fe ca ec 3c 	sub	r10,pc,-5060
800068e4:	fe c4 ec 48 	sub	r4,pc,-5048
800068e8:	93 ba       	st.w	r9[0x2c],r10
800068ea:	93 c4       	st.w	r9[0x30],r4
800068ec:	30 99       	mov	r9,9
800068ee:	b0 69       	st.h	r8[0xc],r9
800068f0:	b0 75       	st.h	r8[0xe],r5
800068f2:	91 c4       	st.w	r8[0x30],r4
800068f4:	91 47       	st.w	r8[0x10],r7
800068f6:	91 57       	st.w	r8[0x14],r7
800068f8:	91 67       	st.w	r8[0x18],r7
800068fa:	91 88       	st.w	r8[0x20],r8
800068fc:	91 9e       	st.w	r8[0x24],lr
800068fe:	91 ab       	st.w	r8[0x28],r11
80006900:	91 ba       	st.w	r8[0x2c],r10
80006902:	8d 2c       	st.w	r6[0x8],r12
80006904:	31 28       	mov	r8,18
80006906:	99 07       	st.w	r12[0x0],r7
80006908:	b8 68       	st.h	r12[0xc],r8
8000690a:	99 17       	st.w	r12[0x4],r7
8000690c:	99 27       	st.w	r12[0x8],r7
8000690e:	30 28       	mov	r8,2
80006910:	b8 78       	st.h	r12[0xe],r8
80006912:	99 c4       	st.w	r12[0x30],r4
80006914:	99 67       	st.w	r12[0x18],r7
80006916:	99 9e       	st.w	r12[0x24],lr
80006918:	99 ab       	st.w	r12[0x28],r11
8000691a:	99 ba       	st.w	r12[0x2c],r10
8000691c:	99 47       	st.w	r12[0x10],r7
8000691e:	99 57       	st.w	r12[0x14],r7
80006920:	99 8c       	st.w	r12[0x20],r12
80006922:	d8 22       	popm	r4-r7,pc

80006924 <_malloc_trim_r>:
80006924:	d4 21       	pushm	r4-r7,lr
80006926:	16 95       	mov	r5,r11
80006928:	18 97       	mov	r7,r12
8000692a:	e0 a0 05 38 	rcall	8000739a <__malloc_lock>
8000692e:	e0 64 01 04 	mov	r4,260
80006932:	68 28       	ld.w	r8,r4[0x8]
80006934:	70 16       	ld.w	r6,r8[0x4]
80006936:	e0 16 ff fc 	andl	r6,0xfffc
8000693a:	ec c8 ff 91 	sub	r8,r6,-111
8000693e:	f0 05 01 05 	sub	r5,r8,r5
80006942:	e0 15 ff 80 	andl	r5,0xff80
80006946:	ea c5 00 80 	sub	r5,r5,128
8000694a:	e0 45 00 7f 	cp.w	r5,127
8000694e:	e0 8a 00 25 	brle	80006998 <_malloc_trim_r+0x74>
80006952:	30 0b       	mov	r11,0
80006954:	0e 9c       	mov	r12,r7
80006956:	e0 a0 09 93 	rcall	80007c7c <_sbrk_r>
8000695a:	68 28       	ld.w	r8,r4[0x8]
8000695c:	0c 08       	add	r8,r6
8000695e:	10 3c       	cp.w	r12,r8
80006960:	c1 c1       	brne	80006998 <_malloc_trim_r+0x74>
80006962:	ea 0b 11 00 	rsub	r11,r5,0
80006966:	0e 9c       	mov	r12,r7
80006968:	e0 a0 09 8a 	rcall	80007c7c <_sbrk_r>
8000696c:	5b fc       	cp.w	r12,-1
8000696e:	c1 91       	brne	800069a0 <_malloc_trim_r+0x7c>
80006970:	30 0b       	mov	r11,0
80006972:	0e 9c       	mov	r12,r7
80006974:	e0 a0 09 84 	rcall	80007c7c <_sbrk_r>
80006978:	68 28       	ld.w	r8,r4[0x8]
8000697a:	f8 08 01 09 	sub	r9,r12,r8
8000697e:	58 f9       	cp.w	r9,15
80006980:	e0 8a 00 0c 	brle	80006998 <_malloc_trim_r+0x74>
80006984:	a1 a9       	sbr	r9,0x0
80006986:	91 19       	st.w	r8[0x4],r9
80006988:	e0 68 05 10 	mov	r8,1296
8000698c:	70 09       	ld.w	r9,r8[0x0]
8000698e:	e0 68 06 34 	mov	r8,1588
80006992:	f8 09 01 09 	sub	r9,r12,r9
80006996:	91 09       	st.w	r8[0x0],r9
80006998:	0e 9c       	mov	r12,r7
8000699a:	e0 a0 05 01 	rcall	8000739c <__malloc_unlock>
8000699e:	d8 2a       	popm	r4-r7,pc,r12=0
800069a0:	68 28       	ld.w	r8,r4[0x8]
800069a2:	0a 16       	sub	r6,r5
800069a4:	a1 a6       	sbr	r6,0x0
800069a6:	91 16       	st.w	r8[0x4],r6
800069a8:	e0 68 06 34 	mov	r8,1588
800069ac:	70 09       	ld.w	r9,r8[0x0]
800069ae:	0a 19       	sub	r9,r5
800069b0:	0e 9c       	mov	r12,r7
800069b2:	91 09       	st.w	r8[0x0],r9
800069b4:	e0 a0 04 f4 	rcall	8000739c <__malloc_unlock>
800069b8:	da 2a       	popm	r4-r7,pc,r12=1
800069ba:	d7 03       	nop

800069bc <_free_r>:
800069bc:	d4 21       	pushm	r4-r7,lr
800069be:	16 96       	mov	r6,r11
800069c0:	18 97       	mov	r7,r12
800069c2:	58 0b       	cp.w	r11,0
800069c4:	e0 80 00 c0 	breq	80006b44 <_free_r+0x188>
800069c8:	e0 a0 04 e9 	rcall	8000739a <__malloc_lock>
800069cc:	20 86       	sub	r6,8
800069ce:	e0 6a 01 04 	mov	r10,260
800069d2:	6c 18       	ld.w	r8,r6[0x4]
800069d4:	74 2e       	ld.w	lr,r10[0x8]
800069d6:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
800069da:	a1 c8       	cbr	r8,0x0
800069dc:	ec 08 00 09 	add	r9,r6,r8
800069e0:	72 1b       	ld.w	r11,r9[0x4]
800069e2:	e0 1b ff fc 	andl	r11,0xfffc
800069e6:	1c 39       	cp.w	r9,lr
800069e8:	c1 e1       	brne	80006a24 <_free_r+0x68>
800069ea:	f6 08 00 08 	add	r8,r11,r8
800069ee:	58 0c       	cp.w	r12,0
800069f0:	c0 81       	brne	80006a00 <_free_r+0x44>
800069f2:	6c 09       	ld.w	r9,r6[0x0]
800069f4:	12 16       	sub	r6,r9
800069f6:	12 08       	add	r8,r9
800069f8:	6c 3b       	ld.w	r11,r6[0xc]
800069fa:	6c 29       	ld.w	r9,r6[0x8]
800069fc:	97 29       	st.w	r11[0x8],r9
800069fe:	93 3b       	st.w	r9[0xc],r11
80006a00:	10 99       	mov	r9,r8
80006a02:	95 26       	st.w	r10[0x8],r6
80006a04:	a1 a9       	sbr	r9,0x0
80006a06:	8d 19       	st.w	r6[0x4],r9
80006a08:	e0 69 05 0c 	mov	r9,1292
80006a0c:	72 09       	ld.w	r9,r9[0x0]
80006a0e:	12 38       	cp.w	r8,r9
80006a10:	c0 63       	brcs	80006a1c <_free_r+0x60>
80006a12:	e0 68 06 30 	mov	r8,1584
80006a16:	0e 9c       	mov	r12,r7
80006a18:	70 0b       	ld.w	r11,r8[0x0]
80006a1a:	c8 5f       	rcall	80006924 <_malloc_trim_r>
80006a1c:	0e 9c       	mov	r12,r7
80006a1e:	e0 a0 04 bf 	rcall	8000739c <__malloc_unlock>
80006a22:	d8 22       	popm	r4-r7,pc
80006a24:	93 1b       	st.w	r9[0x4],r11
80006a26:	58 0c       	cp.w	r12,0
80006a28:	c0 30       	breq	80006a2e <_free_r+0x72>
80006a2a:	30 0c       	mov	r12,0
80006a2c:	c1 08       	rjmp	80006a4c <_free_r+0x90>
80006a2e:	6c 0e       	ld.w	lr,r6[0x0]
80006a30:	f4 c5 ff f8 	sub	r5,r10,-8
80006a34:	1c 16       	sub	r6,lr
80006a36:	1c 08       	add	r8,lr
80006a38:	6c 2e       	ld.w	lr,r6[0x8]
80006a3a:	0a 3e       	cp.w	lr,r5
80006a3c:	f9 bc 00 01 	moveq	r12,1
80006a40:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80006a44:	eb fe 1a 02 	st.wne	r5[0x8],lr
80006a48:	fd f5 1a 03 	st.wne	lr[0xc],r5
80006a4c:	f2 0b 00 0e 	add	lr,r9,r11
80006a50:	7c 1e       	ld.w	lr,lr[0x4]
80006a52:	ed be 00 00 	bld	lr,0x0
80006a56:	c1 40       	breq	80006a7e <_free_r+0xc2>
80006a58:	16 08       	add	r8,r11
80006a5a:	58 0c       	cp.w	r12,0
80006a5c:	c0 d1       	brne	80006a76 <_free_r+0xba>
80006a5e:	e0 6e 01 04 	mov	lr,260
80006a62:	72 2b       	ld.w	r11,r9[0x8]
80006a64:	2f 8e       	sub	lr,-8
80006a66:	1c 3b       	cp.w	r11,lr
80006a68:	c0 71       	brne	80006a76 <_free_r+0xba>
80006a6a:	97 36       	st.w	r11[0xc],r6
80006a6c:	97 26       	st.w	r11[0x8],r6
80006a6e:	8d 2b       	st.w	r6[0x8],r11
80006a70:	8d 3b       	st.w	r6[0xc],r11
80006a72:	30 1c       	mov	r12,1
80006a74:	c0 58       	rjmp	80006a7e <_free_r+0xc2>
80006a76:	72 2b       	ld.w	r11,r9[0x8]
80006a78:	72 39       	ld.w	r9,r9[0xc]
80006a7a:	93 2b       	st.w	r9[0x8],r11
80006a7c:	97 39       	st.w	r11[0xc],r9
80006a7e:	10 99       	mov	r9,r8
80006a80:	ec 08 09 08 	st.w	r6[r8],r8
80006a84:	a1 a9       	sbr	r9,0x0
80006a86:	8d 19       	st.w	r6[0x4],r9
80006a88:	58 0c       	cp.w	r12,0
80006a8a:	c5 a1       	brne	80006b3e <_free_r+0x182>
80006a8c:	e0 48 01 ff 	cp.w	r8,511
80006a90:	e0 8b 00 13 	brhi	80006ab6 <_free_r+0xfa>
80006a94:	a3 98       	lsr	r8,0x3
80006a96:	f4 08 00 39 	add	r9,r10,r8<<0x3
80006a9a:	72 2b       	ld.w	r11,r9[0x8]
80006a9c:	8d 39       	st.w	r6[0xc],r9
80006a9e:	8d 2b       	st.w	r6[0x8],r11
80006aa0:	97 36       	st.w	r11[0xc],r6
80006aa2:	93 26       	st.w	r9[0x8],r6
80006aa4:	a3 48       	asr	r8,0x2
80006aa6:	74 19       	ld.w	r9,r10[0x4]
80006aa8:	30 1b       	mov	r11,1
80006aaa:	f6 08 09 48 	lsl	r8,r11,r8
80006aae:	f3 e8 10 08 	or	r8,r9,r8
80006ab2:	95 18       	st.w	r10[0x4],r8
80006ab4:	c4 58       	rjmp	80006b3e <_free_r+0x182>
80006ab6:	f0 0b 16 09 	lsr	r11,r8,0x9
80006aba:	58 4b       	cp.w	r11,4
80006abc:	e0 8b 00 06 	brhi	80006ac8 <_free_r+0x10c>
80006ac0:	f0 0b 16 06 	lsr	r11,r8,0x6
80006ac4:	2c 8b       	sub	r11,-56
80006ac6:	c2 08       	rjmp	80006b06 <_free_r+0x14a>
80006ac8:	59 4b       	cp.w	r11,20
80006aca:	e0 8b 00 04 	brhi	80006ad2 <_free_r+0x116>
80006ace:	2a 5b       	sub	r11,-91
80006ad0:	c1 b8       	rjmp	80006b06 <_free_r+0x14a>
80006ad2:	e0 4b 00 54 	cp.w	r11,84
80006ad6:	e0 8b 00 06 	brhi	80006ae2 <_free_r+0x126>
80006ada:	f0 0b 16 0c 	lsr	r11,r8,0xc
80006ade:	29 2b       	sub	r11,-110
80006ae0:	c1 38       	rjmp	80006b06 <_free_r+0x14a>
80006ae2:	e0 4b 01 54 	cp.w	r11,340
80006ae6:	e0 8b 00 06 	brhi	80006af2 <_free_r+0x136>
80006aea:	f0 0b 16 0f 	lsr	r11,r8,0xf
80006aee:	28 9b       	sub	r11,-119
80006af0:	c0 b8       	rjmp	80006b06 <_free_r+0x14a>
80006af2:	e0 4b 05 54 	cp.w	r11,1364
80006af6:	e0 88 00 05 	brls	80006b00 <_free_r+0x144>
80006afa:	37 eb       	mov	r11,126
80006afc:	c0 58       	rjmp	80006b06 <_free_r+0x14a>
80006afe:	d7 03       	nop
80006b00:	f0 0b 16 12 	lsr	r11,r8,0x12
80006b04:	28 4b       	sub	r11,-124
80006b06:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80006b0a:	78 29       	ld.w	r9,r12[0x8]
80006b0c:	18 39       	cp.w	r9,r12
80006b0e:	c0 e1       	brne	80006b2a <_free_r+0x16e>
80006b10:	74 18       	ld.w	r8,r10[0x4]
80006b12:	a3 4b       	asr	r11,0x2
80006b14:	30 1c       	mov	r12,1
80006b16:	f8 0b 09 4b 	lsl	r11,r12,r11
80006b1a:	f1 eb 10 0b 	or	r11,r8,r11
80006b1e:	12 98       	mov	r8,r9
80006b20:	95 1b       	st.w	r10[0x4],r11
80006b22:	c0 a8       	rjmp	80006b36 <_free_r+0x17a>
80006b24:	72 29       	ld.w	r9,r9[0x8]
80006b26:	18 39       	cp.w	r9,r12
80006b28:	c0 60       	breq	80006b34 <_free_r+0x178>
80006b2a:	72 1a       	ld.w	r10,r9[0x4]
80006b2c:	e0 1a ff fc 	andl	r10,0xfffc
80006b30:	14 38       	cp.w	r8,r10
80006b32:	cf 93       	brcs	80006b24 <_free_r+0x168>
80006b34:	72 38       	ld.w	r8,r9[0xc]
80006b36:	8d 38       	st.w	r6[0xc],r8
80006b38:	8d 29       	st.w	r6[0x8],r9
80006b3a:	93 36       	st.w	r9[0xc],r6
80006b3c:	91 26       	st.w	r8[0x8],r6
80006b3e:	0e 9c       	mov	r12,r7
80006b40:	e0 a0 04 2e 	rcall	8000739c <__malloc_unlock>
80006b44:	d8 22       	popm	r4-r7,pc
80006b46:	d7 03       	nop

80006b48 <__sfvwrite_r>:
80006b48:	d4 31       	pushm	r0-r7,lr
80006b4a:	20 3d       	sub	sp,12
80006b4c:	14 94       	mov	r4,r10
80006b4e:	18 95       	mov	r5,r12
80006b50:	16 97       	mov	r7,r11
80006b52:	74 28       	ld.w	r8,r10[0x8]
80006b54:	58 08       	cp.w	r8,0
80006b56:	e0 80 01 45 	breq	80006de0 <__sfvwrite_r+0x298>
80006b5a:	96 68       	ld.sh	r8,r11[0xc]
80006b5c:	ed b8 00 03 	bld	r8,0x3
80006b60:	c0 41       	brne	80006b68 <__sfvwrite_r+0x20>
80006b62:	76 48       	ld.w	r8,r11[0x10]
80006b64:	58 08       	cp.w	r8,0
80006b66:	c0 c1       	brne	80006b7e <__sfvwrite_r+0x36>
80006b68:	0e 9b       	mov	r11,r7
80006b6a:	0a 9c       	mov	r12,r5
80006b6c:	fe b0 f6 ca 	rcall	80005900 <__swsetup_r>
80006b70:	c0 70       	breq	80006b7e <__sfvwrite_r+0x36>
80006b72:	8e 68       	ld.sh	r8,r7[0xc]
80006b74:	a7 a8       	sbr	r8,0x6
80006b76:	ae 68       	st.h	r7[0xc],r8
80006b78:	30 98       	mov	r8,9
80006b7a:	8b 38       	st.w	r5[0xc],r8
80006b7c:	c3 09       	rjmp	80006ddc <__sfvwrite_r+0x294>
80006b7e:	8e 63       	ld.sh	r3,r7[0xc]
80006b80:	68 00       	ld.w	r0,r4[0x0]
80006b82:	06 96       	mov	r6,r3
80006b84:	e2 16 00 02 	andl	r6,0x2,COH
80006b88:	c2 10       	breq	80006bca <__sfvwrite_r+0x82>
80006b8a:	30 03       	mov	r3,0
80006b8c:	e0 62 04 00 	mov	r2,1024
80006b90:	06 96       	mov	r6,r3
80006b92:	c0 48       	rjmp	80006b9a <__sfvwrite_r+0x52>
80006b94:	60 03       	ld.w	r3,r0[0x0]
80006b96:	60 16       	ld.w	r6,r0[0x4]
80006b98:	2f 80       	sub	r0,-8
80006b9a:	58 06       	cp.w	r6,0
80006b9c:	cf c0       	breq	80006b94 <__sfvwrite_r+0x4c>
80006b9e:	e0 46 04 00 	cp.w	r6,1024
80006ba2:	ec 09 17 80 	movls	r9,r6
80006ba6:	e4 09 17 b0 	movhi	r9,r2
80006baa:	06 9a       	mov	r10,r3
80006bac:	6e a8       	ld.w	r8,r7[0x28]
80006bae:	6e 8b       	ld.w	r11,r7[0x20]
80006bb0:	0a 9c       	mov	r12,r5
80006bb2:	5d 18       	icall	r8
80006bb4:	18 16       	sub	r6,r12
80006bb6:	58 0c       	cp.w	r12,0
80006bb8:	e0 8a 01 0f 	brle	80006dd6 <__sfvwrite_r+0x28e>
80006bbc:	68 28       	ld.w	r8,r4[0x8]
80006bbe:	18 18       	sub	r8,r12
80006bc0:	89 28       	st.w	r4[0x8],r8
80006bc2:	e0 80 01 0f 	breq	80006de0 <__sfvwrite_r+0x298>
80006bc6:	18 03       	add	r3,r12
80006bc8:	ce 9b       	rjmp	80006b9a <__sfvwrite_r+0x52>
80006bca:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
80006bce:	c0 70       	breq	80006bdc <__sfvwrite_r+0x94>
80006bd0:	50 06       	stdsp	sp[0x0],r6
80006bd2:	0c 93       	mov	r3,r6
80006bd4:	0c 91       	mov	r1,r6
80006bd6:	50 15       	stdsp	sp[0x4],r5
80006bd8:	08 92       	mov	r2,r4
80006bda:	c9 e8       	rjmp	80006d16 <__sfvwrite_r+0x1ce>
80006bdc:	06 96       	mov	r6,r3
80006bde:	08 91       	mov	r1,r4
80006be0:	c0 48       	rjmp	80006be8 <__sfvwrite_r+0xa0>
80006be2:	60 03       	ld.w	r3,r0[0x0]
80006be4:	60 16       	ld.w	r6,r0[0x4]
80006be6:	2f 80       	sub	r0,-8
80006be8:	58 06       	cp.w	r6,0
80006bea:	cf c0       	breq	80006be2 <__sfvwrite_r+0x9a>
80006bec:	8e 68       	ld.sh	r8,r7[0xc]
80006bee:	6e 24       	ld.w	r4,r7[0x8]
80006bf0:	10 99       	mov	r9,r8
80006bf2:	e2 19 02 00 	andl	r9,0x200,COH
80006bf6:	c5 50       	breq	80006ca0 <__sfvwrite_r+0x158>
80006bf8:	08 36       	cp.w	r6,r4
80006bfa:	c4 33       	brcs	80006c80 <__sfvwrite_r+0x138>
80006bfc:	10 99       	mov	r9,r8
80006bfe:	e2 19 04 80 	andl	r9,0x480,COH
80006c02:	c3 f0       	breq	80006c80 <__sfvwrite_r+0x138>
80006c04:	6e 4b       	ld.w	r11,r7[0x10]
80006c06:	6e 09       	ld.w	r9,r7[0x0]
80006c08:	16 19       	sub	r9,r11
80006c0a:	50 09       	stdsp	sp[0x0],r9
80006c0c:	6e 59       	ld.w	r9,r7[0x14]
80006c0e:	10 9c       	mov	r12,r8
80006c10:	f2 09 00 1a 	add	r10,r9,r9<<0x1
80006c14:	30 28       	mov	r8,2
80006c16:	f4 08 0c 08 	divs	r8,r10,r8
80006c1a:	fa e9 00 04 	st.d	sp[4],r8
80006c1e:	10 94       	mov	r4,r8
80006c20:	40 09       	lddsp	r9,sp[0x0]
80006c22:	e2 1c 04 00 	andl	r12,0x400,COH
80006c26:	2f f9       	sub	r9,-1
80006c28:	0c 09       	add	r9,r6
80006c2a:	12 38       	cp.w	r8,r9
80006c2c:	f2 04 17 30 	movlo	r4,r9
80006c30:	58 0c       	cp.w	r12,0
80006c32:	c1 00       	breq	80006c52 <__sfvwrite_r+0x10a>
80006c34:	08 9b       	mov	r11,r4
80006c36:	0a 9c       	mov	r12,r5
80006c38:	c6 8d       	rcall	80006f08 <_malloc_r>
80006c3a:	18 92       	mov	r2,r12
80006c3c:	c1 40       	breq	80006c64 <__sfvwrite_r+0x11c>
80006c3e:	40 0a       	lddsp	r10,sp[0x0]
80006c40:	6e 4b       	ld.w	r11,r7[0x10]
80006c42:	fe b0 e4 79 	rcall	80003534 <memcpy>
80006c46:	8e 68       	ld.sh	r8,r7[0xc]
80006c48:	e0 18 fb 7f 	andl	r8,0xfb7f
80006c4c:	a7 b8       	sbr	r8,0x7
80006c4e:	ae 68       	st.h	r7[0xc],r8
80006c50:	c0 d8       	rjmp	80006c6a <__sfvwrite_r+0x122>
80006c52:	08 9a       	mov	r10,r4
80006c54:	0a 9c       	mov	r12,r5
80006c56:	e0 a0 06 8f 	rcall	80007974 <_realloc_r>
80006c5a:	18 92       	mov	r2,r12
80006c5c:	c0 71       	brne	80006c6a <__sfvwrite_r+0x122>
80006c5e:	6e 4b       	ld.w	r11,r7[0x10]
80006c60:	0a 9c       	mov	r12,r5
80006c62:	ca de       	rcall	800069bc <_free_r>
80006c64:	30 c8       	mov	r8,12
80006c66:	8b 38       	st.w	r5[0xc],r8
80006c68:	cb 78       	rjmp	80006dd6 <__sfvwrite_r+0x28e>
80006c6a:	40 0a       	lddsp	r10,sp[0x0]
80006c6c:	40 09       	lddsp	r9,sp[0x0]
80006c6e:	e8 0a 01 0a 	sub	r10,r4,r10
80006c72:	e4 09 00 08 	add	r8,r2,r9
80006c76:	8f 54       	st.w	r7[0x14],r4
80006c78:	8f 2a       	st.w	r7[0x8],r10
80006c7a:	8f 08       	st.w	r7[0x0],r8
80006c7c:	8f 42       	st.w	r7[0x10],r2
80006c7e:	0c 94       	mov	r4,r6
80006c80:	08 36       	cp.w	r6,r4
80006c82:	ec 04 17 30 	movlo	r4,r6
80006c86:	06 9b       	mov	r11,r3
80006c88:	08 9a       	mov	r10,r4
80006c8a:	6e 0c       	ld.w	r12,r7[0x0]
80006c8c:	e0 a0 03 61 	rcall	8000734e <memmove>
80006c90:	6e 08       	ld.w	r8,r7[0x0]
80006c92:	08 08       	add	r8,r4
80006c94:	8f 08       	st.w	r7[0x0],r8
80006c96:	6e 28       	ld.w	r8,r7[0x8]
80006c98:	08 18       	sub	r8,r4
80006c9a:	0c 94       	mov	r4,r6
80006c9c:	8f 28       	st.w	r7[0x8],r8
80006c9e:	c3 08       	rjmp	80006cfe <__sfvwrite_r+0x1b6>
80006ca0:	08 36       	cp.w	r6,r4
80006ca2:	5f ba       	srhi	r10
80006ca4:	6e 0c       	ld.w	r12,r7[0x0]
80006ca6:	6e 48       	ld.w	r8,r7[0x10]
80006ca8:	10 3c       	cp.w	r12,r8
80006caa:	5f b8       	srhi	r8
80006cac:	f5 e8 00 08 	and	r8,r10,r8
80006cb0:	f2 08 18 00 	cp.b	r8,r9
80006cb4:	c0 e0       	breq	80006cd0 <__sfvwrite_r+0x188>
80006cb6:	06 9b       	mov	r11,r3
80006cb8:	08 9a       	mov	r10,r4
80006cba:	e0 a0 03 4a 	rcall	8000734e <memmove>
80006cbe:	6e 08       	ld.w	r8,r7[0x0]
80006cc0:	08 08       	add	r8,r4
80006cc2:	0e 9b       	mov	r11,r7
80006cc4:	8f 08       	st.w	r7[0x0],r8
80006cc6:	0a 9c       	mov	r12,r5
80006cc8:	fe b0 fd 08 	rcall	800066d8 <_fflush_r>
80006ccc:	c1 90       	breq	80006cfe <__sfvwrite_r+0x1b6>
80006cce:	c8 48       	rjmp	80006dd6 <__sfvwrite_r+0x28e>
80006cd0:	6e 59       	ld.w	r9,r7[0x14]
80006cd2:	12 36       	cp.w	r6,r9
80006cd4:	c0 a3       	brcs	80006ce8 <__sfvwrite_r+0x1a0>
80006cd6:	6e a8       	ld.w	r8,r7[0x28]
80006cd8:	06 9a       	mov	r10,r3
80006cda:	6e 8b       	ld.w	r11,r7[0x20]
80006cdc:	0a 9c       	mov	r12,r5
80006cde:	5d 18       	icall	r8
80006ce0:	18 94       	mov	r4,r12
80006ce2:	e0 89 00 0e 	brgt	80006cfe <__sfvwrite_r+0x1b6>
80006ce6:	c7 88       	rjmp	80006dd6 <__sfvwrite_r+0x28e>
80006ce8:	0c 9a       	mov	r10,r6
80006cea:	06 9b       	mov	r11,r3
80006cec:	e0 a0 03 31 	rcall	8000734e <memmove>
80006cf0:	6e 08       	ld.w	r8,r7[0x0]
80006cf2:	0c 08       	add	r8,r6
80006cf4:	0c 94       	mov	r4,r6
80006cf6:	8f 08       	st.w	r7[0x0],r8
80006cf8:	6e 28       	ld.w	r8,r7[0x8]
80006cfa:	0c 18       	sub	r8,r6
80006cfc:	8f 28       	st.w	r7[0x8],r8
80006cfe:	62 28       	ld.w	r8,r1[0x8]
80006d00:	08 18       	sub	r8,r4
80006d02:	83 28       	st.w	r1[0x8],r8
80006d04:	c6 e0       	breq	80006de0 <__sfvwrite_r+0x298>
80006d06:	08 16       	sub	r6,r4
80006d08:	08 03       	add	r3,r4
80006d0a:	c6 fb       	rjmp	80006be8 <__sfvwrite_r+0xa0>
80006d0c:	60 03       	ld.w	r3,r0[0x0]
80006d0e:	60 11       	ld.w	r1,r0[0x4]
80006d10:	30 08       	mov	r8,0
80006d12:	2f 80       	sub	r0,-8
80006d14:	50 08       	stdsp	sp[0x0],r8
80006d16:	58 01       	cp.w	r1,0
80006d18:	cf a0       	breq	80006d0c <__sfvwrite_r+0x1c4>
80006d1a:	40 0a       	lddsp	r10,sp[0x0]
80006d1c:	58 0a       	cp.w	r10,0
80006d1e:	c1 51       	brne	80006d48 <__sfvwrite_r+0x200>
80006d20:	e2 c6 ff ff 	sub	r6,r1,-1
80006d24:	02 9a       	mov	r10,r1
80006d26:	30 ab       	mov	r11,10
80006d28:	06 9c       	mov	r12,r3
80006d2a:	e0 a0 03 07 	rcall	80007338 <memchr>
80006d2e:	f8 c8 ff ff 	sub	r8,r12,-1
80006d32:	58 0c       	cp.w	r12,0
80006d34:	f1 d3 e1 16 	subne	r6,r8,r3
80006d38:	f9 b9 01 01 	movne	r9,1
80006d3c:	fb f9 1a 00 	st.wne	sp[0x0],r9
80006d40:	f9 b8 00 01 	moveq	r8,1
80006d44:	fb f8 0a 00 	st.weq	sp[0x0],r8
80006d48:	02 36       	cp.w	r6,r1
80006d4a:	ec 04 17 80 	movls	r4,r6
80006d4e:	e2 04 17 b0 	movhi	r4,r1
80006d52:	6e 59       	ld.w	r9,r7[0x14]
80006d54:	6e 25       	ld.w	r5,r7[0x8]
80006d56:	f2 05 00 05 	add	r5,r9,r5
80006d5a:	0a 34       	cp.w	r4,r5
80006d5c:	5f 9a       	srgt	r10
80006d5e:	6e 0c       	ld.w	r12,r7[0x0]
80006d60:	6e 48       	ld.w	r8,r7[0x10]
80006d62:	10 3c       	cp.w	r12,r8
80006d64:	5f b8       	srhi	r8
80006d66:	f5 e8 00 08 	and	r8,r10,r8
80006d6a:	30 0a       	mov	r10,0
80006d6c:	f4 08 18 00 	cp.b	r8,r10
80006d70:	c0 e0       	breq	80006d8c <__sfvwrite_r+0x244>
80006d72:	06 9b       	mov	r11,r3
80006d74:	0a 9a       	mov	r10,r5
80006d76:	e0 a0 02 ec 	rcall	8000734e <memmove>
80006d7a:	6e 08       	ld.w	r8,r7[0x0]
80006d7c:	0a 08       	add	r8,r5
80006d7e:	0e 9b       	mov	r11,r7
80006d80:	8f 08       	st.w	r7[0x0],r8
80006d82:	40 1c       	lddsp	r12,sp[0x4]
80006d84:	fe b0 fc aa 	rcall	800066d8 <_fflush_r>
80006d88:	c1 80       	breq	80006db8 <__sfvwrite_r+0x270>
80006d8a:	c2 68       	rjmp	80006dd6 <__sfvwrite_r+0x28e>
80006d8c:	12 34       	cp.w	r4,r9
80006d8e:	c0 a5       	brlt	80006da2 <__sfvwrite_r+0x25a>
80006d90:	6e a8       	ld.w	r8,r7[0x28]
80006d92:	06 9a       	mov	r10,r3
80006d94:	6e 8b       	ld.w	r11,r7[0x20]
80006d96:	40 1c       	lddsp	r12,sp[0x4]
80006d98:	5d 18       	icall	r8
80006d9a:	18 95       	mov	r5,r12
80006d9c:	e0 89 00 0e 	brgt	80006db8 <__sfvwrite_r+0x270>
80006da0:	c1 b8       	rjmp	80006dd6 <__sfvwrite_r+0x28e>
80006da2:	08 9a       	mov	r10,r4
80006da4:	06 9b       	mov	r11,r3
80006da6:	e0 a0 02 d4 	rcall	8000734e <memmove>
80006daa:	6e 08       	ld.w	r8,r7[0x0]
80006dac:	08 08       	add	r8,r4
80006dae:	08 95       	mov	r5,r4
80006db0:	8f 08       	st.w	r7[0x0],r8
80006db2:	6e 28       	ld.w	r8,r7[0x8]
80006db4:	08 18       	sub	r8,r4
80006db6:	8f 28       	st.w	r7[0x8],r8
80006db8:	0a 16       	sub	r6,r5
80006dba:	c0 71       	brne	80006dc8 <__sfvwrite_r+0x280>
80006dbc:	0e 9b       	mov	r11,r7
80006dbe:	40 1c       	lddsp	r12,sp[0x4]
80006dc0:	fe b0 fc 8c 	rcall	800066d8 <_fflush_r>
80006dc4:	c0 91       	brne	80006dd6 <__sfvwrite_r+0x28e>
80006dc6:	50 06       	stdsp	sp[0x0],r6
80006dc8:	64 28       	ld.w	r8,r2[0x8]
80006dca:	0a 18       	sub	r8,r5
80006dcc:	85 28       	st.w	r2[0x8],r8
80006dce:	c0 90       	breq	80006de0 <__sfvwrite_r+0x298>
80006dd0:	0a 11       	sub	r1,r5
80006dd2:	0a 03       	add	r3,r5
80006dd4:	ca 1b       	rjmp	80006d16 <__sfvwrite_r+0x1ce>
80006dd6:	8e 68       	ld.sh	r8,r7[0xc]
80006dd8:	a7 a8       	sbr	r8,0x6
80006dda:	ae 68       	st.h	r7[0xc],r8
80006ddc:	3f fc       	mov	r12,-1
80006dde:	c0 28       	rjmp	80006de2 <__sfvwrite_r+0x29a>
80006de0:	30 0c       	mov	r12,0
80006de2:	2f dd       	sub	sp,-12
80006de4:	d8 32       	popm	r0-r7,pc
80006de6:	d7 03       	nop

80006de8 <_fwalk>:
80006de8:	d4 31       	pushm	r0-r7,lr
80006dea:	30 05       	mov	r5,0
80006dec:	16 91       	mov	r1,r11
80006dee:	f8 c7 ff 28 	sub	r7,r12,-216
80006df2:	0a 92       	mov	r2,r5
80006df4:	fe b0 fc f8 	rcall	800067e4 <__sfp_lock_acquire>
80006df8:	3f f3       	mov	r3,-1
80006dfa:	c1 68       	rjmp	80006e26 <_fwalk+0x3e>
80006dfc:	6e 26       	ld.w	r6,r7[0x8]
80006dfe:	6e 14       	ld.w	r4,r7[0x4]
80006e00:	2f 46       	sub	r6,-12
80006e02:	c0 c8       	rjmp	80006e1a <_fwalk+0x32>
80006e04:	8c 08       	ld.sh	r8,r6[0x0]
80006e06:	e4 08 19 00 	cp.h	r8,r2
80006e0a:	c0 70       	breq	80006e18 <_fwalk+0x30>
80006e0c:	8c 18       	ld.sh	r8,r6[0x2]
80006e0e:	e6 08 19 00 	cp.h	r8,r3
80006e12:	c0 30       	breq	80006e18 <_fwalk+0x30>
80006e14:	5d 11       	icall	r1
80006e16:	18 45       	or	r5,r12
80006e18:	2a 46       	sub	r6,-92
80006e1a:	20 14       	sub	r4,1
80006e1c:	ec cc 00 0c 	sub	r12,r6,12
80006e20:	58 04       	cp.w	r4,0
80006e22:	cf 14       	brge	80006e04 <_fwalk+0x1c>
80006e24:	6e 07       	ld.w	r7,r7[0x0]
80006e26:	58 07       	cp.w	r7,0
80006e28:	ce a1       	brne	80006dfc <_fwalk+0x14>
80006e2a:	fe b0 fc de 	rcall	800067e6 <__sfp_lock_release>
80006e2e:	0a 9c       	mov	r12,r5
80006e30:	d8 32       	popm	r0-r7,pc
80006e32:	d7 03       	nop

80006e34 <_localeconv_r>:
80006e34:	fe cc d6 2c 	sub	r12,pc,-10708
80006e38:	5e fc       	retal	r12
80006e3a:	d7 03       	nop

80006e3c <__smakebuf_r>:
80006e3c:	d4 21       	pushm	r4-r7,lr
80006e3e:	20 fd       	sub	sp,60
80006e40:	96 68       	ld.sh	r8,r11[0xc]
80006e42:	16 97       	mov	r7,r11
80006e44:	18 96       	mov	r6,r12
80006e46:	e2 18 00 02 	andl	r8,0x2,COH
80006e4a:	c3 c1       	brne	80006ec2 <__smakebuf_r+0x86>
80006e4c:	96 7b       	ld.sh	r11,r11[0xe]
80006e4e:	f0 0b 19 00 	cp.h	r11,r8
80006e52:	c0 55       	brlt	80006e5c <__smakebuf_r+0x20>
80006e54:	1a 9a       	mov	r10,sp
80006e56:	e0 a0 08 9d 	rcall	80007f90 <_fstat_r>
80006e5a:	c0 f4       	brge	80006e78 <__smakebuf_r+0x3c>
80006e5c:	8e 65       	ld.sh	r5,r7[0xc]
80006e5e:	0a 98       	mov	r8,r5
80006e60:	ab b8       	sbr	r8,0xb
80006e62:	e2 15 00 80 	andl	r5,0x80,COH
80006e66:	ae 68       	st.h	r7[0xc],r8
80006e68:	30 04       	mov	r4,0
80006e6a:	e0 68 04 00 	mov	r8,1024
80006e6e:	f9 b5 01 40 	movne	r5,64
80006e72:	f0 05 17 00 	moveq	r5,r8
80006e76:	c1 c8       	rjmp	80006eae <__smakebuf_r+0x72>
80006e78:	40 18       	lddsp	r8,sp[0x4]
80006e7a:	e2 18 f0 00 	andl	r8,0xf000,COH
80006e7e:	e0 48 20 00 	cp.w	r8,8192
80006e82:	5f 04       	sreq	r4
80006e84:	e0 48 80 00 	cp.w	r8,32768
80006e88:	c0 e1       	brne	80006ea4 <__smakebuf_r+0x68>
80006e8a:	6e b9       	ld.w	r9,r7[0x2c]
80006e8c:	fe c8 f1 e8 	sub	r8,pc,-3608
80006e90:	10 39       	cp.w	r9,r8
80006e92:	c0 91       	brne	80006ea4 <__smakebuf_r+0x68>
80006e94:	8e 68       	ld.sh	r8,r7[0xc]
80006e96:	e0 65 04 00 	mov	r5,1024
80006e9a:	ab a8       	sbr	r8,0xa
80006e9c:	ef 45 00 50 	st.w	r7[80],r5
80006ea0:	ae 68       	st.h	r7[0xc],r8
80006ea2:	c0 68       	rjmp	80006eae <__smakebuf_r+0x72>
80006ea4:	8e 68       	ld.sh	r8,r7[0xc]
80006ea6:	e0 65 04 00 	mov	r5,1024
80006eaa:	ab b8       	sbr	r8,0xb
80006eac:	ae 68       	st.h	r7[0xc],r8
80006eae:	0a 9b       	mov	r11,r5
80006eb0:	0c 9c       	mov	r12,r6
80006eb2:	c2 bc       	rcall	80006f08 <_malloc_r>
80006eb4:	8e 68       	ld.sh	r8,r7[0xc]
80006eb6:	c0 d1       	brne	80006ed0 <__smakebuf_r+0x94>
80006eb8:	ed b8 00 09 	bld	r8,0x9
80006ebc:	c1 b0       	breq	80006ef2 <__smakebuf_r+0xb6>
80006ebe:	a1 b8       	sbr	r8,0x1
80006ec0:	ae 68       	st.h	r7[0xc],r8
80006ec2:	ee c8 ff b9 	sub	r8,r7,-71
80006ec6:	8f 48       	st.w	r7[0x10],r8
80006ec8:	8f 08       	st.w	r7[0x0],r8
80006eca:	30 18       	mov	r8,1
80006ecc:	8f 58       	st.w	r7[0x14],r8
80006ece:	c1 28       	rjmp	80006ef2 <__smakebuf_r+0xb6>
80006ed0:	a7 b8       	sbr	r8,0x7
80006ed2:	8f 4c       	st.w	r7[0x10],r12
80006ed4:	ae 68       	st.h	r7[0xc],r8
80006ed6:	8f 55       	st.w	r7[0x14],r5
80006ed8:	fe c8 06 f0 	sub	r8,pc,1776
80006edc:	8f 0c       	st.w	r7[0x0],r12
80006ede:	8d a8       	st.w	r6[0x28],r8
80006ee0:	58 04       	cp.w	r4,0
80006ee2:	c0 80       	breq	80006ef2 <__smakebuf_r+0xb6>
80006ee4:	8e 7c       	ld.sh	r12,r7[0xe]
80006ee6:	e0 a0 07 47 	rcall	80007d74 <isatty>
80006eea:	c0 40       	breq	80006ef2 <__smakebuf_r+0xb6>
80006eec:	8e 68       	ld.sh	r8,r7[0xc]
80006eee:	a1 a8       	sbr	r8,0x0
80006ef0:	ae 68       	st.h	r7[0xc],r8
80006ef2:	2f 1d       	sub	sp,-60
80006ef4:	d8 22       	popm	r4-r7,pc
80006ef6:	d7 03       	nop

80006ef8 <malloc>:
80006ef8:	d4 01       	pushm	lr
80006efa:	e0 68 01 00 	mov	r8,256
80006efe:	18 9b       	mov	r11,r12
80006f00:	70 0c       	ld.w	r12,r8[0x0]
80006f02:	c0 3c       	rcall	80006f08 <_malloc_r>
80006f04:	d8 02       	popm	pc
80006f06:	d7 03       	nop

80006f08 <_malloc_r>:
80006f08:	d4 31       	pushm	r0-r7,lr
80006f0a:	f6 c8 ff f5 	sub	r8,r11,-11
80006f0e:	18 95       	mov	r5,r12
80006f10:	10 97       	mov	r7,r8
80006f12:	e0 17 ff f8 	andl	r7,0xfff8
80006f16:	59 68       	cp.w	r8,22
80006f18:	f9 b7 08 10 	movls	r7,16
80006f1c:	16 37       	cp.w	r7,r11
80006f1e:	5f 38       	srlo	r8
80006f20:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80006f24:	c0 50       	breq	80006f2e <_malloc_r+0x26>
80006f26:	30 c8       	mov	r8,12
80006f28:	99 38       	st.w	r12[0xc],r8
80006f2a:	e0 8f 01 f7 	bral	80007318 <_malloc_r+0x410>
80006f2e:	e0 a0 02 36 	rcall	8000739a <__malloc_lock>
80006f32:	e0 47 01 f7 	cp.w	r7,503
80006f36:	e0 8b 00 1d 	brhi	80006f70 <_malloc_r+0x68>
80006f3a:	ee 03 16 03 	lsr	r3,r7,0x3
80006f3e:	e0 68 01 04 	mov	r8,260
80006f42:	f0 03 00 38 	add	r8,r8,r3<<0x3
80006f46:	70 36       	ld.w	r6,r8[0xc]
80006f48:	10 36       	cp.w	r6,r8
80006f4a:	c0 61       	brne	80006f56 <_malloc_r+0x4e>
80006f4c:	ec c8 ff f8 	sub	r8,r6,-8
80006f50:	70 36       	ld.w	r6,r8[0xc]
80006f52:	10 36       	cp.w	r6,r8
80006f54:	c0 c0       	breq	80006f6c <_malloc_r+0x64>
80006f56:	6c 18       	ld.w	r8,r6[0x4]
80006f58:	e0 18 ff fc 	andl	r8,0xfffc
80006f5c:	6c 3a       	ld.w	r10,r6[0xc]
80006f5e:	ec 08 00 09 	add	r9,r6,r8
80006f62:	0a 9c       	mov	r12,r5
80006f64:	6c 28       	ld.w	r8,r6[0x8]
80006f66:	95 28       	st.w	r10[0x8],r8
80006f68:	91 3a       	st.w	r8[0xc],r10
80006f6a:	c4 78       	rjmp	80006ff8 <_malloc_r+0xf0>
80006f6c:	2f e3       	sub	r3,-2
80006f6e:	c4 d8       	rjmp	80007008 <_malloc_r+0x100>
80006f70:	ee 03 16 09 	lsr	r3,r7,0x9
80006f74:	c0 41       	brne	80006f7c <_malloc_r+0x74>
80006f76:	ee 03 16 03 	lsr	r3,r7,0x3
80006f7a:	c2 68       	rjmp	80006fc6 <_malloc_r+0xbe>
80006f7c:	58 43       	cp.w	r3,4
80006f7e:	e0 8b 00 06 	brhi	80006f8a <_malloc_r+0x82>
80006f82:	ee 03 16 06 	lsr	r3,r7,0x6
80006f86:	2c 83       	sub	r3,-56
80006f88:	c1 f8       	rjmp	80006fc6 <_malloc_r+0xbe>
80006f8a:	59 43       	cp.w	r3,20
80006f8c:	e0 8b 00 04 	brhi	80006f94 <_malloc_r+0x8c>
80006f90:	2a 53       	sub	r3,-91
80006f92:	c1 a8       	rjmp	80006fc6 <_malloc_r+0xbe>
80006f94:	e0 43 00 54 	cp.w	r3,84
80006f98:	e0 8b 00 06 	brhi	80006fa4 <_malloc_r+0x9c>
80006f9c:	ee 03 16 0c 	lsr	r3,r7,0xc
80006fa0:	29 23       	sub	r3,-110
80006fa2:	c1 28       	rjmp	80006fc6 <_malloc_r+0xbe>
80006fa4:	e0 43 01 54 	cp.w	r3,340
80006fa8:	e0 8b 00 06 	brhi	80006fb4 <_malloc_r+0xac>
80006fac:	ee 03 16 0f 	lsr	r3,r7,0xf
80006fb0:	28 93       	sub	r3,-119
80006fb2:	c0 a8       	rjmp	80006fc6 <_malloc_r+0xbe>
80006fb4:	e0 43 05 54 	cp.w	r3,1364
80006fb8:	e0 88 00 04 	brls	80006fc0 <_malloc_r+0xb8>
80006fbc:	37 e3       	mov	r3,126
80006fbe:	c0 48       	rjmp	80006fc6 <_malloc_r+0xbe>
80006fc0:	ee 03 16 12 	lsr	r3,r7,0x12
80006fc4:	28 43       	sub	r3,-124
80006fc6:	e0 6a 01 04 	mov	r10,260
80006fca:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80006fce:	74 36       	ld.w	r6,r10[0xc]
80006fd0:	c1 98       	rjmp	80007002 <_malloc_r+0xfa>
80006fd2:	6c 19       	ld.w	r9,r6[0x4]
80006fd4:	e0 19 ff fc 	andl	r9,0xfffc
80006fd8:	f2 07 01 0b 	sub	r11,r9,r7
80006fdc:	58 fb       	cp.w	r11,15
80006fde:	e0 8a 00 04 	brle	80006fe6 <_malloc_r+0xde>
80006fe2:	20 13       	sub	r3,1
80006fe4:	c1 18       	rjmp	80007006 <_malloc_r+0xfe>
80006fe6:	6c 38       	ld.w	r8,r6[0xc]
80006fe8:	58 0b       	cp.w	r11,0
80006fea:	c0 b5       	brlt	80007000 <_malloc_r+0xf8>
80006fec:	6c 2a       	ld.w	r10,r6[0x8]
80006fee:	ec 09 00 09 	add	r9,r6,r9
80006ff2:	0a 9c       	mov	r12,r5
80006ff4:	91 2a       	st.w	r8[0x8],r10
80006ff6:	95 38       	st.w	r10[0xc],r8
80006ff8:	72 18       	ld.w	r8,r9[0x4]
80006ffa:	a1 a8       	sbr	r8,0x0
80006ffc:	93 18       	st.w	r9[0x4],r8
80006ffe:	cb c8       	rjmp	80007176 <_malloc_r+0x26e>
80007000:	10 96       	mov	r6,r8
80007002:	14 36       	cp.w	r6,r10
80007004:	ce 71       	brne	80006fd2 <_malloc_r+0xca>
80007006:	2f f3       	sub	r3,-1
80007008:	e0 6a 01 04 	mov	r10,260
8000700c:	f4 cc ff f8 	sub	r12,r10,-8
80007010:	78 26       	ld.w	r6,r12[0x8]
80007012:	18 36       	cp.w	r6,r12
80007014:	c6 c0       	breq	800070ec <_malloc_r+0x1e4>
80007016:	6c 19       	ld.w	r9,r6[0x4]
80007018:	e0 19 ff fc 	andl	r9,0xfffc
8000701c:	f2 07 01 08 	sub	r8,r9,r7
80007020:	58 f8       	cp.w	r8,15
80007022:	e0 89 00 8f 	brgt	80007140 <_malloc_r+0x238>
80007026:	99 3c       	st.w	r12[0xc],r12
80007028:	99 2c       	st.w	r12[0x8],r12
8000702a:	58 08       	cp.w	r8,0
8000702c:	c0 55       	brlt	80007036 <_malloc_r+0x12e>
8000702e:	ec 09 00 09 	add	r9,r6,r9
80007032:	0a 9c       	mov	r12,r5
80007034:	ce 2b       	rjmp	80006ff8 <_malloc_r+0xf0>
80007036:	e0 49 01 ff 	cp.w	r9,511
8000703a:	e0 8b 00 13 	brhi	80007060 <_malloc_r+0x158>
8000703e:	a3 99       	lsr	r9,0x3
80007040:	f4 09 00 38 	add	r8,r10,r9<<0x3
80007044:	70 2b       	ld.w	r11,r8[0x8]
80007046:	8d 38       	st.w	r6[0xc],r8
80007048:	8d 2b       	st.w	r6[0x8],r11
8000704a:	97 36       	st.w	r11[0xc],r6
8000704c:	91 26       	st.w	r8[0x8],r6
8000704e:	a3 49       	asr	r9,0x2
80007050:	74 18       	ld.w	r8,r10[0x4]
80007052:	30 1b       	mov	r11,1
80007054:	f6 09 09 49 	lsl	r9,r11,r9
80007058:	f1 e9 10 09 	or	r9,r8,r9
8000705c:	95 19       	st.w	r10[0x4],r9
8000705e:	c4 78       	rjmp	800070ec <_malloc_r+0x1e4>
80007060:	f2 0a 16 09 	lsr	r10,r9,0x9
80007064:	58 4a       	cp.w	r10,4
80007066:	e0 8b 00 07 	brhi	80007074 <_malloc_r+0x16c>
8000706a:	f2 0a 16 06 	lsr	r10,r9,0x6
8000706e:	2c 8a       	sub	r10,-56
80007070:	c2 08       	rjmp	800070b0 <_malloc_r+0x1a8>
80007072:	d7 03       	nop
80007074:	59 4a       	cp.w	r10,20
80007076:	e0 8b 00 04 	brhi	8000707e <_malloc_r+0x176>
8000707a:	2a 5a       	sub	r10,-91
8000707c:	c1 a8       	rjmp	800070b0 <_malloc_r+0x1a8>
8000707e:	e0 4a 00 54 	cp.w	r10,84
80007082:	e0 8b 00 06 	brhi	8000708e <_malloc_r+0x186>
80007086:	f2 0a 16 0c 	lsr	r10,r9,0xc
8000708a:	29 2a       	sub	r10,-110
8000708c:	c1 28       	rjmp	800070b0 <_malloc_r+0x1a8>
8000708e:	e0 4a 01 54 	cp.w	r10,340
80007092:	e0 8b 00 06 	brhi	8000709e <_malloc_r+0x196>
80007096:	f2 0a 16 0f 	lsr	r10,r9,0xf
8000709a:	28 9a       	sub	r10,-119
8000709c:	c0 a8       	rjmp	800070b0 <_malloc_r+0x1a8>
8000709e:	e0 4a 05 54 	cp.w	r10,1364
800070a2:	e0 88 00 04 	brls	800070aa <_malloc_r+0x1a2>
800070a6:	37 ea       	mov	r10,126
800070a8:	c0 48       	rjmp	800070b0 <_malloc_r+0x1a8>
800070aa:	f2 0a 16 12 	lsr	r10,r9,0x12
800070ae:	28 4a       	sub	r10,-124
800070b0:	e0 6b 01 04 	mov	r11,260
800070b4:	f6 0a 00 34 	add	r4,r11,r10<<0x3
800070b8:	68 28       	ld.w	r8,r4[0x8]
800070ba:	08 38       	cp.w	r8,r4
800070bc:	c0 e1       	brne	800070d8 <_malloc_r+0x1d0>
800070be:	76 19       	ld.w	r9,r11[0x4]
800070c0:	a3 4a       	asr	r10,0x2
800070c2:	30 1e       	mov	lr,1
800070c4:	fc 0a 09 4a 	lsl	r10,lr,r10
800070c8:	f3 ea 10 0a 	or	r10,r9,r10
800070cc:	10 99       	mov	r9,r8
800070ce:	97 1a       	st.w	r11[0x4],r10
800070d0:	c0 a8       	rjmp	800070e4 <_malloc_r+0x1dc>
800070d2:	70 28       	ld.w	r8,r8[0x8]
800070d4:	08 38       	cp.w	r8,r4
800070d6:	c0 60       	breq	800070e2 <_malloc_r+0x1da>
800070d8:	70 1a       	ld.w	r10,r8[0x4]
800070da:	e0 1a ff fc 	andl	r10,0xfffc
800070de:	14 39       	cp.w	r9,r10
800070e0:	cf 93       	brcs	800070d2 <_malloc_r+0x1ca>
800070e2:	70 39       	ld.w	r9,r8[0xc]
800070e4:	8d 39       	st.w	r6[0xc],r9
800070e6:	8d 28       	st.w	r6[0x8],r8
800070e8:	91 36       	st.w	r8[0xc],r6
800070ea:	93 26       	st.w	r9[0x8],r6
800070ec:	e6 08 14 02 	asr	r8,r3,0x2
800070f0:	30 1b       	mov	r11,1
800070f2:	e0 64 01 04 	mov	r4,260
800070f6:	f6 08 09 4b 	lsl	r11,r11,r8
800070fa:	68 18       	ld.w	r8,r4[0x4]
800070fc:	10 3b       	cp.w	r11,r8
800070fe:	e0 8b 00 69 	brhi	800071d0 <_malloc_r+0x2c8>
80007102:	f7 e8 00 09 	and	r9,r11,r8
80007106:	c0 b1       	brne	8000711c <_malloc_r+0x214>
80007108:	e0 13 ff fc 	andl	r3,0xfffc
8000710c:	a1 7b       	lsl	r11,0x1
8000710e:	2f c3       	sub	r3,-4
80007110:	c0 38       	rjmp	80007116 <_malloc_r+0x20e>
80007112:	2f c3       	sub	r3,-4
80007114:	a1 7b       	lsl	r11,0x1
80007116:	f7 e8 00 09 	and	r9,r11,r8
8000711a:	cf c0       	breq	80007112 <_malloc_r+0x20a>
8000711c:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80007120:	06 92       	mov	r2,r3
80007122:	1c 91       	mov	r1,lr
80007124:	62 36       	ld.w	r6,r1[0xc]
80007126:	c2 d8       	rjmp	80007180 <_malloc_r+0x278>
80007128:	6c 1a       	ld.w	r10,r6[0x4]
8000712a:	e0 1a ff fc 	andl	r10,0xfffc
8000712e:	f4 07 01 08 	sub	r8,r10,r7
80007132:	58 f8       	cp.w	r8,15
80007134:	e0 8a 00 15 	brle	8000715e <_malloc_r+0x256>
80007138:	6c 3a       	ld.w	r10,r6[0xc]
8000713a:	6c 29       	ld.w	r9,r6[0x8]
8000713c:	95 29       	st.w	r10[0x8],r9
8000713e:	93 3a       	st.w	r9[0xc],r10
80007140:	0e 99       	mov	r9,r7
80007142:	ec 07 00 07 	add	r7,r6,r7
80007146:	a1 a9       	sbr	r9,0x0
80007148:	99 37       	st.w	r12[0xc],r7
8000714a:	99 27       	st.w	r12[0x8],r7
8000714c:	8d 19       	st.w	r6[0x4],r9
8000714e:	ee 08 09 08 	st.w	r7[r8],r8
80007152:	8f 2c       	st.w	r7[0x8],r12
80007154:	8f 3c       	st.w	r7[0xc],r12
80007156:	a1 a8       	sbr	r8,0x0
80007158:	0a 9c       	mov	r12,r5
8000715a:	8f 18       	st.w	r7[0x4],r8
8000715c:	c0 d8       	rjmp	80007176 <_malloc_r+0x26e>
8000715e:	6c 39       	ld.w	r9,r6[0xc]
80007160:	58 08       	cp.w	r8,0
80007162:	c0 e5       	brlt	8000717e <_malloc_r+0x276>
80007164:	ec 0a 00 0a 	add	r10,r6,r10
80007168:	74 18       	ld.w	r8,r10[0x4]
8000716a:	a1 a8       	sbr	r8,0x0
8000716c:	0a 9c       	mov	r12,r5
8000716e:	95 18       	st.w	r10[0x4],r8
80007170:	6c 28       	ld.w	r8,r6[0x8]
80007172:	93 28       	st.w	r9[0x8],r8
80007174:	91 39       	st.w	r8[0xc],r9
80007176:	c1 3d       	rcall	8000739c <__malloc_unlock>
80007178:	ec cc ff f8 	sub	r12,r6,-8
8000717c:	d8 32       	popm	r0-r7,pc
8000717e:	12 96       	mov	r6,r9
80007180:	02 36       	cp.w	r6,r1
80007182:	cd 31       	brne	80007128 <_malloc_r+0x220>
80007184:	2f f2       	sub	r2,-1
80007186:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
8000718a:	c0 30       	breq	80007190 <_malloc_r+0x288>
8000718c:	2f 81       	sub	r1,-8
8000718e:	cc bb       	rjmp	80007124 <_malloc_r+0x21c>
80007190:	1c 98       	mov	r8,lr
80007192:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80007196:	c0 81       	brne	800071a6 <_malloc_r+0x29e>
80007198:	68 19       	ld.w	r9,r4[0x4]
8000719a:	f6 08 11 ff 	rsub	r8,r11,-1
8000719e:	f3 e8 00 08 	and	r8,r9,r8
800071a2:	89 18       	st.w	r4[0x4],r8
800071a4:	c0 78       	rjmp	800071b2 <_malloc_r+0x2aa>
800071a6:	f0 c9 00 08 	sub	r9,r8,8
800071aa:	20 13       	sub	r3,1
800071ac:	70 08       	ld.w	r8,r8[0x0]
800071ae:	12 38       	cp.w	r8,r9
800071b0:	cf 10       	breq	80007192 <_malloc_r+0x28a>
800071b2:	a1 7b       	lsl	r11,0x1
800071b4:	68 18       	ld.w	r8,r4[0x4]
800071b6:	10 3b       	cp.w	r11,r8
800071b8:	e0 8b 00 0c 	brhi	800071d0 <_malloc_r+0x2c8>
800071bc:	58 0b       	cp.w	r11,0
800071be:	c0 90       	breq	800071d0 <_malloc_r+0x2c8>
800071c0:	04 93       	mov	r3,r2
800071c2:	c0 38       	rjmp	800071c8 <_malloc_r+0x2c0>
800071c4:	2f c3       	sub	r3,-4
800071c6:	a1 7b       	lsl	r11,0x1
800071c8:	f7 e8 00 09 	and	r9,r11,r8
800071cc:	ca 81       	brne	8000711c <_malloc_r+0x214>
800071ce:	cf bb       	rjmp	800071c4 <_malloc_r+0x2bc>
800071d0:	68 23       	ld.w	r3,r4[0x8]
800071d2:	66 12       	ld.w	r2,r3[0x4]
800071d4:	e0 12 ff fc 	andl	r2,0xfffc
800071d8:	0e 32       	cp.w	r2,r7
800071da:	5f 39       	srlo	r9
800071dc:	e4 07 01 08 	sub	r8,r2,r7
800071e0:	58 f8       	cp.w	r8,15
800071e2:	5f aa       	srle	r10
800071e4:	f5 e9 10 09 	or	r9,r10,r9
800071e8:	e0 80 00 9a 	breq	8000731c <_malloc_r+0x414>
800071ec:	e0 68 06 30 	mov	r8,1584
800071f0:	70 01       	ld.w	r1,r8[0x0]
800071f2:	e0 68 05 10 	mov	r8,1296
800071f6:	2f 01       	sub	r1,-16
800071f8:	70 08       	ld.w	r8,r8[0x0]
800071fa:	0e 01       	add	r1,r7
800071fc:	5b f8       	cp.w	r8,-1
800071fe:	c0 40       	breq	80007206 <_malloc_r+0x2fe>
80007200:	28 11       	sub	r1,-127
80007202:	e0 11 ff 80 	andl	r1,0xff80
80007206:	02 9b       	mov	r11,r1
80007208:	0a 9c       	mov	r12,r5
8000720a:	e0 a0 05 39 	rcall	80007c7c <_sbrk_r>
8000720e:	18 96       	mov	r6,r12
80007210:	5b fc       	cp.w	r12,-1
80007212:	c7 50       	breq	800072fc <_malloc_r+0x3f4>
80007214:	e6 02 00 08 	add	r8,r3,r2
80007218:	10 3c       	cp.w	r12,r8
8000721a:	c0 32       	brcc	80007220 <_malloc_r+0x318>
8000721c:	08 33       	cp.w	r3,r4
8000721e:	c6 f1       	brne	800072fc <_malloc_r+0x3f4>
80007220:	e0 6a 06 34 	mov	r10,1588
80007224:	74 09       	ld.w	r9,r10[0x0]
80007226:	e2 09 00 09 	add	r9,r1,r9
8000722a:	95 09       	st.w	r10[0x0],r9
8000722c:	10 36       	cp.w	r6,r8
8000722e:	c0 a1       	brne	80007242 <_malloc_r+0x33a>
80007230:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80007234:	c0 71       	brne	80007242 <_malloc_r+0x33a>
80007236:	e2 02 00 02 	add	r2,r1,r2
8000723a:	68 28       	ld.w	r8,r4[0x8]
8000723c:	a1 a2       	sbr	r2,0x0
8000723e:	91 12       	st.w	r8[0x4],r2
80007240:	c4 f8       	rjmp	800072de <_malloc_r+0x3d6>
80007242:	e0 6a 05 10 	mov	r10,1296
80007246:	74 0b       	ld.w	r11,r10[0x0]
80007248:	5b fb       	cp.w	r11,-1
8000724a:	c0 31       	brne	80007250 <_malloc_r+0x348>
8000724c:	95 06       	st.w	r10[0x0],r6
8000724e:	c0 78       	rjmp	8000725c <_malloc_r+0x354>
80007250:	ec 09 00 09 	add	r9,r6,r9
80007254:	e0 6a 06 34 	mov	r10,1588
80007258:	10 19       	sub	r9,r8
8000725a:	95 09       	st.w	r10[0x0],r9
8000725c:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80007260:	f0 09 11 08 	rsub	r9,r8,8
80007264:	58 08       	cp.w	r8,0
80007266:	f2 08 17 10 	movne	r8,r9
8000726a:	ed d8 e1 06 	addne	r6,r6,r8
8000726e:	28 08       	sub	r8,-128
80007270:	ec 01 00 01 	add	r1,r6,r1
80007274:	0a 9c       	mov	r12,r5
80007276:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
8000727a:	f0 01 01 01 	sub	r1,r8,r1
8000727e:	02 9b       	mov	r11,r1
80007280:	e0 a0 04 fe 	rcall	80007c7c <_sbrk_r>
80007284:	e0 68 06 34 	mov	r8,1588
80007288:	5b fc       	cp.w	r12,-1
8000728a:	ec 0c 17 00 	moveq	r12,r6
8000728e:	f9 b1 00 00 	moveq	r1,0
80007292:	70 09       	ld.w	r9,r8[0x0]
80007294:	0c 1c       	sub	r12,r6
80007296:	89 26       	st.w	r4[0x8],r6
80007298:	02 0c       	add	r12,r1
8000729a:	12 01       	add	r1,r9
8000729c:	a1 ac       	sbr	r12,0x0
8000729e:	91 01       	st.w	r8[0x0],r1
800072a0:	8d 1c       	st.w	r6[0x4],r12
800072a2:	08 33       	cp.w	r3,r4
800072a4:	c1 d0       	breq	800072de <_malloc_r+0x3d6>
800072a6:	58 f2       	cp.w	r2,15
800072a8:	e0 8b 00 05 	brhi	800072b2 <_malloc_r+0x3aa>
800072ac:	30 18       	mov	r8,1
800072ae:	8d 18       	st.w	r6[0x4],r8
800072b0:	c2 68       	rjmp	800072fc <_malloc_r+0x3f4>
800072b2:	30 59       	mov	r9,5
800072b4:	20 c2       	sub	r2,12
800072b6:	e0 12 ff f8 	andl	r2,0xfff8
800072ba:	e6 02 00 08 	add	r8,r3,r2
800072be:	91 29       	st.w	r8[0x8],r9
800072c0:	91 19       	st.w	r8[0x4],r9
800072c2:	66 18       	ld.w	r8,r3[0x4]
800072c4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800072c8:	e5 e8 10 08 	or	r8,r2,r8
800072cc:	87 18       	st.w	r3[0x4],r8
800072ce:	58 f2       	cp.w	r2,15
800072d0:	e0 88 00 07 	brls	800072de <_malloc_r+0x3d6>
800072d4:	e6 cb ff f8 	sub	r11,r3,-8
800072d8:	0a 9c       	mov	r12,r5
800072da:	fe b0 fb 71 	rcall	800069bc <_free_r>
800072de:	e0 69 06 2c 	mov	r9,1580
800072e2:	72 0a       	ld.w	r10,r9[0x0]
800072e4:	e0 68 06 34 	mov	r8,1588
800072e8:	70 08       	ld.w	r8,r8[0x0]
800072ea:	14 38       	cp.w	r8,r10
800072ec:	f3 f8 ba 00 	st.whi	r9[0x0],r8
800072f0:	e0 69 06 28 	mov	r9,1576
800072f4:	72 0a       	ld.w	r10,r9[0x0]
800072f6:	14 38       	cp.w	r8,r10
800072f8:	f3 f8 ba 00 	st.whi	r9[0x0],r8
800072fc:	68 28       	ld.w	r8,r4[0x8]
800072fe:	70 18       	ld.w	r8,r8[0x4]
80007300:	e0 18 ff fc 	andl	r8,0xfffc
80007304:	0e 38       	cp.w	r8,r7
80007306:	5f 39       	srlo	r9
80007308:	0e 18       	sub	r8,r7
8000730a:	58 f8       	cp.w	r8,15
8000730c:	5f aa       	srle	r10
8000730e:	f5 e9 10 09 	or	r9,r10,r9
80007312:	c0 50       	breq	8000731c <_malloc_r+0x414>
80007314:	0a 9c       	mov	r12,r5
80007316:	c4 3c       	rcall	8000739c <__malloc_unlock>
80007318:	d8 3a       	popm	r0-r7,pc,r12=0
8000731a:	d7 03       	nop
8000731c:	68 26       	ld.w	r6,r4[0x8]
8000731e:	a1 a8       	sbr	r8,0x0
80007320:	0e 99       	mov	r9,r7
80007322:	a1 a9       	sbr	r9,0x0
80007324:	8d 19       	st.w	r6[0x4],r9
80007326:	ec 07 00 07 	add	r7,r6,r7
8000732a:	0a 9c       	mov	r12,r5
8000732c:	89 27       	st.w	r4[0x8],r7
8000732e:	8f 18       	st.w	r7[0x4],r8
80007330:	c3 6c       	rcall	8000739c <__malloc_unlock>
80007332:	ec cc ff f8 	sub	r12,r6,-8
80007336:	d8 32       	popm	r0-r7,pc

80007338 <memchr>:
80007338:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
8000733c:	c0 68       	rjmp	80007348 <memchr+0x10>
8000733e:	20 1a       	sub	r10,1
80007340:	19 88       	ld.ub	r8,r12[0x0]
80007342:	16 38       	cp.w	r8,r11
80007344:	5e 0c       	reteq	r12
80007346:	2f fc       	sub	r12,-1
80007348:	58 0a       	cp.w	r10,0
8000734a:	cf a1       	brne	8000733e <memchr+0x6>
8000734c:	5e fa       	retal	r10

8000734e <memmove>:
8000734e:	d4 01       	pushm	lr
80007350:	18 3b       	cp.w	r11,r12
80007352:	c1 92       	brcc	80007384 <memmove+0x36>
80007354:	f6 0a 00 09 	add	r9,r11,r10
80007358:	12 3c       	cp.w	r12,r9
8000735a:	c1 52       	brcc	80007384 <memmove+0x36>
8000735c:	f8 0a 00 0b 	add	r11,r12,r10
80007360:	30 08       	mov	r8,0
80007362:	c0 68       	rjmp	8000736e <memmove+0x20>
80007364:	f2 08 07 0e 	ld.ub	lr,r9[r8]
80007368:	20 1a       	sub	r10,1
8000736a:	f6 08 0b 0e 	st.b	r11[r8],lr
8000736e:	20 18       	sub	r8,1
80007370:	58 0a       	cp.w	r10,0
80007372:	cf 91       	brne	80007364 <memmove+0x16>
80007374:	d8 02       	popm	pc
80007376:	f6 08 07 09 	ld.ub	r9,r11[r8]
8000737a:	20 1a       	sub	r10,1
8000737c:	f8 08 0b 09 	st.b	r12[r8],r9
80007380:	2f f8       	sub	r8,-1
80007382:	c0 28       	rjmp	80007386 <memmove+0x38>
80007384:	30 08       	mov	r8,0
80007386:	58 0a       	cp.w	r10,0
80007388:	cf 71       	brne	80007376 <memmove+0x28>
8000738a:	d8 02       	popm	pc

8000738c <memset>:
8000738c:	18 98       	mov	r8,r12
8000738e:	c0 38       	rjmp	80007394 <memset+0x8>
80007390:	10 cb       	st.b	r8++,r11
80007392:	20 1a       	sub	r10,1
80007394:	58 0a       	cp.w	r10,0
80007396:	cf d1       	brne	80007390 <memset+0x4>
80007398:	5e fc       	retal	r12

8000739a <__malloc_lock>:
8000739a:	5e fc       	retal	r12

8000739c <__malloc_unlock>:
8000739c:	5e fc       	retal	r12

8000739e <__hi0bits>:
8000739e:	18 98       	mov	r8,r12
800073a0:	e0 1c 00 00 	andl	r12,0x0
800073a4:	f0 09 15 10 	lsl	r9,r8,0x10
800073a8:	58 0c       	cp.w	r12,0
800073aa:	f2 08 17 00 	moveq	r8,r9
800073ae:	f9 bc 00 10 	moveq	r12,16
800073b2:	f9 bc 01 00 	movne	r12,0
800073b6:	10 9a       	mov	r10,r8
800073b8:	f0 09 15 08 	lsl	r9,r8,0x8
800073bc:	e6 1a ff 00 	andh	r10,0xff00,COH
800073c0:	f7 bc 00 f8 	subeq	r12,-8
800073c4:	f2 08 17 00 	moveq	r8,r9
800073c8:	10 9a       	mov	r10,r8
800073ca:	f0 09 15 04 	lsl	r9,r8,0x4
800073ce:	e6 1a f0 00 	andh	r10,0xf000,COH
800073d2:	f7 bc 00 fc 	subeq	r12,-4
800073d6:	f2 08 17 00 	moveq	r8,r9
800073da:	10 9a       	mov	r10,r8
800073dc:	f0 09 15 02 	lsl	r9,r8,0x2
800073e0:	e6 1a c0 00 	andh	r10,0xc000,COH
800073e4:	f7 bc 00 fe 	subeq	r12,-2
800073e8:	f2 08 17 00 	moveq	r8,r9
800073ec:	58 08       	cp.w	r8,0
800073ee:	5e 5c       	retlt	r12
800073f0:	ed b8 00 1e 	bld	r8,0x1e
800073f4:	f9 bc 01 20 	movne	r12,32
800073f8:	f7 bc 00 ff 	subeq	r12,-1
800073fc:	5e fc       	retal	r12

800073fe <__lo0bits>:
800073fe:	18 99       	mov	r9,r12
80007400:	78 08       	ld.w	r8,r12[0x0]
80007402:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
80007406:	c1 50       	breq	80007430 <__lo0bits+0x32>
80007408:	ed b8 00 00 	bld	r8,0x0
8000740c:	c0 21       	brne	80007410 <__lo0bits+0x12>
8000740e:	5e fd       	retal	0
80007410:	10 9b       	mov	r11,r8
80007412:	f0 0a 16 01 	lsr	r10,r8,0x1
80007416:	e2 1b 00 02 	andl	r11,0x2,COH
8000741a:	a3 88       	lsr	r8,0x2
8000741c:	58 0b       	cp.w	r11,0
8000741e:	f3 fa 1a 00 	st.wne	r9[0x0],r10
80007422:	f9 bc 01 01 	movne	r12,1
80007426:	f3 f8 0a 00 	st.weq	r9[0x0],r8
8000742a:	f9 bc 00 02 	moveq	r12,2
8000742e:	5e fc       	retal	r12
80007430:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80007434:	f0 0b 16 10 	lsr	r11,r8,0x10
80007438:	58 0a       	cp.w	r10,0
8000743a:	f6 08 17 00 	moveq	r8,r11
8000743e:	f9 bc 00 10 	moveq	r12,16
80007442:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
80007446:	f0 0a 16 08 	lsr	r10,r8,0x8
8000744a:	58 0b       	cp.w	r11,0
8000744c:	f7 bc 00 f8 	subeq	r12,-8
80007450:	f4 08 17 00 	moveq	r8,r10
80007454:	f7 d8 c0 04 	bfextu	r11,r8,0x0,0x4
80007458:	f0 0a 16 04 	lsr	r10,r8,0x4
8000745c:	58 0b       	cp.w	r11,0
8000745e:	f7 bc 00 fc 	subeq	r12,-4
80007462:	f4 08 17 00 	moveq	r8,r10
80007466:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
8000746a:	f0 0a 16 02 	lsr	r10,r8,0x2
8000746e:	58 0b       	cp.w	r11,0
80007470:	f7 bc 00 fe 	subeq	r12,-2
80007474:	f4 08 17 00 	moveq	r8,r10
80007478:	ed b8 00 00 	bld	r8,0x0
8000747c:	c0 60       	breq	80007488 <__lo0bits+0x8a>
8000747e:	a1 98       	lsr	r8,0x1
80007480:	c0 31       	brne	80007486 <__lo0bits+0x88>
80007482:	32 0c       	mov	r12,32
80007484:	5e fc       	retal	r12
80007486:	2f fc       	sub	r12,-1
80007488:	93 08       	st.w	r9[0x0],r8
8000748a:	5e fc       	retal	r12

8000748c <__mcmp>:
8000748c:	d4 01       	pushm	lr
8000748e:	18 98       	mov	r8,r12
80007490:	76 49       	ld.w	r9,r11[0x10]
80007492:	78 4c       	ld.w	r12,r12[0x10]
80007494:	12 1c       	sub	r12,r9
80007496:	c1 31       	brne	800074bc <__mcmp+0x30>
80007498:	2f b9       	sub	r9,-5
8000749a:	a3 69       	lsl	r9,0x2
8000749c:	12 0b       	add	r11,r9
8000749e:	f0 09 00 09 	add	r9,r8,r9
800074a2:	2e c8       	sub	r8,-20
800074a4:	13 4e       	ld.w	lr,--r9
800074a6:	17 4a       	ld.w	r10,--r11
800074a8:	14 3e       	cp.w	lr,r10
800074aa:	c0 60       	breq	800074b6 <__mcmp+0x2a>
800074ac:	f9 bc 03 ff 	movlo	r12,-1
800074b0:	f9 bc 02 01 	movhs	r12,1
800074b4:	d8 02       	popm	pc
800074b6:	10 39       	cp.w	r9,r8
800074b8:	fe 9b ff f6 	brhi	800074a4 <__mcmp+0x18>
800074bc:	d8 02       	popm	pc
800074be:	d7 03       	nop

800074c0 <_Bfree>:
800074c0:	d4 21       	pushm	r4-r7,lr
800074c2:	18 97       	mov	r7,r12
800074c4:	16 95       	mov	r5,r11
800074c6:	78 96       	ld.w	r6,r12[0x24]
800074c8:	58 06       	cp.w	r6,0
800074ca:	c0 91       	brne	800074dc <_Bfree+0x1c>
800074cc:	31 0c       	mov	r12,16
800074ce:	fe b0 fd 15 	rcall	80006ef8 <malloc>
800074d2:	99 36       	st.w	r12[0xc],r6
800074d4:	8f 9c       	st.w	r7[0x24],r12
800074d6:	99 16       	st.w	r12[0x4],r6
800074d8:	99 26       	st.w	r12[0x8],r6
800074da:	99 06       	st.w	r12[0x0],r6
800074dc:	58 05       	cp.w	r5,0
800074de:	c0 90       	breq	800074f0 <_Bfree+0x30>
800074e0:	6a 19       	ld.w	r9,r5[0x4]
800074e2:	6e 98       	ld.w	r8,r7[0x24]
800074e4:	70 38       	ld.w	r8,r8[0xc]
800074e6:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
800074ea:	8b 0a       	st.w	r5[0x0],r10
800074ec:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
800074f0:	d8 22       	popm	r4-r7,pc
800074f2:	d7 03       	nop

800074f4 <_Balloc>:
800074f4:	d4 21       	pushm	r4-r7,lr
800074f6:	18 97       	mov	r7,r12
800074f8:	16 96       	mov	r6,r11
800074fa:	78 95       	ld.w	r5,r12[0x24]
800074fc:	58 05       	cp.w	r5,0
800074fe:	c0 91       	brne	80007510 <_Balloc+0x1c>
80007500:	31 0c       	mov	r12,16
80007502:	fe b0 fc fb 	rcall	80006ef8 <malloc>
80007506:	99 35       	st.w	r12[0xc],r5
80007508:	8f 9c       	st.w	r7[0x24],r12
8000750a:	99 15       	st.w	r12[0x4],r5
8000750c:	99 25       	st.w	r12[0x8],r5
8000750e:	99 05       	st.w	r12[0x0],r5
80007510:	6e 95       	ld.w	r5,r7[0x24]
80007512:	6a 38       	ld.w	r8,r5[0xc]
80007514:	58 08       	cp.w	r8,0
80007516:	c0 b1       	brne	8000752c <_Balloc+0x38>
80007518:	31 0a       	mov	r10,16
8000751a:	30 4b       	mov	r11,4
8000751c:	0e 9c       	mov	r12,r7
8000751e:	e0 a0 04 93 	rcall	80007e44 <_calloc_r>
80007522:	8b 3c       	st.w	r5[0xc],r12
80007524:	6e 98       	ld.w	r8,r7[0x24]
80007526:	70 3c       	ld.w	r12,r8[0xc]
80007528:	58 0c       	cp.w	r12,0
8000752a:	c1 b0       	breq	80007560 <_Balloc+0x6c>
8000752c:	6e 98       	ld.w	r8,r7[0x24]
8000752e:	70 38       	ld.w	r8,r8[0xc]
80007530:	f0 06 00 28 	add	r8,r8,r6<<0x2
80007534:	70 0c       	ld.w	r12,r8[0x0]
80007536:	58 0c       	cp.w	r12,0
80007538:	c0 40       	breq	80007540 <_Balloc+0x4c>
8000753a:	78 09       	ld.w	r9,r12[0x0]
8000753c:	91 09       	st.w	r8[0x0],r9
8000753e:	c0 e8       	rjmp	8000755a <_Balloc+0x66>
80007540:	0e 9c       	mov	r12,r7
80007542:	30 17       	mov	r7,1
80007544:	0e 9b       	mov	r11,r7
80007546:	ee 06 09 47 	lsl	r7,r7,r6
8000754a:	ee ca ff fb 	sub	r10,r7,-5
8000754e:	a3 6a       	lsl	r10,0x2
80007550:	e0 a0 04 7a 	rcall	80007e44 <_calloc_r>
80007554:	c0 60       	breq	80007560 <_Balloc+0x6c>
80007556:	99 16       	st.w	r12[0x4],r6
80007558:	99 27       	st.w	r12[0x8],r7
8000755a:	30 08       	mov	r8,0
8000755c:	99 38       	st.w	r12[0xc],r8
8000755e:	99 48       	st.w	r12[0x10],r8
80007560:	d8 22       	popm	r4-r7,pc
80007562:	d7 03       	nop

80007564 <__d2b>:
80007564:	d4 31       	pushm	r0-r7,lr
80007566:	20 2d       	sub	sp,8
80007568:	16 93       	mov	r3,r11
8000756a:	12 96       	mov	r6,r9
8000756c:	10 95       	mov	r5,r8
8000756e:	14 92       	mov	r2,r10
80007570:	30 1b       	mov	r11,1
80007572:	cc 1f       	rcall	800074f4 <_Balloc>
80007574:	f3 d3 c0 14 	bfextu	r9,r3,0x0,0x14
80007578:	50 09       	stdsp	sp[0x0],r9
8000757a:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
8000757e:	b5 a9       	sbr	r9,0x14
80007580:	f0 01 16 14 	lsr	r1,r8,0x14
80007584:	fb f9 1a 00 	st.wne	sp[0x0],r9
80007588:	18 94       	mov	r4,r12
8000758a:	58 02       	cp.w	r2,0
8000758c:	c1 d0       	breq	800075c6 <__d2b+0x62>
8000758e:	fa cc ff f8 	sub	r12,sp,-8
80007592:	18 d2       	st.w	--r12,r2
80007594:	c3 5f       	rcall	800073fe <__lo0bits>
80007596:	40 18       	lddsp	r8,sp[0x4]
80007598:	c0 d0       	breq	800075b2 <__d2b+0x4e>
8000759a:	40 09       	lddsp	r9,sp[0x0]
8000759c:	f8 0a 11 20 	rsub	r10,r12,32
800075a0:	f2 0a 09 4a 	lsl	r10,r9,r10
800075a4:	f5 e8 10 08 	or	r8,r10,r8
800075a8:	89 58       	st.w	r4[0x14],r8
800075aa:	f2 0c 0a 49 	lsr	r9,r9,r12
800075ae:	50 09       	stdsp	sp[0x0],r9
800075b0:	c0 28       	rjmp	800075b4 <__d2b+0x50>
800075b2:	89 58       	st.w	r4[0x14],r8
800075b4:	40 08       	lddsp	r8,sp[0x0]
800075b6:	58 08       	cp.w	r8,0
800075b8:	f9 b3 01 02 	movne	r3,2
800075bc:	f9 b3 00 01 	moveq	r3,1
800075c0:	89 68       	st.w	r4[0x18],r8
800075c2:	89 43       	st.w	r4[0x10],r3
800075c4:	c0 88       	rjmp	800075d4 <__d2b+0x70>
800075c6:	1a 9c       	mov	r12,sp
800075c8:	c1 bf       	rcall	800073fe <__lo0bits>
800075ca:	30 13       	mov	r3,1
800075cc:	40 08       	lddsp	r8,sp[0x0]
800075ce:	2e 0c       	sub	r12,-32
800075d0:	89 43       	st.w	r4[0x10],r3
800075d2:	89 58       	st.w	r4[0x14],r8
800075d4:	58 01       	cp.w	r1,0
800075d6:	c0 90       	breq	800075e8 <__d2b+0x84>
800075d8:	e2 c1 04 33 	sub	r1,r1,1075
800075dc:	18 01       	add	r1,r12
800075de:	8d 01       	st.w	r6[0x0],r1
800075e0:	f8 0c 11 35 	rsub	r12,r12,53
800075e4:	8b 0c       	st.w	r5[0x0],r12
800075e6:	c0 c8       	rjmp	800075fe <__d2b+0x9a>
800075e8:	e6 c8 ff fc 	sub	r8,r3,-4
800075ec:	f8 cc 04 32 	sub	r12,r12,1074
800075f0:	a5 73       	lsl	r3,0x5
800075f2:	8d 0c       	st.w	r6[0x0],r12
800075f4:	e8 08 03 2c 	ld.w	r12,r4[r8<<0x2]
800075f8:	cd 3e       	rcall	8000739e <__hi0bits>
800075fa:	18 13       	sub	r3,r12
800075fc:	8b 03       	st.w	r5[0x0],r3
800075fe:	08 9c       	mov	r12,r4
80007600:	2f ed       	sub	sp,-8
80007602:	d8 32       	popm	r0-r7,pc

80007604 <__mdiff>:
80007604:	d4 31       	pushm	r0-r7,lr
80007606:	74 48       	ld.w	r8,r10[0x10]
80007608:	76 45       	ld.w	r5,r11[0x10]
8000760a:	16 97       	mov	r7,r11
8000760c:	14 96       	mov	r6,r10
8000760e:	10 15       	sub	r5,r8
80007610:	c1 31       	brne	80007636 <__mdiff+0x32>
80007612:	2f b8       	sub	r8,-5
80007614:	ee ce ff ec 	sub	lr,r7,-20
80007618:	a3 68       	lsl	r8,0x2
8000761a:	f4 08 00 0b 	add	r11,r10,r8
8000761e:	ee 08 00 08 	add	r8,r7,r8
80007622:	11 4a       	ld.w	r10,--r8
80007624:	17 49       	ld.w	r9,--r11
80007626:	12 3a       	cp.w	r10,r9
80007628:	c0 30       	breq	8000762e <__mdiff+0x2a>
8000762a:	c0 e2       	brcc	80007646 <__mdiff+0x42>
8000762c:	c0 78       	rjmp	8000763a <__mdiff+0x36>
8000762e:	1c 38       	cp.w	r8,lr
80007630:	fe 9b ff f9 	brhi	80007622 <__mdiff+0x1e>
80007634:	c4 98       	rjmp	800076c6 <__mdiff+0xc2>
80007636:	58 05       	cp.w	r5,0
80007638:	c0 64       	brge	80007644 <__mdiff+0x40>
8000763a:	0e 98       	mov	r8,r7
8000763c:	30 15       	mov	r5,1
8000763e:	0c 97       	mov	r7,r6
80007640:	10 96       	mov	r6,r8
80007642:	c0 28       	rjmp	80007646 <__mdiff+0x42>
80007644:	30 05       	mov	r5,0
80007646:	6e 1b       	ld.w	r11,r7[0x4]
80007648:	c5 6f       	rcall	800074f4 <_Balloc>
8000764a:	6e 49       	ld.w	r9,r7[0x10]
8000764c:	6c 44       	ld.w	r4,r6[0x10]
8000764e:	99 35       	st.w	r12[0xc],r5
80007650:	2f b4       	sub	r4,-5
80007652:	f2 c5 ff fb 	sub	r5,r9,-5
80007656:	ec 04 00 24 	add	r4,r6,r4<<0x2
8000765a:	ee 05 00 25 	add	r5,r7,r5<<0x2
8000765e:	2e c6       	sub	r6,-20
80007660:	2e c7       	sub	r7,-20
80007662:	f8 c8 ff ec 	sub	r8,r12,-20
80007666:	30 0a       	mov	r10,0
80007668:	0f 0e       	ld.w	lr,r7++
8000766a:	0d 0b       	ld.w	r11,r6++
8000766c:	fc 02 16 10 	lsr	r2,lr,0x10
80007670:	f6 03 16 10 	lsr	r3,r11,0x10
80007674:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80007678:	e4 03 01 03 	sub	r3,r2,r3
8000767c:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80007680:	fc 0b 01 0b 	sub	r11,lr,r11
80007684:	f6 0a 00 0a 	add	r10,r11,r10
80007688:	b0 1a       	st.h	r8[0x2],r10
8000768a:	b1 4a       	asr	r10,0x10
8000768c:	e6 0a 00 0a 	add	r10,r3,r10
80007690:	b0 0a       	st.h	r8[0x0],r10
80007692:	2f c8       	sub	r8,-4
80007694:	b1 4a       	asr	r10,0x10
80007696:	08 36       	cp.w	r6,r4
80007698:	ce 83       	brcs	80007668 <__mdiff+0x64>
8000769a:	c0 d8       	rjmp	800076b4 <__mdiff+0xb0>
8000769c:	0f 0b       	ld.w	r11,r7++
8000769e:	f6 0e 16 10 	lsr	lr,r11,0x10
800076a2:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
800076a6:	16 0a       	add	r10,r11
800076a8:	b0 1a       	st.h	r8[0x2],r10
800076aa:	b1 4a       	asr	r10,0x10
800076ac:	1c 0a       	add	r10,lr
800076ae:	b0 0a       	st.h	r8[0x0],r10
800076b0:	2f c8       	sub	r8,-4
800076b2:	b1 4a       	asr	r10,0x10
800076b4:	0a 37       	cp.w	r7,r5
800076b6:	cf 33       	brcs	8000769c <__mdiff+0x98>
800076b8:	c0 28       	rjmp	800076bc <__mdiff+0xb8>
800076ba:	20 19       	sub	r9,1
800076bc:	11 4a       	ld.w	r10,--r8
800076be:	58 0a       	cp.w	r10,0
800076c0:	cf d0       	breq	800076ba <__mdiff+0xb6>
800076c2:	99 49       	st.w	r12[0x10],r9
800076c4:	d8 32       	popm	r0-r7,pc
800076c6:	30 0b       	mov	r11,0
800076c8:	c1 6f       	rcall	800074f4 <_Balloc>
800076ca:	30 18       	mov	r8,1
800076cc:	99 48       	st.w	r12[0x10],r8
800076ce:	30 08       	mov	r8,0
800076d0:	99 58       	st.w	r12[0x14],r8
800076d2:	d8 32       	popm	r0-r7,pc

800076d4 <__lshift>:
800076d4:	d4 31       	pushm	r0-r7,lr
800076d6:	16 97       	mov	r7,r11
800076d8:	76 46       	ld.w	r6,r11[0x10]
800076da:	f4 02 14 05 	asr	r2,r10,0x5
800076de:	2f f6       	sub	r6,-1
800076e0:	14 93       	mov	r3,r10
800076e2:	18 94       	mov	r4,r12
800076e4:	04 06       	add	r6,r2
800076e6:	76 1b       	ld.w	r11,r11[0x4]
800076e8:	6e 28       	ld.w	r8,r7[0x8]
800076ea:	c0 38       	rjmp	800076f0 <__lshift+0x1c>
800076ec:	2f fb       	sub	r11,-1
800076ee:	a1 78       	lsl	r8,0x1
800076f0:	10 36       	cp.w	r6,r8
800076f2:	fe 99 ff fd 	brgt	800076ec <__lshift+0x18>
800076f6:	08 9c       	mov	r12,r4
800076f8:	cf ee       	rcall	800074f4 <_Balloc>
800076fa:	30 09       	mov	r9,0
800076fc:	18 95       	mov	r5,r12
800076fe:	f8 c8 ff ec 	sub	r8,r12,-20
80007702:	12 9a       	mov	r10,r9
80007704:	c0 38       	rjmp	8000770a <__lshift+0x36>
80007706:	10 aa       	st.w	r8++,r10
80007708:	2f f9       	sub	r9,-1
8000770a:	04 39       	cp.w	r9,r2
8000770c:	cf d5       	brlt	80007706 <__lshift+0x32>
8000770e:	6e 4b       	ld.w	r11,r7[0x10]
80007710:	e7 d3 c0 05 	bfextu	r3,r3,0x0,0x5
80007714:	2f bb       	sub	r11,-5
80007716:	ee c9 ff ec 	sub	r9,r7,-20
8000771a:	ee 0b 00 2b 	add	r11,r7,r11<<0x2
8000771e:	58 03       	cp.w	r3,0
80007720:	c1 30       	breq	80007746 <__lshift+0x72>
80007722:	e6 0c 11 20 	rsub	r12,r3,32
80007726:	30 0a       	mov	r10,0
80007728:	72 02       	ld.w	r2,r9[0x0]
8000772a:	e4 03 09 42 	lsl	r2,r2,r3
8000772e:	04 4a       	or	r10,r2
80007730:	10 aa       	st.w	r8++,r10
80007732:	13 0a       	ld.w	r10,r9++
80007734:	f4 0c 0a 4a 	lsr	r10,r10,r12
80007738:	16 39       	cp.w	r9,r11
8000773a:	cf 73       	brcs	80007728 <__lshift+0x54>
8000773c:	91 0a       	st.w	r8[0x0],r10
8000773e:	58 0a       	cp.w	r10,0
80007740:	c0 70       	breq	8000774e <__lshift+0x7a>
80007742:	2f f6       	sub	r6,-1
80007744:	c0 58       	rjmp	8000774e <__lshift+0x7a>
80007746:	13 0a       	ld.w	r10,r9++
80007748:	10 aa       	st.w	r8++,r10
8000774a:	16 39       	cp.w	r9,r11
8000774c:	cf d3       	brcs	80007746 <__lshift+0x72>
8000774e:	08 9c       	mov	r12,r4
80007750:	20 16       	sub	r6,1
80007752:	0e 9b       	mov	r11,r7
80007754:	8b 46       	st.w	r5[0x10],r6
80007756:	cb 5e       	rcall	800074c0 <_Bfree>
80007758:	0a 9c       	mov	r12,r5
8000775a:	d8 32       	popm	r0-r7,pc

8000775c <__multiply>:
8000775c:	d4 31       	pushm	r0-r7,lr
8000775e:	20 2d       	sub	sp,8
80007760:	76 49       	ld.w	r9,r11[0x10]
80007762:	74 48       	ld.w	r8,r10[0x10]
80007764:	16 96       	mov	r6,r11
80007766:	14 95       	mov	r5,r10
80007768:	10 39       	cp.w	r9,r8
8000776a:	ec 08 17 50 	movlt	r8,r6
8000776e:	ea 06 17 50 	movlt	r6,r5
80007772:	f0 05 17 50 	movlt	r5,r8
80007776:	6c 28       	ld.w	r8,r6[0x8]
80007778:	76 43       	ld.w	r3,r11[0x10]
8000777a:	74 42       	ld.w	r2,r10[0x10]
8000777c:	76 1b       	ld.w	r11,r11[0x4]
8000777e:	e4 03 00 07 	add	r7,r2,r3
80007782:	10 37       	cp.w	r7,r8
80007784:	f7 bb 09 ff 	subgt	r11,-1
80007788:	cb 6e       	rcall	800074f4 <_Balloc>
8000778a:	ee c4 ff fb 	sub	r4,r7,-5
8000778e:	f8 c9 ff ec 	sub	r9,r12,-20
80007792:	f8 04 00 24 	add	r4,r12,r4<<0x2
80007796:	30 0a       	mov	r10,0
80007798:	12 98       	mov	r8,r9
8000779a:	c0 28       	rjmp	8000779e <__multiply+0x42>
8000779c:	10 aa       	st.w	r8++,r10
8000779e:	08 38       	cp.w	r8,r4
800077a0:	cf e3       	brcs	8000779c <__multiply+0x40>
800077a2:	2f b3       	sub	r3,-5
800077a4:	2f b2       	sub	r2,-5
800077a6:	ec 03 00 23 	add	r3,r6,r3<<0x2
800077aa:	ea 02 00 22 	add	r2,r5,r2<<0x2
800077ae:	ec cb ff ec 	sub	r11,r6,-20
800077b2:	50 12       	stdsp	sp[0x4],r2
800077b4:	ea ca ff ec 	sub	r10,r5,-20
800077b8:	c4 48       	rjmp	80007840 <__multiply+0xe4>
800077ba:	94 95       	ld.uh	r5,r10[0x2]
800077bc:	58 05       	cp.w	r5,0
800077be:	c2 00       	breq	800077fe <__multiply+0xa2>
800077c0:	12 98       	mov	r8,r9
800077c2:	16 96       	mov	r6,r11
800077c4:	30 0e       	mov	lr,0
800077c6:	50 09       	stdsp	sp[0x0],r9
800077c8:	0d 02       	ld.w	r2,r6++
800077ca:	e4 00 16 10 	lsr	r0,r2,0x10
800077ce:	70 01       	ld.w	r1,r8[0x0]
800077d0:	70 09       	ld.w	r9,r8[0x0]
800077d2:	b1 81       	lsr	r1,0x10
800077d4:	e5 d2 c0 10 	bfextu	r2,r2,0x0,0x10
800077d8:	e0 05 03 41 	mac	r1,r0,r5
800077dc:	ab 32       	mul	r2,r5
800077de:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
800077e2:	00 02       	add	r2,r0
800077e4:	e4 0e 00 0e 	add	lr,r2,lr
800077e8:	b0 1e       	st.h	r8[0x2],lr
800077ea:	b1 8e       	lsr	lr,0x10
800077ec:	1c 01       	add	r1,lr
800077ee:	b0 01       	st.h	r8[0x0],r1
800077f0:	e2 0e 16 10 	lsr	lr,r1,0x10
800077f4:	2f c8       	sub	r8,-4
800077f6:	06 36       	cp.w	r6,r3
800077f8:	ce 83       	brcs	800077c8 <__multiply+0x6c>
800077fa:	40 09       	lddsp	r9,sp[0x0]
800077fc:	91 0e       	st.w	r8[0x0],lr
800077fe:	94 86       	ld.uh	r6,r10[0x0]
80007800:	58 06       	cp.w	r6,0
80007802:	c1 d0       	breq	8000783c <__multiply+0xe0>
80007804:	72 02       	ld.w	r2,r9[0x0]
80007806:	12 98       	mov	r8,r9
80007808:	16 9e       	mov	lr,r11
8000780a:	30 05       	mov	r5,0
8000780c:	b0 12       	st.h	r8[0x2],r2
8000780e:	1d 01       	ld.w	r1,lr++
80007810:	90 82       	ld.uh	r2,r8[0x0]
80007812:	e1 d1 c0 10 	bfextu	r0,r1,0x0,0x10
80007816:	ad 30       	mul	r0,r6
80007818:	e0 02 00 02 	add	r2,r0,r2
8000781c:	e4 05 00 05 	add	r5,r2,r5
80007820:	b0 05       	st.h	r8[0x0],r5
80007822:	b1 85       	lsr	r5,0x10
80007824:	b1 81       	lsr	r1,0x10
80007826:	2f c8       	sub	r8,-4
80007828:	ad 31       	mul	r1,r6
8000782a:	90 92       	ld.uh	r2,r8[0x2]
8000782c:	e2 02 00 02 	add	r2,r1,r2
80007830:	0a 02       	add	r2,r5
80007832:	e4 05 16 10 	lsr	r5,r2,0x10
80007836:	06 3e       	cp.w	lr,r3
80007838:	ce a3       	brcs	8000780c <__multiply+0xb0>
8000783a:	91 02       	st.w	r8[0x0],r2
8000783c:	2f ca       	sub	r10,-4
8000783e:	2f c9       	sub	r9,-4
80007840:	40 18       	lddsp	r8,sp[0x4]
80007842:	10 3a       	cp.w	r10,r8
80007844:	cb b3       	brcs	800077ba <__multiply+0x5e>
80007846:	c0 28       	rjmp	8000784a <__multiply+0xee>
80007848:	20 17       	sub	r7,1
8000784a:	58 07       	cp.w	r7,0
8000784c:	e0 8a 00 05 	brle	80007856 <__multiply+0xfa>
80007850:	09 48       	ld.w	r8,--r4
80007852:	58 08       	cp.w	r8,0
80007854:	cf a0       	breq	80007848 <__multiply+0xec>
80007856:	99 47       	st.w	r12[0x10],r7
80007858:	2f ed       	sub	sp,-8
8000785a:	d8 32       	popm	r0-r7,pc

8000785c <__i2b>:
8000785c:	d4 21       	pushm	r4-r7,lr
8000785e:	16 97       	mov	r7,r11
80007860:	30 1b       	mov	r11,1
80007862:	c4 9e       	rcall	800074f4 <_Balloc>
80007864:	30 19       	mov	r9,1
80007866:	99 57       	st.w	r12[0x14],r7
80007868:	99 49       	st.w	r12[0x10],r9
8000786a:	d8 22       	popm	r4-r7,pc

8000786c <__multadd>:
8000786c:	d4 31       	pushm	r0-r7,lr
8000786e:	30 08       	mov	r8,0
80007870:	12 95       	mov	r5,r9
80007872:	16 97       	mov	r7,r11
80007874:	18 96       	mov	r6,r12
80007876:	76 44       	ld.w	r4,r11[0x10]
80007878:	f6 c9 ff ec 	sub	r9,r11,-20
8000787c:	72 0b       	ld.w	r11,r9[0x0]
8000787e:	f6 0c 16 10 	lsr	r12,r11,0x10
80007882:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80007886:	f4 0c 02 4c 	mul	r12,r10,r12
8000788a:	f4 0b 03 45 	mac	r5,r10,r11
8000788e:	f7 d5 c0 10 	bfextu	r11,r5,0x0,0x10
80007892:	b1 85       	lsr	r5,0x10
80007894:	18 05       	add	r5,r12
80007896:	ea 0c 15 10 	lsl	r12,r5,0x10
8000789a:	f8 0b 00 0b 	add	r11,r12,r11
8000789e:	12 ab       	st.w	r9++,r11
800078a0:	2f f8       	sub	r8,-1
800078a2:	b1 85       	lsr	r5,0x10
800078a4:	08 38       	cp.w	r8,r4
800078a6:	ce b5       	brlt	8000787c <__multadd+0x10>
800078a8:	58 05       	cp.w	r5,0
800078aa:	c1 c0       	breq	800078e2 <__multadd+0x76>
800078ac:	6e 28       	ld.w	r8,r7[0x8]
800078ae:	10 34       	cp.w	r4,r8
800078b0:	c1 35       	brlt	800078d6 <__multadd+0x6a>
800078b2:	6e 1b       	ld.w	r11,r7[0x4]
800078b4:	0c 9c       	mov	r12,r6
800078b6:	2f fb       	sub	r11,-1
800078b8:	c1 ee       	rcall	800074f4 <_Balloc>
800078ba:	6e 4a       	ld.w	r10,r7[0x10]
800078bc:	ee cb ff f4 	sub	r11,r7,-12
800078c0:	18 93       	mov	r3,r12
800078c2:	2f ea       	sub	r10,-2
800078c4:	2f 4c       	sub	r12,-12
800078c6:	a3 6a       	lsl	r10,0x2
800078c8:	fe b0 de 36 	rcall	80003534 <memcpy>
800078cc:	0e 9b       	mov	r11,r7
800078ce:	0c 9c       	mov	r12,r6
800078d0:	fe b0 fd f8 	rcall	800074c0 <_Bfree>
800078d4:	06 97       	mov	r7,r3
800078d6:	e8 c8 ff ff 	sub	r8,r4,-1
800078da:	2f b4       	sub	r4,-5
800078dc:	8f 48       	st.w	r7[0x10],r8
800078de:	ee 04 09 25 	st.w	r7[r4<<0x2],r5
800078e2:	0e 9c       	mov	r12,r7
800078e4:	d8 32       	popm	r0-r7,pc
800078e6:	d7 03       	nop

800078e8 <__pow5mult>:
800078e8:	d4 31       	pushm	r0-r7,lr
800078ea:	14 96       	mov	r6,r10
800078ec:	18 97       	mov	r7,r12
800078ee:	16 94       	mov	r4,r11
800078f0:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
800078f4:	c0 90       	breq	80007906 <__pow5mult+0x1e>
800078f6:	20 18       	sub	r8,1
800078f8:	fe c9 e0 b0 	sub	r9,pc,-8016
800078fc:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
80007900:	30 09       	mov	r9,0
80007902:	cb 5f       	rcall	8000786c <__multadd>
80007904:	18 94       	mov	r4,r12
80007906:	a3 46       	asr	r6,0x2
80007908:	c3 40       	breq	80007970 <__pow5mult+0x88>
8000790a:	6e 95       	ld.w	r5,r7[0x24]
8000790c:	58 05       	cp.w	r5,0
8000790e:	c0 91       	brne	80007920 <__pow5mult+0x38>
80007910:	31 0c       	mov	r12,16
80007912:	fe b0 fa f3 	rcall	80006ef8 <malloc>
80007916:	99 35       	st.w	r12[0xc],r5
80007918:	8f 9c       	st.w	r7[0x24],r12
8000791a:	99 15       	st.w	r12[0x4],r5
8000791c:	99 25       	st.w	r12[0x8],r5
8000791e:	99 05       	st.w	r12[0x0],r5
80007920:	6e 93       	ld.w	r3,r7[0x24]
80007922:	66 25       	ld.w	r5,r3[0x8]
80007924:	58 05       	cp.w	r5,0
80007926:	c0 c1       	brne	8000793e <__pow5mult+0x56>
80007928:	e0 6b 02 71 	mov	r11,625
8000792c:	0e 9c       	mov	r12,r7
8000792e:	c9 7f       	rcall	8000785c <__i2b>
80007930:	87 2c       	st.w	r3[0x8],r12
80007932:	30 08       	mov	r8,0
80007934:	18 95       	mov	r5,r12
80007936:	99 08       	st.w	r12[0x0],r8
80007938:	c0 38       	rjmp	8000793e <__pow5mult+0x56>
8000793a:	06 9c       	mov	r12,r3
8000793c:	18 95       	mov	r5,r12
8000793e:	ed b6 00 00 	bld	r6,0x0
80007942:	c0 b1       	brne	80007958 <__pow5mult+0x70>
80007944:	08 9b       	mov	r11,r4
80007946:	0a 9a       	mov	r10,r5
80007948:	0e 9c       	mov	r12,r7
8000794a:	c0 9f       	rcall	8000775c <__multiply>
8000794c:	08 9b       	mov	r11,r4
8000794e:	18 93       	mov	r3,r12
80007950:	0e 9c       	mov	r12,r7
80007952:	06 94       	mov	r4,r3
80007954:	fe b0 fd b6 	rcall	800074c0 <_Bfree>
80007958:	a1 56       	asr	r6,0x1
8000795a:	c0 b0       	breq	80007970 <__pow5mult+0x88>
8000795c:	6a 03       	ld.w	r3,r5[0x0]
8000795e:	58 03       	cp.w	r3,0
80007960:	ce d1       	brne	8000793a <__pow5mult+0x52>
80007962:	0a 9a       	mov	r10,r5
80007964:	0a 9b       	mov	r11,r5
80007966:	0e 9c       	mov	r12,r7
80007968:	cf ae       	rcall	8000775c <__multiply>
8000796a:	8b 0c       	st.w	r5[0x0],r12
8000796c:	99 03       	st.w	r12[0x0],r3
8000796e:	ce 7b       	rjmp	8000793c <__pow5mult+0x54>
80007970:	08 9c       	mov	r12,r4
80007972:	d8 32       	popm	r0-r7,pc

80007974 <_realloc_r>:
80007974:	d4 31       	pushm	r0-r7,lr
80007976:	20 1d       	sub	sp,4
80007978:	16 94       	mov	r4,r11
8000797a:	18 92       	mov	r2,r12
8000797c:	14 9b       	mov	r11,r10
8000797e:	58 04       	cp.w	r4,0
80007980:	c0 51       	brne	8000798a <_realloc_r+0x16>
80007982:	fe b0 fa c3 	rcall	80006f08 <_malloc_r>
80007986:	18 95       	mov	r5,r12
80007988:	c5 39       	rjmp	80007c2e <_realloc_r+0x2ba>
8000798a:	50 0a       	stdsp	sp[0x0],r10
8000798c:	fe b0 fd 07 	rcall	8000739a <__malloc_lock>
80007990:	40 0b       	lddsp	r11,sp[0x0]
80007992:	f6 c8 ff f5 	sub	r8,r11,-11
80007996:	e8 c1 00 08 	sub	r1,r4,8
8000799a:	10 96       	mov	r6,r8
8000799c:	62 1c       	ld.w	r12,r1[0x4]
8000799e:	e0 16 ff f8 	andl	r6,0xfff8
800079a2:	59 68       	cp.w	r8,22
800079a4:	f9 b6 08 10 	movls	r6,16
800079a8:	16 36       	cp.w	r6,r11
800079aa:	5f 38       	srlo	r8
800079ac:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
800079b0:	c0 50       	breq	800079ba <_realloc_r+0x46>
800079b2:	30 c8       	mov	r8,12
800079b4:	30 05       	mov	r5,0
800079b6:	85 38       	st.w	r2[0xc],r8
800079b8:	c3 b9       	rjmp	80007c2e <_realloc_r+0x2ba>
800079ba:	18 90       	mov	r0,r12
800079bc:	e0 10 ff fc 	andl	r0,0xfffc
800079c0:	0c 30       	cp.w	r0,r6
800079c2:	e0 84 01 0b 	brge	80007bd8 <_realloc_r+0x264>
800079c6:	e0 68 01 04 	mov	r8,260
800079ca:	e2 00 00 09 	add	r9,r1,r0
800079ce:	70 25       	ld.w	r5,r8[0x8]
800079d0:	0a 39       	cp.w	r9,r5
800079d2:	c0 90       	breq	800079e4 <_realloc_r+0x70>
800079d4:	72 1a       	ld.w	r10,r9[0x4]
800079d6:	a1 ca       	cbr	r10,0x0
800079d8:	f2 0a 00 0a 	add	r10,r9,r10
800079dc:	74 1a       	ld.w	r10,r10[0x4]
800079de:	ed ba 00 00 	bld	r10,0x0
800079e2:	c2 20       	breq	80007a26 <_realloc_r+0xb2>
800079e4:	72 1a       	ld.w	r10,r9[0x4]
800079e6:	e0 1a ff fc 	andl	r10,0xfffc
800079ea:	f4 00 00 03 	add	r3,r10,r0
800079ee:	0a 39       	cp.w	r9,r5
800079f0:	c1 31       	brne	80007a16 <_realloc_r+0xa2>
800079f2:	ec c7 ff f0 	sub	r7,r6,-16
800079f6:	0e 33       	cp.w	r3,r7
800079f8:	c1 95       	brlt	80007a2a <_realloc_r+0xb6>
800079fa:	e2 06 00 09 	add	r9,r1,r6
800079fe:	0c 13       	sub	r3,r6
80007a00:	a1 a3       	sbr	r3,0x0
80007a02:	93 13       	st.w	r9[0x4],r3
80007a04:	91 29       	st.w	r8[0x8],r9
80007a06:	04 9c       	mov	r12,r2
80007a08:	62 18       	ld.w	r8,r1[0x4]
80007a0a:	08 95       	mov	r5,r4
80007a0c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007a10:	10 46       	or	r6,r8
80007a12:	83 16       	st.w	r1[0x4],r6
80007a14:	c0 b9       	rjmp	80007c2a <_realloc_r+0x2b6>
80007a16:	0c 33       	cp.w	r3,r6
80007a18:	c0 95       	brlt	80007a2a <_realloc_r+0xb6>
80007a1a:	72 28       	ld.w	r8,r9[0x8]
80007a1c:	02 97       	mov	r7,r1
80007a1e:	72 39       	ld.w	r9,r9[0xc]
80007a20:	93 28       	st.w	r9[0x8],r8
80007a22:	91 39       	st.w	r8[0xc],r9
80007a24:	cd c8       	rjmp	80007bdc <_realloc_r+0x268>
80007a26:	30 0a       	mov	r10,0
80007a28:	14 99       	mov	r9,r10
80007a2a:	ed bc 00 00 	bld	r12,0x0
80007a2e:	e0 80 00 95 	breq	80007b58 <_realloc_r+0x1e4>
80007a32:	62 07       	ld.w	r7,r1[0x0]
80007a34:	e2 07 01 07 	sub	r7,r1,r7
80007a38:	6e 1c       	ld.w	r12,r7[0x4]
80007a3a:	e0 1c ff fc 	andl	r12,0xfffc
80007a3e:	58 09       	cp.w	r9,0
80007a40:	c5 60       	breq	80007aec <_realloc_r+0x178>
80007a42:	f8 00 00 03 	add	r3,r12,r0
80007a46:	0a 39       	cp.w	r9,r5
80007a48:	c4 81       	brne	80007ad8 <_realloc_r+0x164>
80007a4a:	14 03       	add	r3,r10
80007a4c:	ec c9 ff f0 	sub	r9,r6,-16
80007a50:	12 33       	cp.w	r3,r9
80007a52:	c4 d5       	brlt	80007aec <_realloc_r+0x178>
80007a54:	6e 3a       	ld.w	r10,r7[0xc]
80007a56:	6e 29       	ld.w	r9,r7[0x8]
80007a58:	95 29       	st.w	r10[0x8],r9
80007a5a:	93 3a       	st.w	r9[0xc],r10
80007a5c:	ee c5 ff f8 	sub	r5,r7,-8
80007a60:	e0 ca 00 04 	sub	r10,r0,4
80007a64:	e0 4a 00 24 	cp.w	r10,36
80007a68:	e0 8b 00 25 	brhi	80007ab2 <_realloc_r+0x13e>
80007a6c:	0a 99       	mov	r9,r5
80007a6e:	59 3a       	cp.w	r10,19
80007a70:	e0 88 00 1a 	brls	80007aa4 <_realloc_r+0x130>
80007a74:	09 09       	ld.w	r9,r4++
80007a76:	8b 09       	st.w	r5[0x0],r9
80007a78:	09 09       	ld.w	r9,r4++
80007a7a:	8f 39       	st.w	r7[0xc],r9
80007a7c:	ee c9 ff f0 	sub	r9,r7,-16
80007a80:	59 ba       	cp.w	r10,27
80007a82:	e0 88 00 11 	brls	80007aa4 <_realloc_r+0x130>
80007a86:	09 0b       	ld.w	r11,r4++
80007a88:	93 0b       	st.w	r9[0x0],r11
80007a8a:	09 09       	ld.w	r9,r4++
80007a8c:	8f 59       	st.w	r7[0x14],r9
80007a8e:	ee c9 ff e8 	sub	r9,r7,-24
80007a92:	e0 4a 00 24 	cp.w	r10,36
80007a96:	c0 71       	brne	80007aa4 <_realloc_r+0x130>
80007a98:	09 0a       	ld.w	r10,r4++
80007a9a:	93 0a       	st.w	r9[0x0],r10
80007a9c:	ee c9 ff e0 	sub	r9,r7,-32
80007aa0:	09 0a       	ld.w	r10,r4++
80007aa2:	8f 7a       	st.w	r7[0x1c],r10
80007aa4:	09 0a       	ld.w	r10,r4++
80007aa6:	12 aa       	st.w	r9++,r10
80007aa8:	68 0a       	ld.w	r10,r4[0x0]
80007aaa:	93 0a       	st.w	r9[0x0],r10
80007aac:	68 1a       	ld.w	r10,r4[0x4]
80007aae:	93 1a       	st.w	r9[0x4],r10
80007ab0:	c0 78       	rjmp	80007abe <_realloc_r+0x14a>
80007ab2:	50 08       	stdsp	sp[0x0],r8
80007ab4:	08 9b       	mov	r11,r4
80007ab6:	0a 9c       	mov	r12,r5
80007ab8:	fe b0 fc 4b 	rcall	8000734e <memmove>
80007abc:	40 08       	lddsp	r8,sp[0x0]
80007abe:	ee 06 00 09 	add	r9,r7,r6
80007ac2:	0c 13       	sub	r3,r6
80007ac4:	a1 a3       	sbr	r3,0x0
80007ac6:	93 13       	st.w	r9[0x4],r3
80007ac8:	91 29       	st.w	r8[0x8],r9
80007aca:	04 9c       	mov	r12,r2
80007acc:	6e 18       	ld.w	r8,r7[0x4]
80007ace:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007ad2:	10 46       	or	r6,r8
80007ad4:	8f 16       	st.w	r7[0x4],r6
80007ad6:	ca a8       	rjmp	80007c2a <_realloc_r+0x2b6>
80007ad8:	14 03       	add	r3,r10
80007ada:	0c 33       	cp.w	r3,r6
80007adc:	c0 85       	brlt	80007aec <_realloc_r+0x178>
80007ade:	72 28       	ld.w	r8,r9[0x8]
80007ae0:	72 39       	ld.w	r9,r9[0xc]
80007ae2:	93 28       	st.w	r9[0x8],r8
80007ae4:	91 39       	st.w	r8[0xc],r9
80007ae6:	6e 28       	ld.w	r8,r7[0x8]
80007ae8:	6e 39       	ld.w	r9,r7[0xc]
80007aea:	c0 78       	rjmp	80007af8 <_realloc_r+0x184>
80007aec:	f8 00 00 03 	add	r3,r12,r0
80007af0:	0c 33       	cp.w	r3,r6
80007af2:	c3 35       	brlt	80007b58 <_realloc_r+0x1e4>
80007af4:	6e 39       	ld.w	r9,r7[0xc]
80007af6:	6e 28       	ld.w	r8,r7[0x8]
80007af8:	93 28       	st.w	r9[0x8],r8
80007afa:	91 39       	st.w	r8[0xc],r9
80007afc:	e0 ca 00 04 	sub	r10,r0,4
80007b00:	ee cc ff f8 	sub	r12,r7,-8
80007b04:	e0 4a 00 24 	cp.w	r10,36
80007b08:	e0 8b 00 24 	brhi	80007b50 <_realloc_r+0x1dc>
80007b0c:	59 3a       	cp.w	r10,19
80007b0e:	e0 88 00 1a 	brls	80007b42 <_realloc_r+0x1ce>
80007b12:	09 08       	ld.w	r8,r4++
80007b14:	99 08       	st.w	r12[0x0],r8
80007b16:	09 08       	ld.w	r8,r4++
80007b18:	8f 38       	st.w	r7[0xc],r8
80007b1a:	ee cc ff f0 	sub	r12,r7,-16
80007b1e:	59 ba       	cp.w	r10,27
80007b20:	e0 88 00 11 	brls	80007b42 <_realloc_r+0x1ce>
80007b24:	09 08       	ld.w	r8,r4++
80007b26:	99 08       	st.w	r12[0x0],r8
80007b28:	09 08       	ld.w	r8,r4++
80007b2a:	8f 58       	st.w	r7[0x14],r8
80007b2c:	ee cc ff e8 	sub	r12,r7,-24
80007b30:	e0 4a 00 24 	cp.w	r10,36
80007b34:	c0 71       	brne	80007b42 <_realloc_r+0x1ce>
80007b36:	09 08       	ld.w	r8,r4++
80007b38:	99 08       	st.w	r12[0x0],r8
80007b3a:	ee cc ff e0 	sub	r12,r7,-32
80007b3e:	09 08       	ld.w	r8,r4++
80007b40:	8f 78       	st.w	r7[0x1c],r8
80007b42:	09 08       	ld.w	r8,r4++
80007b44:	18 a8       	st.w	r12++,r8
80007b46:	68 08       	ld.w	r8,r4[0x0]
80007b48:	99 08       	st.w	r12[0x0],r8
80007b4a:	68 18       	ld.w	r8,r4[0x4]
80007b4c:	99 18       	st.w	r12[0x4],r8
80007b4e:	c4 78       	rjmp	80007bdc <_realloc_r+0x268>
80007b50:	08 9b       	mov	r11,r4
80007b52:	fe b0 fb fe 	rcall	8000734e <memmove>
80007b56:	c4 38       	rjmp	80007bdc <_realloc_r+0x268>
80007b58:	04 9c       	mov	r12,r2
80007b5a:	fe b0 f9 d7 	rcall	80006f08 <_malloc_r>
80007b5e:	18 95       	mov	r5,r12
80007b60:	c3 a0       	breq	80007bd4 <_realloc_r+0x260>
80007b62:	62 18       	ld.w	r8,r1[0x4]
80007b64:	f8 c9 00 08 	sub	r9,r12,8
80007b68:	a1 c8       	cbr	r8,0x0
80007b6a:	e2 08 00 08 	add	r8,r1,r8
80007b6e:	10 39       	cp.w	r9,r8
80007b70:	c0 71       	brne	80007b7e <_realloc_r+0x20a>
80007b72:	72 13       	ld.w	r3,r9[0x4]
80007b74:	02 97       	mov	r7,r1
80007b76:	e0 13 ff fc 	andl	r3,0xfffc
80007b7a:	00 03       	add	r3,r0
80007b7c:	c3 08       	rjmp	80007bdc <_realloc_r+0x268>
80007b7e:	e0 ca 00 04 	sub	r10,r0,4
80007b82:	e0 4a 00 24 	cp.w	r10,36
80007b86:	e0 8b 00 20 	brhi	80007bc6 <_realloc_r+0x252>
80007b8a:	08 99       	mov	r9,r4
80007b8c:	18 98       	mov	r8,r12
80007b8e:	59 3a       	cp.w	r10,19
80007b90:	e0 88 00 14 	brls	80007bb8 <_realloc_r+0x244>
80007b94:	13 0b       	ld.w	r11,r9++
80007b96:	10 ab       	st.w	r8++,r11
80007b98:	13 0b       	ld.w	r11,r9++
80007b9a:	10 ab       	st.w	r8++,r11
80007b9c:	59 ba       	cp.w	r10,27
80007b9e:	e0 88 00 0d 	brls	80007bb8 <_realloc_r+0x244>
80007ba2:	13 0b       	ld.w	r11,r9++
80007ba4:	10 ab       	st.w	r8++,r11
80007ba6:	13 0b       	ld.w	r11,r9++
80007ba8:	10 ab       	st.w	r8++,r11
80007baa:	e0 4a 00 24 	cp.w	r10,36
80007bae:	c0 51       	brne	80007bb8 <_realloc_r+0x244>
80007bb0:	13 0a       	ld.w	r10,r9++
80007bb2:	10 aa       	st.w	r8++,r10
80007bb4:	13 0a       	ld.w	r10,r9++
80007bb6:	10 aa       	st.w	r8++,r10
80007bb8:	13 0a       	ld.w	r10,r9++
80007bba:	10 aa       	st.w	r8++,r10
80007bbc:	72 0a       	ld.w	r10,r9[0x0]
80007bbe:	91 0a       	st.w	r8[0x0],r10
80007bc0:	72 19       	ld.w	r9,r9[0x4]
80007bc2:	91 19       	st.w	r8[0x4],r9
80007bc4:	c0 48       	rjmp	80007bcc <_realloc_r+0x258>
80007bc6:	08 9b       	mov	r11,r4
80007bc8:	fe b0 fb c3 	rcall	8000734e <memmove>
80007bcc:	08 9b       	mov	r11,r4
80007bce:	04 9c       	mov	r12,r2
80007bd0:	fe b0 f6 f6 	rcall	800069bc <_free_r>
80007bd4:	04 9c       	mov	r12,r2
80007bd6:	c2 a8       	rjmp	80007c2a <_realloc_r+0x2b6>
80007bd8:	00 93       	mov	r3,r0
80007bda:	02 97       	mov	r7,r1
80007bdc:	e6 06 01 09 	sub	r9,r3,r6
80007be0:	6e 18       	ld.w	r8,r7[0x4]
80007be2:	58 f9       	cp.w	r9,15
80007be4:	e0 88 00 16 	brls	80007c10 <_realloc_r+0x29c>
80007be8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007bec:	ed e8 10 08 	or	r8,r6,r8
80007bf0:	8f 18       	st.w	r7[0x4],r8
80007bf2:	12 98       	mov	r8,r9
80007bf4:	a1 a8       	sbr	r8,0x0
80007bf6:	ee 06 00 0b 	add	r11,r7,r6
80007bfa:	f6 09 00 09 	add	r9,r11,r9
80007bfe:	97 18       	st.w	r11[0x4],r8
80007c00:	72 18       	ld.w	r8,r9[0x4]
80007c02:	a1 a8       	sbr	r8,0x0
80007c04:	2f 8b       	sub	r11,-8
80007c06:	93 18       	st.w	r9[0x4],r8
80007c08:	04 9c       	mov	r12,r2
80007c0a:	fe b0 f6 d9 	rcall	800069bc <_free_r>
80007c0e:	c0 b8       	rjmp	80007c24 <_realloc_r+0x2b0>
80007c10:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007c14:	e7 e8 10 08 	or	r8,r3,r8
80007c18:	8f 18       	st.w	r7[0x4],r8
80007c1a:	ee 03 00 03 	add	r3,r7,r3
80007c1e:	66 18       	ld.w	r8,r3[0x4]
80007c20:	a1 a8       	sbr	r8,0x0
80007c22:	87 18       	st.w	r3[0x4],r8
80007c24:	04 9c       	mov	r12,r2
80007c26:	ee c5 ff f8 	sub	r5,r7,-8
80007c2a:	fe b0 fb b9 	rcall	8000739c <__malloc_unlock>
80007c2e:	0a 9c       	mov	r12,r5
80007c30:	2f fd       	sub	sp,-4
80007c32:	d8 32       	popm	r0-r7,pc

80007c34 <__isinfd>:
80007c34:	14 98       	mov	r8,r10
80007c36:	fc 19 7f f0 	movh	r9,0x7ff0
80007c3a:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
80007c3e:	f0 0b 11 00 	rsub	r11,r8,0
80007c42:	f7 e8 10 08 	or	r8,r11,r8
80007c46:	f5 e8 13 f8 	or	r8,r10,r8>>0x1f
80007c4a:	f2 08 01 08 	sub	r8,r9,r8
80007c4e:	f0 0c 11 00 	rsub	r12,r8,0
80007c52:	f9 e8 10 08 	or	r8,r12,r8
80007c56:	f0 0c 14 1f 	asr	r12,r8,0x1f
80007c5a:	2f fc       	sub	r12,-1
80007c5c:	5e fc       	retal	r12

80007c5e <__isnand>:
80007c5e:	14 98       	mov	r8,r10
80007c60:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
80007c64:	f0 0c 11 00 	rsub	r12,r8,0
80007c68:	10 4c       	or	r12,r8
80007c6a:	fc 18 7f f0 	movh	r8,0x7ff0
80007c6e:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
80007c72:	f0 0c 01 0c 	sub	r12,r8,r12
80007c76:	bf 9c       	lsr	r12,0x1f
80007c78:	5e fc       	retal	r12
80007c7a:	d7 03       	nop

80007c7c <_sbrk_r>:
80007c7c:	d4 21       	pushm	r4-r7,lr
80007c7e:	30 08       	mov	r8,0
80007c80:	18 97       	mov	r7,r12
80007c82:	e0 66 06 70 	mov	r6,1648
80007c86:	16 9c       	mov	r12,r11
80007c88:	8d 08       	st.w	r6[0x0],r8
80007c8a:	ca fc       	rcall	80007de8 <_sbrk>
80007c8c:	5b fc       	cp.w	r12,-1
80007c8e:	c0 51       	brne	80007c98 <_sbrk_r+0x1c>
80007c90:	6c 08       	ld.w	r8,r6[0x0]
80007c92:	58 08       	cp.w	r8,0
80007c94:	ef f8 1a 03 	st.wne	r7[0xc],r8
80007c98:	d8 22       	popm	r4-r7,pc
80007c9a:	d7 03       	nop

80007c9c <__sclose>:
80007c9c:	d4 01       	pushm	lr
80007c9e:	96 7b       	ld.sh	r11,r11[0xe]
80007ca0:	cf ec       	rcall	80007e9c <_close_r>
80007ca2:	d8 02       	popm	pc

80007ca4 <__sseek>:
80007ca4:	d4 21       	pushm	r4-r7,lr
80007ca6:	16 97       	mov	r7,r11
80007ca8:	96 7b       	ld.sh	r11,r11[0xe]
80007caa:	c8 5d       	rcall	80007fb4 <_lseek_r>
80007cac:	8e 68       	ld.sh	r8,r7[0xc]
80007cae:	10 99       	mov	r9,r8
80007cb0:	ad c8       	cbr	r8,0xc
80007cb2:	ad a9       	sbr	r9,0xc
80007cb4:	5b fc       	cp.w	r12,-1
80007cb6:	ef f8 0c 06 	st.heq	r7[0xc],r8
80007cba:	ef f9 1c 06 	st.hne	r7[0xc],r9
80007cbe:	ef fc 1a 15 	st.wne	r7[0x54],r12
80007cc2:	d8 22       	popm	r4-r7,pc

80007cc4 <__swrite>:
80007cc4:	d4 21       	pushm	r4-r7,lr
80007cc6:	96 68       	ld.sh	r8,r11[0xc]
80007cc8:	16 97       	mov	r7,r11
80007cca:	14 95       	mov	r5,r10
80007ccc:	12 94       	mov	r4,r9
80007cce:	e2 18 01 00 	andl	r8,0x100,COH
80007cd2:	18 96       	mov	r6,r12
80007cd4:	c0 50       	breq	80007cde <__swrite+0x1a>
80007cd6:	30 29       	mov	r9,2
80007cd8:	30 0a       	mov	r10,0
80007cda:	96 7b       	ld.sh	r11,r11[0xe]
80007cdc:	c6 cd       	rcall	80007fb4 <_lseek_r>
80007cde:	8e 68       	ld.sh	r8,r7[0xc]
80007ce0:	ad c8       	cbr	r8,0xc
80007ce2:	08 99       	mov	r9,r4
80007ce4:	0a 9a       	mov	r10,r5
80007ce6:	8e 7b       	ld.sh	r11,r7[0xe]
80007ce8:	0c 9c       	mov	r12,r6
80007cea:	ae 68       	st.h	r7[0xc],r8
80007cec:	c9 ac       	rcall	80007e20 <_write_r>
80007cee:	d8 22       	popm	r4-r7,pc

80007cf0 <__sread>:
80007cf0:	d4 21       	pushm	r4-r7,lr
80007cf2:	16 97       	mov	r7,r11
80007cf4:	96 7b       	ld.sh	r11,r11[0xe]
80007cf6:	c7 1d       	rcall	80007fd8 <_read_r>
80007cf8:	c0 65       	brlt	80007d04 <__sread+0x14>
80007cfa:	6f 58       	ld.w	r8,r7[0x54]
80007cfc:	18 08       	add	r8,r12
80007cfe:	ef 48 00 54 	st.w	r7[84],r8
80007d02:	d8 22       	popm	r4-r7,pc
80007d04:	8e 68       	ld.sh	r8,r7[0xc]
80007d06:	ad c8       	cbr	r8,0xc
80007d08:	ae 68       	st.h	r7[0xc],r8
80007d0a:	d8 22       	popm	r4-r7,pc

80007d0c <strlen>:
80007d0c:	30 09       	mov	r9,0
80007d0e:	18 98       	mov	r8,r12
80007d10:	c0 28       	rjmp	80007d14 <strlen+0x8>
80007d12:	2f f8       	sub	r8,-1
80007d14:	11 8a       	ld.ub	r10,r8[0x0]
80007d16:	f2 0a 18 00 	cp.b	r10,r9
80007d1a:	cf c1       	brne	80007d12 <strlen+0x6>
80007d1c:	f0 0c 01 0c 	sub	r12,r8,r12
80007d20:	5e fc       	retal	r12
80007d22:	d7 03       	nop

80007d24 <_close>:
80007d24:	30 28       	mov	r8,2
80007d26:	d6 73       	breakpoint
80007d28:	3f fc       	mov	r12,-1
80007d2a:	35 8b       	mov	r11,88
80007d2c:	58 0c       	cp.w	r12,0
80007d2e:	5e 4c       	retge	r12
80007d30:	e0 6a 06 70 	mov	r10,1648
80007d34:	95 0b       	st.w	r10[0x0],r11
80007d36:	5e fc       	retal	r12

80007d38 <_lseek>:
80007d38:	30 58       	mov	r8,5
80007d3a:	d6 73       	breakpoint
80007d3c:	3f fc       	mov	r12,-1
80007d3e:	35 8b       	mov	r11,88
80007d40:	58 0c       	cp.w	r12,0
80007d42:	5e 4c       	retge	r12
80007d44:	e0 6a 06 70 	mov	r10,1648
80007d48:	95 0b       	st.w	r10[0x0],r11
80007d4a:	5e fc       	retal	r12

80007d4c <_read>:
80007d4c:	30 38       	mov	r8,3
80007d4e:	d6 73       	breakpoint
80007d50:	3f fc       	mov	r12,-1
80007d52:	35 8b       	mov	r11,88
80007d54:	58 0c       	cp.w	r12,0
80007d56:	5e 4c       	retge	r12
80007d58:	e0 6a 06 70 	mov	r10,1648
80007d5c:	95 0b       	st.w	r10[0x0],r11
80007d5e:	5e fc       	retal	r12

80007d60 <_write>:
80007d60:	30 48       	mov	r8,4
80007d62:	d6 73       	breakpoint
80007d64:	3f fc       	mov	r12,-1
80007d66:	35 8b       	mov	r11,88
80007d68:	58 0c       	cp.w	r12,0
80007d6a:	5e 4c       	retge	r12
80007d6c:	e0 6a 06 70 	mov	r10,1648
80007d70:	95 0b       	st.w	r10[0x0],r11
80007d72:	5e fc       	retal	r12

80007d74 <isatty>:
80007d74:	30 b8       	mov	r8,11
80007d76:	d6 73       	breakpoint
80007d78:	3f fc       	mov	r12,-1
80007d7a:	35 8b       	mov	r11,88
80007d7c:	58 0c       	cp.w	r12,0
80007d7e:	5e 4c       	retge	r12
80007d80:	e0 6a 06 70 	mov	r10,1648
80007d84:	95 0b       	st.w	r10[0x0],r11
80007d86:	5e fc       	retal	r12

80007d88 <_fstat_host>:
80007d88:	30 98       	mov	r8,9
80007d8a:	d6 73       	breakpoint
80007d8c:	3f fc       	mov	r12,-1
80007d8e:	35 8b       	mov	r11,88
80007d90:	58 0c       	cp.w	r12,0
80007d92:	5e 4c       	retge	r12
80007d94:	e0 6a 06 70 	mov	r10,1648
80007d98:	95 0b       	st.w	r10[0x0],r11
80007d9a:	5e fc       	retal	r12

80007d9c <_fstat>:
80007d9c:	d4 21       	pushm	r4-r7,lr
80007d9e:	21 0d       	sub	sp,64
80007da0:	16 97       	mov	r7,r11
80007da2:	1a 9b       	mov	r11,sp
80007da4:	cf 2f       	rcall	80007d88 <_fstat_host>
80007da6:	c0 34       	brge	80007dac <_fstat+0x10>
80007da8:	3f fc       	mov	r12,-1
80007daa:	c1 c8       	rjmp	80007de2 <_fstat+0x46>
80007dac:	40 08       	lddsp	r8,sp[0x0]
80007dae:	ae 08       	st.h	r7[0x0],r8
80007db0:	40 18       	lddsp	r8,sp[0x4]
80007db2:	ae 18       	st.h	r7[0x2],r8
80007db4:	40 28       	lddsp	r8,sp[0x8]
80007db6:	8f 18       	st.w	r7[0x4],r8
80007db8:	40 38       	lddsp	r8,sp[0xc]
80007dba:	ae 48       	st.h	r7[0x8],r8
80007dbc:	40 48       	lddsp	r8,sp[0x10]
80007dbe:	ae 58       	st.h	r7[0xa],r8
80007dc0:	40 58       	lddsp	r8,sp[0x14]
80007dc2:	ae 68       	st.h	r7[0xc],r8
80007dc4:	40 68       	lddsp	r8,sp[0x18]
80007dc6:	ae 78       	st.h	r7[0xe],r8
80007dc8:	40 88       	lddsp	r8,sp[0x20]
80007dca:	8f 48       	st.w	r7[0x10],r8
80007dcc:	40 a8       	lddsp	r8,sp[0x28]
80007dce:	8f b8       	st.w	r7[0x2c],r8
80007dd0:	40 c8       	lddsp	r8,sp[0x30]
80007dd2:	8f c8       	st.w	r7[0x30],r8
80007dd4:	40 d8       	lddsp	r8,sp[0x34]
80007dd6:	8f 58       	st.w	r7[0x14],r8
80007dd8:	40 e8       	lddsp	r8,sp[0x38]
80007dda:	30 0c       	mov	r12,0
80007ddc:	8f 78       	st.w	r7[0x1c],r8
80007dde:	40 f8       	lddsp	r8,sp[0x3c]
80007de0:	8f 98       	st.w	r7[0x24],r8
80007de2:	2f 0d       	sub	sp,-64
80007de4:	d8 22       	popm	r4-r7,pc
80007de6:	d7 03       	nop

80007de8 <_sbrk>:
80007de8:	d4 01       	pushm	lr
80007dea:	e0 68 06 5c 	mov	r8,1628
80007dee:	70 09       	ld.w	r9,r8[0x0]
80007df0:	58 09       	cp.w	r9,0
80007df2:	c0 41       	brne	80007dfa <_sbrk+0x12>
80007df4:	e0 69 06 78 	mov	r9,1656
80007df8:	91 09       	st.w	r8[0x0],r9
80007dfa:	e0 69 06 5c 	mov	r9,1628
80007dfe:	e0 6a f0 00 	mov	r10,61440
80007e02:	72 08       	ld.w	r8,r9[0x0]
80007e04:	f0 0c 00 0c 	add	r12,r8,r12
80007e08:	14 3c       	cp.w	r12,r10
80007e0a:	e0 8b 00 04 	brhi	80007e12 <_sbrk+0x2a>
80007e0e:	93 0c       	st.w	r9[0x0],r12
80007e10:	c0 58       	rjmp	80007e1a <_sbrk+0x32>
80007e12:	c5 5c       	rcall	80007ebc <__errno>
80007e14:	30 c8       	mov	r8,12
80007e16:	99 08       	st.w	r12[0x0],r8
80007e18:	3f f8       	mov	r8,-1
80007e1a:	10 9c       	mov	r12,r8
80007e1c:	d8 02       	popm	pc
80007e1e:	d7 03       	nop

80007e20 <_write_r>:
80007e20:	d4 21       	pushm	r4-r7,lr
80007e22:	16 98       	mov	r8,r11
80007e24:	18 97       	mov	r7,r12
80007e26:	10 9c       	mov	r12,r8
80007e28:	30 08       	mov	r8,0
80007e2a:	14 9b       	mov	r11,r10
80007e2c:	e0 66 06 70 	mov	r6,1648
80007e30:	12 9a       	mov	r10,r9
80007e32:	8d 08       	st.w	r6[0x0],r8
80007e34:	c9 6f       	rcall	80007d60 <_write>
80007e36:	5b fc       	cp.w	r12,-1
80007e38:	c0 51       	brne	80007e42 <_write_r+0x22>
80007e3a:	6c 08       	ld.w	r8,r6[0x0]
80007e3c:	58 08       	cp.w	r8,0
80007e3e:	ef f8 1a 03 	st.wne	r7[0xc],r8
80007e42:	d8 22       	popm	r4-r7,pc

80007e44 <_calloc_r>:
80007e44:	d4 21       	pushm	r4-r7,lr
80007e46:	f4 0b 02 4b 	mul	r11,r10,r11
80007e4a:	fe b0 f8 5f 	rcall	80006f08 <_malloc_r>
80007e4e:	18 97       	mov	r7,r12
80007e50:	c2 30       	breq	80007e96 <_calloc_r+0x52>
80007e52:	f8 fa ff fc 	ld.w	r10,r12[-4]
80007e56:	e0 1a ff fc 	andl	r10,0xfffc
80007e5a:	20 4a       	sub	r10,4
80007e5c:	e0 4a 00 24 	cp.w	r10,36
80007e60:	e0 8b 00 18 	brhi	80007e90 <_calloc_r+0x4c>
80007e64:	18 98       	mov	r8,r12
80007e66:	59 3a       	cp.w	r10,19
80007e68:	e0 88 00 0f 	brls	80007e86 <_calloc_r+0x42>
80007e6c:	30 09       	mov	r9,0
80007e6e:	10 a9       	st.w	r8++,r9
80007e70:	10 a9       	st.w	r8++,r9
80007e72:	59 ba       	cp.w	r10,27
80007e74:	e0 88 00 09 	brls	80007e86 <_calloc_r+0x42>
80007e78:	10 a9       	st.w	r8++,r9
80007e7a:	10 a9       	st.w	r8++,r9
80007e7c:	e0 4a 00 24 	cp.w	r10,36
80007e80:	c0 31       	brne	80007e86 <_calloc_r+0x42>
80007e82:	10 a9       	st.w	r8++,r9
80007e84:	10 a9       	st.w	r8++,r9
80007e86:	30 09       	mov	r9,0
80007e88:	10 a9       	st.w	r8++,r9
80007e8a:	91 19       	st.w	r8[0x4],r9
80007e8c:	91 09       	st.w	r8[0x0],r9
80007e8e:	c0 48       	rjmp	80007e96 <_calloc_r+0x52>
80007e90:	30 0b       	mov	r11,0
80007e92:	fe b0 fa 7d 	rcall	8000738c <memset>
80007e96:	0e 9c       	mov	r12,r7
80007e98:	d8 22       	popm	r4-r7,pc
80007e9a:	d7 03       	nop

80007e9c <_close_r>:
80007e9c:	d4 21       	pushm	r4-r7,lr
80007e9e:	30 08       	mov	r8,0
80007ea0:	18 97       	mov	r7,r12
80007ea2:	e0 66 06 70 	mov	r6,1648
80007ea6:	16 9c       	mov	r12,r11
80007ea8:	8d 08       	st.w	r6[0x0],r8
80007eaa:	c3 df       	rcall	80007d24 <_close>
80007eac:	5b fc       	cp.w	r12,-1
80007eae:	c0 51       	brne	80007eb8 <_close_r+0x1c>
80007eb0:	6c 08       	ld.w	r8,r6[0x0]
80007eb2:	58 08       	cp.w	r8,0
80007eb4:	ef f8 1a 03 	st.wne	r7[0xc],r8
80007eb8:	d8 22       	popm	r4-r7,pc
80007eba:	d7 03       	nop

80007ebc <__errno>:
80007ebc:	e0 68 01 00 	mov	r8,256
80007ec0:	70 0c       	ld.w	r12,r8[0x0]
80007ec2:	2f 4c       	sub	r12,-12
80007ec4:	5e fc       	retal	r12
80007ec6:	d7 03       	nop

80007ec8 <_fclose_r>:
80007ec8:	d4 21       	pushm	r4-r7,lr
80007eca:	18 96       	mov	r6,r12
80007ecc:	16 97       	mov	r7,r11
80007ece:	58 0b       	cp.w	r11,0
80007ed0:	c0 31       	brne	80007ed6 <_fclose_r+0xe>
80007ed2:	16 95       	mov	r5,r11
80007ed4:	c5 38       	rjmp	80007f7a <_fclose_r+0xb2>
80007ed6:	fe b0 f4 87 	rcall	800067e4 <__sfp_lock_acquire>
80007eda:	58 06       	cp.w	r6,0
80007edc:	c0 70       	breq	80007eea <_fclose_r+0x22>
80007ede:	6c 68       	ld.w	r8,r6[0x18]
80007ee0:	58 08       	cp.w	r8,0
80007ee2:	c0 41       	brne	80007eea <_fclose_r+0x22>
80007ee4:	0c 9c       	mov	r12,r6
80007ee6:	fe b0 f4 d1 	rcall	80006888 <__sinit>
80007eea:	fe c8 e7 42 	sub	r8,pc,-6334
80007eee:	10 37       	cp.w	r7,r8
80007ef0:	c0 31       	brne	80007ef6 <_fclose_r+0x2e>
80007ef2:	6c 07       	ld.w	r7,r6[0x0]
80007ef4:	c0 c8       	rjmp	80007f0c <_fclose_r+0x44>
80007ef6:	fe c8 e7 2e 	sub	r8,pc,-6354
80007efa:	10 37       	cp.w	r7,r8
80007efc:	c0 31       	brne	80007f02 <_fclose_r+0x3a>
80007efe:	6c 17       	ld.w	r7,r6[0x4]
80007f00:	c0 68       	rjmp	80007f0c <_fclose_r+0x44>
80007f02:	fe c8 e7 1a 	sub	r8,pc,-6374
80007f06:	10 37       	cp.w	r7,r8
80007f08:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80007f0c:	8e 69       	ld.sh	r9,r7[0xc]
80007f0e:	30 08       	mov	r8,0
80007f10:	f0 09 19 00 	cp.h	r9,r8
80007f14:	c0 51       	brne	80007f1e <_fclose_r+0x56>
80007f16:	fe b0 f4 68 	rcall	800067e6 <__sfp_lock_release>
80007f1a:	30 05       	mov	r5,0
80007f1c:	c2 f8       	rjmp	80007f7a <_fclose_r+0xb2>
80007f1e:	0e 9b       	mov	r11,r7
80007f20:	0c 9c       	mov	r12,r6
80007f22:	fe b0 f3 db 	rcall	800066d8 <_fflush_r>
80007f26:	6e c8       	ld.w	r8,r7[0x30]
80007f28:	18 95       	mov	r5,r12
80007f2a:	58 08       	cp.w	r8,0
80007f2c:	c0 60       	breq	80007f38 <_fclose_r+0x70>
80007f2e:	6e 8b       	ld.w	r11,r7[0x20]
80007f30:	0c 9c       	mov	r12,r6
80007f32:	5d 18       	icall	r8
80007f34:	f9 b5 05 ff 	movlt	r5,-1
80007f38:	8e 68       	ld.sh	r8,r7[0xc]
80007f3a:	ed b8 00 07 	bld	r8,0x7
80007f3e:	c0 51       	brne	80007f48 <_fclose_r+0x80>
80007f40:	6e 4b       	ld.w	r11,r7[0x10]
80007f42:	0c 9c       	mov	r12,r6
80007f44:	fe b0 f5 3c 	rcall	800069bc <_free_r>
80007f48:	6e db       	ld.w	r11,r7[0x34]
80007f4a:	58 0b       	cp.w	r11,0
80007f4c:	c0 a0       	breq	80007f60 <_fclose_r+0x98>
80007f4e:	ee c8 ff bc 	sub	r8,r7,-68
80007f52:	10 3b       	cp.w	r11,r8
80007f54:	c0 40       	breq	80007f5c <_fclose_r+0x94>
80007f56:	0c 9c       	mov	r12,r6
80007f58:	fe b0 f5 32 	rcall	800069bc <_free_r>
80007f5c:	30 08       	mov	r8,0
80007f5e:	8f d8       	st.w	r7[0x34],r8
80007f60:	6f 2b       	ld.w	r11,r7[0x48]
80007f62:	58 0b       	cp.w	r11,0
80007f64:	c0 70       	breq	80007f72 <_fclose_r+0xaa>
80007f66:	0c 9c       	mov	r12,r6
80007f68:	fe b0 f5 2a 	rcall	800069bc <_free_r>
80007f6c:	30 08       	mov	r8,0
80007f6e:	ef 48 00 48 	st.w	r7[72],r8
80007f72:	30 08       	mov	r8,0
80007f74:	ae 68       	st.h	r7[0xc],r8
80007f76:	fe b0 f4 38 	rcall	800067e6 <__sfp_lock_release>
80007f7a:	0a 9c       	mov	r12,r5
80007f7c:	d8 22       	popm	r4-r7,pc
80007f7e:	d7 03       	nop

80007f80 <fclose>:
80007f80:	d4 01       	pushm	lr
80007f82:	e0 68 01 00 	mov	r8,256
80007f86:	18 9b       	mov	r11,r12
80007f88:	70 0c       	ld.w	r12,r8[0x0]
80007f8a:	c9 ff       	rcall	80007ec8 <_fclose_r>
80007f8c:	d8 02       	popm	pc
80007f8e:	d7 03       	nop

80007f90 <_fstat_r>:
80007f90:	d4 21       	pushm	r4-r7,lr
80007f92:	16 98       	mov	r8,r11
80007f94:	18 97       	mov	r7,r12
80007f96:	10 9c       	mov	r12,r8
80007f98:	30 08       	mov	r8,0
80007f9a:	e0 66 06 70 	mov	r6,1648
80007f9e:	14 9b       	mov	r11,r10
80007fa0:	8d 08       	st.w	r6[0x0],r8
80007fa2:	cf de       	rcall	80007d9c <_fstat>
80007fa4:	5b fc       	cp.w	r12,-1
80007fa6:	c0 51       	brne	80007fb0 <_fstat_r+0x20>
80007fa8:	6c 08       	ld.w	r8,r6[0x0]
80007faa:	58 08       	cp.w	r8,0
80007fac:	ef f8 1a 03 	st.wne	r7[0xc],r8
80007fb0:	d8 22       	popm	r4-r7,pc
80007fb2:	d7 03       	nop

80007fb4 <_lseek_r>:
80007fb4:	d4 21       	pushm	r4-r7,lr
80007fb6:	16 98       	mov	r8,r11
80007fb8:	18 97       	mov	r7,r12
80007fba:	10 9c       	mov	r12,r8
80007fbc:	30 08       	mov	r8,0
80007fbe:	14 9b       	mov	r11,r10
80007fc0:	e0 66 06 70 	mov	r6,1648
80007fc4:	12 9a       	mov	r10,r9
80007fc6:	8d 08       	st.w	r6[0x0],r8
80007fc8:	cb 8e       	rcall	80007d38 <_lseek>
80007fca:	5b fc       	cp.w	r12,-1
80007fcc:	c0 51       	brne	80007fd6 <_lseek_r+0x22>
80007fce:	6c 08       	ld.w	r8,r6[0x0]
80007fd0:	58 08       	cp.w	r8,0
80007fd2:	ef f8 1a 03 	st.wne	r7[0xc],r8
80007fd6:	d8 22       	popm	r4-r7,pc

80007fd8 <_read_r>:
80007fd8:	d4 21       	pushm	r4-r7,lr
80007fda:	16 98       	mov	r8,r11
80007fdc:	18 97       	mov	r7,r12
80007fde:	10 9c       	mov	r12,r8
80007fe0:	30 08       	mov	r8,0
80007fe2:	14 9b       	mov	r11,r10
80007fe4:	e0 66 06 70 	mov	r6,1648
80007fe8:	12 9a       	mov	r10,r9
80007fea:	8d 08       	st.w	r6[0x0],r8
80007fec:	cb 0e       	rcall	80007d4c <_read>
80007fee:	5b fc       	cp.w	r12,-1
80007ff0:	c0 51       	brne	80007ffa <_read_r+0x22>
80007ff2:	6c 08       	ld.w	r8,r6[0x0]
80007ff4:	58 08       	cp.w	r8,0
80007ff6:	ef f8 1a 03 	st.wne	r7[0xc],r8
80007ffa:	d8 22       	popm	r4-r7,pc

80007ffc <__avr32_f64_mul>:
80007ffc:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
80008000:	e0 80 00 dc 	breq	800081b8 <__avr32_f64_mul_op1_zero>
80008004:	d4 21       	pushm	r4-r7,lr
80008006:	f7 e9 20 0e 	eor	lr,r11,r9
8000800a:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
8000800e:	30 15       	mov	r5,1
80008010:	c4 30       	breq	80008096 <__avr32_f64_mul_op1_subnormal>
80008012:	ab 6b       	lsl	r11,0xa
80008014:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
80008018:	ab 6a       	lsl	r10,0xa
8000801a:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
8000801e:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80008022:	c5 c0       	breq	800080da <__avr32_f64_mul_op2_subnormal>
80008024:	a1 78       	lsl	r8,0x1
80008026:	5c f9       	rol	r9
80008028:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
8000802c:	e0 47 07 ff 	cp.w	r7,2047
80008030:	c7 70       	breq	8000811e <__avr32_f64_mul_op_nan_or_inf>
80008032:	e0 46 07 ff 	cp.w	r6,2047
80008036:	c7 40       	breq	8000811e <__avr32_f64_mul_op_nan_or_inf>
80008038:	ee 06 00 0c 	add	r12,r7,r6
8000803c:	e0 2c 03 fe 	sub	r12,1022
80008040:	f6 08 06 44 	mulu.d	r4,r11,r8
80008044:	f4 09 07 44 	macu.d	r4,r10,r9
80008048:	f4 08 06 46 	mulu.d	r6,r10,r8
8000804c:	f6 09 06 4a 	mulu.d	r10,r11,r9
80008050:	08 07       	add	r7,r4
80008052:	f4 05 00 4a 	adc	r10,r10,r5
80008056:	5c 0b       	acr	r11
80008058:	ed bb 00 14 	bld	r11,0x14
8000805c:	c0 50       	breq	80008066 <__avr32_f64_mul+0x6a>
8000805e:	a1 77       	lsl	r7,0x1
80008060:	5c fa       	rol	r10
80008062:	5c fb       	rol	r11
80008064:	20 1c       	sub	r12,1
80008066:	58 0c       	cp.w	r12,0
80008068:	e0 8a 00 6f 	brle	80008146 <__avr32_f64_mul_res_subnormal>
8000806c:	e0 4c 07 ff 	cp.w	r12,2047
80008070:	e0 84 00 9c 	brge	800081a8 <__avr32_f64_mul_res_inf>
80008074:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
80008078:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
8000807c:	ef e6 12 17 	or	r7,r7,r6>>0x1
80008080:	ee 17 80 00 	eorh	r7,0x8000
80008084:	f1 b7 04 20 	satu	r7,0x1
80008088:	0e 0a       	add	r10,r7
8000808a:	5c 0b       	acr	r11
8000808c:	ed be 00 1f 	bld	lr,0x1f
80008090:	ef bb 00 1f 	bst	r11,0x1f
80008094:	d8 22       	popm	r4-r7,pc

80008096 <__avr32_f64_mul_op1_subnormal>:
80008096:	e4 1b 00 0f 	andh	r11,0xf
8000809a:	f4 0c 12 00 	clz	r12,r10
8000809e:	f6 06 12 00 	clz	r6,r11
800080a2:	f7 bc 03 e1 	sublo	r12,-31
800080a6:	f8 06 17 30 	movlo	r6,r12
800080aa:	f7 b6 02 01 	subhs	r6,1
800080ae:	e0 46 00 20 	cp.w	r6,32
800080b2:	c0 d4       	brge	800080cc <__avr32_f64_mul_op1_subnormal+0x36>
800080b4:	ec 0c 11 20 	rsub	r12,r6,32
800080b8:	f6 06 09 4b 	lsl	r11,r11,r6
800080bc:	f4 0c 0a 4c 	lsr	r12,r10,r12
800080c0:	18 4b       	or	r11,r12
800080c2:	f4 06 09 4a 	lsl	r10,r10,r6
800080c6:	20 b6       	sub	r6,11
800080c8:	0c 17       	sub	r7,r6
800080ca:	ca ab       	rjmp	8000801e <__avr32_f64_mul+0x22>
800080cc:	f4 06 09 4b 	lsl	r11,r10,r6
800080d0:	c6 40       	breq	80008198 <__avr32_f64_mul_res_zero>
800080d2:	30 0a       	mov	r10,0
800080d4:	20 b6       	sub	r6,11
800080d6:	0c 17       	sub	r7,r6
800080d8:	ca 3b       	rjmp	8000801e <__avr32_f64_mul+0x22>

800080da <__avr32_f64_mul_op2_subnormal>:
800080da:	e4 19 00 0f 	andh	r9,0xf
800080de:	f0 0c 12 00 	clz	r12,r8
800080e2:	f2 05 12 00 	clz	r5,r9
800080e6:	f7 bc 03 ea 	sublo	r12,-22
800080ea:	f8 05 17 30 	movlo	r5,r12
800080ee:	f7 b5 02 0a 	subhs	r5,10
800080f2:	e0 45 00 20 	cp.w	r5,32
800080f6:	c0 d4       	brge	80008110 <__avr32_f64_mul_op2_subnormal+0x36>
800080f8:	ea 0c 11 20 	rsub	r12,r5,32
800080fc:	f2 05 09 49 	lsl	r9,r9,r5
80008100:	f0 0c 0a 4c 	lsr	r12,r8,r12
80008104:	18 49       	or	r9,r12
80008106:	f0 05 09 48 	lsl	r8,r8,r5
8000810a:	20 25       	sub	r5,2
8000810c:	0a 16       	sub	r6,r5
8000810e:	c8 fb       	rjmp	8000802c <__avr32_f64_mul+0x30>
80008110:	f0 05 09 49 	lsl	r9,r8,r5
80008114:	c4 20       	breq	80008198 <__avr32_f64_mul_res_zero>
80008116:	30 08       	mov	r8,0
80008118:	20 25       	sub	r5,2
8000811a:	0a 16       	sub	r6,r5
8000811c:	c8 8b       	rjmp	8000802c <__avr32_f64_mul+0x30>

8000811e <__avr32_f64_mul_op_nan_or_inf>:
8000811e:	e4 19 00 0f 	andh	r9,0xf
80008122:	e4 1b 00 0f 	andh	r11,0xf
80008126:	14 4b       	or	r11,r10
80008128:	10 49       	or	r9,r8
8000812a:	e0 47 07 ff 	cp.w	r7,2047
8000812e:	c0 91       	brne	80008140 <__avr32_f64_mul_op1_not_naninf>
80008130:	58 0b       	cp.w	r11,0
80008132:	c3 81       	brne	800081a2 <__avr32_f64_mul_res_nan>
80008134:	e0 46 07 ff 	cp.w	r6,2047
80008138:	c3 81       	brne	800081a8 <__avr32_f64_mul_res_inf>
8000813a:	58 09       	cp.w	r9,0
8000813c:	c3 60       	breq	800081a8 <__avr32_f64_mul_res_inf>
8000813e:	c3 28       	rjmp	800081a2 <__avr32_f64_mul_res_nan>

80008140 <__avr32_f64_mul_op1_not_naninf>:
80008140:	58 09       	cp.w	r9,0
80008142:	c3 30       	breq	800081a8 <__avr32_f64_mul_res_inf>
80008144:	c2 f8       	rjmp	800081a2 <__avr32_f64_mul_res_nan>

80008146 <__avr32_f64_mul_res_subnormal>:
80008146:	5c 3c       	neg	r12
80008148:	2f fc       	sub	r12,-1
8000814a:	f1 bc 04 c0 	satu	r12,0x6
8000814e:	e0 4c 00 20 	cp.w	r12,32
80008152:	c1 14       	brge	80008174 <__avr32_f64_mul_res_subnormal+0x2e>
80008154:	f8 08 11 20 	rsub	r8,r12,32
80008158:	0e 46       	or	r6,r7
8000815a:	ee 0c 0a 47 	lsr	r7,r7,r12
8000815e:	f4 08 09 49 	lsl	r9,r10,r8
80008162:	12 47       	or	r7,r9
80008164:	f4 0c 0a 4a 	lsr	r10,r10,r12
80008168:	f6 08 09 49 	lsl	r9,r11,r8
8000816c:	12 4a       	or	r10,r9
8000816e:	f6 0c 0a 4b 	lsr	r11,r11,r12
80008172:	c8 3b       	rjmp	80008078 <__avr32_f64_mul+0x7c>
80008174:	f8 08 11 20 	rsub	r8,r12,32
80008178:	f9 b9 00 00 	moveq	r9,0
8000817c:	c0 30       	breq	80008182 <__avr32_f64_mul_res_subnormal+0x3c>
8000817e:	f6 08 09 49 	lsl	r9,r11,r8
80008182:	0e 46       	or	r6,r7
80008184:	ed ea 10 16 	or	r6,r6,r10<<0x1
80008188:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000818c:	f3 ea 10 07 	or	r7,r9,r10
80008190:	f6 0c 0a 4a 	lsr	r10,r11,r12
80008194:	30 0b       	mov	r11,0
80008196:	c7 1b       	rjmp	80008078 <__avr32_f64_mul+0x7c>

80008198 <__avr32_f64_mul_res_zero>:
80008198:	1c 9b       	mov	r11,lr
8000819a:	e6 1b 80 00 	andh	r11,0x8000,COH
8000819e:	30 0a       	mov	r10,0
800081a0:	d8 22       	popm	r4-r7,pc

800081a2 <__avr32_f64_mul_res_nan>:
800081a2:	3f fb       	mov	r11,-1
800081a4:	3f fa       	mov	r10,-1
800081a6:	d8 22       	popm	r4-r7,pc

800081a8 <__avr32_f64_mul_res_inf>:
800081a8:	f0 6b 00 00 	mov	r11,-1048576
800081ac:	ed be 00 1f 	bld	lr,0x1f
800081b0:	ef bb 00 1f 	bst	r11,0x1f
800081b4:	30 0a       	mov	r10,0
800081b6:	d8 22       	popm	r4-r7,pc

800081b8 <__avr32_f64_mul_op1_zero>:
800081b8:	f7 e9 20 0b 	eor	r11,r11,r9
800081bc:	e6 1b 80 00 	andh	r11,0x8000,COH
800081c0:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
800081c4:	e0 4c 07 ff 	cp.w	r12,2047
800081c8:	5e 1c       	retne	r12
800081ca:	3f fa       	mov	r10,-1
800081cc:	3f fb       	mov	r11,-1
800081ce:	5e fc       	retal	r12

800081d0 <__avr32_f64_sub_from_add>:
800081d0:	ee 19 80 00 	eorh	r9,0x8000

800081d4 <__avr32_f64_sub>:
800081d4:	f7 e9 20 0c 	eor	r12,r11,r9
800081d8:	e0 86 00 ca 	brmi	8000836c <__avr32_f64_add_from_sub>
800081dc:	eb cd 40 e0 	pushm	r5-r7,lr
800081e0:	16 9c       	mov	r12,r11
800081e2:	e6 1c 80 00 	andh	r12,0x8000,COH
800081e6:	bf db       	cbr	r11,0x1f
800081e8:	bf d9       	cbr	r9,0x1f
800081ea:	10 3a       	cp.w	r10,r8
800081ec:	f2 0b 13 00 	cpc	r11,r9
800081f0:	c0 92       	brcc	80008202 <__avr32_f64_sub+0x2e>
800081f2:	16 97       	mov	r7,r11
800081f4:	12 9b       	mov	r11,r9
800081f6:	0e 99       	mov	r9,r7
800081f8:	14 97       	mov	r7,r10
800081fa:	10 9a       	mov	r10,r8
800081fc:	0e 98       	mov	r8,r7
800081fe:	ee 1c 80 00 	eorh	r12,0x8000
80008202:	f6 07 16 14 	lsr	r7,r11,0x14
80008206:	ab 7b       	lsl	r11,0xb
80008208:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
8000820c:	ab 7a       	lsl	r10,0xb
8000820e:	bf bb       	sbr	r11,0x1f
80008210:	f2 06 16 14 	lsr	r6,r9,0x14
80008214:	c4 40       	breq	8000829c <__avr32_f64_sub_opL_subnormal>
80008216:	ab 79       	lsl	r9,0xb
80008218:	f3 e8 13 59 	or	r9,r9,r8>>0x15
8000821c:	ab 78       	lsl	r8,0xb
8000821e:	bf b9       	sbr	r9,0x1f

80008220 <__avr32_f64_sub_opL_subnormal_done>:
80008220:	e0 47 07 ff 	cp.w	r7,2047
80008224:	c4 f0       	breq	800082c2 <__avr32_f64_sub_opH_nan_or_inf>
80008226:	0e 26       	rsub	r6,r7
80008228:	c1 20       	breq	8000824c <__avr32_f64_sub_shift_done>
8000822a:	ec 05 11 20 	rsub	r5,r6,32
8000822e:	e0 46 00 20 	cp.w	r6,32
80008232:	c7 c2       	brcc	8000832a <__avr32_f64_sub_longshift>
80008234:	f0 05 09 4e 	lsl	lr,r8,r5
80008238:	f2 05 09 45 	lsl	r5,r9,r5
8000823c:	f0 06 0a 48 	lsr	r8,r8,r6
80008240:	f2 06 0a 49 	lsr	r9,r9,r6
80008244:	0a 48       	or	r8,r5
80008246:	58 0e       	cp.w	lr,0
80008248:	5f 1e       	srne	lr
8000824a:	1c 48       	or	r8,lr

8000824c <__avr32_f64_sub_shift_done>:
8000824c:	10 1a       	sub	r10,r8
8000824e:	f6 09 01 4b 	sbc	r11,r11,r9
80008252:	f6 06 12 00 	clz	r6,r11
80008256:	c0 e0       	breq	80008272 <__avr32_f64_sub_longnormalize_done>
80008258:	c7 83       	brcs	80008348 <__avr32_f64_sub_longnormalize>
8000825a:	ec 0e 11 20 	rsub	lr,r6,32
8000825e:	f6 06 09 4b 	lsl	r11,r11,r6
80008262:	f4 0e 0a 4e 	lsr	lr,r10,lr
80008266:	1c 4b       	or	r11,lr
80008268:	f4 06 09 4a 	lsl	r10,r10,r6
8000826c:	0c 17       	sub	r7,r6
8000826e:	e0 8a 00 39 	brle	800082e0 <__avr32_f64_sub_subnormal_result>

80008272 <__avr32_f64_sub_longnormalize_done>:
80008272:	f4 09 15 15 	lsl	r9,r10,0x15
80008276:	ab 9a       	lsr	r10,0xb
80008278:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8000827c:	ab 9b       	lsr	r11,0xb
8000827e:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80008282:	18 4b       	or	r11,r12

80008284 <__avr32_f64_sub_round>:
80008284:	fc 17 80 00 	movh	r7,0x8000
80008288:	ed ba 00 00 	bld	r10,0x0
8000828c:	f7 b7 01 ff 	subne	r7,-1
80008290:	0e 39       	cp.w	r9,r7
80008292:	5f 29       	srhs	r9
80008294:	12 0a       	add	r10,r9
80008296:	5c 0b       	acr	r11
80008298:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000829c <__avr32_f64_sub_opL_subnormal>:
8000829c:	ab 79       	lsl	r9,0xb
8000829e:	f3 e8 13 59 	or	r9,r9,r8>>0x15
800082a2:	ab 78       	lsl	r8,0xb
800082a4:	f3 e8 10 0e 	or	lr,r9,r8
800082a8:	f9 b6 01 01 	movne	r6,1
800082ac:	ee 0e 11 00 	rsub	lr,r7,0
800082b0:	f9 b7 00 01 	moveq	r7,1
800082b4:	ef bb 00 1f 	bst	r11,0x1f
800082b8:	f7 ea 10 0e 	or	lr,r11,r10
800082bc:	f9 b7 00 00 	moveq	r7,0
800082c0:	cb 0b       	rjmp	80008220 <__avr32_f64_sub_opL_subnormal_done>

800082c2 <__avr32_f64_sub_opH_nan_or_inf>:
800082c2:	bf db       	cbr	r11,0x1f
800082c4:	f7 ea 10 0e 	or	lr,r11,r10
800082c8:	c0 81       	brne	800082d8 <__avr32_f64_sub_return_nan>
800082ca:	e0 46 07 ff 	cp.w	r6,2047
800082ce:	c0 50       	breq	800082d8 <__avr32_f64_sub_return_nan>
800082d0:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
800082d4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800082d8 <__avr32_f64_sub_return_nan>:
800082d8:	3f fa       	mov	r10,-1
800082da:	3f fb       	mov	r11,-1
800082dc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800082e0 <__avr32_f64_sub_subnormal_result>:
800082e0:	5c 37       	neg	r7
800082e2:	2f f7       	sub	r7,-1
800082e4:	f1 b7 04 c0 	satu	r7,0x6
800082e8:	e0 47 00 20 	cp.w	r7,32
800082ec:	c1 14       	brge	8000830e <__avr32_f64_sub_subnormal_result+0x2e>
800082ee:	ee 08 11 20 	rsub	r8,r7,32
800082f2:	f4 08 09 49 	lsl	r9,r10,r8
800082f6:	5f 16       	srne	r6
800082f8:	f4 07 0a 4a 	lsr	r10,r10,r7
800082fc:	0c 4a       	or	r10,r6
800082fe:	f6 08 09 49 	lsl	r9,r11,r8
80008302:	f5 e9 10 0a 	or	r10,r10,r9
80008306:	f4 07 0a 4b 	lsr	r11,r10,r7
8000830a:	30 07       	mov	r7,0
8000830c:	cb 3b       	rjmp	80008272 <__avr32_f64_sub_longnormalize_done>
8000830e:	ee 08 11 40 	rsub	r8,r7,64
80008312:	f6 08 09 49 	lsl	r9,r11,r8
80008316:	14 49       	or	r9,r10
80008318:	5f 16       	srne	r6
8000831a:	f6 07 0a 4a 	lsr	r10,r11,r7
8000831e:	0c 4a       	or	r10,r6
80008320:	30 0b       	mov	r11,0
80008322:	30 07       	mov	r7,0
80008324:	ca 7b       	rjmp	80008272 <__avr32_f64_sub_longnormalize_done>
80008326:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000832a <__avr32_f64_sub_longshift>:
8000832a:	f1 b6 04 c0 	satu	r6,0x6
8000832e:	f0 0e 17 00 	moveq	lr,r8
80008332:	c0 40       	breq	8000833a <__avr32_f64_sub_longshift+0x10>
80008334:	f2 05 09 4e 	lsl	lr,r9,r5
80008338:	10 4e       	or	lr,r8
8000833a:	f2 06 0a 48 	lsr	r8,r9,r6
8000833e:	30 09       	mov	r9,0
80008340:	58 0e       	cp.w	lr,0
80008342:	5f 1e       	srne	lr
80008344:	1c 48       	or	r8,lr
80008346:	c8 3b       	rjmp	8000824c <__avr32_f64_sub_shift_done>

80008348 <__avr32_f64_sub_longnormalize>:
80008348:	f4 06 12 00 	clz	r6,r10
8000834c:	f9 b7 03 00 	movlo	r7,0
80008350:	f9 b6 03 00 	movlo	r6,0
80008354:	f9 bc 03 00 	movlo	r12,0
80008358:	f7 b6 02 e0 	subhs	r6,-32
8000835c:	f4 06 09 4b 	lsl	r11,r10,r6
80008360:	30 0a       	mov	r10,0
80008362:	0c 17       	sub	r7,r6
80008364:	fe 9a ff be 	brle	800082e0 <__avr32_f64_sub_subnormal_result>
80008368:	c8 5b       	rjmp	80008272 <__avr32_f64_sub_longnormalize_done>
8000836a:	d7 03       	nop

8000836c <__avr32_f64_add_from_sub>:
8000836c:	ee 19 80 00 	eorh	r9,0x8000

80008370 <__avr32_f64_add>:
80008370:	f7 e9 20 0c 	eor	r12,r11,r9
80008374:	fe 96 ff 2e 	brmi	800081d0 <__avr32_f64_sub_from_add>
80008378:	eb cd 40 e0 	pushm	r5-r7,lr
8000837c:	16 9c       	mov	r12,r11
8000837e:	e6 1c 80 00 	andh	r12,0x8000,COH
80008382:	bf db       	cbr	r11,0x1f
80008384:	bf d9       	cbr	r9,0x1f
80008386:	12 3b       	cp.w	r11,r9
80008388:	c0 72       	brcc	80008396 <__avr32_f64_add+0x26>
8000838a:	16 97       	mov	r7,r11
8000838c:	12 9b       	mov	r11,r9
8000838e:	0e 99       	mov	r9,r7
80008390:	14 97       	mov	r7,r10
80008392:	10 9a       	mov	r10,r8
80008394:	0e 98       	mov	r8,r7
80008396:	30 0e       	mov	lr,0
80008398:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
8000839c:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
800083a0:	b5 ab       	sbr	r11,0x14
800083a2:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
800083a6:	c6 20       	breq	8000846a <__avr32_f64_add_op2_subnormal>
800083a8:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
800083ac:	b5 a9       	sbr	r9,0x14
800083ae:	e0 47 07 ff 	cp.w	r7,2047
800083b2:	c2 80       	breq	80008402 <__avr32_f64_add_opH_nan_or_inf>
800083b4:	0e 26       	rsub	r6,r7
800083b6:	c1 20       	breq	800083da <__avr32_f64_add_shift_done>
800083b8:	e0 46 00 36 	cp.w	r6,54
800083bc:	c1 52       	brcc	800083e6 <__avr32_f64_add_res_of_done>
800083be:	ec 05 11 20 	rsub	r5,r6,32
800083c2:	e0 46 00 20 	cp.w	r6,32
800083c6:	c3 52       	brcc	80008430 <__avr32_f64_add_longshift>
800083c8:	f0 05 09 4e 	lsl	lr,r8,r5
800083cc:	f2 05 09 45 	lsl	r5,r9,r5
800083d0:	f0 06 0a 48 	lsr	r8,r8,r6
800083d4:	f2 06 0a 49 	lsr	r9,r9,r6
800083d8:	0a 48       	or	r8,r5

800083da <__avr32_f64_add_shift_done>:
800083da:	10 0a       	add	r10,r8
800083dc:	f6 09 00 4b 	adc	r11,r11,r9
800083e0:	ed bb 00 15 	bld	r11,0x15
800083e4:	c3 40       	breq	8000844c <__avr32_f64_add_res_of>

800083e6 <__avr32_f64_add_res_of_done>:
800083e6:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
800083ea:	18 4b       	or	r11,r12

800083ec <__avr32_f64_add_round>:
800083ec:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
800083f0:	18 4e       	or	lr,r12
800083f2:	ee 1e 80 00 	eorh	lr,0x8000
800083f6:	f1 be 04 20 	satu	lr,0x1
800083fa:	1c 0a       	add	r10,lr
800083fc:	5c 0b       	acr	r11
800083fe:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008402 <__avr32_f64_add_opH_nan_or_inf>:
80008402:	b5 cb       	cbr	r11,0x14
80008404:	f7 ea 10 0e 	or	lr,r11,r10
80008408:	c1 01       	brne	80008428 <__avr32_f64_add_return_nan>
8000840a:	e0 46 07 ff 	cp.w	r6,2047
8000840e:	c0 30       	breq	80008414 <__avr32_f64_add_opL_nan_or_inf>
80008410:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008414 <__avr32_f64_add_opL_nan_or_inf>:
80008414:	b5 c9       	cbr	r9,0x14
80008416:	f3 e8 10 0e 	or	lr,r9,r8
8000841a:	c0 71       	brne	80008428 <__avr32_f64_add_return_nan>
8000841c:	30 0a       	mov	r10,0
8000841e:	fc 1b 7f f0 	movh	r11,0x7ff0
80008422:	18 4b       	or	r11,r12
80008424:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008428 <__avr32_f64_add_return_nan>:
80008428:	3f fa       	mov	r10,-1
8000842a:	3f fb       	mov	r11,-1
8000842c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008430 <__avr32_f64_add_longshift>:
80008430:	f1 b6 04 c0 	satu	r6,0x6
80008434:	f0 0e 17 00 	moveq	lr,r8
80008438:	c0 60       	breq	80008444 <__avr32_f64_add_longshift+0x14>
8000843a:	f2 05 09 4e 	lsl	lr,r9,r5
8000843e:	58 08       	cp.w	r8,0
80008440:	5f 18       	srne	r8
80008442:	10 4e       	or	lr,r8
80008444:	f2 06 0a 48 	lsr	r8,r9,r6
80008448:	30 09       	mov	r9,0
8000844a:	cc 8b       	rjmp	800083da <__avr32_f64_add_shift_done>

8000844c <__avr32_f64_add_res_of>:
8000844c:	fd ee 10 1e 	or	lr,lr,lr<<0x1
80008450:	a1 9b       	lsr	r11,0x1
80008452:	5d 0a       	ror	r10
80008454:	5d 0e       	ror	lr
80008456:	2f f7       	sub	r7,-1
80008458:	e0 47 07 ff 	cp.w	r7,2047
8000845c:	f9 ba 00 00 	moveq	r10,0
80008460:	f9 bb 00 00 	moveq	r11,0
80008464:	f9 be 00 00 	moveq	lr,0
80008468:	cb fb       	rjmp	800083e6 <__avr32_f64_add_res_of_done>

8000846a <__avr32_f64_add_op2_subnormal>:
8000846a:	30 16       	mov	r6,1
8000846c:	58 07       	cp.w	r7,0
8000846e:	ca 01       	brne	800083ae <__avr32_f64_add+0x3e>
80008470:	b5 cb       	cbr	r11,0x14
80008472:	10 0a       	add	r10,r8
80008474:	f6 09 00 4b 	adc	r11,r11,r9
80008478:	18 4b       	or	r11,r12
8000847a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000847e:	d7 03       	nop

80008480 <__avr32_f64_to_u32>:
80008480:	58 0b       	cp.w	r11,0
80008482:	5e 6d       	retmi	0

80008484 <__avr32_f64_to_s32>:
80008484:	f6 0c 15 01 	lsl	r12,r11,0x1
80008488:	b5 9c       	lsr	r12,0x15
8000848a:	e0 2c 03 ff 	sub	r12,1023
8000848e:	5e 3d       	retlo	0
80008490:	f8 0c 11 1f 	rsub	r12,r12,31
80008494:	16 99       	mov	r9,r11
80008496:	ab 7b       	lsl	r11,0xb
80008498:	bf bb       	sbr	r11,0x1f
8000849a:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
8000849e:	f6 0c 0a 4b 	lsr	r11,r11,r12
800084a2:	a1 79       	lsl	r9,0x1
800084a4:	5e 2b       	reths	r11
800084a6:	5c 3b       	neg	r11
800084a8:	5e fb       	retal	r11

800084aa <__avr32_u32_to_f64>:
800084aa:	f8 cb 00 00 	sub	r11,r12,0
800084ae:	30 0c       	mov	r12,0
800084b0:	c0 38       	rjmp	800084b6 <__avr32_s32_to_f64+0x4>

800084b2 <__avr32_s32_to_f64>:
800084b2:	18 9b       	mov	r11,r12
800084b4:	5c 4b       	abs	r11
800084b6:	30 0a       	mov	r10,0
800084b8:	5e 0b       	reteq	r11
800084ba:	d4 01       	pushm	lr
800084bc:	e0 69 04 1e 	mov	r9,1054
800084c0:	f6 08 12 00 	clz	r8,r11
800084c4:	c1 70       	breq	800084f2 <__avr32_s32_to_f64+0x40>
800084c6:	c0 c3       	brcs	800084de <__avr32_s32_to_f64+0x2c>
800084c8:	f0 0e 11 20 	rsub	lr,r8,32
800084cc:	f6 08 09 4b 	lsl	r11,r11,r8
800084d0:	f4 0e 0a 4e 	lsr	lr,r10,lr
800084d4:	1c 4b       	or	r11,lr
800084d6:	f4 08 09 4a 	lsl	r10,r10,r8
800084da:	10 19       	sub	r9,r8
800084dc:	c0 b8       	rjmp	800084f2 <__avr32_s32_to_f64+0x40>
800084de:	f4 08 12 00 	clz	r8,r10
800084e2:	f9 b8 03 00 	movlo	r8,0
800084e6:	f7 b8 02 e0 	subhs	r8,-32
800084ea:	f4 08 09 4b 	lsl	r11,r10,r8
800084ee:	30 0a       	mov	r10,0
800084f0:	10 19       	sub	r9,r8
800084f2:	58 09       	cp.w	r9,0
800084f4:	e0 89 00 30 	brgt	80008554 <__avr32_s32_to_f64+0xa2>
800084f8:	5c 39       	neg	r9
800084fa:	2f f9       	sub	r9,-1
800084fc:	e0 49 00 36 	cp.w	r9,54
80008500:	c0 43       	brcs	80008508 <__avr32_s32_to_f64+0x56>
80008502:	30 0b       	mov	r11,0
80008504:	30 0a       	mov	r10,0
80008506:	c2 68       	rjmp	80008552 <__avr32_s32_to_f64+0xa0>
80008508:	2f 69       	sub	r9,-10
8000850a:	f2 08 11 20 	rsub	r8,r9,32
8000850e:	e0 49 00 20 	cp.w	r9,32
80008512:	c0 b2       	brcc	80008528 <__avr32_s32_to_f64+0x76>
80008514:	f4 08 09 4e 	lsl	lr,r10,r8
80008518:	f6 08 09 48 	lsl	r8,r11,r8
8000851c:	f4 09 0a 4a 	lsr	r10,r10,r9
80008520:	f6 09 0a 4b 	lsr	r11,r11,r9
80008524:	10 4b       	or	r11,r8
80008526:	c0 88       	rjmp	80008536 <__avr32_s32_to_f64+0x84>
80008528:	f6 08 09 4e 	lsl	lr,r11,r8
8000852c:	14 4e       	or	lr,r10
8000852e:	16 9a       	mov	r10,r11
80008530:	30 0b       	mov	r11,0
80008532:	f4 09 0a 4a 	lsr	r10,r10,r9
80008536:	ed ba 00 00 	bld	r10,0x0
8000853a:	c0 92       	brcc	8000854c <__avr32_s32_to_f64+0x9a>
8000853c:	1c 7e       	tst	lr,lr
8000853e:	c0 41       	brne	80008546 <__avr32_s32_to_f64+0x94>
80008540:	ed ba 00 01 	bld	r10,0x1
80008544:	c0 42       	brcc	8000854c <__avr32_s32_to_f64+0x9a>
80008546:	2f fa       	sub	r10,-1
80008548:	f7 bb 02 ff 	subhs	r11,-1
8000854c:	5c fc       	rol	r12
8000854e:	5d 0b       	ror	r11
80008550:	5d 0a       	ror	r10
80008552:	d8 02       	popm	pc
80008554:	e0 68 03 ff 	mov	r8,1023
80008558:	ed ba 00 0b 	bld	r10,0xb
8000855c:	f7 b8 00 ff 	subeq	r8,-1
80008560:	10 0a       	add	r10,r8
80008562:	5c 0b       	acr	r11
80008564:	f7 b9 03 fe 	sublo	r9,-2
80008568:	e0 49 07 ff 	cp.w	r9,2047
8000856c:	c0 55       	brlt	80008576 <__avr32_s32_to_f64+0xc4>
8000856e:	30 0a       	mov	r10,0
80008570:	fc 1b ff e0 	movh	r11,0xffe0
80008574:	c0 c8       	rjmp	8000858c <__floatsidf_return_op1>
80008576:	ed bb 00 1f 	bld	r11,0x1f
8000857a:	f7 b9 01 01 	subne	r9,1
8000857e:	ab 9a       	lsr	r10,0xb
80008580:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80008584:	a1 7b       	lsl	r11,0x1
80008586:	ab 9b       	lsr	r11,0xb
80008588:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

8000858c <__floatsidf_return_op1>:
8000858c:	a1 7c       	lsl	r12,0x1
8000858e:	5d 0b       	ror	r11
80008590:	d8 02       	popm	pc

80008592 <__avr32_f64_cmp_eq>:
80008592:	10 3a       	cp.w	r10,r8
80008594:	f2 0b 13 00 	cpc	r11,r9
80008598:	c0 80       	breq	800085a8 <__avr32_f64_cmp_eq+0x16>
8000859a:	a1 7b       	lsl	r11,0x1
8000859c:	a1 79       	lsl	r9,0x1
8000859e:	14 4b       	or	r11,r10
800085a0:	12 4b       	or	r11,r9
800085a2:	10 4b       	or	r11,r8
800085a4:	5e 0f       	reteq	1
800085a6:	5e fd       	retal	0
800085a8:	a1 7b       	lsl	r11,0x1
800085aa:	fc 1c ff e0 	movh	r12,0xffe0
800085ae:	58 0a       	cp.w	r10,0
800085b0:	f8 0b 13 00 	cpc	r11,r12
800085b4:	5e 8f       	retls	1
800085b6:	5e fd       	retal	0

800085b8 <__avr32_f64_cmp_ge>:
800085b8:	1a de       	st.w	--sp,lr
800085ba:	1a d7       	st.w	--sp,r7
800085bc:	a1 7b       	lsl	r11,0x1
800085be:	5f 3c       	srlo	r12
800085c0:	a1 79       	lsl	r9,0x1
800085c2:	5f 37       	srlo	r7
800085c4:	5c fc       	rol	r12
800085c6:	fc 1e ff e0 	movh	lr,0xffe0
800085ca:	58 0a       	cp.w	r10,0
800085cc:	fc 0b 13 00 	cpc	r11,lr
800085d0:	e0 8b 00 1d 	brhi	8000860a <__avr32_f64_cmp_ge+0x52>
800085d4:	58 08       	cp.w	r8,0
800085d6:	fc 09 13 00 	cpc	r9,lr
800085da:	e0 8b 00 18 	brhi	8000860a <__avr32_f64_cmp_ge+0x52>
800085de:	58 0b       	cp.w	r11,0
800085e0:	f5 ba 00 00 	subfeq	r10,0
800085e4:	c1 50       	breq	8000860e <__avr32_f64_cmp_ge+0x56>
800085e6:	1b 07       	ld.w	r7,sp++
800085e8:	1b 0e       	ld.w	lr,sp++
800085ea:	58 3c       	cp.w	r12,3
800085ec:	c0 a0       	breq	80008600 <__avr32_f64_cmp_ge+0x48>
800085ee:	58 1c       	cp.w	r12,1
800085f0:	c0 33       	brcs	800085f6 <__avr32_f64_cmp_ge+0x3e>
800085f2:	5e 0f       	reteq	1
800085f4:	5e 1d       	retne	0
800085f6:	10 3a       	cp.w	r10,r8
800085f8:	f2 0b 13 00 	cpc	r11,r9
800085fc:	5e 2f       	reths	1
800085fe:	5e 3d       	retlo	0
80008600:	14 38       	cp.w	r8,r10
80008602:	f6 09 13 00 	cpc	r9,r11
80008606:	5e 2f       	reths	1
80008608:	5e 3d       	retlo	0
8000860a:	1b 07       	ld.w	r7,sp++
8000860c:	d8 0a       	popm	pc,r12=0
8000860e:	58 17       	cp.w	r7,1
80008610:	5f 0c       	sreq	r12
80008612:	58 09       	cp.w	r9,0
80008614:	f5 b8 00 00 	subfeq	r8,0
80008618:	1b 07       	ld.w	r7,sp++
8000861a:	1b 0e       	ld.w	lr,sp++
8000861c:	5e 0f       	reteq	1
8000861e:	5e fc       	retal	r12

80008620 <__avr32_f64_cmp_lt>:
80008620:	1a de       	st.w	--sp,lr
80008622:	1a d7       	st.w	--sp,r7
80008624:	a1 7b       	lsl	r11,0x1
80008626:	5f 3c       	srlo	r12
80008628:	a1 79       	lsl	r9,0x1
8000862a:	5f 37       	srlo	r7
8000862c:	5c fc       	rol	r12
8000862e:	fc 1e ff e0 	movh	lr,0xffe0
80008632:	58 0a       	cp.w	r10,0
80008634:	fc 0b 13 00 	cpc	r11,lr
80008638:	e0 8b 00 1d 	brhi	80008672 <__avr32_f64_cmp_lt+0x52>
8000863c:	58 08       	cp.w	r8,0
8000863e:	fc 09 13 00 	cpc	r9,lr
80008642:	e0 8b 00 18 	brhi	80008672 <__avr32_f64_cmp_lt+0x52>
80008646:	58 0b       	cp.w	r11,0
80008648:	f5 ba 00 00 	subfeq	r10,0
8000864c:	c1 50       	breq	80008676 <__avr32_f64_cmp_lt+0x56>
8000864e:	1b 07       	ld.w	r7,sp++
80008650:	1b 0e       	ld.w	lr,sp++
80008652:	58 3c       	cp.w	r12,3
80008654:	c0 a0       	breq	80008668 <__avr32_f64_cmp_lt+0x48>
80008656:	58 1c       	cp.w	r12,1
80008658:	c0 33       	brcs	8000865e <__avr32_f64_cmp_lt+0x3e>
8000865a:	5e 0d       	reteq	0
8000865c:	5e 1f       	retne	1
8000865e:	10 3a       	cp.w	r10,r8
80008660:	f2 0b 13 00 	cpc	r11,r9
80008664:	5e 2d       	reths	0
80008666:	5e 3f       	retlo	1
80008668:	14 38       	cp.w	r8,r10
8000866a:	f6 09 13 00 	cpc	r9,r11
8000866e:	5e 2d       	reths	0
80008670:	5e 3f       	retlo	1
80008672:	1b 07       	ld.w	r7,sp++
80008674:	d8 0a       	popm	pc,r12=0
80008676:	58 17       	cp.w	r7,1
80008678:	5f 1c       	srne	r12
8000867a:	58 09       	cp.w	r9,0
8000867c:	f5 b8 00 00 	subfeq	r8,0
80008680:	1b 07       	ld.w	r7,sp++
80008682:	1b 0e       	ld.w	lr,sp++
80008684:	5e 0d       	reteq	0
80008686:	5e fc       	retal	r12

80008688 <__avr32_f64_div>:
80008688:	eb cd 40 ff 	pushm	r0-r7,lr
8000868c:	f7 e9 20 0e 	eor	lr,r11,r9
80008690:	f6 07 16 14 	lsr	r7,r11,0x14
80008694:	a9 7b       	lsl	r11,0x9
80008696:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
8000869a:	a9 7a       	lsl	r10,0x9
8000869c:	bd bb       	sbr	r11,0x1d
8000869e:	e4 1b 3f ff 	andh	r11,0x3fff
800086a2:	ab d7       	cbr	r7,0xb
800086a4:	e0 80 00 cc 	breq	8000883c <__avr32_f64_div_round_subnormal+0x54>
800086a8:	e0 47 07 ff 	cp.w	r7,2047
800086ac:	e0 84 00 b5 	brge	80008816 <__avr32_f64_div_round_subnormal+0x2e>
800086b0:	f2 06 16 14 	lsr	r6,r9,0x14
800086b4:	a9 79       	lsl	r9,0x9
800086b6:	f3 e8 13 79 	or	r9,r9,r8>>0x17
800086ba:	a9 78       	lsl	r8,0x9
800086bc:	bd b9       	sbr	r9,0x1d
800086be:	e4 19 3f ff 	andh	r9,0x3fff
800086c2:	ab d6       	cbr	r6,0xb
800086c4:	e0 80 00 e2 	breq	80008888 <__avr32_f64_div_round_subnormal+0xa0>
800086c8:	e0 46 07 ff 	cp.w	r6,2047
800086cc:	e0 84 00 b2 	brge	80008830 <__avr32_f64_div_round_subnormal+0x48>
800086d0:	0c 17       	sub	r7,r6
800086d2:	fe 37 fc 01 	sub	r7,-1023
800086d6:	fc 1c 80 00 	movh	r12,0x8000
800086da:	f8 03 16 01 	lsr	r3,r12,0x1
800086de:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
800086e2:	5c d4       	com	r4
800086e4:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
800086e8:	e6 09 06 44 	mulu.d	r4,r3,r9
800086ec:	f8 05 01 25 	sub	r5,r12,r5<<0x2
800086f0:	e6 05 06 44 	mulu.d	r4,r3,r5
800086f4:	ea 03 15 02 	lsl	r3,r5,0x2
800086f8:	e6 09 06 44 	mulu.d	r4,r3,r9
800086fc:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80008700:	e6 05 06 44 	mulu.d	r4,r3,r5
80008704:	ea 03 15 02 	lsl	r3,r5,0x2
80008708:	e6 09 06 44 	mulu.d	r4,r3,r9
8000870c:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80008710:	e6 05 06 44 	mulu.d	r4,r3,r5
80008714:	ea 03 15 02 	lsl	r3,r5,0x2
80008718:	e6 08 06 40 	mulu.d	r0,r3,r8
8000871c:	e4 09 07 40 	macu.d	r0,r2,r9
80008720:	e6 09 06 44 	mulu.d	r4,r3,r9
80008724:	02 04       	add	r4,r1
80008726:	5c 05       	acr	r5
80008728:	a3 65       	lsl	r5,0x2
8000872a:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
8000872e:	a3 64       	lsl	r4,0x2
80008730:	5c 34       	neg	r4
80008732:	f8 05 01 45 	sbc	r5,r12,r5
80008736:	e6 04 06 40 	mulu.d	r0,r3,r4
8000873a:	e4 05 07 40 	macu.d	r0,r2,r5
8000873e:	e6 05 06 44 	mulu.d	r4,r3,r5
80008742:	02 04       	add	r4,r1
80008744:	5c 05       	acr	r5
80008746:	ea 03 15 02 	lsl	r3,r5,0x2
8000874a:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
8000874e:	e8 02 15 02 	lsl	r2,r4,0x2
80008752:	e6 08 06 40 	mulu.d	r0,r3,r8
80008756:	e4 09 07 40 	macu.d	r0,r2,r9
8000875a:	e6 09 06 44 	mulu.d	r4,r3,r9
8000875e:	02 04       	add	r4,r1
80008760:	5c 05       	acr	r5
80008762:	a3 65       	lsl	r5,0x2
80008764:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
80008768:	a3 64       	lsl	r4,0x2
8000876a:	5c 34       	neg	r4
8000876c:	f8 05 01 45 	sbc	r5,r12,r5
80008770:	e6 04 06 40 	mulu.d	r0,r3,r4
80008774:	e4 05 07 40 	macu.d	r0,r2,r5
80008778:	e6 05 06 44 	mulu.d	r4,r3,r5
8000877c:	02 04       	add	r4,r1
8000877e:	5c 05       	acr	r5
80008780:	ea 03 15 02 	lsl	r3,r5,0x2
80008784:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
80008788:	e8 02 15 02 	lsl	r2,r4,0x2
8000878c:	e6 0a 06 40 	mulu.d	r0,r3,r10
80008790:	e4 0b 07 40 	macu.d	r0,r2,r11
80008794:	e6 0b 06 42 	mulu.d	r2,r3,r11
80008798:	02 02       	add	r2,r1
8000879a:	5c 03       	acr	r3
8000879c:	ed b3 00 1c 	bld	r3,0x1c
800087a0:	c0 90       	breq	800087b2 <__avr32_f64_div+0x12a>
800087a2:	a1 72       	lsl	r2,0x1
800087a4:	5c f3       	rol	r3
800087a6:	20 17       	sub	r7,1
800087a8:	a3 9a       	lsr	r10,0x3
800087aa:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
800087ae:	a3 9b       	lsr	r11,0x3
800087b0:	c0 58       	rjmp	800087ba <__avr32_f64_div+0x132>
800087b2:	a5 8a       	lsr	r10,0x4
800087b4:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
800087b8:	a5 8b       	lsr	r11,0x4
800087ba:	58 07       	cp.w	r7,0
800087bc:	e0 8a 00 8b 	brle	800088d2 <__avr32_f64_div_res_subnormal>
800087c0:	e0 12 ff 00 	andl	r2,0xff00
800087c4:	e8 12 00 80 	orl	r2,0x80
800087c8:	e6 08 06 40 	mulu.d	r0,r3,r8
800087cc:	e4 09 07 40 	macu.d	r0,r2,r9
800087d0:	e4 08 06 44 	mulu.d	r4,r2,r8
800087d4:	e6 09 06 48 	mulu.d	r8,r3,r9
800087d8:	00 05       	add	r5,r0
800087da:	f0 01 00 48 	adc	r8,r8,r1
800087de:	5c 09       	acr	r9
800087e0:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
800087e4:	58 04       	cp.w	r4,0
800087e6:	5c 25       	cpc	r5

800087e8 <__avr32_f64_div_round_subnormal>:
800087e8:	f4 08 13 00 	cpc	r8,r10
800087ec:	f6 09 13 00 	cpc	r9,r11
800087f0:	5f 36       	srlo	r6
800087f2:	f8 06 17 00 	moveq	r6,r12
800087f6:	e4 0a 16 08 	lsr	r10,r2,0x8
800087fa:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
800087fe:	e6 0b 16 08 	lsr	r11,r3,0x8
80008802:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80008806:	ed be 00 1f 	bld	lr,0x1f
8000880a:	ef bb 00 1f 	bst	r11,0x1f
8000880e:	0c 0a       	add	r10,r6
80008810:	5c 0b       	acr	r11
80008812:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80008816:	e4 1b 00 0f 	andh	r11,0xf
8000881a:	14 4b       	or	r11,r10
8000881c:	e0 81 00 a7 	brne	8000896a <__avr32_f64_div_res_subnormal+0x98>
80008820:	f2 06 16 14 	lsr	r6,r9,0x14
80008824:	ab d6       	cbr	r6,0xb
80008826:	e0 46 07 ff 	cp.w	r6,2047
8000882a:	e0 81 00 a4 	brne	80008972 <__avr32_f64_div_res_subnormal+0xa0>
8000882e:	c9 e8       	rjmp	8000896a <__avr32_f64_div_res_subnormal+0x98>
80008830:	e4 19 00 0f 	andh	r9,0xf
80008834:	10 49       	or	r9,r8
80008836:	e0 81 00 9a 	brne	8000896a <__avr32_f64_div_res_subnormal+0x98>
8000883a:	c9 28       	rjmp	8000895e <__avr32_f64_div_res_subnormal+0x8c>
8000883c:	a3 7b       	lsl	r11,0x3
8000883e:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
80008842:	a3 7a       	lsl	r10,0x3
80008844:	f5 eb 10 04 	or	r4,r10,r11
80008848:	e0 80 00 a0 	breq	80008988 <__avr32_f64_div_op1_zero>
8000884c:	f6 04 12 00 	clz	r4,r11
80008850:	c1 70       	breq	8000887e <__avr32_f64_div_round_subnormal+0x96>
80008852:	c0 c3       	brcs	8000886a <__avr32_f64_div_round_subnormal+0x82>
80008854:	e8 05 11 20 	rsub	r5,r4,32
80008858:	f6 04 09 4b 	lsl	r11,r11,r4
8000885c:	f4 05 0a 45 	lsr	r5,r10,r5
80008860:	0a 4b       	or	r11,r5
80008862:	f4 04 09 4a 	lsl	r10,r10,r4
80008866:	08 17       	sub	r7,r4
80008868:	c0 b8       	rjmp	8000887e <__avr32_f64_div_round_subnormal+0x96>
8000886a:	f4 04 12 00 	clz	r4,r10
8000886e:	f9 b4 03 00 	movlo	r4,0
80008872:	f7 b4 02 e0 	subhs	r4,-32
80008876:	f4 04 09 4b 	lsl	r11,r10,r4
8000887a:	30 0a       	mov	r10,0
8000887c:	08 17       	sub	r7,r4
8000887e:	a3 8a       	lsr	r10,0x2
80008880:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
80008884:	a3 8b       	lsr	r11,0x2
80008886:	c1 1b       	rjmp	800086a8 <__avr32_f64_div+0x20>
80008888:	a3 79       	lsl	r9,0x3
8000888a:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
8000888e:	a3 78       	lsl	r8,0x3
80008890:	f3 e8 10 04 	or	r4,r9,r8
80008894:	c6 f0       	breq	80008972 <__avr32_f64_div_res_subnormal+0xa0>
80008896:	f2 04 12 00 	clz	r4,r9
8000889a:	c1 70       	breq	800088c8 <__avr32_f64_div_round_subnormal+0xe0>
8000889c:	c0 c3       	brcs	800088b4 <__avr32_f64_div_round_subnormal+0xcc>
8000889e:	e8 05 11 20 	rsub	r5,r4,32
800088a2:	f2 04 09 49 	lsl	r9,r9,r4
800088a6:	f0 05 0a 45 	lsr	r5,r8,r5
800088aa:	0a 49       	or	r9,r5
800088ac:	f0 04 09 48 	lsl	r8,r8,r4
800088b0:	08 16       	sub	r6,r4
800088b2:	c0 b8       	rjmp	800088c8 <__avr32_f64_div_round_subnormal+0xe0>
800088b4:	f0 04 12 00 	clz	r4,r8
800088b8:	f9 b4 03 00 	movlo	r4,0
800088bc:	f7 b4 02 e0 	subhs	r4,-32
800088c0:	f0 04 09 49 	lsl	r9,r8,r4
800088c4:	30 08       	mov	r8,0
800088c6:	08 16       	sub	r6,r4
800088c8:	a3 88       	lsr	r8,0x2
800088ca:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
800088ce:	a3 89       	lsr	r9,0x2
800088d0:	cf ca       	rjmp	800086c8 <__avr32_f64_div+0x40>

800088d2 <__avr32_f64_div_res_subnormal>:
800088d2:	5c 37       	neg	r7
800088d4:	2f f7       	sub	r7,-1
800088d6:	f1 b7 04 c0 	satu	r7,0x6
800088da:	e0 47 00 20 	cp.w	r7,32
800088de:	c1 54       	brge	80008908 <__avr32_f64_div_res_subnormal+0x36>
800088e0:	ee 06 11 20 	rsub	r6,r7,32
800088e4:	e4 07 0a 42 	lsr	r2,r2,r7
800088e8:	e6 06 09 4c 	lsl	r12,r3,r6
800088ec:	18 42       	or	r2,r12
800088ee:	e6 07 0a 43 	lsr	r3,r3,r7
800088f2:	f4 06 09 41 	lsl	r1,r10,r6
800088f6:	f4 07 0a 4a 	lsr	r10,r10,r7
800088fa:	f6 06 09 4c 	lsl	r12,r11,r6
800088fe:	18 4a       	or	r10,r12
80008900:	f6 07 0a 4b 	lsr	r11,r11,r7
80008904:	30 00       	mov	r0,0
80008906:	c1 58       	rjmp	80008930 <__avr32_f64_div_res_subnormal+0x5e>
80008908:	ee 06 11 20 	rsub	r6,r7,32
8000890c:	f9 b0 00 00 	moveq	r0,0
80008910:	f9 bc 00 00 	moveq	r12,0
80008914:	c0 50       	breq	8000891e <__avr32_f64_div_res_subnormal+0x4c>
80008916:	f4 06 09 40 	lsl	r0,r10,r6
8000891a:	f6 06 09 4c 	lsl	r12,r11,r6
8000891e:	e6 07 0a 42 	lsr	r2,r3,r7
80008922:	30 03       	mov	r3,0
80008924:	f4 07 0a 41 	lsr	r1,r10,r7
80008928:	18 41       	or	r1,r12
8000892a:	f6 07 0a 4a 	lsr	r10,r11,r7
8000892e:	30 0b       	mov	r11,0
80008930:	e0 12 ff 00 	andl	r2,0xff00
80008934:	e8 12 00 80 	orl	r2,0x80
80008938:	e6 08 06 46 	mulu.d	r6,r3,r8
8000893c:	e4 09 07 46 	macu.d	r6,r2,r9
80008940:	e4 08 06 44 	mulu.d	r4,r2,r8
80008944:	e6 09 06 48 	mulu.d	r8,r3,r9
80008948:	0c 05       	add	r5,r6
8000894a:	f0 07 00 48 	adc	r8,r8,r7
8000894e:	5c 09       	acr	r9
80008950:	30 07       	mov	r7,0
80008952:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80008956:	00 34       	cp.w	r4,r0
80008958:	e2 05 13 00 	cpc	r5,r1
8000895c:	c4 6b       	rjmp	800087e8 <__avr32_f64_div_round_subnormal>
8000895e:	1c 9b       	mov	r11,lr
80008960:	e6 1b 80 00 	andh	r11,0x8000,COH
80008964:	30 0a       	mov	r10,0
80008966:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000896a:	3f fb       	mov	r11,-1
8000896c:	30 0a       	mov	r10,0
8000896e:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80008972:	f5 eb 10 04 	or	r4,r10,r11
80008976:	c0 90       	breq	80008988 <__avr32_f64_div_op1_zero>
80008978:	1c 9b       	mov	r11,lr
8000897a:	e6 1b 80 00 	andh	r11,0x8000,COH
8000897e:	ea 1b 7f f0 	orh	r11,0x7ff0
80008982:	30 0a       	mov	r10,0
80008984:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

80008988 <__avr32_f64_div_op1_zero>:
80008988:	f1 e9 10 15 	or	r5,r8,r9<<0x1
8000898c:	ce f0       	breq	8000896a <__avr32_f64_div_res_subnormal+0x98>
8000898e:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
80008992:	e0 44 07 ff 	cp.w	r4,2047
80008996:	ce 41       	brne	8000895e <__avr32_f64_div_res_subnormal+0x8c>
80008998:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
8000899c:	ce 10       	breq	8000895e <__avr32_f64_div_res_subnormal+0x8c>
8000899e:	ce 6b       	rjmp	8000896a <__avr32_f64_div_res_subnormal+0x98>

800089a0 <__avr32_udiv64>:
800089a0:	d4 31       	pushm	r0-r7,lr
800089a2:	1a 97       	mov	r7,sp
800089a4:	20 3d       	sub	sp,12
800089a6:	10 9c       	mov	r12,r8
800089a8:	12 9e       	mov	lr,r9
800089aa:	14 93       	mov	r3,r10
800089ac:	58 09       	cp.w	r9,0
800089ae:	e0 81 00 bd 	brne	80008b28 <__avr32_udiv64+0x188>
800089b2:	16 38       	cp.w	r8,r11
800089b4:	e0 88 00 40 	brls	80008a34 <__avr32_udiv64+0x94>
800089b8:	f0 08 12 00 	clz	r8,r8
800089bc:	c0 d0       	breq	800089d6 <__avr32_udiv64+0x36>
800089be:	f6 08 09 4b 	lsl	r11,r11,r8
800089c2:	f0 09 11 20 	rsub	r9,r8,32
800089c6:	f8 08 09 4c 	lsl	r12,r12,r8
800089ca:	f4 09 0a 49 	lsr	r9,r10,r9
800089ce:	f4 08 09 43 	lsl	r3,r10,r8
800089d2:	f3 eb 10 0b 	or	r11,r9,r11
800089d6:	f8 0e 16 10 	lsr	lr,r12,0x10
800089da:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
800089de:	f6 0e 0d 00 	divu	r0,r11,lr
800089e2:	e6 0b 16 10 	lsr	r11,r3,0x10
800089e6:	00 99       	mov	r9,r0
800089e8:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800089ec:	e0 0a 02 48 	mul	r8,r0,r10
800089f0:	10 3b       	cp.w	r11,r8
800089f2:	c0 a2       	brcc	80008a06 <__avr32_udiv64+0x66>
800089f4:	20 19       	sub	r9,1
800089f6:	18 0b       	add	r11,r12
800089f8:	18 3b       	cp.w	r11,r12
800089fa:	c0 63       	brcs	80008a06 <__avr32_udiv64+0x66>
800089fc:	10 3b       	cp.w	r11,r8
800089fe:	f7 b9 03 01 	sublo	r9,1
80008a02:	f7 dc e3 0b 	addcs	r11,r11,r12
80008a06:	f6 08 01 01 	sub	r1,r11,r8
80008a0a:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80008a0e:	e2 0e 0d 00 	divu	r0,r1,lr
80008a12:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80008a16:	00 98       	mov	r8,r0
80008a18:	e0 0a 02 4a 	mul	r10,r0,r10
80008a1c:	14 33       	cp.w	r3,r10
80008a1e:	c0 82       	brcc	80008a2e <__avr32_udiv64+0x8e>
80008a20:	20 18       	sub	r8,1
80008a22:	18 03       	add	r3,r12
80008a24:	18 33       	cp.w	r3,r12
80008a26:	c0 43       	brcs	80008a2e <__avr32_udiv64+0x8e>
80008a28:	14 33       	cp.w	r3,r10
80008a2a:	f7 b8 03 01 	sublo	r8,1
80008a2e:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80008a32:	cd f8       	rjmp	80008bf0 <__avr32_udiv64+0x250>
80008a34:	58 08       	cp.w	r8,0
80008a36:	c0 51       	brne	80008a40 <__avr32_udiv64+0xa0>
80008a38:	30 19       	mov	r9,1
80008a3a:	f2 08 0d 08 	divu	r8,r9,r8
80008a3e:	10 9c       	mov	r12,r8
80008a40:	f8 06 12 00 	clz	r6,r12
80008a44:	c0 41       	brne	80008a4c <__avr32_udiv64+0xac>
80008a46:	18 1b       	sub	r11,r12
80008a48:	30 19       	mov	r9,1
80008a4a:	c4 08       	rjmp	80008aca <__avr32_udiv64+0x12a>
80008a4c:	ec 01 11 20 	rsub	r1,r6,32
80008a50:	f4 01 0a 49 	lsr	r9,r10,r1
80008a54:	f8 06 09 4c 	lsl	r12,r12,r6
80008a58:	f6 06 09 48 	lsl	r8,r11,r6
80008a5c:	f6 01 0a 41 	lsr	r1,r11,r1
80008a60:	f3 e8 10 08 	or	r8,r9,r8
80008a64:	f8 03 16 10 	lsr	r3,r12,0x10
80008a68:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80008a6c:	e2 03 0d 00 	divu	r0,r1,r3
80008a70:	f0 0b 16 10 	lsr	r11,r8,0x10
80008a74:	00 9e       	mov	lr,r0
80008a76:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80008a7a:	e0 05 02 49 	mul	r9,r0,r5
80008a7e:	12 3b       	cp.w	r11,r9
80008a80:	c0 a2       	brcc	80008a94 <__avr32_udiv64+0xf4>
80008a82:	20 1e       	sub	lr,1
80008a84:	18 0b       	add	r11,r12
80008a86:	18 3b       	cp.w	r11,r12
80008a88:	c0 63       	brcs	80008a94 <__avr32_udiv64+0xf4>
80008a8a:	12 3b       	cp.w	r11,r9
80008a8c:	f7 be 03 01 	sublo	lr,1
80008a90:	f7 dc e3 0b 	addcs	r11,r11,r12
80008a94:	12 1b       	sub	r11,r9
80008a96:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80008a9a:	f6 03 0d 02 	divu	r2,r11,r3
80008a9e:	f1 e3 11 08 	or	r8,r8,r3<<0x10
80008aa2:	04 99       	mov	r9,r2
80008aa4:	e4 05 02 4b 	mul	r11,r2,r5
80008aa8:	16 38       	cp.w	r8,r11
80008aaa:	c0 a2       	brcc	80008abe <__avr32_udiv64+0x11e>
80008aac:	20 19       	sub	r9,1
80008aae:	18 08       	add	r8,r12
80008ab0:	18 38       	cp.w	r8,r12
80008ab2:	c0 63       	brcs	80008abe <__avr32_udiv64+0x11e>
80008ab4:	16 38       	cp.w	r8,r11
80008ab6:	f7 b9 03 01 	sublo	r9,1
80008aba:	f1 dc e3 08 	addcs	r8,r8,r12
80008abe:	f4 06 09 43 	lsl	r3,r10,r6
80008ac2:	f0 0b 01 0b 	sub	r11,r8,r11
80008ac6:	f3 ee 11 09 	or	r9,r9,lr<<0x10
80008aca:	f8 06 16 10 	lsr	r6,r12,0x10
80008ace:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
80008ad2:	f6 06 0d 00 	divu	r0,r11,r6
80008ad6:	e6 0b 16 10 	lsr	r11,r3,0x10
80008ada:	00 9a       	mov	r10,r0
80008adc:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80008ae0:	e0 0e 02 48 	mul	r8,r0,lr
80008ae4:	10 3b       	cp.w	r11,r8
80008ae6:	c0 a2       	brcc	80008afa <__avr32_udiv64+0x15a>
80008ae8:	20 1a       	sub	r10,1
80008aea:	18 0b       	add	r11,r12
80008aec:	18 3b       	cp.w	r11,r12
80008aee:	c0 63       	brcs	80008afa <__avr32_udiv64+0x15a>
80008af0:	10 3b       	cp.w	r11,r8
80008af2:	f7 ba 03 01 	sublo	r10,1
80008af6:	f7 dc e3 0b 	addcs	r11,r11,r12
80008afa:	f6 08 01 01 	sub	r1,r11,r8
80008afe:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80008b02:	e2 06 0d 00 	divu	r0,r1,r6
80008b06:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80008b0a:	00 98       	mov	r8,r0
80008b0c:	e0 0e 02 4b 	mul	r11,r0,lr
80008b10:	16 33       	cp.w	r3,r11
80008b12:	c0 82       	brcc	80008b22 <__avr32_udiv64+0x182>
80008b14:	20 18       	sub	r8,1
80008b16:	18 03       	add	r3,r12
80008b18:	18 33       	cp.w	r3,r12
80008b1a:	c0 43       	brcs	80008b22 <__avr32_udiv64+0x182>
80008b1c:	16 33       	cp.w	r3,r11
80008b1e:	f7 b8 03 01 	sublo	r8,1
80008b22:	f1 ea 11 08 	or	r8,r8,r10<<0x10
80008b26:	c6 98       	rjmp	80008bf8 <__avr32_udiv64+0x258>
80008b28:	16 39       	cp.w	r9,r11
80008b2a:	e0 8b 00 65 	brhi	80008bf4 <__avr32_udiv64+0x254>
80008b2e:	f2 09 12 00 	clz	r9,r9
80008b32:	c0 b1       	brne	80008b48 <__avr32_udiv64+0x1a8>
80008b34:	10 3a       	cp.w	r10,r8
80008b36:	5f 2a       	srhs	r10
80008b38:	1c 3b       	cp.w	r11,lr
80008b3a:	5f b8       	srhi	r8
80008b3c:	10 4a       	or	r10,r8
80008b3e:	f2 0a 18 00 	cp.b	r10,r9
80008b42:	c5 90       	breq	80008bf4 <__avr32_udiv64+0x254>
80008b44:	30 18       	mov	r8,1
80008b46:	c5 98       	rjmp	80008bf8 <__avr32_udiv64+0x258>
80008b48:	f0 09 09 46 	lsl	r6,r8,r9
80008b4c:	f2 03 11 20 	rsub	r3,r9,32
80008b50:	fc 09 09 4e 	lsl	lr,lr,r9
80008b54:	f0 03 0a 48 	lsr	r8,r8,r3
80008b58:	f6 09 09 4c 	lsl	r12,r11,r9
80008b5c:	f4 03 0a 42 	lsr	r2,r10,r3
80008b60:	ef 46 ff f4 	st.w	r7[-12],r6
80008b64:	f6 03 0a 43 	lsr	r3,r11,r3
80008b68:	18 42       	or	r2,r12
80008b6a:	f1 ee 10 0c 	or	r12,r8,lr
80008b6e:	f8 01 16 10 	lsr	r1,r12,0x10
80008b72:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80008b76:	e6 01 0d 04 	divu	r4,r3,r1
80008b7a:	e4 03 16 10 	lsr	r3,r2,0x10
80008b7e:	08 9e       	mov	lr,r4
80008b80:	e7 e5 11 03 	or	r3,r3,r5<<0x10
80008b84:	e8 06 02 48 	mul	r8,r4,r6
80008b88:	10 33       	cp.w	r3,r8
80008b8a:	c0 a2       	brcc	80008b9e <__avr32_udiv64+0x1fe>
80008b8c:	20 1e       	sub	lr,1
80008b8e:	18 03       	add	r3,r12
80008b90:	18 33       	cp.w	r3,r12
80008b92:	c0 63       	brcs	80008b9e <__avr32_udiv64+0x1fe>
80008b94:	10 33       	cp.w	r3,r8
80008b96:	f7 be 03 01 	sublo	lr,1
80008b9a:	e7 dc e3 03 	addcs	r3,r3,r12
80008b9e:	10 13       	sub	r3,r8
80008ba0:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
80008ba4:	e6 01 0d 00 	divu	r0,r3,r1
80008ba8:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80008bac:	00 98       	mov	r8,r0
80008bae:	e0 06 02 46 	mul	r6,r0,r6
80008bb2:	0c 3b       	cp.w	r11,r6
80008bb4:	c0 a2       	brcc	80008bc8 <__avr32_udiv64+0x228>
80008bb6:	20 18       	sub	r8,1
80008bb8:	18 0b       	add	r11,r12
80008bba:	18 3b       	cp.w	r11,r12
80008bbc:	c0 63       	brcs	80008bc8 <__avr32_udiv64+0x228>
80008bbe:	0c 3b       	cp.w	r11,r6
80008bc0:	f7 dc e3 0b 	addcs	r11,r11,r12
80008bc4:	f7 b8 03 01 	sublo	r8,1
80008bc8:	f1 ee 11 08 	or	r8,r8,lr<<0x10
80008bcc:	ee f4 ff f4 	ld.w	r4,r7[-12]
80008bd0:	0c 1b       	sub	r11,r6
80008bd2:	f0 04 06 42 	mulu.d	r2,r8,r4
80008bd6:	06 95       	mov	r5,r3
80008bd8:	16 35       	cp.w	r5,r11
80008bda:	e0 8b 00 0a 	brhi	80008bee <__avr32_udiv64+0x24e>
80008bde:	5f 0b       	sreq	r11
80008be0:	f4 09 09 49 	lsl	r9,r10,r9
80008be4:	12 32       	cp.w	r2,r9
80008be6:	5f b9       	srhi	r9
80008be8:	f7 e9 00 09 	and	r9,r11,r9
80008bec:	c0 60       	breq	80008bf8 <__avr32_udiv64+0x258>
80008bee:	20 18       	sub	r8,1
80008bf0:	30 09       	mov	r9,0
80008bf2:	c0 38       	rjmp	80008bf8 <__avr32_udiv64+0x258>
80008bf4:	30 09       	mov	r9,0
80008bf6:	12 98       	mov	r8,r9
80008bf8:	10 9a       	mov	r10,r8
80008bfa:	12 93       	mov	r3,r9
80008bfc:	10 92       	mov	r2,r8
80008bfe:	12 9b       	mov	r11,r9
80008c00:	2f dd       	sub	sp,-12
80008c02:	d8 32       	popm	r0-r7,pc

80008c04 <__avr32_umod64>:
80008c04:	d4 31       	pushm	r0-r7,lr
80008c06:	1a 97       	mov	r7,sp
80008c08:	20 3d       	sub	sp,12
80008c0a:	10 9c       	mov	r12,r8
80008c0c:	12 95       	mov	r5,r9
80008c0e:	14 9e       	mov	lr,r10
80008c10:	16 91       	mov	r1,r11
80008c12:	16 96       	mov	r6,r11
80008c14:	58 09       	cp.w	r9,0
80008c16:	e0 81 00 81 	brne	80008d18 <__avr32_umod64+0x114>
80008c1a:	16 38       	cp.w	r8,r11
80008c1c:	e0 88 00 12 	brls	80008c40 <__avr32_umod64+0x3c>
80008c20:	f0 08 12 00 	clz	r8,r8
80008c24:	c4 e0       	breq	80008cc0 <__avr32_umod64+0xbc>
80008c26:	f6 08 09 46 	lsl	r6,r11,r8
80008c2a:	f8 08 09 4c 	lsl	r12,r12,r8
80008c2e:	f0 0b 11 20 	rsub	r11,r8,32
80008c32:	f4 08 09 4e 	lsl	lr,r10,r8
80008c36:	f4 0b 0a 4b 	lsr	r11,r10,r11
80008c3a:	f7 e6 10 06 	or	r6,r11,r6
80008c3e:	c4 18       	rjmp	80008cc0 <__avr32_umod64+0xbc>
80008c40:	58 08       	cp.w	r8,0
80008c42:	c0 51       	brne	80008c4c <__avr32_umod64+0x48>
80008c44:	30 19       	mov	r9,1
80008c46:	f2 08 0d 08 	divu	r8,r9,r8
80008c4a:	10 9c       	mov	r12,r8
80008c4c:	f8 08 12 00 	clz	r8,r12
80008c50:	c0 31       	brne	80008c56 <__avr32_umod64+0x52>
80008c52:	18 16       	sub	r6,r12
80008c54:	c3 68       	rjmp	80008cc0 <__avr32_umod64+0xbc>
80008c56:	f0 03 11 20 	rsub	r3,r8,32
80008c5a:	f4 03 0a 4b 	lsr	r11,r10,r3
80008c5e:	f8 08 09 4c 	lsl	r12,r12,r8
80008c62:	ec 08 09 49 	lsl	r9,r6,r8
80008c66:	ec 03 0a 43 	lsr	r3,r6,r3
80008c6a:	f7 e9 10 09 	or	r9,r11,r9
80008c6e:	f8 05 16 10 	lsr	r5,r12,0x10
80008c72:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80008c76:	e6 05 0d 02 	divu	r2,r3,r5
80008c7a:	f2 0e 16 10 	lsr	lr,r9,0x10
80008c7e:	ec 02 02 4b 	mul	r11,r6,r2
80008c82:	fd e3 11 0e 	or	lr,lr,r3<<0x10
80008c86:	16 3e       	cp.w	lr,r11
80008c88:	c0 72       	brcc	80008c96 <__avr32_umod64+0x92>
80008c8a:	18 0e       	add	lr,r12
80008c8c:	18 3e       	cp.w	lr,r12
80008c8e:	c0 43       	brcs	80008c96 <__avr32_umod64+0x92>
80008c90:	16 3e       	cp.w	lr,r11
80008c92:	fd dc e3 0e 	addcs	lr,lr,r12
80008c96:	fc 0b 01 03 	sub	r3,lr,r11
80008c9a:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
80008c9e:	e6 05 0d 02 	divu	r2,r3,r5
80008ca2:	f3 e3 11 09 	or	r9,r9,r3<<0x10
80008ca6:	a5 36       	mul	r6,r2
80008ca8:	0c 39       	cp.w	r9,r6
80008caa:	c0 72       	brcc	80008cb8 <__avr32_umod64+0xb4>
80008cac:	18 09       	add	r9,r12
80008cae:	18 39       	cp.w	r9,r12
80008cb0:	c0 43       	brcs	80008cb8 <__avr32_umod64+0xb4>
80008cb2:	0c 39       	cp.w	r9,r6
80008cb4:	f3 dc e3 09 	addcs	r9,r9,r12
80008cb8:	f2 06 01 06 	sub	r6,r9,r6
80008cbc:	f4 08 09 4e 	lsl	lr,r10,r8
80008cc0:	f8 0a 16 10 	lsr	r10,r12,0x10
80008cc4:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80008cc8:	ec 0a 0d 02 	divu	r2,r6,r10
80008ccc:	fc 09 16 10 	lsr	r9,lr,0x10
80008cd0:	ea 02 02 4b 	mul	r11,r5,r2
80008cd4:	f3 e3 11 09 	or	r9,r9,r3<<0x10
80008cd8:	16 39       	cp.w	r9,r11
80008cda:	c0 72       	brcc	80008ce8 <__avr32_umod64+0xe4>
80008cdc:	18 09       	add	r9,r12
80008cde:	18 39       	cp.w	r9,r12
80008ce0:	c0 43       	brcs	80008ce8 <__avr32_umod64+0xe4>
80008ce2:	16 39       	cp.w	r9,r11
80008ce4:	f3 dc e3 09 	addcs	r9,r9,r12
80008ce8:	f2 0b 01 0b 	sub	r11,r9,r11
80008cec:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80008cf0:	f6 0a 0d 0a 	divu	r10,r11,r10
80008cf4:	fd eb 11 0e 	or	lr,lr,r11<<0x10
80008cf8:	ea 0a 02 4a 	mul	r10,r5,r10
80008cfc:	14 3e       	cp.w	lr,r10
80008cfe:	c0 72       	brcc	80008d0c <__avr32_umod64+0x108>
80008d00:	18 0e       	add	lr,r12
80008d02:	18 3e       	cp.w	lr,r12
80008d04:	c0 43       	brcs	80008d0c <__avr32_umod64+0x108>
80008d06:	14 3e       	cp.w	lr,r10
80008d08:	fd dc e3 0e 	addcs	lr,lr,r12
80008d0c:	fc 0a 01 0a 	sub	r10,lr,r10
80008d10:	30 0b       	mov	r11,0
80008d12:	f4 08 0a 4a 	lsr	r10,r10,r8
80008d16:	c7 b8       	rjmp	80008e0c <__avr32_umod64+0x208>
80008d18:	16 39       	cp.w	r9,r11
80008d1a:	e0 8b 00 79 	brhi	80008e0c <__avr32_umod64+0x208>
80008d1e:	f2 09 12 00 	clz	r9,r9
80008d22:	c1 21       	brne	80008d46 <__avr32_umod64+0x142>
80008d24:	10 3a       	cp.w	r10,r8
80008d26:	5f 2b       	srhs	r11
80008d28:	0a 31       	cp.w	r1,r5
80008d2a:	5f ba       	srhi	r10
80008d2c:	f7 ea 10 0a 	or	r10,r11,r10
80008d30:	f2 0a 18 00 	cp.b	r10,r9
80008d34:	c0 60       	breq	80008d40 <__avr32_umod64+0x13c>
80008d36:	fc 08 01 0c 	sub	r12,lr,r8
80008d3a:	e2 05 01 46 	sbc	r6,r1,r5
80008d3e:	18 9e       	mov	lr,r12
80008d40:	0c 9b       	mov	r11,r6
80008d42:	1c 9a       	mov	r10,lr
80008d44:	c6 48       	rjmp	80008e0c <__avr32_umod64+0x208>
80008d46:	ea 09 09 4c 	lsl	r12,r5,r9
80008d4a:	f2 06 11 20 	rsub	r6,r9,32
80008d4e:	f6 09 09 4b 	lsl	r11,r11,r9
80008d52:	f0 09 09 42 	lsl	r2,r8,r9
80008d56:	ef 46 ff f4 	st.w	r7[-12],r6
80008d5a:	f0 06 0a 48 	lsr	r8,r8,r6
80008d5e:	18 48       	or	r8,r12
80008d60:	e2 06 0a 4c 	lsr	r12,r1,r6
80008d64:	f4 09 09 43 	lsl	r3,r10,r9
80008d68:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
80008d6c:	f4 06 0a 4a 	lsr	r10,r10,r6
80008d70:	16 4a       	or	r10,r11
80008d72:	f0 0b 16 10 	lsr	r11,r8,0x10
80008d76:	f8 0b 0d 04 	divu	r4,r12,r11
80008d7a:	f4 0c 16 10 	lsr	r12,r10,0x10
80008d7e:	08 91       	mov	r1,r4
80008d80:	f9 e5 11 0c 	or	r12,r12,r5<<0x10
80008d84:	e8 0e 02 46 	mul	r6,r4,lr
80008d88:	0c 3c       	cp.w	r12,r6
80008d8a:	c0 a2       	brcc	80008d9e <__avr32_umod64+0x19a>
80008d8c:	20 11       	sub	r1,1
80008d8e:	10 0c       	add	r12,r8
80008d90:	10 3c       	cp.w	r12,r8
80008d92:	c0 63       	brcs	80008d9e <__avr32_umod64+0x19a>
80008d94:	0c 3c       	cp.w	r12,r6
80008d96:	f7 b1 03 01 	sublo	r1,1
80008d9a:	f9 d8 e3 0c 	addcs	r12,r12,r8
80008d9e:	0c 1c       	sub	r12,r6
80008da0:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
80008da4:	f8 0b 0d 04 	divu	r4,r12,r11
80008da8:	f5 e5 11 0b 	or	r11,r10,r5<<0x10
80008dac:	08 96       	mov	r6,r4
80008dae:	e8 0e 02 4e 	mul	lr,r4,lr
80008db2:	1c 3b       	cp.w	r11,lr
80008db4:	c0 a2       	brcc	80008dc8 <__avr32_umod64+0x1c4>
80008db6:	20 16       	sub	r6,1
80008db8:	10 0b       	add	r11,r8
80008dba:	10 3b       	cp.w	r11,r8
80008dbc:	c0 63       	brcs	80008dc8 <__avr32_umod64+0x1c4>
80008dbe:	1c 3b       	cp.w	r11,lr
80008dc0:	f7 b6 03 01 	sublo	r6,1
80008dc4:	f7 d8 e3 0b 	addcs	r11,r11,r8
80008dc8:	ed e1 11 01 	or	r1,r6,r1<<0x10
80008dcc:	1c 1b       	sub	r11,lr
80008dce:	e2 02 06 40 	mulu.d	r0,r1,r2
80008dd2:	00 9e       	mov	lr,r0
80008dd4:	02 9c       	mov	r12,r1
80008dd6:	16 3c       	cp.w	r12,r11
80008dd8:	e0 8b 00 08 	brhi	80008de8 <__avr32_umod64+0x1e4>
80008ddc:	5f 06       	sreq	r6
80008dde:	06 30       	cp.w	r0,r3
80008de0:	5f ba       	srhi	r10
80008de2:	ed ea 00 0a 	and	r10,r6,r10
80008de6:	c0 60       	breq	80008df2 <__avr32_umod64+0x1ee>
80008de8:	fc 02 01 04 	sub	r4,lr,r2
80008dec:	f8 08 01 4c 	sbc	r12,r12,r8
80008df0:	08 9e       	mov	lr,r4
80008df2:	e6 0e 01 0a 	sub	r10,r3,lr
80008df6:	f6 0c 01 4c 	sbc	r12,r11,r12
80008dfa:	ee f1 ff f4 	ld.w	r1,r7[-12]
80008dfe:	f8 09 0a 4b 	lsr	r11,r12,r9
80008e02:	f4 09 0a 4a 	lsr	r10,r10,r9
80008e06:	f8 01 09 4c 	lsl	r12,r12,r1
80008e0a:	18 4a       	or	r10,r12
80008e0c:	2f dd       	sub	sp,-12
80008e0e:	d8 32       	popm	r0-r7,pc

Disassembly of section .exception:

80009000 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80009000:	c0 08       	rjmp	80009000 <_evba>
	...

80009004 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80009004:	c0 08       	rjmp	80009004 <_handle_TLB_Multiple_Hit>
	...

80009008 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80009008:	c0 08       	rjmp	80009008 <_handle_Bus_Error_Data_Fetch>
	...

8000900c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000900c:	c0 08       	rjmp	8000900c <_handle_Bus_Error_Instruction_Fetch>
	...

80009010 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80009010:	c0 08       	rjmp	80009010 <_handle_NMI>
	...

80009014 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80009014:	c0 08       	rjmp	80009014 <_handle_Instruction_Address>
	...

80009018 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80009018:	c0 08       	rjmp	80009018 <_handle_ITLB_Protection>
	...

8000901c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000901c:	c0 08       	rjmp	8000901c <_handle_Breakpoint>
	...

80009020 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80009020:	c0 08       	rjmp	80009020 <_handle_Illegal_Opcode>
	...

80009024 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80009024:	c0 08       	rjmp	80009024 <_handle_Unimplemented_Instruction>
	...

80009028 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80009028:	c0 08       	rjmp	80009028 <_handle_Privilege_Violation>
	...

8000902c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000902c:	c0 08       	rjmp	8000902c <_handle_Floating_Point>
	...

80009030 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80009030:	c0 08       	rjmp	80009030 <_handle_Coprocessor_Absent>
	...

80009034 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80009034:	c0 08       	rjmp	80009034 <_handle_Data_Address_Read>
	...

80009038 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80009038:	c0 08       	rjmp	80009038 <_handle_Data_Address_Write>
	...

8000903c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000903c:	c0 08       	rjmp	8000903c <_handle_DTLB_Protection_Read>
	...

80009040 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80009040:	c0 08       	rjmp	80009040 <_handle_DTLB_Protection_Write>
	...

80009044 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80009044:	c0 08       	rjmp	80009044 <_handle_DTLB_Modified>
	...

80009050 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80009050:	c0 08       	rjmp	80009050 <_handle_ITLB_Miss>
	...

80009060 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80009060:	c0 08       	rjmp	80009060 <_handle_DTLB_Miss_Read>
	...

80009070 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80009070:	c0 08       	rjmp	80009070 <_handle_DTLB_Miss_Write>
	...

80009100 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80009100:	c0 08       	rjmp	80009100 <_handle_Supervisor_Call>
80009102:	d7 03       	nop

80009104 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80009104:	30 0c       	mov	r12,0
80009106:	fe b0 d0 3b 	rcall	8000317c <_get_interrupt_handler>
8000910a:	58 0c       	cp.w	r12,0
8000910c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80009110:	d6 03       	rete

80009112 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80009112:	30 1c       	mov	r12,1
80009114:	fe b0 d0 34 	rcall	8000317c <_get_interrupt_handler>
80009118:	58 0c       	cp.w	r12,0
8000911a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000911e:	d6 03       	rete

80009120 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80009120:	30 2c       	mov	r12,2
80009122:	fe b0 d0 2d 	rcall	8000317c <_get_interrupt_handler>
80009126:	58 0c       	cp.w	r12,0
80009128:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000912c:	d6 03       	rete

8000912e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000912e:	30 3c       	mov	r12,3
80009130:	fe b0 d0 26 	rcall	8000317c <_get_interrupt_handler>
80009134:	58 0c       	cp.w	r12,0
80009136:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000913a:	d6 03       	rete
8000913c:	d7 03       	nop
8000913e:	d7 03       	nop
80009140:	d7 03       	nop
80009142:	d7 03       	nop
80009144:	d7 03       	nop
80009146:	d7 03       	nop
80009148:	d7 03       	nop
8000914a:	d7 03       	nop
8000914c:	d7 03       	nop
8000914e:	d7 03       	nop
80009150:	d7 03       	nop
80009152:	d7 03       	nop
80009154:	d7 03       	nop
80009156:	d7 03       	nop
80009158:	d7 03       	nop
8000915a:	d7 03       	nop
8000915c:	d7 03       	nop
8000915e:	d7 03       	nop
80009160:	d7 03       	nop
80009162:	d7 03       	nop
80009164:	d7 03       	nop
80009166:	d7 03       	nop
80009168:	d7 03       	nop
8000916a:	d7 03       	nop
8000916c:	d7 03       	nop
8000916e:	d7 03       	nop
80009170:	d7 03       	nop
80009172:	d7 03       	nop
80009174:	d7 03       	nop
80009176:	d7 03       	nop
80009178:	d7 03       	nop
8000917a:	d7 03       	nop
8000917c:	d7 03       	nop
8000917e:	d7 03       	nop
80009180:	d7 03       	nop
80009182:	d7 03       	nop
80009184:	d7 03       	nop
80009186:	d7 03       	nop
80009188:	d7 03       	nop
8000918a:	d7 03       	nop
8000918c:	d7 03       	nop
8000918e:	d7 03       	nop
80009190:	d7 03       	nop
80009192:	d7 03       	nop
80009194:	d7 03       	nop
80009196:	d7 03       	nop
80009198:	d7 03       	nop
8000919a:	d7 03       	nop
8000919c:	d7 03       	nop
8000919e:	d7 03       	nop
800091a0:	d7 03       	nop
800091a2:	d7 03       	nop
800091a4:	d7 03       	nop
800091a6:	d7 03       	nop
800091a8:	d7 03       	nop
800091aa:	d7 03       	nop
800091ac:	d7 03       	nop
800091ae:	d7 03       	nop
800091b0:	d7 03       	nop
800091b2:	d7 03       	nop
800091b4:	d7 03       	nop
800091b6:	d7 03       	nop
800091b8:	d7 03       	nop
800091ba:	d7 03       	nop
800091bc:	d7 03       	nop
800091be:	d7 03       	nop
800091c0:	d7 03       	nop
800091c2:	d7 03       	nop
800091c4:	d7 03       	nop
800091c6:	d7 03       	nop
800091c8:	d7 03       	nop
800091ca:	d7 03       	nop
800091cc:	d7 03       	nop
800091ce:	d7 03       	nop
800091d0:	d7 03       	nop
800091d2:	d7 03       	nop
800091d4:	d7 03       	nop
800091d6:	d7 03       	nop
800091d8:	d7 03       	nop
800091da:	d7 03       	nop
800091dc:	d7 03       	nop
800091de:	d7 03       	nop
800091e0:	d7 03       	nop
800091e2:	d7 03       	nop
800091e4:	d7 03       	nop
800091e6:	d7 03       	nop
800091e8:	d7 03       	nop
800091ea:	d7 03       	nop
800091ec:	d7 03       	nop
800091ee:	d7 03       	nop
800091f0:	d7 03       	nop
800091f2:	d7 03       	nop
800091f4:	d7 03       	nop
800091f6:	d7 03       	nop
800091f8:	d7 03       	nop
800091fa:	d7 03       	nop
800091fc:	d7 03       	nop
800091fe:	d7 03       	nop
